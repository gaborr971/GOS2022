
GOS2022_minimal_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cee4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001714  0800d0b8  0800d0b8  0001d0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7cc  0800e7cc  0002180c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7cc  0800e7cc  0001e7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7d4  0800e7d4  0002180c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7d4  0800e7d4  0001e7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7d8  0800e7d8  0001e7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000180c  20000000  0800e7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008bc8  2000180c  0800ffe8  0002180c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000a3d4  0800ffe8  0002a3d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002180c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002183c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b50  00000000  00000000  0002187f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043a3  00000000  00000000  000363cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  0003a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8f  00000000  00000000  0003b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026279  00000000  00000000  0003c6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2e0  00000000  00000000  00062970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d94a2  00000000  00000000  0007cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058a8  00000000  00000000  001560f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0015b99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000180c 	.word	0x2000180c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d09c 	.word	0x0800d09c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001810 	.word	0x20001810
 800020c:	0800d09c 	.word	0x0800d09c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <gos_platformDriverInit>:
 *
 * This is to initialize the low-level drivers required by the OS, and it is called
 * during the OS startup.
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8000f0a:	2355      	movs	r3, #85	; 0x55
 8000f0c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Low-level initialization.
    if (HAL_Init() != HAL_OK)
 8000f0e:	f001 f85f 	bl	8001fd0 <HAL_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <gos_platformDriverInit+0x18>
    {
        platformDriverInitResult = GOS_ERROR;
 8000f18:	23ae      	movs	r3, #174	; 0xae
 8000f1a:	71fb      	strb	r3, [r7, #7]
    }

    // Driver initialization.
    platformDriverInitResult = driver_init();
 8000f1c:	f000 fac8 	bl	80014b0 <driver_init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]

    // Register kernel drivers.
    platformDriverInitResult &= gos_driverInit(&driverFunctions);
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <gos_platformDriverInit+0x50>)
 8000f26:	f004 f947 	bl	80051b8 <gos_driverInit>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4013      	ands	r3, r2
 8000f32:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b55      	cmp	r3, #85	; 0x55
 8000f38:	d001      	beq.n	8000f3e <gos_platformDriverInit+0x3a>
    {
        platformDriverInitResult = GOS_ERROR;
 8000f3a:	23ae      	movs	r3, #174	; 0xae
 8000f3c:	71fb      	strb	r3, [r7, #7]
    }

    // Systick initialization.
    SysTick->VAL = 0;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <gos_platformDriverInit+0x54>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <gos_platformDriverInit+0x54>)
 8000f46:	2207      	movs	r2, #7
 8000f48:	601a      	str	r2, [r3, #0]

    return platformDriverInitResult;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200002a0 	.word	0x200002a0
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <gos_userApplicationInit>:
 *
 * This is to initialize the user application before the kernel starts the scheduling.
 * This can be used to register user tasks and initialize application modules.
 */
gos_result_t gos_userApplicationInit (void_t)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t appInitResult = GOS_SUCCESS;
 8000f62:	2355      	movs	r3, #85	; 0x55
 8000f64:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Register tasks.
    appInitResult &= gos_kernelTaskRegister(&ledTaskDesc, NULL);
 8000f66:	2100      	movs	r1, #0
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <gos_userApplicationInit+0xb0>)
 8000f6a:	f004 fa5f 	bl	800542c <gos_kernelTaskRegister>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4013      	ands	r3, r2
 8000f76:	71fb      	strb	r3, [r7, #7]
    appInitResult &= gos_kernelTaskRegister(&lifeSignTaskDesc, NULL);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4825      	ldr	r0, [pc, #148]	; (8001010 <gos_userApplicationInit+0xb4>)
 8000f7c:	f004 fa56 	bl	800542c <gos_kernelTaskRegister>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4013      	ands	r3, r2
 8000f88:	71fb      	strb	r3, [r7, #7]
    appInitResult &= gos_kernelTaskRegister(&buttonTaskDesc, NULL);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4821      	ldr	r0, [pc, #132]	; (8001014 <gos_userApplicationInit+0xb8>)
 8000f8e:	f004 fa4d 	bl	800542c <gos_kernelTaskRegister>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	71fb      	strb	r3, [r7, #7]
    appInitResult &= gos_kernelTaskRegister(&highPrioTaskDesc, NULL);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	481e      	ldr	r0, [pc, #120]	; (8001018 <gos_userApplicationInit+0xbc>)
 8000fa0:	f004 fa44 	bl	800542c <gos_kernelTaskRegister>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4013      	ands	r3, r2
 8000fac:	71fb      	strb	r3, [r7, #7]
    appInitResult &= gos_kernelTaskRegister(&mediumPrioTaskDesc, NULL);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	481a      	ldr	r0, [pc, #104]	; (800101c <gos_userApplicationInit+0xc0>)
 8000fb2:	f004 fa3b 	bl	800542c <gos_kernelTaskRegister>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	71fb      	strb	r3, [r7, #7]
    appInitResult &= gos_kernelTaskRegister(&lowPrioTaskDesc, NULL);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4817      	ldr	r0, [pc, #92]	; (8001020 <gos_userApplicationInit+0xc4>)
 8000fc4:	f004 fa32 	bl	800542c <gos_kernelTaskRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]

    // Initialize triggers.
    gos_triggerInit(&lifeSignTrigger);
 8000fd2:	4814      	ldr	r0, [pc, #80]	; (8001024 <gos_userApplicationInit+0xc8>)
 8000fd4:	f008 fff2 	bl	8009fbc <gos_triggerInit>
    gos_triggerInit(&buttonTrigger);
 8000fd8:	4813      	ldr	r0, [pc, #76]	; (8001028 <gos_userApplicationInit+0xcc>)
 8000fda:	f008 ffef 	bl	8009fbc <gos_triggerInit>

    // Test user-level warning.
    gos_errorHandler(GOS_ERROR_LEVEL_USER_WARNING, __func__, __LINE__, "Test user-level warning. Starting OS...");
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <gos_userApplicationInit+0xd0>)
 8000fe0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000fe4:	4912      	ldr	r1, [pc, #72]	; (8001030 <gos_userApplicationInit+0xd4>)
 8000fe6:	203a      	movs	r0, #58	; 0x3a
 8000fe8:	f006 fee6 	bl	8007db8 <gos_errorHandler>

    if (appInitResult != GOS_SUCCESS)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b55      	cmp	r3, #85	; 0x55
 8000ff0:	d001      	beq.n	8000ff6 <gos_userApplicationInit+0x9a>
    {
        appInitResult = GOS_ERROR;
 8000ff2:	23ae      	movs	r3, #174	; 0xae
 8000ff4:	71fb      	strb	r3, [r7, #7]
    }

    (void_t) gos_errorTraceInit("Application initializetion", appInitResult);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <gos_userApplicationInit+0xd8>)
 8000ffc:	f006 ff60 	bl	8007ec0 <gos_errorTraceInit>

    return appInitResult;
 8001000:	79fb      	ldrb	r3, [r7, #7]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000
 8001010:	20000070 	.word	0x20000070
 8001014:	200000e0 	.word	0x200000e0
 8001018:	20000150 	.word	0x20000150
 800101c:	200001c0 	.word	0x200001c0
 8001020:	20000230 	.word	0x20000230
 8001024:	20001828 	.word	0x20001828
 8001028:	20001838 	.word	0x20001838
 800102c:	0800d0b8 	.word	0x0800d0b8
 8001030:	0800e288 	.word	0x0800e288
 8001034:	0800d0e0 	.word	0x0800d0e0

08001038 <APP_LedTask>:
 *
 * Every 1 second, it toggles the user LED and increments the life sign trigger
 * to wake up the life sign task before its timeout.
 */
GOS_STATIC void_t APP_LedTask (void_t)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        (void_t) gpio_driverTogglePin(iodef_get(IO_USER_LED));
 800103c:	2000      	movs	r0, #0
 800103e:	f000 fc07 	bl	8001850 <iodef_get>
 8001042:	4603      	mov	r3, r0
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fb63 	bl	8001710 <gpio_driverTogglePin>
        gos_triggerIncrement(&lifeSignTrigger);
 800104a:	4804      	ldr	r0, [pc, #16]	; (800105c <APP_LedTask+0x24>)
 800104c:	f009 f838 	bl	800a0c0 <gos_triggerIncrement>
        (void_t) gos_kernelTaskSleep(1000);
 8001050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001054:	f004 fb76 	bl	8005744 <gos_kernelTaskSleep>
        (void_t) gpio_driverTogglePin(iodef_get(IO_USER_LED));
 8001058:	e7f0      	b.n	800103c <APP_LedTask+0x4>
 800105a:	bf00      	nop
 800105c:	20001828 	.word	0x20001828

08001060 <APP_LifeSignTask>:
 * Waits for a life sign trigger with timeout. If the trigger is received within
 * timeout, it resets the trigger and prints a message on the trace output.
 * Otherwise, it goes to error state, and resets the CPU.
 */
GOS_STATIC void_t APP_LifeSignTask (void_t)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u32_t lifeSignCounter = 0u;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger with timeout.
        if (gos_triggerWait(&lifeSignTrigger, 1, APP_LIFE_SIGN_TMO_MS) == GOS_SUCCESS)
 800106a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800106e:	2101      	movs	r1, #1
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <APP_LifeSignTask+0x44>)
 8001072:	f008 ffd8 	bl	800a026 <gos_triggerWait>
 8001076:	4603      	mov	r3, r0
 8001078:	2b55      	cmp	r3, #85	; 0x55
 800107a:	d10b      	bne.n	8001094 <APP_LifeSignTask+0x34>
        {
            // If trigger is received within timeout, reset it, and print the
            // life sign counter value on the trace output.
            gos_triggerReset(&lifeSignTrigger);
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <APP_LifeSignTask+0x44>)
 800107e:	f008 ffb2 	bl	8009fe6 <gos_triggerReset>
            (void_t) gos_traceTraceFormatted(GOS_TRUE, "Life sign counter: %u\r\n", lifeSignCounter++);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	461a      	mov	r2, r3
 800108a:	4907      	ldr	r1, [pc, #28]	; (80010a8 <APP_LifeSignTask+0x48>)
 800108c:	2036      	movs	r0, #54	; 0x36
 800108e:	f008 fe37 	bl	8009d00 <gos_traceTraceFormatted>
 8001092:	e7ea      	b.n	800106a <APP_LifeSignTask+0xa>
        }
        else
        {
            // Otherwise go to error and reset.
            gos_errorHandler(GOS_ERROR_LEVEL_USER_FATAL, __func__, __LINE__, "Life sign timeout.");
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <APP_LifeSignTask+0x4c>)
 8001096:	f240 1249 	movw	r2, #329	; 0x149
 800109a:	4905      	ldr	r1, [pc, #20]	; (80010b0 <APP_LifeSignTask+0x50>)
 800109c:	201a      	movs	r0, #26
 800109e:	f006 fe8b 	bl	8007db8 <gos_errorHandler>
        if (gos_triggerWait(&lifeSignTrigger, 1, APP_LIFE_SIGN_TMO_MS) == GOS_SUCCESS)
 80010a2:	e7e2      	b.n	800106a <APP_LifeSignTask+0xa>
 80010a4:	20001828 	.word	0x20001828
 80010a8:	0800d0fc 	.word	0x0800d0fc
 80010ac:	0800d114 	.word	0x0800d114
 80010b0:	0800e2a0 	.word	0x0800e2a0

080010b4 <APP_ButtonTask>:
 * with no other activities in the meantime).
 * When the trigger is received, it resets it, traces a message on the trace output,
 * invokes a kernel dump, and resets the debounce-flag.
 */
GOS_STATIC void_t APP_ButtonTask (void_t)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gpio_callback_desc_t buttonDesc =
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <APP_ButtonTask+0x5c>)
 80010bc:	603b      	str	r3, [r7, #0]
    {
        .callback = APP_ButtonPressedInterruptCallback,
        .pin = iodef_get(IO_USER_BUTTON)->pin
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 fbc6 	bl	8001850 <iodef_get>
 80010c4:	4603      	mov	r3, r0
 80010c6:	889b      	ldrh	r3, [r3, #4]
    gpio_callback_desc_t buttonDesc =
 80010c8:	80bb      	strh	r3, [r7, #4]
    };

    /*
     * Function code.
     */
    buttonBlocked = GOS_FALSE;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <APP_ButtonTask+0x60>)
 80010cc:	2249      	movs	r2, #73	; 0x49
 80010ce:	701a      	strb	r2, [r3, #0]
    (void_t) gpio_driverRegisterItCallback(&buttonDesc);
 80010d0:	463b      	mov	r3, r7
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fae4 	bl	80016a0 <gpio_driverRegisterItCallback>

    for (;;)
    {
        if (gos_triggerWait(&buttonTrigger, 1, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	2101      	movs	r1, #1
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <APP_ButtonTask+0x64>)
 80010e0:	f008 ffa1 	bl	800a026 <gos_triggerWait>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b55      	cmp	r3, #85	; 0x55
 80010e8:	d10c      	bne.n	8001104 <APP_ButtonTask+0x50>
        {
            gos_triggerReset(&buttonTrigger);
 80010ea:	480b      	ldr	r0, [pc, #44]	; (8001118 <APP_ButtonTask+0x64>)
 80010ec:	f008 ff7b 	bl	8009fe6 <gos_triggerReset>
            (void_t) gos_traceTrace(GOS_TRUE, "User button pressed.\r\n");
 80010f0:	490a      	ldr	r1, [pc, #40]	; (800111c <APP_ButtonTask+0x68>)
 80010f2:	2036      	movs	r0, #54	; 0x36
 80010f4:	f008 fd14 	bl	8009b20 <gos_traceTrace>
            gos_kernelDump();
 80010f8:	f005 fd58 	bl	8006bac <gos_kernelDump>
            buttonBlocked = GOS_FALSE;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <APP_ButtonTask+0x60>)
 80010fe:	2249      	movs	r2, #73	; 0x49
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e7e9      	b.n	80010d8 <APP_ButtonTask+0x24>
        }
        else
        {
            (void_t) gos_kernelTaskSleep(500);
 8001104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001108:	f004 fb1c 	bl	8005744 <gos_kernelTaskSleep>
        if (gos_triggerWait(&buttonTrigger, 1, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800110c:	e7e4      	b.n	80010d8 <APP_ButtonTask+0x24>
 800110e:	bf00      	nop
 8001110:	08001121 	.word	0x08001121
 8001114:	20001848 	.word	0x20001848
 8001118:	20001838 	.word	0x20001838
 800111c:	0800d128 	.word	0x0800d128

08001120 <APP_ButtonPressedInterruptCallback>:
 * Called by HW interrupt.
 * Only effective when the debounce-flag is not set.
 * It sets the debounce-flag to active, and increments the trigger.
 */
GOS_STATIC void_t APP_ButtonPressedInterruptCallback (void_t)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    if (buttonBlocked == GOS_FALSE)
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <APP_ButtonPressedInterruptCallback+0x1c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b49      	cmp	r3, #73	; 0x49
 800112a:	d105      	bne.n	8001138 <APP_ButtonPressedInterruptCallback+0x18>
    {
        buttonBlocked = GOS_TRUE;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <APP_ButtonPressedInterruptCallback+0x1c>)
 800112e:	2236      	movs	r2, #54	; 0x36
 8001130:	701a      	strb	r2, [r3, #0]
        gos_triggerIncrement(&buttonTrigger);
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <APP_ButtonPressedInterruptCallback+0x20>)
 8001134:	f008 ffc4 	bl	800a0c0 <gos_triggerIncrement>
    }
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20001848 	.word	0x20001848
 8001140:	20001838 	.word	0x20001838

08001144 <APP_HighPriorityTask>:
 * High priority task
 *
 * Locks the mutex, performs a short activity, and unlocks the mutex.
 */
GOS_STATIC void_t APP_HighPriorityTask (void_t)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u32_t time = 0u;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Initialize mutex.
    (void_t) gos_mutexInit(&prioMutex);
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <APP_HighPriorityTask+0x7c>)
 8001150:	f007 f870 	bl	8008234 <gos_mutexInit>

    // Add random delay.
    (void_t) gos_kernelTaskSleep(56);
 8001154:	2038      	movs	r0, #56	; 0x38
 8001156:	f004 faf5 	bl	8005744 <gos_kernelTaskSleep>

    for (;;)
    {
        // Take mutex.
        (void_t) gos_traceTrace(GOS_TRUE, "Task H trying to lock the mutex...\r\n");
 800115a:	491a      	ldr	r1, [pc, #104]	; (80011c4 <APP_HighPriorityTask+0x80>)
 800115c:	2036      	movs	r0, #54	; 0x36
 800115e:	f008 fcdf 	bl	8009b20 <gos_traceTrace>
        time = gos_kernelGetSysTicks();
 8001162:	f005 fb7b 	bl	800685c <gos_kernelGetSysTicks>
 8001166:	6078      	str	r0, [r7, #4]

        if (gos_mutexLock(&prioMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	4814      	ldr	r0, [pc, #80]	; (80011c0 <APP_HighPriorityTask+0x7c>)
 800116e:	f007 f87b 	bl	8008268 <gos_mutexLock>
 8001172:	4603      	mov	r3, r0
 8001174:	2b55      	cmp	r3, #85	; 0x55
 8001176:	d11e      	bne.n	80011b6 <APP_HighPriorityTask+0x72>
        {
            // Mutex is taken, print message on the trace output.
            time = gos_kernelGetSysTicks() - time;
 8001178:	f005 fb70 	bl	800685c <gos_kernelGetSysTicks>
 800117c:	4602      	mov	r2, r0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	607b      	str	r3, [r7, #4]
            (void_t) gos_traceTraceFormatted(GOS_TRUE, "Task H locked the mutex. Time: %d ms. Do some work now...\r\n", time);
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4910      	ldr	r1, [pc, #64]	; (80011c8 <APP_HighPriorityTask+0x84>)
 8001188:	2036      	movs	r0, #54	; 0x36
 800118a:	f008 fdb9 	bl	8009d00 <gos_traceTraceFormatted>

            // Do some work.
            time = gos_kernelGetSysTicks();
 800118e:	f005 fb65 	bl	800685c <gos_kernelGetSysTicks>
 8001192:	6078      	str	r0, [r7, #4]
            // Work is expected to finish in 10 ms.
            gos_kernelDelayMs(10);
 8001194:	200a      	movs	r0, #10
 8001196:	f005 fb9b 	bl	80068d0 <gos_kernelDelayMs>
            time = (gos_kernelGetSysTicks() - time);
 800119a:	f005 fb5f 	bl	800685c <gos_kernelGetSysTicks>
 800119e:	4602      	mov	r2, r0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	607b      	str	r3, [r7, #4]

            // Unlock mutex.
            (void_t) gos_traceTraceFormatted(GOS_TRUE, "Task H unlocking mutex. H had the mutex for: %d ms\r\n", time);
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4908      	ldr	r1, [pc, #32]	; (80011cc <APP_HighPriorityTask+0x88>)
 80011aa:	2036      	movs	r0, #54	; 0x36
 80011ac:	f008 fda8 	bl	8009d00 <gos_traceTraceFormatted>
            gos_mutexUnlock(&prioMutex);
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <APP_HighPriorityTask+0x7c>)
 80011b2:	f007 f901 	bl	80083b8 <gos_mutexUnlock>
        }

        // Task sleep.
        (void_t) gos_kernelTaskSleep(1020);
 80011b6:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 80011ba:	f004 fac3 	bl	8005744 <gos_kernelTaskSleep>
        (void_t) gos_traceTrace(GOS_TRUE, "Task H trying to lock the mutex...\r\n");
 80011be:	e7cc      	b.n	800115a <APP_HighPriorityTask+0x16>
 80011c0:	2000184c 	.word	0x2000184c
 80011c4:	0800d140 	.word	0x0800d140
 80011c8:	0800d168 	.word	0x0800d168
 80011cc:	0800d1a4 	.word	0x0800d1a4

080011d0 <APP_MediumPriorityTask>:
 * Medium priority task
 *
 * Performs a CPU intensive, long activity (active waiting for 1000 ms).
 */
GOS_STATIC void_t APP_MediumPriorityTask (void_t)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u32_t time = 0u;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Add random delay.
    (void_t) gos_kernelTaskSleep(61);
 80011da:	203d      	movs	r0, #61	; 0x3d
 80011dc:	f004 fab2 	bl	8005744 <gos_kernelTaskSleep>

    for (;;)
    {
        // This task runs when low-priority task has the mutex.
        (void_t) gos_traceTrace(GOS_TRUE, "Medium priority task doing some work...\r\n");
 80011e0:	490d      	ldr	r1, [pc, #52]	; (8001218 <APP_MediumPriorityTask+0x48>)
 80011e2:	2036      	movs	r0, #54	; 0x36
 80011e4:	f008 fc9c 	bl	8009b20 <gos_traceTrace>

        // Do some time consuming work.
        time = gos_kernelGetSysTicks();
 80011e8:	f005 fb38 	bl	800685c <gos_kernelGetSysTicks>
 80011ec:	6078      	str	r0, [r7, #4]
        gos_kernelDelayMs(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f2:	f005 fb6d 	bl	80068d0 <gos_kernelDelayMs>
        time = gos_kernelGetSysTicks() - time;
 80011f6:	f005 fb31 	bl	800685c <gos_kernelGetSysTicks>
 80011fa:	4602      	mov	r2, r0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	607b      	str	r3, [r7, #4]

        // End of work. Feedback and sleep.
        (void_t) gos_traceTraceFormatted(GOS_TRUE, "Medium prio task finished work. Time taken: %d ms\r\n", time);
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4905      	ldr	r1, [pc, #20]	; (800121c <APP_MediumPriorityTask+0x4c>)
 8001206:	2036      	movs	r0, #54	; 0x36
 8001208:	f008 fd7a 	bl	8009d00 <gos_traceTraceFormatted>
        (void_t) gos_kernelTaskSleep(507);
 800120c:	f240 10fb 	movw	r0, #507	; 0x1fb
 8001210:	f004 fa98 	bl	8005744 <gos_kernelTaskSleep>
        (void_t) gos_traceTrace(GOS_TRUE, "Medium priority task doing some work...\r\n");
 8001214:	e7e4      	b.n	80011e0 <APP_MediumPriorityTask+0x10>
 8001216:	bf00      	nop
 8001218:	0800d1dc 	.word	0x0800d1dc
 800121c:	0800d208 	.word	0x0800d208

08001220 <APP_LowPriorityTask>:
 * Low priority task
 *
 * Locks the mutex, performs a long activity, and unlocks the mutex.
 */
GOS_STATIC void_t APP_LowPriorityTask (void_t)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u32_t time = 0u;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Take mutex.
        (void_t) gos_traceTrace(GOS_TRUE, "Task L trying to lock the mutex...\r\n");
 800122a:	491a      	ldr	r1, [pc, #104]	; (8001294 <APP_LowPriorityTask+0x74>)
 800122c:	2036      	movs	r0, #54	; 0x36
 800122e:	f008 fc77 	bl	8009b20 <gos_traceTrace>
        time =  gos_kernelGetSysTicks();
 8001232:	f005 fb13 	bl	800685c <gos_kernelGetSysTicks>
 8001236:	6078      	str	r0, [r7, #4]

        if (gos_mutexLock(&prioMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	4816      	ldr	r0, [pc, #88]	; (8001298 <APP_LowPriorityTask+0x78>)
 800123e:	f007 f813 	bl	8008268 <gos_mutexLock>
 8001242:	4603      	mov	r3, r0
 8001244:	2b55      	cmp	r3, #85	; 0x55
 8001246:	d11f      	bne.n	8001288 <APP_LowPriorityTask+0x68>
        {
            // Mutex is taken, print message on the trace output.
            time = gos_kernelGetSysTicks() - time;
 8001248:	f005 fb08 	bl	800685c <gos_kernelGetSysTicks>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	607b      	str	r3, [r7, #4]
            (void_t) gos_traceTraceFormatted(GOS_TRUE, "Task L got the mutex. Time: %d ms. Do some work now...\r\n", time);
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4911      	ldr	r1, [pc, #68]	; (800129c <APP_LowPriorityTask+0x7c>)
 8001258:	2036      	movs	r0, #54	; 0x36
 800125a:	f008 fd51 	bl	8009d00 <gos_traceTraceFormatted>

            // Do some work.
            time = gos_kernelGetSysTicks();
 800125e:	f005 fafd 	bl	800685c <gos_kernelGetSysTicks>
 8001262:	6078      	str	r0, [r7, #4]
            // Work is expected to finish in 1000 ms.
            (void_t) gos_kernelDelayMs(1000);
 8001264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001268:	f005 fb32 	bl	80068d0 <gos_kernelDelayMs>
            time = gos_kernelGetSysTicks() - time;
 800126c:	f005 faf6 	bl	800685c <gos_kernelGetSysTicks>
 8001270:	4602      	mov	r2, r0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	607b      	str	r3, [r7, #4]

            // Unlock mutex.
            (void_t) gos_traceTraceFormatted(GOS_TRUE, "Task L unlocking mutex. L had lock for: %d ms\r\n", time);
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4909      	ldr	r1, [pc, #36]	; (80012a0 <APP_LowPriorityTask+0x80>)
 800127c:	2036      	movs	r0, #54	; 0x36
 800127e:	f008 fd3f 	bl	8009d00 <gos_traceTraceFormatted>
            gos_mutexUnlock(&prioMutex);
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <APP_LowPriorityTask+0x78>)
 8001284:	f007 f898 	bl	80083b8 <gos_mutexUnlock>
        }

        // Task sleep.
        (void_t) gos_kernelTaskSleep(504);
 8001288:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 800128c:	f004 fa5a 	bl	8005744 <gos_kernelTaskSleep>
        (void_t) gos_traceTrace(GOS_TRUE, "Task L trying to lock the mutex...\r\n");
 8001290:	e7cb      	b.n	800122a <APP_LowPriorityTask+0xa>
 8001292:	bf00      	nop
 8001294:	0800d23c 	.word	0x0800d23c
 8001298:	2000184c 	.word	0x2000184c
 800129c:	0800d264 	.word	0x0800d264
 80012a0:	0800d2a0 	.word	0x0800d2a0

080012a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	return 1;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_kill>:

int _kill(int pid, int sig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012be:	f009 fe3f 	bl	800af40 <__errno>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2216      	movs	r2, #22
 80012c6:	601a      	str	r2, [r3, #0]
	return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_exit>:

void _exit (int status)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffe7 	bl	80012b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012e6:	e7fe      	b.n	80012e6 <_exit+0x12>

080012e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e00a      	b.n	8001310 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012fa:	f3af 8000 	nop.w
 80012fe:	4601      	mov	r1, r0
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf0      	blt.n	80012fa <_read+0x12>
	}

return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e009      	b.n	8001348 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf1      	blt.n	8001334 <_write+0x12>
	}
	return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_close>:

int _close(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
	return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001382:	605a      	str	r2, [r3, #4]
	return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_isatty>:

int _isatty(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	return 1;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f009 fda4 	bl	800af40 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20020000 	.word	0x20020000
 8001424:	00000400 	.word	0x00000400
 8001428:	20001850 	.word	0x20001850
 800142c:	2000a3d8 	.word	0x2000a3d8

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <SystemInit+0x28>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <SystemInit+0x28>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SystemInit+0x28>)
 8001446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144a:	609a      	str	r2, [r3, #8]
#endif
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001494 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001460:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001462:	e003      	b.n	800146c <LoopCopyDataInit>

08001464 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001466:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001468:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800146a:	3104      	adds	r1, #4

0800146c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001470:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001472:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001474:	d3f6      	bcc.n	8001464 <CopyDataInit>
  ldr  r2, =_sbss
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001478:	e002      	b.n	8001480 <LoopFillZerobss>

0800147a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800147a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800147c:	f842 3b04 	str.w	r3, [r2], #4

08001480 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001482:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001484:	d3f9      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001486:	f7ff ffd3 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f009 fd5f 	bl	800af4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f006 fb47 	bl	8007b20 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001498:	0800e7dc 	.word	0x0800e7dc
  ldr  r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014a0:	2000180c 	.word	0x2000180c
  ldr  r2, =_sbss
 80014a4:	2000180c 	.word	0x2000180c
  ldr  r3, = _ebss
 80014a8:	2000a3d4 	.word	0x2000a3d4

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <driver_init>:

/*
 * Function: driver_init
 */
gos_result_t driver_init (void_t)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_SUCCESS;
 80014b6:	2355      	movs	r3, #85	; 0x55
 80014b8:	71fb      	strb	r3, [r7, #7]
    u8_t         ioIdx            = 0u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    driverInitResult &= rcc_driverInit();
 80014be:	f000 f9db 	bl	8001878 <rcc_driverInit>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4013      	ands	r3, r2
 80014ca:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= timer_driverSystimerInit();
 80014cc:	f000 fa44 	bl	8001958 <timer_driverSystimerInit>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4013      	ands	r3, r2
 80014d8:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= gpio_driverInit();
 80014da:	f000 f837 	bl	800154c <gpio_driverInit>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	4013      	ands	r3, r2
 80014e6:	71fb      	strb	r3, [r7, #7]

    for (ioIdx = 0u; ioIdx < IO_NUMBER; ioIdx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	71bb      	strb	r3, [r7, #6]
 80014ec:	e00a      	b.n	8001504 <driver_init+0x54>
    {
        gpio_driverInitPin(iodef_get(ioIdx));
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f9ad 	bl	8001850 <iodef_get>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f8a1 	bl	8001640 <gpio_driverInitPin>
    for (ioIdx = 0u; ioIdx < IO_NUMBER; ioIdx++)
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	3301      	adds	r3, #1
 8001502:	71bb      	strb	r3, [r7, #6]
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	2b05      	cmp	r3, #5
 8001508:	d9f1      	bls.n	80014ee <driver_init+0x3e>
    }

    driverInitResult &= uart_driverInit();
 800150a:	f000 fa7f 	bl	8001a0c <uart_driverInit>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4013      	ands	r3, r2
 8001516:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= gos_kernelRegisterSysTickHook(sysTickHook);
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <driver_init+0x8c>)
 800151a:	f005 f953 	bl	80067c4 <gos_kernelRegisterSysTickHook>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4013      	ands	r3, r2
 8001526:	71fb      	strb	r3, [r7, #7]

    if (driverInitResult != GOS_SUCCESS)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b55      	cmp	r3, #85	; 0x55
 800152c:	d001      	beq.n	8001532 <driver_init+0x82>
    {
        driverInitResult = GOS_ERROR;
 800152e:	23ae      	movs	r3, #174	; 0xae
 8001530:	71fb      	strb	r3, [r7, #7]
    }

    return driverInitResult;
 8001532:	79fb      	ldrb	r3, [r7, #7]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08001541 	.word	0x08001541

08001540 <sysTickHook>:
 * @details Increments the HAL tick.
 *
 * @return  -
 */
GOS_STATIC void_t sysTickHook (void_t)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001544:	f000 fd9e 	bl	8002084 <HAL_IncTick>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <gpio_driverInit>:

/*
 * Function: gpio_driverInit
 */
gos_result_t gpio_driverInit (void_t)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <gpio_driverInit+0xec>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a36      	ldr	r2, [pc, #216]	; (8001638 <gpio_driverInit+0xec>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <gpio_driverInit+0xec>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <gpio_driverInit+0xec>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <gpio_driverInit+0xec>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <gpio_driverInit+0xec>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <gpio_driverInit+0xec>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a28      	ldr	r2, [pc, #160]	; (8001638 <gpio_driverInit+0xec>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <gpio_driverInit+0xec>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <gpio_driverInit+0xec>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <gpio_driverInit+0xec>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <gpio_driverInit+0xec>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <gpio_driverInit+0xec>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a1a      	ldr	r2, [pc, #104]	; (8001638 <gpio_driverInit+0xec>)
 80015d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <gpio_driverInit+0xec>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2017      	movs	r0, #23
 80015e8:	f000 fe47 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015ec:	2017      	movs	r0, #23
 80015ee:	f000 fe60 	bl	80022b2 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2028      	movs	r0, #40	; 0x28
 80015f8:	f000 fe3f 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015fc:	2028      	movs	r0, #40	; 0x28
 80015fe:	f000 fe58 	bl	80022b2 <HAL_NVIC_EnableIRQ>

    for (callbackIndex = 0u; callbackIndex < GPIO_CALLBACK_NUM; callbackIndex++)
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
 8001606:	e00e      	b.n	8001626 <gpio_driverInit+0xda>
    {
        gpioCallbacks[callbackIndex].callback = NULL;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <gpio_driverInit+0xf0>)
 800160c:	2100      	movs	r1, #0
 800160e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        gpioCallbacks[callbackIndex].pin      = 0xFFFF;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	4a09      	ldr	r2, [pc, #36]	; (800163c <gpio_driverInit+0xf0>)
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161e:	809a      	strh	r2, [r3, #4]
    for (callbackIndex = 0u; callbackIndex < GPIO_CALLBACK_NUM; callbackIndex++)
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	3301      	adds	r3, #1
 8001624:	75fb      	strb	r3, [r7, #23]
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b07      	cmp	r3, #7
 800162a:	d9ed      	bls.n	8001608 <gpio_driverInit+0xbc>
    }

    return GOS_SUCCESS;
 800162c:	2355      	movs	r3, #85	; 0x55
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	20001854 	.word	0x20001854

08001640 <gpio_driverInitPin>:

/*
 * Function: gpio_driverInitPin
 */
gos_result_t gpio_driverInitPin (GOS_CONST gpio_desc_t* pDesc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 8001648:	23ae      	movs	r3, #174	; 0xae
 800164a:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pDesc != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d018      	beq.n	8001694 <gpio_driverInitPin+0x54>
    {
        gpioInit.Pin       = pDesc->pin;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = pDesc->mode;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = pDesc->pull;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = pDesc->speed;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = pDesc->alternate;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(pDesc->port, &gpioInit);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f001 fa3a 	bl	8002b04 <HAL_GPIO_Init>
        gpioInitPinResult  = GOS_SUCCESS;
 8001690:	2355      	movs	r3, #85	; 0x55
 8001692:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Descriptor is NULL pointer.
    }

    return gpioInitPinResult;
 8001694:	7ffb      	ldrb	r3, [r7, #31]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <gpio_driverRegisterItCallback>:

/*
 * Function: gpio_driverRegisterItCallback
 */
gos_result_t gpio_driverRegisterItCallback (gpio_callback_desc_t* pDesc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t         callbackIndex  = 0u;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
    gos_result_t registerResult = GOS_ERROR;
 80016ac:	23ae      	movs	r3, #174	; 0xae
 80016ae:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pDesc != NULL && pDesc->callback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d023      	beq.n	80016fe <gpio_driverRegisterItCallback+0x5e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01f      	beq.n	80016fe <gpio_driverRegisterItCallback+0x5e>
    {
        for (callbackIndex = 0u; callbackIndex < GPIO_CALLBACK_NUM; callbackIndex++)
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	e019      	b.n	80016f8 <gpio_driverRegisterItCallback+0x58>
        {
            if (gpioCallbacks[callbackIndex].callback == NULL)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <gpio_driverRegisterItCallback+0x6c>)
 80016c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d110      	bne.n	80016f2 <gpio_driverRegisterItCallback+0x52>
            {
                gpioCallbacks[callbackIndex].callback = pDesc->callback;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <gpio_driverRegisterItCallback+0x6c>)
 80016d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                gpioCallbacks[callbackIndex].pin      = pDesc->pin;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	8891      	ldrh	r1, [r2, #4]
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <gpio_driverRegisterItCallback+0x6c>)
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	460a      	mov	r2, r1
 80016ea:	809a      	strh	r2, [r3, #4]
                registerResult = GOS_SUCCESS;
 80016ec:	2355      	movs	r3, #85	; 0x55
 80016ee:	73bb      	strb	r3, [r7, #14]
                break;
 80016f0:	e005      	b.n	80016fe <gpio_driverRegisterItCallback+0x5e>
        for (callbackIndex = 0u; callbackIndex < GPIO_CALLBACK_NUM; callbackIndex++)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	3301      	adds	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	d9e2      	bls.n	80016c4 <gpio_driverRegisterItCallback+0x24>
    else
    {
        // Callback or descriptor is NULL pointer.
    }

    return registerResult;
 80016fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20001854 	.word	0x20001854

08001710 <gpio_driverTogglePin>:

/*
 * Function: gpio_driverTogglePin
 */
gos_result_t gpio_driverTogglePin (GOS_CONST gpio_desc_t* pDesc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t togglePinResult = GOS_ERROR;
 8001718:	23ae      	movs	r3, #174	; 0xae
 800171a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDesc != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <gpio_driverTogglePin+0x26>
    {
        HAL_GPIO_TogglePin(pDesc->port, pDesc->pin);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	889b      	ldrh	r3, [r3, #4]
 800172a:	4619      	mov	r1, r3
 800172c:	4610      	mov	r0, r2
 800172e:	f001 fb7d 	bl	8002e2c <HAL_GPIO_TogglePin>
        togglePinResult = GOS_SUCCESS;
 8001732:	2355      	movs	r3, #85	; 0x55
 8001734:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Descriptor is NULL pointer.
    }

    return togglePinResult;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <EXTI15_10_IRQHandler+0x68>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <EXTI15_10_IRQHandler+0x18>
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <EXTI15_10_IRQHandler+0x6c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <EXTI15_10_IRQHandler+0x6c>)
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <EXTI15_10_IRQHandler+0x68>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <EXTI15_10_IRQHandler+0x68>)
 8001762:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(iodef_get(IO_USER_BUTTON)->pin);
 8001764:	2001      	movs	r0, #1
 8001766:	f000 f873 	bl	8001850 <iodef_get>
 800176a:	4603      	mov	r3, r0
 800176c:	889b      	ldrh	r3, [r3, #4]
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fb78 	bl	8002e64 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <EXTI15_10_IRQHandler+0x68>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <EXTI15_10_IRQHandler+0x48>
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <EXTI15_10_IRQHandler+0x68>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3b01      	subs	r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <EXTI15_10_IRQHandler+0x68>)
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <EXTI15_10_IRQHandler+0x68>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <EXTI15_10_IRQHandler+0x64>
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <EXTI15_10_IRQHandler+0x6c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <EXTI15_10_IRQHandler+0x64>
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <EXTI15_10_IRQHandler+0x6c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <EXTI15_10_IRQHandler+0x6c>)
 80017a2:	701a      	strb	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20001a7b 	.word	0x20001a7b
 80017ac:	20001a7a 	.word	0x20001a7a

080017b0 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t GPIO_Pin)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_GPIO_EXTI_Callback+0x94>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d105      	bne.n	80017ce <HAL_GPIO_EXTI_Callback+0x1e>
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_GPIO_EXTI_Callback+0x98>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_GPIO_EXTI_Callback+0x98>)
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_GPIO_EXTI_Callback+0x94>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_GPIO_EXTI_Callback+0x94>)
 80017d8:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (callbackIndex = 0u; callbackIndex < GPIO_CALLBACK_NUM; callbackIndex++)
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e010      	b.n	8001806 <HAL_GPIO_EXTI_Callback+0x56>
    {
        if (gpioCallbacks[callbackIndex].pin == GPIO_Pin)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_GPIO_EXTI_Callback+0x9c>)
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	889b      	ldrh	r3, [r3, #4]
 80017ee:	88fa      	ldrh	r2, [r7, #6]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d105      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0x50>
        {
            gpioCallbacks[callbackIndex].callback();
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <HAL_GPIO_EXTI_Callback+0x9c>)
 80017f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017fc:	4798      	blx	r3
            break;
 80017fe:	e005      	b.n	800180c <HAL_GPIO_EXTI_Callback+0x5c>
    for (callbackIndex = 0u; callbackIndex < GPIO_CALLBACK_NUM; callbackIndex++)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3301      	adds	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b07      	cmp	r3, #7
 800180a:	d9eb      	bls.n	80017e4 <HAL_GPIO_EXTI_Callback+0x34>
        else
        {
            // Continue.
        }
    }
    GOS_ISR_EXIT
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_GPIO_EXTI_Callback+0x94>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_GPIO_EXTI_Callback+0x70>
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_GPIO_EXTI_Callback+0x94>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3b01      	subs	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_GPIO_EXTI_Callback+0x94>)
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_GPIO_EXTI_Callback+0x94>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_GPIO_EXTI_Callback+0x8c>
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_GPIO_EXTI_Callback+0x98>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_GPIO_EXTI_Callback+0x8c>
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_GPIO_EXTI_Callback+0x98>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	3b01      	subs	r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GPIO_EXTI_Callback+0x98>)
 800183a:	701a      	strb	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20001a7b 	.word	0x20001a7b
 8001848:	20001a7a 	.word	0x20001a7a
 800184c:	20001854 	.word	0x20001854

08001850 <iodef_get>:

/*
 * Function: iodef_get
 */
GOS_CONST gpio_desc_t* iodef_get (io_pin_t pin)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    return &io[pin];
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4a03      	ldr	r2, [pc, #12]	; (8001874 <iodef_get+0x24>)
 8001866:	4413      	add	r3, r2
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	0800e2cc 	.word	0x0800e2cc

08001878 <rcc_driverInit>:

/*
 * Function: rcc_driverInit
 */
gos_result_t rcc_driverInit (void_t)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b096      	sub	sp, #88	; 0x58
 800187c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t       initResult        = GOS_ERROR;
 800187e:	23ae      	movs	r3, #174	; 0xae
 8001880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001884:	f107 0320 	add.w	r3, r7, #32
 8001888:	2234      	movs	r2, #52	; 0x34
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f009 fb05 	bl	800ae9c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <rcc_driverInit+0xd8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a29      	ldr	r2, [pc, #164]	; (8001950 <rcc_driverInit+0xd8>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b27      	ldr	r3, [pc, #156]	; (8001950 <rcc_driverInit+0xd8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <rcc_driverInit+0xdc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018ca:	4a22      	ldr	r2, [pc, #136]	; (8001954 <rcc_driverInit+0xdc>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <rcc_driverInit+0xdc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018de:	2301      	movs	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 80018e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 80018e8:	2302      	movs	r3, #2
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80018ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM       = 4;
 80018f2:	2304      	movs	r3, #4
 80018f4:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN       = 50;
 80018f6:	2332      	movs	r3, #50	; 0x32
 80018f8:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ       = 2;
 80018fe:	2302      	movs	r3, #2
 8001900:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLR       = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	653b      	str	r3, [r7, #80]	; 0x50

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	4618      	mov	r0, r3
 800190c:	f001 fe0c 	bl	8003528 <HAL_RCC_OscConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d116      	bne.n	8001944 <rcc_driverInit+0xcc>
    {
        RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8001916:	230f      	movs	r3, #15
 8001918:	60fb      	str	r3, [r7, #12]
                                           RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
        RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800191a:	2302      	movs	r3, #2
 800191c:	613b      	str	r3, [r7, #16]
        RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
        RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001926:	61bb      	str	r3, [r7, #24]
        RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]

        if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) == HAL_OK)
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f001 faae 	bl	8002e94 <HAL_RCC_ClockConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <rcc_driverInit+0xcc>
        {
            initResult = GOS_SUCCESS;
 800193e:	2355      	movs	r3, #85	; 0x55
 8001940:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    else
    {
        // Error.
    }

    return initResult;
 8001944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8001948:	4618      	mov	r0, r3
 800194a:	3758      	adds	r7, #88	; 0x58
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40007000 	.word	0x40007000

08001958 <timer_driverSystimerInit>:

/*
 * Function: timer_driverSystimerInit
 */
gos_result_t timer_driverSystimerInit (void_t)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t systimerInitResult = GOS_ERROR;
 800195e:	23ae      	movs	r3, #174	; 0xae
 8001960:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <timer_driverSystimerInit+0x74>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <timer_driverSystimerInit+0x74>)
 800196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <timer_driverSystimerInit+0x74>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

    htim12.Instance               = TIM12;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <timer_driverSystimerInit+0x78>)
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <timer_driverSystimerInit+0x7c>)
 8001982:	601a      	str	r2, [r3, #0]
    htim12.Init.Prescaler         = 84-1;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <timer_driverSystimerInit+0x78>)
 8001986:	2253      	movs	r2, #83	; 0x53
 8001988:	605a      	str	r2, [r3, #4]
    htim12.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <timer_driverSystimerInit+0x78>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
    htim12.Init.Period            = 0xffffffff-1;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <timer_driverSystimerInit+0x78>)
 8001992:	f06f 0201 	mvn.w	r2, #1
 8001996:	60da      	str	r2, [r3, #12]
    htim12.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <timer_driverSystimerInit+0x78>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
    htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <timer_driverSystimerInit+0x78>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim12)  == HAL_OK &&
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <timer_driverSystimerInit+0x78>)
 80019a6:	f002 f819 	bl	80039dc <HAL_TIM_Base_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <timer_driverSystimerInit+0x68>
        HAL_TIM_Base_Start(&htim12) == HAL_OK)
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <timer_driverSystimerInit+0x78>)
 80019b2:	f002 f848 	bl	8003a46 <HAL_TIM_Base_Start>
 80019b6:	4603      	mov	r3, r0
    if (HAL_TIM_Base_Init(&htim12)  == HAL_OK &&
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <timer_driverSystimerInit+0x68>
    {
        systimerInitResult = GOS_SUCCESS;
 80019bc:	2355      	movs	r3, #85	; 0x55
 80019be:	71fb      	strb	r3, [r7, #7]
    }

    return systimerInitResult;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	20001894 	.word	0x20001894
 80019d4:	40001800 	.word	0x40001800

080019d8 <timer_driverSystimerGet>:

/*
 * Function: timer_driverSystimerGet
 */
gos_result_t timer_driverSystimerGet (u16_t* pValue)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverGetResult = GOS_ERROR;
 80019e0:	23ae      	movs	r3, #174	; 0xae
 80019e2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <timer_driverSystimerGet+0x22>
    {
        *pValue              = __HAL_TIM_GET_COUNTER(&htim12);
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <timer_driverSystimerGet+0x30>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	801a      	strh	r2, [r3, #0]
        timerDriverGetResult = GOS_SUCCESS;
 80019f6:	2355      	movs	r3, #85	; 0x55
 80019f8:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Target is NULL pointer.
    }

    return timerDriverGetResult;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20001894 	.word	0x20001894

08001a0c <uart_driverInit>:

/*
 * Function: uart_driverInit
 */
gos_result_t uart_driverInit (void_t)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 8001a12:	2355      	movs	r3, #85	; 0x55
 8001a14:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b52      	ldr	r3, [pc, #328]	; (8001b64 <uart_driverInit+0x158>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a51      	ldr	r2, [pc, #324]	; (8001b64 <uart_driverInit+0x158>)
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <uart_driverInit+0x158>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <uart_driverInit+0x158>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <uart_driverInit+0x158>)
 8001a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b48      	ldr	r3, [pc, #288]	; (8001b64 <uart_driverInit+0x158>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <uart_driverInit+0x158>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <uart_driverInit+0x158>)
 8001a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <uart_driverInit+0x158>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

    huart2.Instance          = USART2;
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <uart_driverInit+0x15c>)
 8001a6c:	4a3f      	ldr	r2, [pc, #252]	; (8001b6c <uart_driverInit+0x160>)
 8001a6e:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate     = 115200;
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <uart_driverInit+0x15c>)
 8001a72:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a76:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <uart_driverInit+0x15c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits     = UART_STOPBITS_1;
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <uart_driverInit+0x15c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity       = UART_PARITY_NONE;
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <uart_driverInit+0x15c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode         = UART_MODE_TX_RX;
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <uart_driverInit+0x15c>)
 8001a8c:	220c      	movs	r2, #12
 8001a8e:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <uart_driverInit+0x15c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <uart_driverInit+0x15c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9c:	4832      	ldr	r0, [pc, #200]	; (8001b68 <uart_driverInit+0x15c>)
 8001a9e:	f002 f897 	bl	8003bd0 <HAL_UART_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <uart_driverInit+0xa0>
    {
        uartDriverInitResult = GOS_ERROR;
 8001aa8:	23ae      	movs	r3, #174	; 0xae
 8001aaa:	73fb      	strb	r3, [r7, #15]
    }

    // Initialize mutex.
    uartDriverInitResult &= gos_mutexInit(&uart2TxMutex);
 8001aac:	4830      	ldr	r0, [pc, #192]	; (8001b70 <uart_driverInit+0x164>)
 8001aae:	f006 fbc1 	bl	8008234 <gos_mutexInit>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	73fb      	strb	r3, [r7, #15]

    // Initialize trigger.
    uartDriverInitResult &= gos_triggerInit(&uart2TxReadyTrigger);
 8001abc:	482d      	ldr	r0, [pc, #180]	; (8001b74 <uart_driverInit+0x168>)
 8001abe:	f008 fa7d 	bl	8009fbc <gos_triggerInit>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	73fb      	strb	r3, [r7, #15]

    huart5.Instance          = UART5;
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <uart_driverInit+0x16c>)
 8001ace:	4a2b      	ldr	r2, [pc, #172]	; (8001b7c <uart_driverInit+0x170>)
 8001ad0:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate     = 115200;
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <uart_driverInit+0x16c>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength   = UART_WORDLENGTH_8B;
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <uart_driverInit+0x16c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits     = UART_STOPBITS_1;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <uart_driverInit+0x16c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity       = UART_PARITY_NONE;
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <uart_driverInit+0x16c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode         = UART_MODE_TX_RX;
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <uart_driverInit+0x16c>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <uart_driverInit+0x16c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <uart_driverInit+0x16c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart5) != HAL_OK)
 8001afe:	481e      	ldr	r0, [pc, #120]	; (8001b78 <uart_driverInit+0x16c>)
 8001b00:	f002 f866 	bl	8003bd0 <HAL_UART_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <uart_driverInit+0x102>
    {
        uartDriverInitResult = GOS_ERROR;
 8001b0a:	23ae      	movs	r3, #174	; 0xae
 8001b0c:	73fb      	strb	r3, [r7, #15]
    }

    // Initialize mutexes.
    uartDriverInitResult &= gos_mutexInit(&uart5RxMutex);
 8001b0e:	481c      	ldr	r0, [pc, #112]	; (8001b80 <uart_driverInit+0x174>)
 8001b10:	f006 fb90 	bl	8008234 <gos_mutexInit>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	73fb      	strb	r3, [r7, #15]
    uartDriverInitResult &= gos_mutexInit(&uart5TxMutex);
 8001b1e:	4819      	ldr	r0, [pc, #100]	; (8001b84 <uart_driverInit+0x178>)
 8001b20:	f006 fb88 	bl	8008234 <gos_mutexInit>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	73fb      	strb	r3, [r7, #15]

    // Initialize triggers.
    uartDriverInitResult &= gos_triggerInit(&uart5RxReadyTrigger);
 8001b2e:	4816      	ldr	r0, [pc, #88]	; (8001b88 <uart_driverInit+0x17c>)
 8001b30:	f008 fa44 	bl	8009fbc <gos_triggerInit>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	73fb      	strb	r3, [r7, #15]
    uartDriverInitResult &= gos_triggerInit(&uart5TxReadyTrigger);
 8001b3e:	4813      	ldr	r0, [pc, #76]	; (8001b8c <uart_driverInit+0x180>)
 8001b40:	f008 fa3c 	bl	8009fbc <gos_triggerInit>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	73fb      	strb	r3, [r7, #15]

    if (uartDriverInitResult != GOS_SUCCESS)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b55      	cmp	r3, #85	; 0x55
 8001b52:	d001      	beq.n	8001b58 <uart_driverInit+0x14c>
    {
        uartDriverInitResult = GOS_ERROR;
 8001b54:	23ae      	movs	r3, #174	; 0xae
 8001b56:	73fb      	strb	r3, [r7, #15]
    }

    return uartDriverInitResult;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	200018d4 	.word	0x200018d4
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	20001a1c 	.word	0x20001a1c
 8001b74:	20001a28 	.word	0x20001a28
 8001b78:	20001918 	.word	0x20001918
 8001b7c:	40005000 	.word	0x40005000
 8001b80:	20001a20 	.word	0x20001a20
 8001b84:	20001a24 	.word	0x20001a24
 8001b88:	20001a38 	.word	0x20001a38
 8001b8c:	20001a48 	.word	0x20001a48

08001b90 <uart_driverTraceTransmitStringUnsafe>:

/*
 * Function: uart_driverTraceTransmitStringUnsafe
 */
gos_result_t uart_driverTraceTransmitStringUnsafe (char_t* message)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult    = GOS_ERROR;
 8001b98:	23ae      	movs	r3, #174	; 0xae
 8001b9a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <uart_driverTraceTransmitStringUnsafe+0x64>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <uart_driverTraceTransmitStringUnsafe+0x64>)
 8001ba6:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort(&huart2) == HAL_OK &&
 8001ba8:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <uart_driverTraceTransmitStringUnsafe+0x68>)
 8001baa:	f002 f9e3 	bl	8003f74 <HAL_UART_Abort>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10f      	bne.n	8001bd4 <uart_driverTraceTransmitStringUnsafe+0x44>
       HAL_UART_Transmit(&huart2, (u8_t*)message, strlen(message), 1000) == HAL_OK)
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7fe fb8b 	bl	80002d0 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <uart_driverTraceTransmitStringUnsafe+0x68>)
 8001bc6:	f002 f850 	bl	8003c6a <HAL_UART_Transmit>
 8001bca:	4603      	mov	r3, r0
    if (HAL_UART_Abort(&huart2) == HAL_OK &&
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <uart_driverTraceTransmitStringUnsafe+0x44>
    {
        uartTransmitResult = GOS_SUCCESS;
 8001bd0:	2355      	movs	r3, #85	; 0x55
 8001bd2:	73fb      	strb	r3, [r7, #15]
    }
    GOS_ENABLE_SCHED
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <uart_driverTraceTransmitStringUnsafe+0x64>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <uart_driverTraceTransmitStringUnsafe+0x58>
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <uart_driverTraceTransmitStringUnsafe+0x64>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <uart_driverTraceTransmitStringUnsafe+0x64>)
 8001be6:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20001a7a 	.word	0x20001a7a
 8001bf8:	200018d4 	.word	0x200018d4

08001bfc <uart_driverTraceTransmitString>:

/*
 * Function: uart_driverTraceTransmitString
 */
GOS_INLINE gos_result_t uart_driverTraceTransmitString (char_t* message)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult    = GOS_ERROR;
 8001c04:	23ae      	movs	r3, #174	; 0xae
 8001c06:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uart2TxMutex, 2000u) == GOS_SUCCESS)
 8001c08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001c0c:	4814      	ldr	r0, [pc, #80]	; (8001c60 <uart_driverTraceTransmitString+0x64>)
 8001c0e:	f006 fb2b 	bl	8008268 <gos_mutexLock>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b55      	cmp	r3, #85	; 0x55
 8001c16:	d11a      	bne.n	8001c4e <uart_driverTraceTransmitString+0x52>
    {
        if (HAL_UART_Transmit_DMA(&huart2, (u8_t*)message, strlen(message)) == HAL_OK &&
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7fe fb59 	bl	80002d0 <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	480f      	ldr	r0, [pc, #60]	; (8001c64 <uart_driverTraceTransmitString+0x68>)
 8001c28:	f002 f926 	bl	8003e78 <HAL_UART_Transmit_DMA>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10d      	bne.n	8001c4e <uart_driverTraceTransmitString+0x52>
            gos_triggerWait(&uart2TxReadyTrigger, 1, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8001c32:	f04f 32ff 	mov.w	r2, #4294967295
 8001c36:	2101      	movs	r1, #1
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <uart_driverTraceTransmitString+0x6c>)
 8001c3a:	f008 f9f4 	bl	800a026 <gos_triggerWait>
 8001c3e:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huart2, (u8_t*)message, strlen(message)) == HAL_OK &&
 8001c40:	2b55      	cmp	r3, #85	; 0x55
 8001c42:	d104      	bne.n	8001c4e <uart_driverTraceTransmitString+0x52>
        {
            gos_triggerReset(&uart2TxReadyTrigger);
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <uart_driverTraceTransmitString+0x6c>)
 8001c46:	f008 f9ce 	bl	8009fe6 <gos_triggerReset>
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 8001c4a:	2355      	movs	r3, #85	; 0x55
 8001c4c:	73fb      	strb	r3, [r7, #15]
        }
    }

    gos_mutexUnlock(&uart2TxMutex);
 8001c4e:	4804      	ldr	r0, [pc, #16]	; (8001c60 <uart_driverTraceTransmitString+0x64>)
 8001c50:	f006 fbb2 	bl	80083b8 <gos_mutexUnlock>

    return uartTransmitResult;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20001a1c 	.word	0x20001a1c
 8001c64:	200018d4 	.word	0x200018d4
 8001c68:	20001a28 	.word	0x20001a28

08001c6c <uart_driverShellReceiveChar>:

/*
 * Function: uart_driverShellReceiveChar
 */
GOS_INLINE gos_result_t uart_driverShellReceiveChar (char_t* buffer)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult    = GOS_ERROR;
 8001c74:	23ae      	movs	r3, #174	; 0xae
 8001c76:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uart5RxMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <uart_driverShellReceiveChar+0x58>)
 8001c7e:	f006 faf3 	bl	8008268 <gos_mutexLock>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b55      	cmp	r3, #85	; 0x55
 8001c86:	d118      	bne.n	8001cba <uart_driverShellReceiveChar+0x4e>
    {
        if (HAL_UART_Receive_IT(&huart5, (u8_t*)buffer, sizeof(char_t)) == HAL_OK &&
 8001c88:	2201      	movs	r2, #1
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <uart_driverShellReceiveChar+0x5c>)
 8001c8e:	f002 f8c3 	bl	8003e18 <HAL_UART_Receive_IT>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <uart_driverShellReceiveChar+0x48>
            gos_triggerWait(&uart5RxReadyTrigger, 1, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <uart_driverShellReceiveChar+0x60>)
 8001ca0:	f008 f9c1 	bl	800a026 <gos_triggerWait>
 8001ca4:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huart5, (u8_t*)buffer, sizeof(char_t)) == HAL_OK &&
 8001ca6:	2b55      	cmp	r3, #85	; 0x55
 8001ca8:	d104      	bne.n	8001cb4 <uart_driverShellReceiveChar+0x48>
        {
            gos_triggerReset(&uart5RxReadyTrigger);
 8001caa:	4808      	ldr	r0, [pc, #32]	; (8001ccc <uart_driverShellReceiveChar+0x60>)
 8001cac:	f008 f99b 	bl	8009fe6 <gos_triggerReset>
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 8001cb0:	2355      	movs	r3, #85	; 0x55
 8001cb2:	73fb      	strb	r3, [r7, #15]
        }
        gos_mutexUnlock(&uart5RxMutex);
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <uart_driverShellReceiveChar+0x58>)
 8001cb6:	f006 fb7f 	bl	80083b8 <gos_mutexUnlock>
    }

    return uartReceiveResult;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20001a20 	.word	0x20001a20
 8001cc8:	20001918 	.word	0x20001918
 8001ccc:	20001a38 	.word	0x20001a38

08001cd0 <uart_driverShellTransmitString>:

/*
 * Function: uart_driverShellTransmitString
 */
GOS_INLINE gos_result_t uart_driverShellTransmitString (char_t* pString)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult    = GOS_ERROR;
 8001cd8:	23ae      	movs	r3, #174	; 0xae
 8001cda:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uart5TxMutex, 2000u) == GOS_SUCCESS)
 8001cdc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ce0:	4814      	ldr	r0, [pc, #80]	; (8001d34 <uart_driverShellTransmitString+0x64>)
 8001ce2:	f006 fac1 	bl	8008268 <gos_mutexLock>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b55      	cmp	r3, #85	; 0x55
 8001cea:	d11d      	bne.n	8001d28 <uart_driverShellTransmitString+0x58>
    {
        if (HAL_UART_Transmit_IT(&huart5, (u8_t*)pString, strlen(pString)) == HAL_OK &&
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe faef 	bl	80002d0 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	480f      	ldr	r0, [pc, #60]	; (8001d38 <uart_driverShellTransmitString+0x68>)
 8001cfc:	f002 f847 	bl	8003d8e <HAL_UART_Transmit_IT>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <uart_driverShellTransmitString+0x52>
            gos_triggerWait(&uart5TxReadyTrigger, 1, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8001d06:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <uart_driverShellTransmitString+0x6c>)
 8001d0e:	f008 f98a 	bl	800a026 <gos_triggerWait>
 8001d12:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huart5, (u8_t*)pString, strlen(pString)) == HAL_OK &&
 8001d14:	2b55      	cmp	r3, #85	; 0x55
 8001d16:	d104      	bne.n	8001d22 <uart_driverShellTransmitString+0x52>
        {
            gos_triggerReset(&uart5TxReadyTrigger);
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <uart_driverShellTransmitString+0x6c>)
 8001d1a:	f008 f964 	bl	8009fe6 <gos_triggerReset>
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 8001d1e:	2355      	movs	r3, #85	; 0x55
 8001d20:	73fb      	strb	r3, [r7, #15]
        }
        gos_mutexUnlock(&uart5TxMutex);
 8001d22:	4804      	ldr	r0, [pc, #16]	; (8001d34 <uart_driverShellTransmitString+0x64>)
 8001d24:	f006 fb48 	bl	80083b8 <gos_mutexUnlock>
    }

    return uartTransmitResult;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20001a24 	.word	0x20001a24
 8001d38:	20001918 	.word	0x20001918
 8001d3c:	20001a48 	.word	0x20001a48

08001d40 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (pHuart->Instance == USART2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3f      	ldr	r2, [pc, #252]	; (8001e4c <HAL_UART_MspInit+0x10c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d139      	bne.n	8001dc6 <HAL_UART_MspInit+0x86>
    {
        /* USART2 DMA Init */
        /* USART2_TX Init */
        hdma_usart2_tx.Instance                 = DMA1_Stream6;
 8001d52:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d54:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <HAL_UART_MspInit+0x114>)
 8001d56:	601a      	str	r2, [r3, #0]
        hdma_usart2_tx.Init.Channel             = DMA_CHANNEL_4;
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d5e:	605a      	str	r2, [r3, #4]
        hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001d60:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	609a      	str	r2, [r3, #8]
        hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001d66:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
        hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d72:	611a      	str	r2, [r3, #16]
        hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
        hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001d7a:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
        hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
        hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
        hdma_usart2_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
        HAL_DMA_Init(&hdma_usart2_tx);
 8001d92:	482f      	ldr	r0, [pc, #188]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d94:	f000 faa8 	bl	80022e8 <HAL_DMA_Init>

        __HAL_LINKDMA(pHuart,hdmatx,hdma_usart2_tx);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9e:	4a2c      	ldr	r2, [pc, #176]	; (8001e50 <HAL_UART_MspInit+0x110>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6393      	str	r3, [r2, #56]	; 0x38

        HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	2026      	movs	r0, #38	; 0x26
 8001daa:	f000 fa66 	bl	800227a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dae:	2026      	movs	r0, #38	; 0x26
 8001db0:	f000 fa7f 	bl	80022b2 <HAL_NVIC_EnableIRQ>

        HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2011      	movs	r0, #17
 8001dba:	f000 fa5e 	bl	800227a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001dbe:	2011      	movs	r0, #17
 8001dc0:	f000 fa77 	bl	80022b2 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        // Nothing to do.
    }
}
 8001dc4:	e03d      	b.n	8001e42 <HAL_UART_MspInit+0x102>
    else if (pHuart->Instance == UART5)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_UART_MspInit+0x118>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d138      	bne.n	8001e42 <HAL_UART_MspInit+0x102>
        hdma_uart5_rx.Instance                 = DMA1_Stream0;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001dd2:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <HAL_UART_MspInit+0x120>)
 8001dd4:	601a      	str	r2, [r3, #0]
        hdma_uart5_rx.Init.Channel             = DMA_CHANNEL_4;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001dd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ddc:	605a      	str	r2, [r3, #4]
        hdma_uart5_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
        hdma_uart5_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
        hdma_uart5_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df0:	611a      	str	r2, [r3, #16]
        hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
        hdma_uart5_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
        hdma_uart5_rx.Init.Mode                = DMA_NORMAL;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	61da      	str	r2, [r3, #28]
        hdma_uart5_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	621a      	str	r2, [r3, #32]
        hdma_uart5_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
        HAL_DMA_Init(&hdma_uart5_rx);
 8001e10:	4812      	ldr	r0, [pc, #72]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001e12:	f000 fa69 	bl	80022e8 <HAL_DMA_Init>
        __HAL_LINKDMA(pHuart,hdmarx,hdma_uart5_rx);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <HAL_UART_MspInit+0x11c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6393      	str	r3, [r2, #56]	; 0x38
        HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2035      	movs	r0, #53	; 0x35
 8001e28:	f000 fa27 	bl	800227a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e2c:	2035      	movs	r0, #53	; 0x35
 8001e2e:	f000 fa40 	bl	80022b2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	200b      	movs	r0, #11
 8001e38:	f000 fa1f 	bl	800227a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e3c:	200b      	movs	r0, #11
 8001e3e:	f000 fa38 	bl	80022b2 <HAL_NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	2000195c 	.word	0x2000195c
 8001e54:	400260a0 	.word	0x400260a0
 8001e58:	40005000 	.word	0x40005000
 8001e5c:	200019bc 	.word	0x200019bc
 8001e60:	40026010 	.word	0x40026010

08001e64 <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <USART2_IRQHandler+0x60>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <USART2_IRQHandler+0x18>
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <USART2_IRQHandler+0x64>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <USART2_IRQHandler+0x64>)
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <USART2_IRQHandler+0x60>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <USART2_IRQHandler+0x60>)
 8001e86:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huart2);
 8001e88:	4810      	ldr	r0, [pc, #64]	; (8001ecc <USART2_IRQHandler+0x68>)
 8001e8a:	f002 f95f 	bl	800414c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <USART2_IRQHandler+0x60>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <USART2_IRQHandler+0x3e>
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <USART2_IRQHandler+0x60>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <USART2_IRQHandler+0x60>)
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <USART2_IRQHandler+0x60>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <USART2_IRQHandler+0x5a>
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <USART2_IRQHandler+0x64>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <USART2_IRQHandler+0x5a>
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <USART2_IRQHandler+0x64>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <USART2_IRQHandler+0x64>)
 8001ebc:	701a      	strb	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20001a7b 	.word	0x20001a7b
 8001ec8:	20001a7a 	.word	0x20001a7a
 8001ecc:	200018d4 	.word	0x200018d4

08001ed0 <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <UART5_IRQHandler+0x60>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <UART5_IRQHandler+0x18>
 8001edc:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <UART5_IRQHandler+0x64>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <UART5_IRQHandler+0x64>)
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <UART5_IRQHandler+0x60>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <UART5_IRQHandler+0x60>)
 8001ef2:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huart5);
 8001ef4:	4810      	ldr	r0, [pc, #64]	; (8001f38 <UART5_IRQHandler+0x68>)
 8001ef6:	f002 f929 	bl	800414c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <UART5_IRQHandler+0x60>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <UART5_IRQHandler+0x3e>
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <UART5_IRQHandler+0x60>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <UART5_IRQHandler+0x60>)
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <UART5_IRQHandler+0x60>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <UART5_IRQHandler+0x5a>
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <UART5_IRQHandler+0x64>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <UART5_IRQHandler+0x5a>
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <UART5_IRQHandler+0x64>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <UART5_IRQHandler+0x64>)
 8001f28:	701a      	strb	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20001a7b 	.word	0x20001a7b
 8001f34:	20001a7a 	.word	0x20001a7a
 8001f38:	20001918 	.word	0x20001918

08001f3c <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (pHuart->Instance == USART2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_UART_TxCpltCallback+0x34>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d103      	bne.n	8001f56 <HAL_UART_TxCpltCallback+0x1a>
    {
        gos_triggerIncrement(&uart2TxReadyTrigger);
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <HAL_UART_TxCpltCallback+0x38>)
 8001f50:	f008 f8b6 	bl	800a0c0 <gos_triggerIncrement>
    }
    else
    {
        // Nothing to do.
    }
}
 8001f54:	e007      	b.n	8001f66 <HAL_UART_TxCpltCallback+0x2a>
    else if (pHuart->Instance == UART5)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_UART_TxCpltCallback+0x3c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d102      	bne.n	8001f66 <HAL_UART_TxCpltCallback+0x2a>
        gos_triggerIncrement(&uart5TxReadyTrigger);
 8001f60:	4806      	ldr	r0, [pc, #24]	; (8001f7c <HAL_UART_TxCpltCallback+0x40>)
 8001f62:	f008 f8ad 	bl	800a0c0 <gos_triggerIncrement>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40004400 	.word	0x40004400
 8001f74:	20001a28 	.word	0x20001a28
 8001f78:	40005000 	.word	0x40005000
 8001f7c:	20001a48 	.word	0x20001a48

08001f80 <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (pHuart->Instance == UART5)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_UART_RxCpltCallback+0x20>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d102      	bne.n	8001f98 <HAL_UART_RxCpltCallback+0x18>
    {
        gos_triggerIncrement(&uart5RxReadyTrigger);
 8001f92:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <HAL_UART_RxCpltCallback+0x24>)
 8001f94:	f008 f894 	bl	800a0c0 <gos_triggerIncrement>
    }
    else
    {
        // Nothing to do.
    }
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40005000 	.word	0x40005000
 8001fa4:	20001a38 	.word	0x20001a38

08001fa8 <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <DMA1_Stream0_IRQHandler+0x10>)
 8001fae:	f000 fb33 	bl	8002618 <HAL_DMA_IRQHandler>
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200019bc 	.word	0x200019bc

08001fbc <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <DMA1_Stream6_IRQHandler+0x10>)
 8001fc2:	f000 fb29 	bl	8002618 <HAL_DMA_IRQHandler>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000195c 	.word	0x2000195c

08001fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <HAL_Init+0x40>)
 8001fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_Init+0x40>)
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_Init+0x40>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_Init+0x40>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f933 	bl	8002264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f810 	bl	8002024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002004:	f000 f806 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00

08002014 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x54>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x58>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f943 	bl	80022ce <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00e      	b.n	8002070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d80a      	bhi.n	800206e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f000 f90b 	bl	800227a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_InitTick+0x5c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200002bc 	.word	0x200002bc
 800207c:	200002c4 	.word	0x200002c4
 8002080:	200002c0 	.word	0x200002c0

08002084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x20>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_IncTick+0x24>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200002c4 	.word	0x200002c4
 80020a8:	20001a58 	.word	0x20001a58

080020ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_GetTick+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20001a58 	.word	0x20001a58

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	; (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002230:	d301      	bcc.n	8002236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002232:	2301      	movs	r3, #1
 8002234:	e00f      	b.n	8002256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <SysTick_Config+0x40>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223e:	210f      	movs	r1, #15
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f7ff ff8e 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <SysTick_Config+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <SysTick_Config+0x40>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000e010 	.word	0xe000e010

08002264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff29 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800228c:	f7ff ff3e 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f7ff ff8e 	bl	80021b8 <NVIC_EncodePriority>
 800229c:	4602      	mov	r2, r0
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff5d 	bl	8002164 <__NVIC_SetPriority>
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff31 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffa2 	bl	8002220 <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff feda 	bl	80020ac <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e099      	b.n	8002438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002324:	e00f      	b.n	8002346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002326:	f7ff fec1 	bl	80020ac <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b05      	cmp	r3, #5
 8002332:	d908      	bls.n	8002346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e078      	b.n	8002438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e8      	bne.n	8002326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_DMA_Init+0x158>)
 8002360:	4013      	ands	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	2b04      	cmp	r3, #4
 800239e:	d107      	bne.n	80023b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4313      	orrs	r3, r2
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f023 0307 	bic.w	r3, r3, #7
 80023c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d117      	bne.n	800240a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00e      	beq.n	800240a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fb0d 	bl	8002a0c <DMA_CheckFifoParam>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002406:	2301      	movs	r3, #1
 8002408:	e016      	b.n	8002438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fac4 	bl	80029a0 <DMA_CalcBaseAndBitshift>
 8002418:	4603      	mov	r3, r0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	223f      	movs	r2, #63	; 0x3f
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	f010803f 	.word	0xf010803f

08002444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_DMA_Start_IT+0x26>
 8002466:	2302      	movs	r3, #2
 8002468:	e040      	b.n	80024ec <HAL_DMA_Start_IT+0xa8>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d12f      	bne.n	80024de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fa56 	bl	8002944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	223f      	movs	r2, #63	; 0x3f
 800249e:	409a      	lsls	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0216 	orr.w	r2, r2, #22
 80024b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0208 	orr.w	r2, r2, #8
 80024ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e005      	b.n	80024ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002502:	f7ff fdd3 	bl	80020ac <HAL_GetTick>
 8002506:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d008      	beq.n	8002526 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e052      	b.n	80025cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0216 	bic.w	r2, r2, #22
 8002534:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002544:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <HAL_DMA_Abort+0x62>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0208 	bic.w	r2, r2, #8
 8002564:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002576:	e013      	b.n	80025a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002578:	f7ff fd98 	bl	80020ac <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b05      	cmp	r3, #5
 8002584:	d90c      	bls.n	80025a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e015      	b.n	80025cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e4      	bne.n	8002578 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	223f      	movs	r2, #63	; 0x3f
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d004      	beq.n	80025f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00c      	b.n	800260c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2205      	movs	r2, #5
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002624:	4b8e      	ldr	r3, [pc, #568]	; (8002860 <HAL_DMA_IRQHandler+0x248>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a8e      	ldr	r2, [pc, #568]	; (8002864 <HAL_DMA_IRQHandler+0x24c>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0a9b      	lsrs	r3, r3, #10
 8002630:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2208      	movs	r2, #8
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01a      	beq.n	8002684 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	2208      	movs	r2, #8
 8002672:	409a      	lsls	r2, r3
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f043 0201 	orr.w	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	2201      	movs	r2, #1
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d012      	beq.n	80026ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	2201      	movs	r2, #1
 80026a8:	409a      	lsls	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f043 0202 	orr.w	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2204      	movs	r2, #4
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2204      	movs	r2, #4
 80026de:	409a      	lsls	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f043 0204 	orr.w	r2, r3, #4
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2210      	movs	r2, #16
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d043      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d03c      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2210      	movs	r2, #16
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d018      	beq.n	800275a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d024      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
 8002746:	e01f      	b.n	8002788 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01b      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4798      	blx	r3
 8002758:	e016      	b.n	8002788 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d107      	bne.n	8002778 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0208 	bic.w	r2, r2, #8
 8002776:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	2220      	movs	r2, #32
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 808f 	beq.w	80028b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8087 	beq.w	80028b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	2220      	movs	r2, #32
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d136      	bne.n	8002830 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0216 	bic.w	r2, r2, #22
 80027d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <HAL_DMA_IRQHandler+0x1da>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0208 	bic.w	r2, r2, #8
 8002800:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	223f      	movs	r2, #63	; 0x3f
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002822:	2b00      	cmp	r3, #0
 8002824:	d07e      	beq.n	8002924 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
        }
        return;
 800282e:	e079      	b.n	8002924 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01d      	beq.n	800287a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10d      	bne.n	8002868 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	2b00      	cmp	r3, #0
 8002852:	d031      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
 800285c:	e02c      	b.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
 800285e:	bf00      	nop
 8002860:	200002bc 	.word	0x200002bc
 8002864:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d023      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
 8002878:	e01e      	b.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10f      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0210 	bic.w	r2, r2, #16
 8002896:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d032      	beq.n	8002926 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d022      	beq.n	8002912 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2205      	movs	r2, #5
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d307      	bcc.n	8002900 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f2      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x2cc>
 80028fe:	e000      	b.n	8002902 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002900:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
 8002922:	e000      	b.n	8002926 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002924:	bf00      	nop
    }
  }
}
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d108      	bne.n	8002984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002982:	e007      	b.n	8002994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3b10      	subs	r3, #16
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <DMA_CalcBaseAndBitshift+0x64>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <DMA_CalcBaseAndBitshift+0x68>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d909      	bls.n	80029e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	659a      	str	r2, [r3, #88]	; 0x58
 80029e0:	e007      	b.n	80029f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	aaaaaaab 	.word	0xaaaaaaab
 8002a08:	0800e35c 	.word	0x0800e35c

08002a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11f      	bne.n	8002a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d856      	bhi.n	8002ada <DMA_CheckFifoParam+0xce>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <DMA_CheckFifoParam+0x28>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a57 	.word	0x08002a57
 8002a3c:	08002a45 	.word	0x08002a45
 8002a40:	08002adb 	.word	0x08002adb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d046      	beq.n	8002ade <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a54:	e043      	b.n	8002ade <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a5e:	d140      	bne.n	8002ae2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e03d      	b.n	8002ae2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6e:	d121      	bne.n	8002ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d837      	bhi.n	8002ae6 <DMA_CheckFifoParam+0xda>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <DMA_CheckFifoParam+0x70>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a93 	.word	0x08002a93
 8002a84:	08002a8d 	.word	0x08002a8d
 8002a88:	08002aa5 	.word	0x08002aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e030      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d025      	beq.n	8002aea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa2:	e022      	b.n	8002aea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aac:	d11f      	bne.n	8002aee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ab2:	e01c      	b.n	8002aee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d903      	bls.n	8002ac2 <DMA_CheckFifoParam+0xb6>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d003      	beq.n	8002ac8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ac0:	e018      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac6:	e015      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e00b      	b.n	8002af2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ada:	bf00      	nop
 8002adc:	e00a      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e008      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e006      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e004      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e002      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
    }
  } 
  
  return status; 
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e165      	b.n	8002dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f040 8154 	bne.w	8002de6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d00b      	beq.n	8002b5e <HAL_GPIO_Init+0x5a>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b52:	2b11      	cmp	r3, #17
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0xfc>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b12      	cmp	r3, #18
 8002bfe:	d123      	bne.n	8002c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	220f      	movs	r2, #15
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	69b9      	ldr	r1, [r7, #24]
 8002c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0203 	and.w	r2, r3, #3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80ae 	beq.w	8002de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_GPIO_Init+0x300>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4a5c      	ldr	r2, [pc, #368]	; (8002e04 <HAL_GPIO_Init+0x300>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9a:	4b5a      	ldr	r3, [pc, #360]	; (8002e04 <HAL_GPIO_Init+0x300>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca6:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3302      	adds	r3, #2
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4f      	ldr	r2, [pc, #316]	; (8002e0c <HAL_GPIO_Init+0x308>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d025      	beq.n	8002d1e <HAL_GPIO_Init+0x21a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4e      	ldr	r2, [pc, #312]	; (8002e10 <HAL_GPIO_Init+0x30c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01f      	beq.n	8002d1a <HAL_GPIO_Init+0x216>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <HAL_GPIO_Init+0x310>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d019      	beq.n	8002d16 <HAL_GPIO_Init+0x212>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4c      	ldr	r2, [pc, #304]	; (8002e18 <HAL_GPIO_Init+0x314>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_GPIO_Init+0x20e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4b      	ldr	r2, [pc, #300]	; (8002e1c <HAL_GPIO_Init+0x318>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00d      	beq.n	8002d0e <HAL_GPIO_Init+0x20a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4a      	ldr	r2, [pc, #296]	; (8002e20 <HAL_GPIO_Init+0x31c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x206>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a49      	ldr	r2, [pc, #292]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_GPIO_Init+0x202>
 8002d02:	2306      	movs	r3, #6
 8002d04:	e00c      	b.n	8002d20 <HAL_GPIO_Init+0x21c>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e00a      	b.n	8002d20 <HAL_GPIO_Init+0x21c>
 8002d0a:	2305      	movs	r3, #5
 8002d0c:	e008      	b.n	8002d20 <HAL_GPIO_Init+0x21c>
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e006      	b.n	8002d20 <HAL_GPIO_Init+0x21c>
 8002d12:	2303      	movs	r3, #3
 8002d14:	e004      	b.n	8002d20 <HAL_GPIO_Init+0x21c>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e002      	b.n	8002d20 <HAL_GPIO_Init+0x21c>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_GPIO_Init+0x21c>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	f002 0203 	and.w	r2, r2, #3
 8002d26:	0092      	lsls	r2, r2, #2
 8002d28:	4093      	lsls	r3, r2
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d30:	4935      	ldr	r1, [pc, #212]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	3302      	adds	r3, #2
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d62:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d68:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8c:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db6:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de0:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	f67f ae96 	bls.w	8002b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40021400 	.word	0x40021400
 8002e24:	40021800 	.word	0x40021800
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d104      	bne.n	8002e50 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	041a      	lsls	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e7a:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fc94 	bl	80017b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40013c00 	.word	0x40013c00

08002e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0cc      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b68      	ldr	r3, [pc, #416]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d90c      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b65      	ldr	r3, [pc, #404]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b63      	ldr	r3, [pc, #396]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0b8      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee8:	4b59      	ldr	r3, [pc, #356]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a58      	ldr	r2, [pc, #352]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f00:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a52      	ldr	r2, [pc, #328]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	494d      	ldr	r1, [pc, #308]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d044      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d119      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e067      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4934      	ldr	r1, [pc, #208]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f84:	f7ff f892 	bl	80020ac <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7ff f88e 	bl	80020ac <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d20c      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e032      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4916      	ldr	r1, [pc, #88]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	490e      	ldr	r1, [pc, #56]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301a:	f000 f855 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 800301e:	4602      	mov	r2, r0
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	490a      	ldr	r1, [pc, #40]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	5ccb      	ldrb	r3, [r1, r3]
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fff2 	bl	8002024 <HAL_InitTick>

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023c00 	.word	0x40023c00
 8003050:	40023800 	.word	0x40023800
 8003054:	0800e2b4 	.word	0x0800e2b4
 8003058:	200002bc 	.word	0x200002bc
 800305c:	200002c0 	.word	0x200002c0

08003060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCC_GetHCLKFreq+0x14>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	200002bc 	.word	0x200002bc

08003078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800307c:	f7ff fff0 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <HAL_RCC_GetPCLK1Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	0800e2c4 	.word	0x0800e2c4

080030a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a4:	f7ff ffdc 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	0b5b      	lsrs	r3, r3, #13
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	0800e2c4 	.word	0x0800e2c4

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b0ae      	sub	sp, #184	; 0xb8
 80030ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ee:	4bcb      	ldr	r3, [pc, #812]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	f200 8206 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x440>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003139 	.word	0x08003139
 8003108:	08003509 	.word	0x08003509
 800310c:	08003509 	.word	0x08003509
 8003110:	08003509 	.word	0x08003509
 8003114:	08003141 	.word	0x08003141
 8003118:	08003509 	.word	0x08003509
 800311c:	08003509 	.word	0x08003509
 8003120:	08003509 	.word	0x08003509
 8003124:	08003149 	.word	0x08003149
 8003128:	08003509 	.word	0x08003509
 800312c:	08003509 	.word	0x08003509
 8003130:	08003509 	.word	0x08003509
 8003134:	08003339 	.word	0x08003339
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4bb9      	ldr	r3, [pc, #740]	; (8003420 <HAL_RCC_GetSysClockFreq+0x358>)
 800313a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800313e:	e1e7      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003140:	4bb8      	ldr	r3, [pc, #736]	; (8003424 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003146:	e1e3      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003148:	4bb4      	ldr	r3, [pc, #720]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003154:	4bb1      	ldr	r3, [pc, #708]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d071      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003160:	4bae      	ldr	r3, [pc, #696]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800316c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003186:	4622      	mov	r2, r4
 8003188:	462b      	mov	r3, r5
 800318a:	f04f 0000 	mov.w	r0, #0
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	0159      	lsls	r1, r3, #5
 8003194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003198:	0150      	lsls	r0, r2, #5
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4621      	mov	r1, r4
 80031a0:	1a51      	subs	r1, r2, r1
 80031a2:	6439      	str	r1, [r7, #64]	; 0x40
 80031a4:	4629      	mov	r1, r5
 80031a6:	eb63 0301 	sbc.w	r3, r3, r1
 80031aa:	647b      	str	r3, [r7, #68]	; 0x44
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80031b8:	4649      	mov	r1, r9
 80031ba:	018b      	lsls	r3, r1, #6
 80031bc:	4641      	mov	r1, r8
 80031be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031c2:	4641      	mov	r1, r8
 80031c4:	018a      	lsls	r2, r1, #6
 80031c6:	4641      	mov	r1, r8
 80031c8:	1a51      	subs	r1, r2, r1
 80031ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80031cc:	4649      	mov	r1, r9
 80031ce:	eb63 0301 	sbc.w	r3, r3, r1
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80031e0:	4649      	mov	r1, r9
 80031e2:	00cb      	lsls	r3, r1, #3
 80031e4:	4641      	mov	r1, r8
 80031e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ea:	4641      	mov	r1, r8
 80031ec:	00ca      	lsls	r2, r1, #3
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	4622      	mov	r2, r4
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
 80031fa:	462b      	mov	r3, r5
 80031fc:	460a      	mov	r2, r1
 80031fe:	eb42 0303 	adc.w	r3, r2, r3
 8003202:	637b      	str	r3, [r7, #52]	; 0x34
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003210:	4629      	mov	r1, r5
 8003212:	024b      	lsls	r3, r1, #9
 8003214:	4621      	mov	r1, r4
 8003216:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800321a:	4621      	mov	r1, r4
 800321c:	024a      	lsls	r2, r1, #9
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800322c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003230:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003234:	f7fd fce8 	bl	8000c08 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4613      	mov	r3, r2
 800323e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003242:	e067      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003244:	4b75      	ldr	r3, [pc, #468]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003250:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003254:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325c:	67bb      	str	r3, [r7, #120]	; 0x78
 800325e:	2300      	movs	r3, #0
 8003260:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003262:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003266:	4622      	mov	r2, r4
 8003268:	462b      	mov	r3, r5
 800326a:	f04f 0000 	mov.w	r0, #0
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	0159      	lsls	r1, r3, #5
 8003274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003278:	0150      	lsls	r0, r2, #5
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4621      	mov	r1, r4
 8003280:	1a51      	subs	r1, r2, r1
 8003282:	62b9      	str	r1, [r7, #40]	; 0x28
 8003284:	4629      	mov	r1, r5
 8003286:	eb63 0301 	sbc.w	r3, r3, r1
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003298:	4649      	mov	r1, r9
 800329a:	018b      	lsls	r3, r1, #6
 800329c:	4641      	mov	r1, r8
 800329e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a2:	4641      	mov	r1, r8
 80032a4:	018a      	lsls	r2, r1, #6
 80032a6:	4641      	mov	r1, r8
 80032a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ac:	4649      	mov	r1, r9
 80032ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032c6:	4692      	mov	sl, r2
 80032c8:	469b      	mov	fp, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	eb1a 0303 	adds.w	r3, sl, r3
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	462b      	mov	r3, r5
 80032d4:	eb4b 0303 	adc.w	r3, fp, r3
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80032e6:	4629      	mov	r1, r5
 80032e8:	028b      	lsls	r3, r1, #10
 80032ea:	4621      	mov	r1, r4
 80032ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f0:	4621      	mov	r1, r4
 80032f2:	028a      	lsls	r2, r1, #10
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032fc:	2200      	movs	r2, #0
 80032fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003300:	677a      	str	r2, [r7, #116]	; 0x74
 8003302:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003306:	f7fd fc7f 	bl	8000c08 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4613      	mov	r3, r2
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	3301      	adds	r3, #1
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800332a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003336:	e0eb      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d06b      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCC_GetSysClockFreq+0x354>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	2200      	movs	r2, #0
 8003358:	66bb      	str	r3, [r7, #104]	; 0x68
 800335a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800335c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003362:	663b      	str	r3, [r7, #96]	; 0x60
 8003364:	2300      	movs	r3, #0
 8003366:	667b      	str	r3, [r7, #100]	; 0x64
 8003368:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800336c:	4622      	mov	r2, r4
 800336e:	462b      	mov	r3, r5
 8003370:	f04f 0000 	mov.w	r0, #0
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	0159      	lsls	r1, r3, #5
 800337a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800337e:	0150      	lsls	r0, r2, #5
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4621      	mov	r1, r4
 8003386:	1a51      	subs	r1, r2, r1
 8003388:	61b9      	str	r1, [r7, #24]
 800338a:	4629      	mov	r1, r5
 800338c:	eb63 0301 	sbc.w	r3, r3, r1
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800339e:	4659      	mov	r1, fp
 80033a0:	018b      	lsls	r3, r1, #6
 80033a2:	4651      	mov	r1, sl
 80033a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033a8:	4651      	mov	r1, sl
 80033aa:	018a      	lsls	r2, r1, #6
 80033ac:	4651      	mov	r1, sl
 80033ae:	ebb2 0801 	subs.w	r8, r2, r1
 80033b2:	4659      	mov	r1, fp
 80033b4:	eb63 0901 	sbc.w	r9, r3, r1
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033cc:	4690      	mov	r8, r2
 80033ce:	4699      	mov	r9, r3
 80033d0:	4623      	mov	r3, r4
 80033d2:	eb18 0303 	adds.w	r3, r8, r3
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	462b      	mov	r3, r5
 80033da:	eb49 0303 	adc.w	r3, r9, r3
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80033ec:	4629      	mov	r1, r5
 80033ee:	024b      	lsls	r3, r1, #9
 80033f0:	4621      	mov	r1, r4
 80033f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033f6:	4621      	mov	r1, r4
 80033f8:	024a      	lsls	r2, r1, #9
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003402:	2200      	movs	r2, #0
 8003404:	65bb      	str	r3, [r7, #88]	; 0x58
 8003406:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003408:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800340c:	f7fd fbfc 	bl	8000c08 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4613      	mov	r3, r2
 8003416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800341a:	e065      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x420>
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003428:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_GetSysClockFreq+0x458>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	2200      	movs	r2, #0
 8003430:	4618      	mov	r0, r3
 8003432:	4611      	mov	r1, r2
 8003434:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003438:	653b      	str	r3, [r7, #80]	; 0x50
 800343a:	2300      	movs	r3, #0
 800343c:	657b      	str	r3, [r7, #84]	; 0x54
 800343e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003442:	4642      	mov	r2, r8
 8003444:	464b      	mov	r3, r9
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	0159      	lsls	r1, r3, #5
 8003450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003454:	0150      	lsls	r0, r2, #5
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4641      	mov	r1, r8
 800345c:	1a51      	subs	r1, r2, r1
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	4649      	mov	r1, r9
 8003462:	eb63 0301 	sbc.w	r3, r3, r1
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003474:	4659      	mov	r1, fp
 8003476:	018b      	lsls	r3, r1, #6
 8003478:	4651      	mov	r1, sl
 800347a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347e:	4651      	mov	r1, sl
 8003480:	018a      	lsls	r2, r1, #6
 8003482:	4651      	mov	r1, sl
 8003484:	1a54      	subs	r4, r2, r1
 8003486:	4659      	mov	r1, fp
 8003488:	eb63 0501 	sbc.w	r5, r3, r1
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	00eb      	lsls	r3, r5, #3
 8003496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349a:	00e2      	lsls	r2, r4, #3
 800349c:	4614      	mov	r4, r2
 800349e:	461d      	mov	r5, r3
 80034a0:	4643      	mov	r3, r8
 80034a2:	18e3      	adds	r3, r4, r3
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	464b      	mov	r3, r9
 80034a8:	eb45 0303 	adc.w	r3, r5, r3
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ba:	4629      	mov	r1, r5
 80034bc:	028b      	lsls	r3, r1, #10
 80034be:	4621      	mov	r1, r4
 80034c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c4:	4621      	mov	r1, r4
 80034c6:	028a      	lsls	r2, r1, #10
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034d0:	2200      	movs	r2, #0
 80034d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80034d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034da:	f7fd fb95 	bl	8000c08 <__aeabi_uldivmod>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4613      	mov	r3, r2
 80034e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_RCC_GetSysClockFreq+0x458>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	0f1b      	lsrs	r3, r3, #28
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80034f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003506:	e003      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_GetSysClockFreq+0x45c>)
 800350a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800350e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003510:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003514:	4618      	mov	r0, r3
 8003516:	37b8      	adds	r7, #184	; 0xb8
 8003518:	46bd      	mov	sp, r7
 800351a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	00f42400 	.word	0x00f42400

08003528 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8083 	beq.w	8003648 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003542:	4b95      	ldr	r3, [pc, #596]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d019      	beq.n	8003582 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800354e:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003556:	2b08      	cmp	r3, #8
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800355a:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003566:	d00c      	beq.n	8003582 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003568:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d112      	bne.n	800359a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003574:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003580:	d10b      	bne.n	800359a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003582:	4b85      	ldr	r3, [pc, #532]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d05b      	beq.n	8003646 <HAL_RCC_OscConfig+0x11e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d157      	bne.n	8003646 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e216      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x8a>
 80035a4:	4b7c      	ldr	r3, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a7b      	ldr	r2, [pc, #492]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e01d      	b.n	80035ee <HAL_RCC_OscConfig+0xc6>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0xae>
 80035bc:	4b76      	ldr	r3, [pc, #472]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a75      	ldr	r2, [pc, #468]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b73      	ldr	r3, [pc, #460]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a72      	ldr	r2, [pc, #456]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e00b      	b.n	80035ee <HAL_RCC_OscConfig+0xc6>
 80035d6:	4b70      	ldr	r3, [pc, #448]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6f      	ldr	r2, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a6c      	ldr	r2, [pc, #432]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80035e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d013      	beq.n	800361e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe fd59 	bl	80020ac <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035fe:	f7fe fd55 	bl	80020ac <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b64      	cmp	r3, #100	; 0x64
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1db      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003610:	4b61      	ldr	r3, [pc, #388]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0xd6>
 800361c:	e014      	b.n	8003648 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fe fd45 	bl	80020ac <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003626:	f7fe fd41 	bl	80020ac <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b64      	cmp	r3, #100	; 0x64
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e1c7      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003638:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0xfe>
 8003644:	e000      	b.n	8003648 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d06f      	beq.n	8003734 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b00      	cmp	r3, #0
 800365e:	d017      	beq.n	8003690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003660:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003668:	2b08      	cmp	r3, #8
 800366a:	d105      	bne.n	8003678 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800366c:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003678:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d11c      	bne.n	80036be <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003684:	4b44      	ldr	r3, [pc, #272]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d116      	bne.n	80036be <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003690:	4b41      	ldr	r3, [pc, #260]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_OscConfig+0x180>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e18f      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4938      	ldr	r1, [pc, #224]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036bc:	e03a      	b.n	8003734 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d020      	beq.n	8003708 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c6:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_RCC_OscConfig+0x274>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fcee 	bl	80020ac <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fe fcea 	bl	80020ac <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e170      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e6:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b29      	ldr	r3, [pc, #164]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4925      	ldr	r1, [pc, #148]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
 8003706:	e015      	b.n	8003734 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_OscConfig+0x274>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fe fccd 	bl	80020ac <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003716:	f7fe fcc9 	bl	80020ac <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e14f      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d037      	beq.n	80037b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d016      	beq.n	8003776 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003748:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_RCC_OscConfig+0x278>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374e:	f7fe fcad 	bl	80020ac <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003756:	f7fe fca9 	bl	80020ac <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e12f      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x22e>
 8003774:	e01c      	b.n	80037b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_OscConfig+0x278>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fe fc96 	bl	80020ac <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003782:	e00f      	b.n	80037a4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe fc92 	bl	80020ac <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d908      	bls.n	80037a4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e118      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	42470000 	.word	0x42470000
 80037a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	4b8a      	ldr	r3, [pc, #552]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80037a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e9      	bne.n	8003784 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8097 	beq.w	80038ec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c2:	4b83      	ldr	r3, [pc, #524]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b7f      	ldr	r3, [pc, #508]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a7e      	ldr	r2, [pc, #504]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
 80037de:	4b7c      	ldr	r3, [pc, #496]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fe fc51 	bl	80020ac <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fe fc4d 	bl	80020ac <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0d3      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x4ac>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x31a>
 8003834:	4b66      	ldr	r3, [pc, #408]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a65      	ldr	r2, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	e01c      	b.n	800387c <HAL_RCC_OscConfig+0x354>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b05      	cmp	r3, #5
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x33c>
 800384a:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a60      	ldr	r2, [pc, #384]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	4b5e      	ldr	r3, [pc, #376]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a5d      	ldr	r2, [pc, #372]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0x354>
 8003864:	4b5a      	ldr	r3, [pc, #360]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a59      	ldr	r2, [pc, #356]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	4b57      	ldr	r3, [pc, #348]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	4a56      	ldr	r2, [pc, #344]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 8003876:	f023 0304 	bic.w	r3, r3, #4
 800387a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d015      	beq.n	80038b0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe fc12 	bl	80020ac <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe fc0e 	bl	80020ac <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e092      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ee      	beq.n	800388c <HAL_RCC_OscConfig+0x364>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fe fbfc 	bl	80020ac <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fe fbf8 	bl	80020ac <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e07c      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ee      	bne.n	80038b8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e0:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80038e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d068      	beq.n	80039c6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f4:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d060      	beq.n	80039c2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d145      	bne.n	8003994 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003908:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_RCC_OscConfig+0x4b0>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390e:	f7fe fbcd 	bl	80020ac <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003916:	f7fe fbc9 	bl	80020ac <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e04f      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003928:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f0      	bne.n	8003916 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	019b      	lsls	r3, r3, #6
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	071b      	lsls	r3, r3, #28
 8003960:	491b      	ldr	r1, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_RCC_OscConfig+0x4b0>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe fb9e 	bl	80020ac <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe fb9a 	bl	80020ac <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e020      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x44c>
 8003992:	e018      	b.n	80039c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_OscConfig+0x4b0>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe fb87 	bl	80020ac <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fe fb83 	bl	80020ac <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e009      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_RCC_OscConfig+0x4a8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCC_OscConfig+0x47a>
 80039c0:	e001      	b.n	80039c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40007000 	.word	0x40007000
 80039d8:	42470060 	.word	0x42470060

080039dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e01d      	b.n	8003a2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f815 	bl	8003a32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 f838 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d007      	beq.n	8003a78 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a40      	ldr	r2, [pc, #256]	; (8003ba4 <TIM_Base_SetConfig+0x114>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d00f      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3d      	ldr	r2, [pc, #244]	; (8003ba8 <TIM_Base_SetConfig+0x118>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <TIM_Base_SetConfig+0x11c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <TIM_Base_SetConfig+0x120>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3a      	ldr	r2, [pc, #232]	; (8003bb4 <TIM_Base_SetConfig+0x124>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2f      	ldr	r2, [pc, #188]	; (8003ba4 <TIM_Base_SetConfig+0x114>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d027      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2c      	ldr	r2, [pc, #176]	; (8003ba8 <TIM_Base_SetConfig+0x118>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d023      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2b      	ldr	r2, [pc, #172]	; (8003bac <TIM_Base_SetConfig+0x11c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01f      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <TIM_Base_SetConfig+0x120>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a29      	ldr	r2, [pc, #164]	; (8003bb4 <TIM_Base_SetConfig+0x124>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d017      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <TIM_Base_SetConfig+0x128>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <TIM_Base_SetConfig+0x12c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00f      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <TIM_Base_SetConfig+0x130>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <TIM_Base_SetConfig+0x134>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <TIM_Base_SetConfig+0x138>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <TIM_Base_SetConfig+0x13c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <TIM_Base_SetConfig+0x114>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_Base_SetConfig+0xf8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <TIM_Base_SetConfig+0x124>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d103      	bne.n	8003b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	615a      	str	r2, [r3, #20]
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800
 8003bc4:	40001800 	.word	0x40001800
 8003bc8:	40001c00 	.word	0x40001c00
 8003bcc:	40002000 	.word	0x40002000

08003bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e03f      	b.n	8003c62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fe f8a2 	bl	8001d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 f85b 	bl	8004cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b08a      	sub	sp, #40	; 0x28
 8003c6e:	af02      	add	r7, sp, #8
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d17c      	bne.n	8003d84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_UART_Transmit+0x2c>
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e075      	b.n	8003d86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Transmit+0x3e>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e06e      	b.n	8003d86 <HAL_UART_Transmit+0x11c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2221      	movs	r2, #33	; 0x21
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cbe:	f7fe f9f5 	bl	80020ac <HAL_GetTick>
 8003cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd8:	d108      	bne.n	8003cec <HAL_UART_Transmit+0x82>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d104      	bne.n	8003cec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	e003      	b.n	8003cf4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cfc:	e02a      	b.n	8003d54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2200      	movs	r2, #0
 8003d06:	2180      	movs	r1, #128	; 0x80
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fd72 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e036      	b.n	8003d86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10b      	bne.n	8003d36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	3302      	adds	r3, #2
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	e007      	b.n	8003d46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	3301      	adds	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1cf      	bne.n	8003cfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2140      	movs	r1, #64	; 0x40
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fd42 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e006      	b.n	8003d86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d130      	bne.n	8003e0a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_UART_Transmit_IT+0x26>
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e029      	b.n	8003e0c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Transmit_IT+0x38>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e022      	b.n	8003e0c <HAL_UART_Transmit_IT+0x7e>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2221      	movs	r2, #33	; 0x21
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e04:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d11d      	bne.n	8003e6e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_UART_Receive_IT+0x26>
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e016      	b.n	8003e70 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Receive_IT+0x38>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e00f      	b.n	8003e70 <HAL_UART_Receive_IT+0x58>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	461a      	mov	r2, r3
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fd32 	bl	80048ce <UART_Start_Receive_IT>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	e000      	b.n	8003e70 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	; 0x30
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d165      	bne.n	8003f5e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_UART_Transmit_DMA+0x26>
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e05e      	b.n	8003f60 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UART_Transmit_DMA+0x38>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e057      	b.n	8003f60 <HAL_UART_Transmit_DMA+0xe8>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	88fa      	ldrh	r2, [r7, #6]
 8003ec2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2221      	movs	r2, #33	; 0x21
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <HAL_UART_Transmit_DMA+0xf0>)
 8003ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <HAL_UART_Transmit_DMA+0xf4>)
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <HAL_UART_Transmit_DMA+0xf8>)
 8003eee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003ef8:	f107 0308 	add.w	r3, r7, #8
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	6819      	ldr	r1, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	f7fe fa98 	bl	8002444 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	617b      	str	r3, [r7, #20]
   return(result);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3314      	adds	r3, #20
 8003f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f46:	627a      	str	r2, [r7, #36]	; 0x24
 8003f48:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6a39      	ldr	r1, [r7, #32]
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e5      	bne.n	8003f26 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e000      	b.n	8003f60 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003f5e:	2302      	movs	r3, #2
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3730      	adds	r7, #48	; 0x30
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	080046a9 	.word	0x080046a9
 8003f6c:	08004743 	.word	0x08004743
 8003f70:	0800475f 	.word	0x0800475f

08003f74 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b0a0      	sub	sp, #128	; 0x80
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f8e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003f92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003f9c:	66ba      	str	r2, [r7, #104]	; 0x68
 8003f9e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003fa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fd0:	657a      	str	r2, [r7, #84]	; 0x54
 8003fd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d119      	bne.n	8004020 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	f023 0310 	bic.w	r3, r3, #16
 8004002:	677b      	str	r3, [r7, #116]	; 0x74
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800400c:	643a      	str	r2, [r7, #64]	; 0x40
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b80      	cmp	r3, #128	; 0x80
 800402c:	d136      	bne.n	800409c <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	61fb      	str	r3, [r7, #28]
   return(result);
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004044:	673b      	str	r3, [r7, #112]	; 0x70
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800404e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	2b00      	cmp	r3, #0
 8004068:	d018      	beq.n	800409c <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	2200      	movs	r2, #0
 8004070:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fa3c 	bl	80024f4 <HAL_DMA_Abort>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fc50 	bl	800292c <HAL_DMA_GetError>
 800408c:	4603      	mov	r3, r0
 800408e:	2b20      	cmp	r3, #32
 8004090:	d104      	bne.n	800409c <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2210      	movs	r2, #16
 8004096:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e052      	b.n	8004142 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d136      	bne.n	8004118 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3314      	adds	r3, #20
 80040b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ca:	61ba      	str	r2, [r7, #24]
 80040cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	2200      	movs	r2, #0
 80040ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe f9fe 	bl	80024f4 <HAL_DMA_Abort>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fc12 	bl	800292c <HAL_DMA_GetError>
 8004108:	4603      	mov	r3, r0
 800410a:	2b20      	cmp	r3, #32
 800410c:	d104      	bne.n	8004118 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2210      	movs	r2, #16
 8004112:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e014      	b.n	8004142 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3780      	adds	r7, #128	; 0x80
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b0ba      	sub	sp, #232	; 0xe8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800418a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_UART_IRQHandler+0x66>
 800419e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fcd4 	bl	8004b58 <UART_Receive_IT>
      return;
 80041b0:	e256      	b.n	8004660 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80de 	beq.w	8004378 <HAL_UART_IRQHandler+0x22c>
 80041bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80d1 	beq.w	8004378 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_UART_IRQHandler+0xae>
 80041e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <HAL_UART_IRQHandler+0xd2>
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0202 	orr.w	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_UART_IRQHandler+0xf6>
 800422a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f043 0204 	orr.w	r2, r3, #4
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d011      	beq.n	8004272 <HAL_UART_IRQHandler+0x126>
 800424e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d105      	bne.n	8004266 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800425a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f043 0208 	orr.w	r2, r3, #8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 81ed 	beq.w	8004656 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_UART_IRQHandler+0x14e>
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fc5f 	bl	8004b58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d103      	bne.n	80042c6 <HAL_UART_IRQHandler+0x17a>
 80042be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04f      	beq.n	8004366 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fb67 	bl	800499a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d141      	bne.n	800435e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3314      	adds	r3, #20
 8004302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004306:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800430a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800431e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1d9      	bne.n	80042da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	2b00      	cmp	r3, #0
 800432c:	d013      	beq.n	8004356 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	4a7d      	ldr	r2, [pc, #500]	; (8004528 <HAL_UART_IRQHandler+0x3dc>)
 8004334:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe f94a 	bl	80025d4 <HAL_DMA_Abort_IT>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d016      	beq.n	8004374 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004350:	4610      	mov	r0, r2
 8004352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004354:	e00e      	b.n	8004374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f990 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	e00a      	b.n	8004374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f98c 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	e006      	b.n	8004374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f988 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004372:	e170      	b.n	8004656 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004374:	bf00      	nop
    return;
 8004376:	e16e      	b.n	8004656 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	2b01      	cmp	r3, #1
 800437e:	f040 814a 	bne.w	8004616 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8143 	beq.w	8004616 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 813c 	beq.w	8004616 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	f040 80b4 	bne.w	800452c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8140 	beq.w	800465a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043e2:	429a      	cmp	r2, r3
 80043e4:	f080 8139 	bcs.w	800465a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	f000 8088 	beq.w	800450e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800442a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800442e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004436:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1d9      	bne.n	80043fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800445a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3314      	adds	r3, #20
 800446a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800446e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004472:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004476:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e1      	bne.n	800444a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e3      	bne.n	8004486 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044de:	f023 0310 	bic.w	r3, r3, #16
 80044e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80044f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e3      	bne.n	80044cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	4618      	mov	r0, r3
 800450a:	f7fd fff3 	bl	80024f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004516:	b29b      	uxth	r3, r3
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	b29b      	uxth	r3, r3
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f8b6 	bl	8004690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004524:	e099      	b.n	800465a <HAL_UART_IRQHandler+0x50e>
 8004526:	bf00      	nop
 8004528:	08004a61 	.word	0x08004a61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004534:	b29b      	uxth	r3, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 808b 	beq.w	800465e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8086 	beq.w	800465e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004576:	647a      	str	r2, [r7, #68]	; 0x44
 8004578:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800457c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e3      	bne.n	8004552 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	623b      	str	r3, [r7, #32]
   return(result);
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045ae:	633a      	str	r2, [r7, #48]	; 0x30
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e3      	bne.n	800458a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	60fb      	str	r3, [r7, #12]
   return(result);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0310 	bic.w	r3, r3, #16
 80045e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045f4:	61fa      	str	r2, [r7, #28]
 80045f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	69b9      	ldr	r1, [r7, #24]
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	617b      	str	r3, [r7, #20]
   return(result);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e3      	bne.n	80045d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f83e 	bl	8004690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004614:	e023      	b.n	800465e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_UART_IRQHandler+0x4ea>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa2a 	bl	8004a88 <UART_Transmit_IT>
    return;
 8004634:	e014      	b.n	8004660 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00e      	beq.n	8004660 <HAL_UART_IRQHandler+0x514>
 8004642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa6a 	bl	8004b28 <UART_EndTransmit_IT>
    return;
 8004654:	e004      	b.n	8004660 <HAL_UART_IRQHandler+0x514>
    return;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <HAL_UART_IRQHandler+0x514>
      return;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <HAL_UART_IRQHandler+0x514>
      return;
 800465e:	bf00      	nop
  }
}
 8004660:	37e8      	adds	r7, #232	; 0xe8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop

08004668 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b090      	sub	sp, #64	; 0x40
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d137      	bne.n	8004734 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	2200      	movs	r2, #0
 80046c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	623b      	str	r3, [r7, #32]
   return(result);
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3314      	adds	r3, #20
 80046e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ea:	633a      	str	r2, [r7, #48]	; 0x30
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	60fb      	str	r3, [r7, #12]
   return(result);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
 8004716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471e:	61fa      	str	r2, [r7, #28]
 8004720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	69b9      	ldr	r1, [r7, #24]
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	617b      	str	r3, [r7, #20]
   return(result);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e5      	bne.n	80046fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004732:	e002      	b.n	800473a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004734:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004736:	f7fd fc01 	bl	8001f3c <HAL_UART_TxCpltCallback>
}
 800473a:	bf00      	nop
 800473c:	3740      	adds	r7, #64	; 0x40
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff ff89 	bl	8004668 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	bf0c      	ite	eq
 800477e:	2301      	moveq	r3, #1
 8004780:	2300      	movne	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b21      	cmp	r3, #33	; 0x21
 8004790:	d108      	bne.n	80047a4 <UART_DMAError+0x46>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800479e:	68b8      	ldr	r0, [r7, #8]
 80047a0:	f000 f8d3 	bl	800494a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b22      	cmp	r3, #34	; 0x22
 80047c4:	d108      	bne.n	80047d8 <UART_DMAError+0x7a>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	f000 f8e1 	bl	800499a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f043 0210 	orr.w	r2, r3, #16
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f7ff ff49 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b090      	sub	sp, #64	; 0x40
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004802:	e050      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d04c      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800480c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0x30>
 8004812:	f7fd fc4b 	bl	80020ac <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481e:	429a      	cmp	r2, r3
 8004820:	d241      	bcs.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004842:	637a      	str	r2, [r7, #52]	; 0x34
 8004844:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	613b      	str	r3, [r7, #16]
   return(result);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004876:	623a      	str	r2, [r7, #32]
 8004878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	69f9      	ldr	r1, [r7, #28]
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	61bb      	str	r3, [r7, #24]
   return(result);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e00f      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d09f      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3740      	adds	r7, #64	; 0x40
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	4613      	mov	r3, r2
 80048da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2222      	movs	r2, #34	; 0x22
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0220 	orr.w	r2, r2, #32
 800493a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800494a:	b480      	push	{r7}
 800494c:	b089      	sub	sp, #36	; 0x24
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	60bb      	str	r3, [r7, #8]
   return(result);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	61ba      	str	r2, [r7, #24]
 8004974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6979      	ldr	r1, [r7, #20]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	613b      	str	r3, [r7, #16]
   return(result);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e5      	bne.n	8004952 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800498e:	bf00      	nop
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800499a:	b480      	push	{r7}
 800499c:	b095      	sub	sp, #84	; 0x54
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c2:	643a      	str	r2, [r7, #64]	; 0x40
 80049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3314      	adds	r3, #20
 80049dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3314      	adds	r3, #20
 80049f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d119      	bne.n	8004a46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f023 0310 	bic.w	r3, r3, #16
 8004a28:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a32:	61ba      	str	r2, [r7, #24]
 8004a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a54:	bf00      	nop
 8004a56:	3754      	adds	r7, #84	; 0x54
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff fdfe 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b21      	cmp	r3, #33	; 0x21
 8004a9a:	d13e      	bne.n	8004b1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa4:	d114      	bne.n	8004ad0 <UART_Transmit_IT+0x48>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d110      	bne.n	8004ad0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	1c9a      	adds	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]
 8004ace:	e008      	b.n	8004ae2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	1c59      	adds	r1, r3, #1
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6211      	str	r1, [r2, #32]
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4619      	mov	r1, r3
 8004af0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e000      	b.n	8004b1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
  }
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7fd f9f7 	bl	8001f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b22      	cmp	r3, #34	; 0x22
 8004b6a:	f040 80ab 	bne.w	8004cc4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	d117      	bne.n	8004ba8 <UART_Receive_IT+0x50>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d113      	bne.n	8004ba8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	1c9a      	adds	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba6:	e026      	b.n	8004bf6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d007      	beq.n	8004bcc <UART_Receive_IT+0x74>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <UART_Receive_IT+0x82>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d106      	bne.n	8004bda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e008      	b.n	8004bec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4619      	mov	r1, r3
 8004c04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d15a      	bne.n	8004cc0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0220 	bic.w	r2, r2, #32
 8004c18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d135      	bne.n	8004cb6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f023 0310 	bic.w	r3, r3, #16
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	623a      	str	r2, [r7, #32]
 8004c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	69f9      	ldr	r1, [r7, #28]
 8004c76:	6a3a      	ldr	r2, [r7, #32]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d10a      	bne.n	8004ca8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fcee 	bl	8004690 <HAL_UARTEx_RxEventCallback>
 8004cb4:	e002      	b.n	8004cbc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fd f962 	bl	8001f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e002      	b.n	8004cc6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e000      	b.n	8004cc6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3730      	adds	r7, #48	; 0x30
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd4:	b0c0      	sub	sp, #256	; 0x100
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	68d9      	ldr	r1, [r3, #12]
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	ea40 0301 	orr.w	r3, r0, r1
 8004cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d28:	f021 010c 	bic.w	r1, r1, #12
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d36:	430b      	orrs	r3, r1
 8004d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	6999      	ldr	r1, [r3, #24]
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	ea40 0301 	orr.w	r3, r0, r1
 8004d56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b8f      	ldr	r3, [pc, #572]	; (8004f9c <UART_SetConfig+0x2cc>)
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d005      	beq.n	8004d70 <UART_SetConfig+0xa0>
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b8d      	ldr	r3, [pc, #564]	; (8004fa0 <UART_SetConfig+0x2d0>)
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d104      	bne.n	8004d7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7fe f996 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8004d74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d78:	e003      	b.n	8004d82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d7a:	f7fe f97d 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8004d7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d8c:	f040 810c 	bne.w	8004fa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004da2:	4622      	mov	r2, r4
 8004da4:	462b      	mov	r3, r5
 8004da6:	1891      	adds	r1, r2, r2
 8004da8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004daa:	415b      	adcs	r3, r3
 8004dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004db2:	4621      	mov	r1, r4
 8004db4:	eb12 0801 	adds.w	r8, r2, r1
 8004db8:	4629      	mov	r1, r5
 8004dba:	eb43 0901 	adc.w	r9, r3, r1
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dd2:	4690      	mov	r8, r2
 8004dd4:	4699      	mov	r9, r3
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	eb18 0303 	adds.w	r3, r8, r3
 8004ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004de0:	462b      	mov	r3, r5
 8004de2:	eb49 0303 	adc.w	r3, r9, r3
 8004de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004df6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dfe:	460b      	mov	r3, r1
 8004e00:	18db      	adds	r3, r3, r3
 8004e02:	653b      	str	r3, [r7, #80]	; 0x50
 8004e04:	4613      	mov	r3, r2
 8004e06:	eb42 0303 	adc.w	r3, r2, r3
 8004e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e14:	f7fb fef8 	bl	8000c08 <__aeabi_uldivmod>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4b61      	ldr	r3, [pc, #388]	; (8004fa4 <UART_SetConfig+0x2d4>)
 8004e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	011c      	lsls	r4, r3, #4
 8004e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	1891      	adds	r1, r2, r2
 8004e3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e40:	415b      	adcs	r3, r3
 8004e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e48:	4641      	mov	r1, r8
 8004e4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e4e:	4649      	mov	r1, r9
 8004e50:	eb43 0b01 	adc.w	fp, r3, r1
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e68:	4692      	mov	sl, r2
 8004e6a:	469b      	mov	fp, r3
 8004e6c:	4643      	mov	r3, r8
 8004e6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e76:	464b      	mov	r3, r9
 8004e78:	eb4b 0303 	adc.w	r3, fp, r3
 8004e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e94:	460b      	mov	r3, r1
 8004e96:	18db      	adds	r3, r3, r3
 8004e98:	643b      	str	r3, [r7, #64]	; 0x40
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ea6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eaa:	f7fb fead 	bl	8000c08 <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4b3b      	ldr	r3, [pc, #236]	; (8004fa4 <UART_SetConfig+0x2d4>)
 8004eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	2264      	movs	r2, #100	; 0x64
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	1acb      	subs	r3, r1, r3
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <UART_SetConfig+0x2d4>)
 8004ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed8:	441c      	add	r4, r3
 8004eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ee4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ee8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	1891      	adds	r1, r2, r2
 8004ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ef4:	415b      	adcs	r3, r3
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004efc:	4641      	mov	r1, r8
 8004efe:	1851      	adds	r1, r2, r1
 8004f00:	6339      	str	r1, [r7, #48]	; 0x30
 8004f02:	4649      	mov	r1, r9
 8004f04:	414b      	adcs	r3, r1
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f14:	4659      	mov	r1, fp
 8004f16:	00cb      	lsls	r3, r1, #3
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1e:	4651      	mov	r1, sl
 8004f20:	00ca      	lsls	r2, r1, #3
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	4642      	mov	r2, r8
 8004f2a:	189b      	adds	r3, r3, r2
 8004f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f30:	464b      	mov	r3, r9
 8004f32:	460a      	mov	r2, r1
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f50:	460b      	mov	r3, r1
 8004f52:	18db      	adds	r3, r3, r3
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f56:	4613      	mov	r3, r2
 8004f58:	eb42 0303 	adc.w	r3, r2, r3
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f66:	f7fb fe4f 	bl	8000c08 <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <UART_SetConfig+0x2d4>)
 8004f70:	fba3 1302 	umull	r1, r3, r3, r2
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	2164      	movs	r1, #100	; 0x64
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	3332      	adds	r3, #50	; 0x32
 8004f82:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <UART_SetConfig+0x2d4>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	f003 0207 	and.w	r2, r3, #7
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4422      	add	r2, r4
 8004f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f98:	e106      	b.n	80051a8 <UART_SetConfig+0x4d8>
 8004f9a:	bf00      	nop
 8004f9c:	40011000 	.word	0x40011000
 8004fa0:	40011400 	.word	0x40011400
 8004fa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fba:	4642      	mov	r2, r8
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	1891      	adds	r1, r2, r2
 8004fc0:	6239      	str	r1, [r7, #32]
 8004fc2:	415b      	adcs	r3, r3
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fca:	4641      	mov	r1, r8
 8004fcc:	1854      	adds	r4, r2, r1
 8004fce:	4649      	mov	r1, r9
 8004fd0:	eb43 0501 	adc.w	r5, r3, r1
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	00eb      	lsls	r3, r5, #3
 8004fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe2:	00e2      	lsls	r2, r4, #3
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	461d      	mov	r5, r3
 8004fe8:	4643      	mov	r3, r8
 8004fea:	18e3      	adds	r3, r4, r3
 8004fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	eb45 0303 	adc.w	r3, r5, r3
 8004ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005006:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005016:	4629      	mov	r1, r5
 8005018:	008b      	lsls	r3, r1, #2
 800501a:	4621      	mov	r1, r4
 800501c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005020:	4621      	mov	r1, r4
 8005022:	008a      	lsls	r2, r1, #2
 8005024:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005028:	f7fb fdee 	bl	8000c08 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4b60      	ldr	r3, [pc, #384]	; (80051b4 <UART_SetConfig+0x4e4>)
 8005032:	fba3 2302 	umull	r2, r3, r3, r2
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	011c      	lsls	r4, r3, #4
 800503a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005044:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005048:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800504c:	4642      	mov	r2, r8
 800504e:	464b      	mov	r3, r9
 8005050:	1891      	adds	r1, r2, r2
 8005052:	61b9      	str	r1, [r7, #24]
 8005054:	415b      	adcs	r3, r3
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800505c:	4641      	mov	r1, r8
 800505e:	1851      	adds	r1, r2, r1
 8005060:	6139      	str	r1, [r7, #16]
 8005062:	4649      	mov	r1, r9
 8005064:	414b      	adcs	r3, r1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005074:	4659      	mov	r1, fp
 8005076:	00cb      	lsls	r3, r1, #3
 8005078:	4651      	mov	r1, sl
 800507a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507e:	4651      	mov	r1, sl
 8005080:	00ca      	lsls	r2, r1, #3
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	4603      	mov	r3, r0
 8005088:	4642      	mov	r2, r8
 800508a:	189b      	adds	r3, r3, r2
 800508c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005090:	464b      	mov	r3, r9
 8005092:	460a      	mov	r2, r1
 8005094:	eb42 0303 	adc.w	r3, r2, r3
 8005098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050b4:	4649      	mov	r1, r9
 80050b6:	008b      	lsls	r3, r1, #2
 80050b8:	4641      	mov	r1, r8
 80050ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050be:	4641      	mov	r1, r8
 80050c0:	008a      	lsls	r2, r1, #2
 80050c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050c6:	f7fb fd9f 	bl	8000c08 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	4b38      	ldr	r3, [pc, #224]	; (80051b4 <UART_SetConfig+0x4e4>)
 80050d2:	fba3 2301 	umull	r2, r3, r3, r1
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2264      	movs	r2, #100	; 0x64
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	1acb      	subs	r3, r1, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	; 0x32
 80050e4:	4a33      	ldr	r2, [pc, #204]	; (80051b4 <UART_SetConfig+0x4e4>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f0:	441c      	add	r4, r3
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	673b      	str	r3, [r7, #112]	; 0x70
 80050fa:	677a      	str	r2, [r7, #116]	; 0x74
 80050fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005100:	4642      	mov	r2, r8
 8005102:	464b      	mov	r3, r9
 8005104:	1891      	adds	r1, r2, r2
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	415b      	adcs	r3, r3
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005110:	4641      	mov	r1, r8
 8005112:	1851      	adds	r1, r2, r1
 8005114:	6039      	str	r1, [r7, #0]
 8005116:	4649      	mov	r1, r9
 8005118:	414b      	adcs	r3, r1
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005128:	4659      	mov	r1, fp
 800512a:	00cb      	lsls	r3, r1, #3
 800512c:	4651      	mov	r1, sl
 800512e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005132:	4651      	mov	r1, sl
 8005134:	00ca      	lsls	r2, r1, #3
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	4603      	mov	r3, r0
 800513c:	4642      	mov	r2, r8
 800513e:	189b      	adds	r3, r3, r2
 8005140:	66bb      	str	r3, [r7, #104]	; 0x68
 8005142:	464b      	mov	r3, r9
 8005144:	460a      	mov	r2, r1
 8005146:	eb42 0303 	adc.w	r3, r2, r3
 800514a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	663b      	str	r3, [r7, #96]	; 0x60
 8005156:	667a      	str	r2, [r7, #100]	; 0x64
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005164:	4649      	mov	r1, r9
 8005166:	008b      	lsls	r3, r1, #2
 8005168:	4641      	mov	r1, r8
 800516a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800516e:	4641      	mov	r1, r8
 8005170:	008a      	lsls	r2, r1, #2
 8005172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005176:	f7fb fd47 	bl	8000c08 <__aeabi_uldivmod>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <UART_SetConfig+0x4e4>)
 8005180:	fba3 1302 	umull	r1, r3, r3, r2
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	2164      	movs	r1, #100	; 0x64
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	3332      	adds	r3, #50	; 0x32
 8005192:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <UART_SetConfig+0x4e4>)
 8005194:	fba2 2303 	umull	r2, r3, r2, r3
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	f003 020f 	and.w	r2, r3, #15
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4422      	add	r2, r4
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051ae:	46bd      	mov	sp, r7
 80051b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b4:	51eb851f 	.word	0x51eb851f

080051b8 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 80051c0:	23ae      	movs	r3, #174	; 0xae
 80051c2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d006      	beq.n	80051d8 <gos_driverInit+0x20>
    {
        memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 80051ca:	221c      	movs	r2, #28
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	4805      	ldr	r0, [pc, #20]	; (80051e4 <gos_driverInit+0x2c>)
 80051d0:	f005 feea 	bl	800afa8 <memcpy>
        driverInitResult = GOS_SUCCESS;
 80051d4:	2355      	movs	r3, #85	; 0x55
 80051d6:	73fb      	strb	r3, [r7, #15]
    }

    return driverInitResult;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20001a5c 	.word	0x20001a5c

080051e8 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 80051ee:	23ae      	movs	r3, #174	; 0xae
 80051f0:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 80051f2:	2301      	movs	r3, #1
 80051f4:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80051f6:	2301      	movs	r3, #1
 80051f8:	80fb      	strh	r3, [r7, #6]
 80051fa:	e031      	b.n	8005260 <gos_kernelInit+0x78>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	4a67      	ldr	r2, [pc, #412]	; (800539c <gos_kernelInit+0x1b4>)
 8005200:	216e      	movs	r1, #110	; 0x6e
 8005202:	fb01 f303 	mul.w	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	2200      	movs	r2, #0
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	2200      	movs	r2, #0
 800520e:	805a      	strh	r2, [r3, #2]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	4a62      	ldr	r2, [pc, #392]	; (800539c <gos_kernelInit+0x1b4>)
 8005214:	216e      	movs	r1, #110	; 0x6e
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	4413      	add	r3, r2
 800521c:	3306      	adds	r3, #6
 800521e:	22ff      	movs	r2, #255	; 0xff
 8005220:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	4a5d      	ldr	r2, [pc, #372]	; (800539c <gos_kernelInit+0x1b4>)
 8005226:	216e      	movs	r1, #110	; 0x6e
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	4413      	add	r3, r2
 800522e:	3307      	adds	r3, #7
 8005230:	22ff      	movs	r2, #255	; 0xff
 8005232:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	4a59      	ldr	r2, [pc, #356]	; (800539c <gos_kernelInit+0x1b4>)
 8005238:	216e      	movs	r1, #110	; 0x6e
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3304      	adds	r3, #4
 8005242:	2205      	movs	r2, #5
 8005244:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	4a54      	ldr	r2, [pc, #336]	; (800539c <gos_kernelInit+0x1b4>)
 800524a:	216e      	movs	r1, #110	; 0x6e
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	4413      	add	r3, r2
 8005252:	332a      	adds	r3, #42	; 0x2a
 8005254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005258:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	3301      	adds	r3, #1
 800525e:	80fb      	strh	r3, [r7, #6]
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	2b23      	cmp	r3, #35	; 0x23
 8005264:	d9ca      	bls.n	80051fc <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 8005266:	4b4e      	ldr	r3, [pc, #312]	; (80053a0 <gos_kernelInit+0x1b8>)
 8005268:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	3b04      	subs	r3, #4
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005276:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_kernelIdleTask; // PC
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	3b04      	subs	r3, #4
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	4a49      	ldr	r2, [pc, #292]	; (80053a4 <gos_kernelInit+0x1bc>)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	3b04      	subs	r3, #4
 8005288:	603b      	str	r3, [r7, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f06f 0202 	mvn.w	r2, #2
 8005290:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	3b04      	subs	r3, #4
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800529e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	3b04      	subs	r3, #4
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80052ac:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	3b04      	subs	r3, #4
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80052ba:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	3b04      	subs	r3, #4
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80052c8:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	3b04      	subs	r3, #4
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	3b04      	subs	r3, #4
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80052e2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	3b04      	subs	r3, #4
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80052f0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	3b04      	subs	r3, #4
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80052fe:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	3b04      	subs	r3, #4
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800530c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	3b04      	subs	r3, #4
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800531a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	3b04      	subs	r3, #4
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8005328:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	3b04      	subs	r3, #4
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8005336:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	3b04      	subs	r3, #4
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8005344:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	4a14      	ldr	r2, [pc, #80]	; (800539c <gos_kernelInit+0x1b4>)
 800534a:	6413      	str	r3, [r2, #64]	; 0x40

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 800534c:	4b13      	ldr	r3, [pc, #76]	; (800539c <gos_kernelInit+0x1b4>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	4a12      	ldr	r2, [pc, #72]	; (800539c <gos_kernelInit+0x1b4>)
 8005352:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	3340      	adds	r3, #64	; 0x40
 800535a:	4a10      	ldr	r2, [pc, #64]	; (800539c <gos_kernelInit+0x1b4>)
 800535c:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <gos_kernelInit+0x1c0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <gos_kernelInit+0x1c0>)
 8005366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <gos_kernelInit+0x1c0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0d      	ldr	r2, [pc, #52]	; (80053a8 <gos_kernelInit+0x1c0>)
 8005372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <gos_kernelInit+0x1c0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <gos_kernelInit+0x1c0>)
 800537e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005382:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <gos_kernelInit+0x1c4>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 800538a:	2355      	movs	r3, #85	; 0x55
 800538c:	717b      	strb	r3, [r7, #5]

    return initResult;
 800538e:	797b      	ldrb	r3, [r7, #5]
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	200002cc 	.word	0x200002cc
 80053a0:	2001ee00 	.word	0x2001ee00
 80053a4:	0800773d 	.word	0x0800773d
 80053a8:	e000ed24 	.word	0xe000ed24
 80053ac:	20001a7a 	.word	0x20001a7a

080053b0 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 80053b6:	23ae      	movs	r3, #174	; 0xae
 80053b8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <gos_kernelStart+0x6c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 80053c0:	f002 f830 	bl	8007424 <gos_kernelGetCurrentPsp>
 80053c4:	f380 8809 	msr	PSP, r0
 80053c8:	f3ef 8014 	mrs	r0, CONTROL
 80053cc:	f040 0002 	orr.w	r0, r0, #2
 80053d0:	f380 8814 	msr	CONTROL, r0
 80053d4:	f3ef 8014 	mrs	r0, CONTROL
 80053d8:	f040 0001 	orr.w	r0, r0, #1
 80053dc:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 80053e0:	4b0e      	ldr	r3, [pc, #56]	; (800541c <gos_kernelStart+0x6c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a0e      	ldr	r2, [pc, #56]	; (8005420 <gos_kernelStart+0x70>)
 80053e6:	216e      	movs	r1, #110	; 0x6e
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    gos_timerDriverSysTimerGet(&sysTimerValue);
 80053f2:	480c      	ldr	r0, [pc, #48]	; (8005424 <gos_kernelStart+0x74>)
 80053f4:	f004 fee4 	bl	800a1c0 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <gos_kernelStart+0x78>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <gos_kernelStart+0x5c>
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <gos_kernelStart+0x78>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	3b01      	subs	r3, #1
 8005406:	b2da      	uxtb	r2, r3
 8005408:	4b07      	ldr	r3, [pc, #28]	; (8005428 <gos_kernelStart+0x78>)
 800540a:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 8005410:	79fb      	ldrb	r3, [r7, #7]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20001a80 	.word	0x20001a80
 8005420:	200002cc 	.word	0x200002cc
 8005424:	20001a84 	.word	0x20001a84
 8005428:	20001a7a 	.word	0x20001a7a

0800542c <gos_kernelTaskRegister>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelTaskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 8005436:	2355      	movs	r3, #85	; 0x55
 8005438:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 800543a:	2300      	movs	r3, #0
 800543c:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 800543e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8005442:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_kernelCheckTaskDescriptor(taskDescriptor) == GOS_ERROR)
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f001 ffb5 	bl	80073b8 <gos_kernelCheckTaskDescriptor>
 800544e:	4603      	mov	r3, r0
 8005450:	2bae      	cmp	r3, #174	; 0xae
 8005452:	d102      	bne.n	800545a <gos_kernelTaskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 8005454:	23ae      	movs	r3, #174	; 0xae
 8005456:	75fb      	strb	r3, [r7, #23]
 8005458:	e16c      	b.n	8005734 <gos_kernelTaskRegister+0x308>
    }
    else
    {
        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800545a:	2300      	movs	r3, #0
 800545c:	82bb      	strh	r3, [r7, #20]
 800545e:	e017      	b.n	8005490 <gos_kernelTaskRegister+0x64>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8005460:	8abb      	ldrh	r3, [r7, #20]
 8005462:	4a7f      	ldr	r2, [pc, #508]	; (8005660 <gos_kernelTaskRegister+0x234>)
 8005464:	216e      	movs	r1, #110	; 0x6e
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	4413      	add	r3, r2
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d012      	beq.n	8005498 <gos_kernelTaskRegister+0x6c>
            {
                break;
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 8005472:	8abb      	ldrh	r3, [r7, #20]
 8005474:	4a7a      	ldr	r2, [pc, #488]	; (8005660 <gos_kernelTaskRegister+0x234>)
 8005476:	216e      	movs	r1, #110	; 0x6e
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	334c      	adds	r3, #76	; 0x4c
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800548a:	8abb      	ldrh	r3, [r7, #20]
 800548c:	3301      	adds	r3, #1
 800548e:	82bb      	strh	r3, [r7, #20]
 8005490:	8abb      	ldrh	r3, [r7, #20]
 8005492:	2b23      	cmp	r3, #35	; 0x23
 8005494:	d9e4      	bls.n	8005460 <gos_kernelTaskRegister+0x34>
 8005496:	e000      	b.n	800549a <gos_kernelTaskRegister+0x6e>
                break;
 8005498:	bf00      	nop
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 800549a:	8abb      	ldrh	r3, [r7, #20]
 800549c:	2b23      	cmp	r3, #35	; 0x23
 800549e:	d902      	bls.n	80054a6 <gos_kernelTaskRegister+0x7a>
        {
            taskRegisterResult = GOS_ERROR;
 80054a0:	23ae      	movs	r3, #174	; 0xae
 80054a2:	75fb      	strb	r3, [r7, #23]
 80054a4:	e146      	b.n	8005734 <gos_kernelTaskRegister+0x308>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80054ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054b0:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3b04      	subs	r3, #4
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054be:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3b04      	subs	r3, #4
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f06f 0202 	mvn.w	r2, #2
 80054da:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b04      	subs	r3, #4
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80054e8:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3b04      	subs	r3, #4
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80054f6:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3b04      	subs	r3, #4
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8005504:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3b04      	subs	r3, #4
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8005512:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b04      	subs	r3, #4
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3b04      	subs	r3, #4
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800552c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3b04      	subs	r3, #4
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800553a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3b04      	subs	r3, #4
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8005548:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3b04      	subs	r3, #4
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8005556:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3b04      	subs	r3, #4
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8005564:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3b04      	subs	r3, #4
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8005572:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3b04      	subs	r3, #4
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8005580:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3b04      	subs	r3, #4
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800558e:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 8005590:	8abb      	ldrh	r3, [r7, #20]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4932      	ldr	r1, [pc, #200]	; (8005660 <gos_kernelTaskRegister+0x234>)
 8005596:	206e      	movs	r0, #110	; 0x6e
 8005598:	fb00 f303 	mul.w	r3, r0, r3
 800559c:	440b      	add	r3, r1
 800559e:	3340      	adds	r3, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 80055a2:	8abb      	ldrh	r3, [r7, #20]
 80055a4:	4a2e      	ldr	r2, [pc, #184]	; (8005660 <gos_kernelTaskRegister+0x234>)
 80055a6:	216e      	movs	r1, #110	; 0x6e
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	3304      	adds	r3, #4
 80055b0:	220a      	movs	r2, #10
 80055b2:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 80055b4:	8abb      	ldrh	r3, [r7, #20]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	4929      	ldr	r1, [pc, #164]	; (8005660 <gos_kernelTaskRegister+0x234>)
 80055bc:	206e      	movs	r0, #110	; 0x6e
 80055be:	fb00 f303 	mul.w	r3, r0, r3
 80055c2:	440b      	add	r3, r1
 80055c4:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 80055c6:	8abb      	ldrh	r3, [r7, #20]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	7990      	ldrb	r0, [r2, #6]
 80055cc:	4a24      	ldr	r2, [pc, #144]	; (8005660 <gos_kernelTaskRegister+0x234>)
 80055ce:	216e      	movs	r1, #110	; 0x6e
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	3306      	adds	r3, #6
 80055d8:	4602      	mov	r2, r0
 80055da:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 80055dc:	8abb      	ldrh	r3, [r7, #20]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	7990      	ldrb	r0, [r2, #6]
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <gos_kernelTaskRegister+0x234>)
 80055e4:	216e      	movs	r1, #110	; 0x6e
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	3307      	adds	r3, #7
 80055ee:	4602      	mov	r2, r0
 80055f0:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 80055f2:	8abb      	ldrh	r3, [r7, #20]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80055fa:	b290      	uxth	r0, r2
 80055fc:	4a18      	ldr	r2, [pc, #96]	; (8005660 <gos_kernelTaskRegister+0x234>)
 80055fe:	216e      	movs	r1, #110	; 0x6e
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	334c      	adds	r3, #76	; 0x4c
 8005608:	4602      	mov	r2, r0
 800560a:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 800560c:	8abb      	ldrh	r3, [r7, #20]
 800560e:	8aba      	ldrh	r2, [r7, #20]
 8005610:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8005614:	b290      	uxth	r0, r2
 8005616:	4a12      	ldr	r2, [pc, #72]	; (8005660 <gos_kernelTaskRegister+0x234>)
 8005618:	216e      	movs	r1, #110	; 0x6e
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	4413      	add	r3, r2
 8005620:	332a      	adds	r3, #42	; 0x2a
 8005622:	4602      	mov	r2, r0
 8005624:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 8005626:	8abb      	ldrh	r3, [r7, #20]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	8912      	ldrh	r2, [r2, #8]
 800562c:	b290      	uxth	r0, r2
 800562e:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <gos_kernelTaskRegister+0x234>)
 8005630:	216e      	movs	r1, #110	; 0x6e
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3308      	adds	r3, #8
 800563a:	4602      	mov	r2, r0
 800563c:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <gos_kernelTaskRegister+0x238>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 800564a:	8abb      	ldrh	r3, [r7, #20]
 800564c:	4a04      	ldr	r2, [pc, #16]	; (8005660 <gos_kernelTaskRegister+0x234>)
 800564e:	216e      	movs	r1, #110	; 0x6e
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	335e      	adds	r3, #94	; 0x5e
 8005658:	f242 7210 	movw	r2, #10000	; 0x2710
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	e00e      	b.n	800567e <gos_kernelTaskRegister+0x252>
 8005660:	200002cc 	.word	0x200002cc
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 8005664:	8abb      	ldrh	r3, [r7, #20]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800566c:	b290      	uxth	r0, r2
 800566e:	4a34      	ldr	r2, [pc, #208]	; (8005740 <gos_kernelTaskRegister+0x314>)
 8005670:	216e      	movs	r1, #110	; 0x6e
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	335e      	adds	r3, #94	; 0x5e
 800567a:	4602      	mov	r2, r0
 800567c:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	330a      	adds	r3, #10
 8005682:	2b00      	cmp	r3, #0
 8005684:	d015      	beq.n	80056b2 <gos_kernelTaskRegister+0x286>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	330a      	adds	r3, #10
 800568a:	4618      	mov	r0, r3
 800568c:	f7fa fe20 	bl	80002d0 <strlen>
 8005690:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 8005692:	2b20      	cmp	r3, #32
 8005694:	d80d      	bhi.n	80056b2 <gos_kernelTaskRegister+0x286>
            {
                strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 8005696:	8abb      	ldrh	r3, [r7, #20]
 8005698:	226e      	movs	r2, #110	; 0x6e
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	3308      	adds	r3, #8
 80056a0:	4a27      	ldr	r2, [pc, #156]	; (8005740 <gos_kernelTaskRegister+0x314>)
 80056a2:	4413      	add	r3, r2
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	330a      	adds	r3, #10
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f005 fc73 	bl	800af98 <strcpy>
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 80056b2:	8abb      	ldrh	r3, [r7, #20]
 80056b4:	4a22      	ldr	r2, [pc, #136]	; (8005740 <gos_kernelTaskRegister+0x314>)
 80056b6:	216e      	movs	r1, #110	; 0x6e
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	4413      	add	r3, r2
 80056be:	332a      	adds	r3, #42	; 0x2a
 80056c0:	881a      	ldrh	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	855a      	strh	r2, [r3, #42]	; 0x2a
            if (taskId != NULL)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <gos_kernelTaskRegister+0x2b4>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 80056cc:	8abb      	ldrh	r3, [r7, #20]
 80056ce:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <gos_kernelTaskRegister+0x314>)
 80056d0:	216e      	movs	r1, #110	; 0x6e
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	332a      	adds	r3, #42	; 0x2a
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	801a      	strh	r2, [r3, #0]
            }
            if (taskDescriptor->taskIdEx != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <gos_kernelTaskRegister+0x2d2>
            {
                *taskDescriptor->taskIdEx = taskDescriptors[taskIndex].taskId;
 80056e8:	8aba      	ldrh	r2, [r7, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	4914      	ldr	r1, [pc, #80]	; (8005740 <gos_kernelTaskRegister+0x314>)
 80056f0:	206e      	movs	r0, #110	; 0x6e
 80056f2:	fb00 f202 	mul.w	r2, r0, r2
 80056f6:	440a      	add	r2, r1
 80056f8:	322a      	adds	r2, #42	; 0x2a
 80056fa:	8812      	ldrh	r2, [r2, #0]
 80056fc:	801a      	strh	r2, [r3, #0]
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 80056fe:	8abb      	ldrh	r3, [r7, #20]
 8005700:	4a0f      	ldr	r2, [pc, #60]	; (8005740 <gos_kernelTaskRegister+0x314>)
 8005702:	216e      	movs	r1, #110	; 0x6e
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	3340      	adds	r3, #64	; 0x40
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	8aba      	ldrh	r2, [r7, #20]
 8005710:	490b      	ldr	r1, [pc, #44]	; (8005740 <gos_kernelTaskRegister+0x314>)
 8005712:	206e      	movs	r0, #110	; 0x6e
 8005714:	fb00 f202 	mul.w	r2, r0, r2
 8005718:	440a      	add	r2, r1
 800571a:	324c      	adds	r2, #76	; 0x4c
 800571c:	8812      	ldrh	r2, [r2, #0]
 800571e:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8005720:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8005722:	3240      	adds	r2, #64	; 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8005724:	4906      	ldr	r1, [pc, #24]	; (8005740 <gos_kernelTaskRegister+0x314>)
 8005726:	206e      	movs	r0, #110	; 0x6e
 8005728:	fb00 f303 	mul.w	r3, r0, r3
 800572c:	440b      	add	r3, r1
 800572e:	3360      	adds	r3, #96	; 0x60
 8005730:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200002cc 	.word	0x200002cc

08005744 <gos_kernelTaskSleep>:

/*
 * Function: gos_kernelTaskSleep
 */
GOS_INLINE gos_result_t gos_kernelTaskSleep (gos_taskSleepTick_t sleepTicks)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 800574c:	23ae      	movs	r3, #174	; 0xae
 800574e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (currentTaskIndex > 0u)
 8005750:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <gos_kernelTaskSleep+0xcc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d053      	beq.n	8005800 <gos_kernelTaskSleep+0xbc>
    {
        GOS_ATOMIC_ENTER
 8005758:	4b2e      	ldr	r3, [pc, #184]	; (8005814 <gos_kernelTaskSleep+0xd0>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	3301      	adds	r3, #1
 800575e:	b2da      	uxtb	r2, r3
 8005760:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <gos_kernelTaskSleep+0xd0>)
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	b672      	cpsid	i
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	f3bf 8f6f 	isb	sy
        {
            if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 800576e:	4b28      	ldr	r3, [pc, #160]	; (8005810 <gos_kernelTaskSleep+0xcc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a29      	ldr	r2, [pc, #164]	; (8005818 <gos_kernelTaskSleep+0xd4>)
 8005774:	216e      	movs	r1, #110	; 0x6e
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	4413      	add	r3, r2
 800577c:	3304      	adds	r3, #4
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b0a      	cmp	r3, #10
 8005782:	d121      	bne.n	80057c8 <gos_kernelTaskSleep+0x84>
            {
                taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 8005784:	4b22      	ldr	r3, [pc, #136]	; (8005810 <gos_kernelTaskSleep+0xcc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a23      	ldr	r2, [pc, #140]	; (8005818 <gos_kernelTaskSleep+0xd4>)
 800578a:	216e      	movs	r1, #110	; 0x6e
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	4413      	add	r3, r2
 8005792:	3304      	adds	r3, #4
 8005794:	2216      	movs	r2, #22
 8005796:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 8005798:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <gos_kernelTaskSleep+0xcc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <gos_kernelTaskSleep+0xd4>)
 800579e:	216e      	movs	r1, #110	; 0x6e
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	3330      	adds	r3, #48	; 0x30
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	601a      	str	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <gos_kernelTaskSleep+0xcc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a19      	ldr	r2, [pc, #100]	; (8005818 <gos_kernelTaskSleep+0xd4>)
 80057b2:	216e      	movs	r1, #110	; 0x6e
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	4413      	add	r3, r2
 80057ba:	3334      	adds	r3, #52	; 0x34
 80057bc:	2200      	movs	r2, #0
 80057be:	801a      	strh	r2, [r3, #0]
 80057c0:	2200      	movs	r2, #0
 80057c2:	805a      	strh	r2, [r3, #2]
                taskSleepResult = GOS_SUCCESS;
 80057c4:	2355      	movs	r3, #85	; 0x55
 80057c6:	73fb      	strb	r3, [r7, #15]
            }
        }
        GOS_ATOMIC_EXIT
 80057c8:	b662      	cpsie	i
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <gos_kernelTaskSleep+0xd0>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <gos_kernelTaskSleep+0x9a>
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <gos_kernelTaskSleep+0xd0>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <gos_kernelTaskSleep+0xd0>)
 80057dc:	701a      	strb	r2, [r3, #0]

        if (taskSleepResult == GOS_SUCCESS)
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	2b55      	cmp	r3, #85	; 0x55
 80057e2:	d10d      	bne.n	8005800 <gos_kernelTaskSleep+0xbc>
 80057e4:	2309      	movs	r3, #9
 80057e6:	73bb      	strb	r3, [r7, #14]
GOS_STATIC_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 80057e8:	7bbb      	ldrb	r3, [r7, #14]
 80057ea:	2b16      	cmp	r3, #22
 80057ec:	d106      	bne.n	80057fc <gos_kernelTaskSleep+0xb8>
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <gos_kernelTaskSleep+0xd8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a0a      	ldr	r2, [pc, #40]	; (800581c <gos_kernelTaskSleep+0xd8>)
 80057f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f8:	6013      	str	r3, [r2, #0]
}
 80057fa:	e000      	b.n	80057fe <gos_kernelTaskSleep+0xba>
    gos_ported_reschedule(privilege);
 80057fc:	dfff      	svc	255	; 0xff
}
 80057fe:	bf00      	nop
    return taskSleepResult;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20001a80 	.word	0x20001a80
 8005814:	20001a7a 	.word	0x20001a7a
 8005818:	200002cc 	.word	0x200002cc
 800581c:	e000ed04 	.word	0xe000ed04

08005820 <gos_kernelTaskWakeup>:
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af02      	add	r7, sp, #8
 8005826:	4603      	mov	r3, r0
 8005828:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskWakeupResult = GOS_ERROR;
 800582a:	23ae      	movs	r3, #174	; 0xae
 800582c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <gos_kernelTaskWakeup+0xf8>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	3301      	adds	r3, #1
 8005838:	b2da      	uxtb	r2, r3
 800583a:	4b37      	ldr	r3, [pc, #220]	; (8005918 <gos_kernelTaskWakeup+0xf8>)
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	b672      	cpsid	i
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584e:	d953      	bls.n	80058f8 <gos_kernelTaskWakeup+0xd8>
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	f248 0223 	movw	r2, #32803	; 0x8023
 8005856:	4293      	cmp	r3, r2
 8005858:	d84e      	bhi.n	80058f8 <gos_kernelTaskWakeup+0xd8>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005860:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005862:	4b2e      	ldr	r3, [pc, #184]	; (800591c <gos_kernelTaskWakeup+0xfc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <gos_kernelTaskWakeup+0x100>)
 8005868:	216e      	movs	r1, #110	; 0x6e
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	3308      	adds	r3, #8
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b21b      	sxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	db03      	blt.n	8005882 <gos_kernelTaskWakeup+0x62>
            inIsr > 0)
 800587a:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <gos_kernelTaskWakeup+0x104>)
 800587c:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800587e:	2b00      	cmp	r3, #0
 8005880:	d015      	beq.n	80058ae <gos_kernelTaskWakeup+0x8e>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8005882:	4a27      	ldr	r2, [pc, #156]	; (8005920 <gos_kernelTaskWakeup+0x100>)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	216e      	movs	r1, #110	; 0x6e
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	4413      	add	r3, r2
 800588e:	3304      	adds	r3, #4
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b16      	cmp	r3, #22
 8005894:	d130      	bne.n	80058f8 <gos_kernelTaskWakeup+0xd8>
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8005896:	4a22      	ldr	r2, [pc, #136]	; (8005920 <gos_kernelTaskWakeup+0x100>)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	216e      	movs	r1, #110	; 0x6e
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	4413      	add	r3, r2
 80058a2:	3304      	adds	r3, #4
 80058a4:	220a      	movs	r2, #10
 80058a6:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 80058a8:	2355      	movs	r3, #85	; 0x55
 80058aa:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 80058ac:	e024      	b.n	80058f8 <gos_kernelTaskWakeup+0xd8>
            GOS_ATOMIC_EXIT
 80058ae:	b662      	cpsie	i
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <gos_kernelTaskWakeup+0xf8>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <gos_kernelTaskWakeup+0xa4>
 80058b8:	4b17      	ldr	r3, [pc, #92]	; (8005918 <gos_kernelTaskWakeup+0xf8>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	3b01      	subs	r3, #1
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4b15      	ldr	r3, [pc, #84]	; (8005918 <gos_kernelTaskWakeup+0xf8>)
 80058c2:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 80058c4:	4b15      	ldr	r3, [pc, #84]	; (800591c <gos_kernelTaskWakeup+0xfc>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	226e      	movs	r2, #110	; 0x6e
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	3308      	adds	r3, #8
 80058d0:	4a13      	ldr	r2, [pc, #76]	; (8005920 <gos_kernelTaskWakeup+0x100>)
 80058d2:	4413      	add	r3, r2
 80058d4:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	216e      	movs	r1, #110	; 0x6e
 80058da:	fb01 f202 	mul.w	r2, r1, r2
 80058de:	3208      	adds	r2, #8
 80058e0:	490f      	ldr	r1, [pc, #60]	; (8005920 <gos_kernelTaskWakeup+0x100>)
 80058e2:	440a      	add	r2, r1
 80058e4:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 80058e6:	9201      	str	r2, [sp, #4]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <gos_kernelTaskWakeup+0x108>)
 80058ec:	f240 225f 	movw	r2, #607	; 0x25f
 80058f0:	490e      	ldr	r1, [pc, #56]	; (800592c <gos_kernelTaskWakeup+0x10c>)
 80058f2:	2034      	movs	r0, #52	; 0x34
 80058f4:	f002 fa60 	bl	8007db8 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 80058f8:	b662      	cpsie	i
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <gos_kernelTaskWakeup+0xf8>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <gos_kernelTaskWakeup+0xee>
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <gos_kernelTaskWakeup+0xf8>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	3b01      	subs	r3, #1
 8005908:	b2da      	uxtb	r2, r3
 800590a:	4b03      	ldr	r3, [pc, #12]	; (8005918 <gos_kernelTaskWakeup+0xf8>)
 800590c:	701a      	strb	r2, [r3, #0]
    return taskWakeupResult;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20001a7a 	.word	0x20001a7a
 800591c:	20001a80 	.word	0x20001a80
 8005920:	200002cc 	.word	0x200002cc
 8005924:	20001a7b 	.word	0x20001a7b
 8005928:	0800d2d0 	.word	0x0800d2d0
 800592c:	0800e364 	.word	0x0800e364

08005930 <gos_kernelTaskSuspend>:
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	4603      	mov	r3, r0
 8005938:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskSuspendResult = GOS_ERROR;
 800593a:	23ae      	movs	r3, #174	; 0xae
 800593c:	75fb      	strb	r3, [r7, #23]
    u32_t        taskIndex         = 0u;
 800593e:	2300      	movs	r3, #0
 8005940:	613b      	str	r3, [r7, #16]
    GOS_ATOMIC_ENTER
 8005942:	4b61      	ldr	r3, [pc, #388]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	3301      	adds	r3, #1
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b5f      	ldr	r3, [pc, #380]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	b672      	cpsid	i
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595e:	f240 809f 	bls.w	8005aa0 <gos_kernelTaskSuspend+0x170>
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f248 0223 	movw	r2, #32803	; 0x8023
 8005968:	4293      	cmp	r3, r2
 800596a:	f200 8099 	bhi.w	8005aa0 <gos_kernelTaskSuspend+0x170>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005974:	613b      	str	r3, [r7, #16]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005976:	4b55      	ldr	r3, [pc, #340]	; (8005acc <gos_kernelTaskSuspend+0x19c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a55      	ldr	r2, [pc, #340]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 800597c:	216e      	movs	r1, #110	; 0x6e
 800597e:	fb01 f303 	mul.w	r3, r1, r3
 8005982:	4413      	add	r3, r2
 8005984:	3308      	adds	r3, #8
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b21b      	sxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	db08      	blt.n	80059a0 <gos_kernelTaskSuspend+0x70>
            currentTaskIndex == taskIndex || inIsr > 0)
 800598e:	4b4f      	ldr	r3, [pc, #316]	; (8005acc <gos_kernelTaskSuspend+0x19c>)
 8005990:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d003      	beq.n	80059a0 <gos_kernelTaskSuspend+0x70>
            currentTaskIndex == taskIndex || inIsr > 0)
 8005998:	4b4e      	ldr	r3, [pc, #312]	; (8005ad4 <gos_kernelTaskSuspend+0x1a4>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d058      	beq.n	8005a52 <gos_kernelTaskSuspend+0x122>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 80059a0:	4a4b      	ldr	r2, [pc, #300]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	216e      	movs	r1, #110	; 0x6e
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	4413      	add	r3, r2
 80059ac:	3304      	adds	r3, #4
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b0a      	cmp	r3, #10
 80059b2:	d013      	beq.n	80059dc <gos_kernelTaskSuspend+0xac>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 80059b4:	4a46      	ldr	r2, [pc, #280]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	216e      	movs	r1, #110	; 0x6e
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	4413      	add	r3, r2
 80059c0:	3304      	adds	r3, #4
 80059c2:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 80059c4:	2b16      	cmp	r3, #22
 80059c6:	d009      	beq.n	80059dc <gos_kernelTaskSuspend+0xac>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80059c8:	4a41      	ldr	r2, [pc, #260]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	216e      	movs	r1, #110	; 0x6e
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	3304      	adds	r3, #4
 80059d6:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 80059d8:	2b19      	cmp	r3, #25
 80059da:	d160      	bne.n	8005a9e <gos_kernelTaskSuspend+0x16e>
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 80059dc:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	216e      	movs	r1, #110	; 0x6e
 80059e2:	fb01 f303 	mul.w	r3, r1, r3
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	7818      	ldrb	r0, [r3, #0]
 80059ec:	4a38      	ldr	r2, [pc, #224]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	216e      	movs	r1, #110	; 0x6e
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	4413      	add	r3, r2
 80059f8:	3305      	adds	r3, #5
 80059fa:	4602      	mov	r2, r0
 80059fc:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 80059fe:	4a34      	ldr	r2, [pc, #208]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	216e      	movs	r1, #110	; 0x6e
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	4413      	add	r3, r2
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	2205      	movs	r2, #5
 8005a0e:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 8005a10:	2355      	movs	r3, #85	; 0x55
 8005a12:	75fb      	strb	r3, [r7, #23]
                GOS_ATOMIC_EXIT
 8005a14:	b662      	cpsie	i
 8005a16:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <gos_kernelTaskSuspend+0xfa>
 8005a1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	4b28      	ldr	r3, [pc, #160]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005a28:	701a      	strb	r2, [r3, #0]
                if (currentTaskIndex == taskIndex)
 8005a2a:	4b28      	ldr	r3, [pc, #160]	; (8005acc <gos_kernelTaskSuspend+0x19c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d134      	bne.n	8005a9e <gos_kernelTaskSuspend+0x16e>
 8005a34:	2309      	movs	r3, #9
 8005a36:	73fb      	strb	r3, [r7, #15]
    gos_ported_reschedule(privilege);
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	2b16      	cmp	r3, #22
 8005a3c:	d106      	bne.n	8005a4c <gos_kernelTaskSuspend+0x11c>
 8005a3e:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <gos_kernelTaskSuspend+0x1a8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <gos_kernelTaskSuspend+0x1a8>)
 8005a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a48:	6013      	str	r3, [r2, #0]
}
 8005a4a:	e000      	b.n	8005a4e <gos_kernelTaskSuspend+0x11e>
    gos_ported_reschedule(privilege);
 8005a4c:	dfff      	svc	255	; 0xff
}
 8005a4e:	bf00      	nop
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8005a50:	e025      	b.n	8005a9e <gos_kernelTaskSuspend+0x16e>
            GOS_ATOMIC_EXIT
 8005a52:	b662      	cpsie	i
 8005a54:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <gos_kernelTaskSuspend+0x138>
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005a66:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 8005a68:	4b18      	ldr	r3, [pc, #96]	; (8005acc <gos_kernelTaskSuspend+0x19c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	226e      	movs	r2, #110	; 0x6e
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	3308      	adds	r3, #8
 8005a74:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 8005a76:	4413      	add	r3, r2
 8005a78:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	216e      	movs	r1, #110	; 0x6e
 8005a7e:	fb01 f202 	mul.w	r2, r1, r2
 8005a82:	3208      	adds	r2, #8
 8005a84:	4912      	ldr	r1, [pc, #72]	; (8005ad0 <gos_kernelTaskSuspend+0x1a0>)
 8005a86:	440a      	add	r2, r1
 8005a88:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 8005a8a:	9201      	str	r2, [sp, #4]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <gos_kernelTaskSuspend+0x1ac>)
 8005a90:	f240 2296 	movw	r2, #662	; 0x296
 8005a94:	4912      	ldr	r1, [pc, #72]	; (8005ae0 <gos_kernelTaskSuspend+0x1b0>)
 8005a96:	2034      	movs	r0, #52	; 0x34
 8005a98:	f002 f98e 	bl	8007db8 <gos_errorHandler>
 8005a9c:	e000      	b.n	8005aa0 <gos_kernelTaskSuspend+0x170>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8005a9e:	bf00      	nop
    if (taskSuspendResult != GOS_SUCCESS)
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	2b55      	cmp	r3, #85	; 0x55
 8005aa4:	d00a      	beq.n	8005abc <gos_kernelTaskSuspend+0x18c>
        GOS_ATOMIC_EXIT
 8005aa6:	b662      	cpsie	i
 8005aa8:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <gos_kernelTaskSuspend+0x18c>
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <gos_kernelTaskSuspend+0x198>)
 8005aba:	701a      	strb	r2, [r3, #0]
    return taskSuspendResult;
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20001a7a 	.word	0x20001a7a
 8005acc:	20001a80 	.word	0x20001a80
 8005ad0:	200002cc 	.word	0x200002cc
 8005ad4:	20001a7b 	.word	0x20001a7b
 8005ad8:	e000ed04 	.word	0xe000ed04
 8005adc:	0800d2f8 	.word	0x0800d2f8
 8005ae0:	0800e37c 	.word	0x0800e37c

08005ae4 <gos_kernelTaskResume>:
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	4603      	mov	r3, r0
 8005aec:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskResumeResult = GOS_ERROR;
 8005aee:	23ae      	movs	r3, #174	; 0xae
 8005af0:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8005af6:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <gos_kernelTaskResume+0xf4>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	4b36      	ldr	r3, [pc, #216]	; (8005bd8 <gos_kernelTaskResume+0xf4>)
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	b672      	cpsid	i
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	d950      	bls.n	8005bb6 <gos_kernelTaskResume+0xd2>
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	f248 0223 	movw	r2, #32803	; 0x8023
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d84b      	bhi.n	8005bb6 <gos_kernelTaskResume+0xd2>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005b24:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005b26:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <gos_kernelTaskResume+0xf8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2d      	ldr	r2, [pc, #180]	; (8005be0 <gos_kernelTaskResume+0xfc>)
 8005b2c:	216e      	movs	r1, #110	; 0x6e
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	3308      	adds	r3, #8
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b21b      	sxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	db03      	blt.n	8005b46 <gos_kernelTaskResume+0x62>
            inIsr > 0)
 8005b3e:	4b29      	ldr	r3, [pc, #164]	; (8005be4 <gos_kernelTaskResume+0x100>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d01d      	beq.n	8005b82 <gos_kernelTaskResume+0x9e>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8005b46:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <gos_kernelTaskResume+0xfc>)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	216e      	movs	r1, #110	; 0x6e
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	4413      	add	r3, r2
 8005b52:	3304      	adds	r3, #4
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b05      	cmp	r3, #5
 8005b58:	d12d      	bne.n	8005bb6 <gos_kernelTaskResume+0xd2>
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 8005b5a:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <gos_kernelTaskResume+0xfc>)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	216e      	movs	r1, #110	; 0x6e
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	4413      	add	r3, r2
 8005b66:	3305      	adds	r3, #5
 8005b68:	7818      	ldrb	r0, [r3, #0]
 8005b6a:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <gos_kernelTaskResume+0xfc>)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	216e      	movs	r1, #110	; 0x6e
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	4602      	mov	r2, r0
 8005b7a:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 8005b7c:	2355      	movs	r3, #85	; 0x55
 8005b7e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8005b80:	e019      	b.n	8005bb6 <gos_kernelTaskResume+0xd2>
                taskDescriptors[currentTaskIndex].taskName,
 8005b82:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <gos_kernelTaskResume+0xf8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	226e      	movs	r2, #110	; 0x6e
 8005b88:	fb02 f303 	mul.w	r3, r2, r3
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	4a14      	ldr	r2, [pc, #80]	; (8005be0 <gos_kernelTaskResume+0xfc>)
 8005b90:	4413      	add	r3, r2
 8005b92:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	216e      	movs	r1, #110	; 0x6e
 8005b98:	fb01 f202 	mul.w	r2, r1, r2
 8005b9c:	3208      	adds	r2, #8
 8005b9e:	4910      	ldr	r1, [pc, #64]	; (8005be0 <gos_kernelTaskResume+0xfc>)
 8005ba0:	440a      	add	r2, r1
 8005ba2:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 8005ba4:	9201      	str	r2, [sp, #4]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <gos_kernelTaskResume+0x104>)
 8005baa:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8005bae:	490f      	ldr	r1, [pc, #60]	; (8005bec <gos_kernelTaskResume+0x108>)
 8005bb0:	2034      	movs	r0, #52	; 0x34
 8005bb2:	f002 f901 	bl	8007db8 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 8005bb6:	b662      	cpsie	i
 8005bb8:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <gos_kernelTaskResume+0xf4>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <gos_kernelTaskResume+0xe8>
 8005bc0:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <gos_kernelTaskResume+0xf4>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <gos_kernelTaskResume+0xf4>)
 8005bca:	701a      	strb	r2, [r3, #0]
    return taskResumeResult;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20001a7a 	.word	0x20001a7a
 8005bdc:	20001a80 	.word	0x20001a80
 8005be0:	200002cc 	.word	0x200002cc
 8005be4:	20001a7b 	.word	0x20001a7b
 8005be8:	0800d320 	.word	0x0800d320
 8005bec:	0800e394 	.word	0x0800e394

08005bf0 <gos_kernelTaskBlock>:
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	6039      	str	r1, [r7, #0]
 8005bfa:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskBlockResult = GOS_ERROR;
 8005bfc:	23ae      	movs	r3, #174	; 0xae
 8005bfe:	75fb      	strb	r3, [r7, #23]
    u32_t        taskIndex       = 0u;
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]
    GOS_ATOMIC_ENTER
 8005c04:	4b59      	ldr	r3, [pc, #356]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	b672      	cpsid	i
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c20:	f240 8090 	bls.w	8005d44 <gos_kernelTaskBlock+0x154>
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	f248 0223 	movw	r2, #32803	; 0x8023
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	f200 808a 	bhi.w	8005d44 <gos_kernelTaskBlock+0x154>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005c36:	613b      	str	r3, [r7, #16]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005c38:	4b4d      	ldr	r3, [pc, #308]	; (8005d70 <gos_kernelTaskBlock+0x180>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a4d      	ldr	r2, [pc, #308]	; (8005d74 <gos_kernelTaskBlock+0x184>)
 8005c3e:	216e      	movs	r1, #110	; 0x6e
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	4413      	add	r3, r2
 8005c46:	3308      	adds	r3, #8
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b21b      	sxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	db08      	blt.n	8005c62 <gos_kernelTaskBlock+0x72>
            currentTaskIndex == taskIndex || inIsr > 0)
 8005c50:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <gos_kernelTaskBlock+0x180>)
 8005c52:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d003      	beq.n	8005c62 <gos_kernelTaskBlock+0x72>
            currentTaskIndex == taskIndex || inIsr > 0)
 8005c5a:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <gos_kernelTaskBlock+0x188>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d049      	beq.n	8005cf6 <gos_kernelTaskBlock+0x106>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8005c62:	4a44      	ldr	r2, [pc, #272]	; (8005d74 <gos_kernelTaskBlock+0x184>)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	216e      	movs	r1, #110	; 0x6e
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3304      	adds	r3, #4
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b0a      	cmp	r3, #10
 8005c74:	d13c      	bne.n	8005cf0 <gos_kernelTaskBlock+0x100>
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 8005c76:	4a3f      	ldr	r2, [pc, #252]	; (8005d74 <gos_kernelTaskBlock+0x184>)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	216e      	movs	r1, #110	; 0x6e
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	4413      	add	r3, r2
 8005c82:	3304      	adds	r3, #4
 8005c84:	2219      	movs	r2, #25
 8005c86:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 8005c88:	4a3a      	ldr	r2, [pc, #232]	; (8005d74 <gos_kernelTaskBlock+0x184>)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	216e      	movs	r1, #110	; 0x6e
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	4413      	add	r3, r2
 8005c94:	3338      	adds	r3, #56	; 0x38
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 8005c9a:	4a36      	ldr	r2, [pc, #216]	; (8005d74 <gos_kernelTaskBlock+0x184>)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	216e      	movs	r1, #110	; 0x6e
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	333c      	adds	r3, #60	; 0x3c
 8005ca8:	2200      	movs	r2, #0
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	2200      	movs	r2, #0
 8005cae:	805a      	strh	r2, [r3, #2]
                taskBlockResult = GOS_SUCCESS;
 8005cb0:	2355      	movs	r3, #85	; 0x55
 8005cb2:	75fb      	strb	r3, [r7, #23]
                GOS_ATOMIC_EXIT
 8005cb4:	b662      	cpsie	i
 8005cb6:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <gos_kernelTaskBlock+0xda>
 8005cbe:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	4b29      	ldr	r3, [pc, #164]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005cc8:	701a      	strb	r2, [r3, #0]
                if (currentTaskIndex == taskIndex)
 8005cca:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <gos_kernelTaskBlock+0x180>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d136      	bne.n	8005d42 <gos_kernelTaskBlock+0x152>
 8005cd4:	2309      	movs	r3, #9
 8005cd6:	73fb      	strb	r3, [r7, #15]
    gos_ported_reschedule(privilege);
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b16      	cmp	r3, #22
 8005cdc:	d106      	bne.n	8005cec <gos_kernelTaskBlock+0xfc>
 8005cde:	4b27      	ldr	r3, [pc, #156]	; (8005d7c <gos_kernelTaskBlock+0x18c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a26      	ldr	r2, [pc, #152]	; (8005d7c <gos_kernelTaskBlock+0x18c>)
 8005ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	6013      	str	r3, [r2, #0]
}
 8005cea:	e003      	b.n	8005cf4 <gos_kernelTaskBlock+0x104>
    gos_ported_reschedule(privilege);
 8005cec:	dfff      	svc	255	; 0xff
}
 8005cee:	e001      	b.n	8005cf4 <gos_kernelTaskBlock+0x104>
                GOS_NOP;
 8005cf0:	bf00      	nop
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8005cf2:	e026      	b.n	8005d42 <gos_kernelTaskBlock+0x152>
 8005cf4:	e025      	b.n	8005d42 <gos_kernelTaskBlock+0x152>
            GOS_ATOMIC_EXIT
 8005cf6:	b662      	cpsie	i
 8005cf8:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <gos_kernelTaskBlock+0x11c>
 8005d00:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005d0a:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <gos_kernelTaskBlock+0x180>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	226e      	movs	r2, #110	; 0x6e
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	3308      	adds	r3, #8
 8005d18:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <gos_kernelTaskBlock+0x184>)
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	216e      	movs	r1, #110	; 0x6e
 8005d22:	fb01 f202 	mul.w	r2, r1, r2
 8005d26:	3208      	adds	r2, #8
 8005d28:	4912      	ldr	r1, [pc, #72]	; (8005d74 <gos_kernelTaskBlock+0x184>)
 8005d2a:	440a      	add	r2, r1
 8005d2c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 8005d2e:	9201      	str	r2, [sp, #4]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <gos_kernelTaskBlock+0x190>)
 8005d34:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005d38:	4912      	ldr	r1, [pc, #72]	; (8005d84 <gos_kernelTaskBlock+0x194>)
 8005d3a:	2034      	movs	r0, #52	; 0x34
 8005d3c:	f002 f83c 	bl	8007db8 <gos_errorHandler>
 8005d40:	e000      	b.n	8005d44 <gos_kernelTaskBlock+0x154>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8005d42:	bf00      	nop
    if (taskBlockResult != GOS_SUCCESS)
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b55      	cmp	r3, #85	; 0x55
 8005d48:	d00a      	beq.n	8005d60 <gos_kernelTaskBlock+0x170>
        GOS_ATOMIC_EXIT
 8005d4a:	b662      	cpsie	i
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <gos_kernelTaskBlock+0x170>
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <gos_kernelTaskBlock+0x17c>)
 8005d5e:	701a      	strb	r2, [r3, #0]
    return taskBlockResult;
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20001a7a 	.word	0x20001a7a
 8005d70:	20001a80 	.word	0x20001a80
 8005d74:	200002cc 	.word	0x200002cc
 8005d78:	20001a7b 	.word	0x20001a7b
 8005d7c:	e000ed04 	.word	0xe000ed04
 8005d80:	0800d348 	.word	0x0800d348
 8005d84:	0800e3ac 	.word	0x0800e3ac

08005d88 <gos_kernelTaskUnblock>:
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	4603      	mov	r3, r0
 8005d90:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskUnblockResult = GOS_ERROR;
 8005d92:	23ae      	movs	r3, #174	; 0xae
 8005d94:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8005d9a:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <gos_kernelTaskUnblock+0x13c>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	4b48      	ldr	r3, [pc, #288]	; (8005ec4 <gos_kernelTaskUnblock+0x13c>)
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	b672      	cpsid	i
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8005db0:	88fb      	ldrh	r3, [r7, #6]
 8005db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db6:	d975      	bls.n	8005ea4 <gos_kernelTaskUnblock+0x11c>
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	f248 0223 	movw	r2, #32803	; 0x8023
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d870      	bhi.n	8005ea4 <gos_kernelTaskUnblock+0x11c>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005dc8:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005dca:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <gos_kernelTaskUnblock+0x140>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3f      	ldr	r2, [pc, #252]	; (8005ecc <gos_kernelTaskUnblock+0x144>)
 8005dd0:	216e      	movs	r1, #110	; 0x6e
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3308      	adds	r3, #8
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b21b      	sxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db03      	blt.n	8005dea <gos_kernelTaskUnblock+0x62>
            inIsr > 0)
 8005de2:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <gos_kernelTaskUnblock+0x148>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d035      	beq.n	8005e56 <gos_kernelTaskUnblock+0xce>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8005dea:	4a38      	ldr	r2, [pc, #224]	; (8005ecc <gos_kernelTaskUnblock+0x144>)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	216e      	movs	r1, #110	; 0x6e
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	3304      	adds	r3, #4
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b19      	cmp	r3, #25
 8005dfc:	d10b      	bne.n	8005e16 <gos_kernelTaskUnblock+0x8e>
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8005dfe:	4a33      	ldr	r2, [pc, #204]	; (8005ecc <gos_kernelTaskUnblock+0x144>)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	216e      	movs	r1, #110	; 0x6e
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	4413      	add	r3, r2
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	220a      	movs	r2, #10
 8005e0e:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8005e10:	2355      	movs	r3, #85	; 0x55
 8005e12:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8005e14:	e045      	b.n	8005ea2 <gos_kernelTaskUnblock+0x11a>
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8005e16:	4a2d      	ldr	r2, [pc, #180]	; (8005ecc <gos_kernelTaskUnblock+0x144>)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	216e      	movs	r1, #110	; 0x6e
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	3304      	adds	r3, #4
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d13b      	bne.n	8005ea2 <gos_kernelTaskUnblock+0x11a>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 8005e2a:	4a28      	ldr	r2, [pc, #160]	; (8005ecc <gos_kernelTaskUnblock+0x144>)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	216e      	movs	r1, #110	; 0x6e
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	4413      	add	r3, r2
 8005e36:	3305      	adds	r3, #5
 8005e38:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8005e3a:	2b19      	cmp	r3, #25
 8005e3c:	d131      	bne.n	8005ea2 <gos_kernelTaskUnblock+0x11a>
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 8005e3e:	4a23      	ldr	r2, [pc, #140]	; (8005ecc <gos_kernelTaskUnblock+0x144>)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	216e      	movs	r1, #110	; 0x6e
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	4413      	add	r3, r2
 8005e4a:	3305      	adds	r3, #5
 8005e4c:	220a      	movs	r2, #10
 8005e4e:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8005e50:	2355      	movs	r3, #85	; 0x55
 8005e52:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8005e54:	e025      	b.n	8005ea2 <gos_kernelTaskUnblock+0x11a>
            GOS_ATOMIC_EXIT
 8005e56:	b662      	cpsie	i
 8005e58:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <gos_kernelTaskUnblock+0x13c>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <gos_kernelTaskUnblock+0xe4>
 8005e60:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <gos_kernelTaskUnblock+0x13c>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b16      	ldr	r3, [pc, #88]	; (8005ec4 <gos_kernelTaskUnblock+0x13c>)
 8005e6a:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 8005e6c:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <gos_kernelTaskUnblock+0x140>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	226e      	movs	r2, #110	; 0x6e
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	3308      	adds	r3, #8
 8005e78:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <gos_kernelTaskUnblock+0x144>)
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	216e      	movs	r1, #110	; 0x6e
 8005e82:	fb01 f202 	mul.w	r2, r1, r2
 8005e86:	3208      	adds	r2, #8
 8005e88:	4910      	ldr	r1, [pc, #64]	; (8005ecc <gos_kernelTaskUnblock+0x144>)
 8005e8a:	440a      	add	r2, r1
 8005e8c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 8005e8e:	9201      	str	r2, [sp, #4]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <gos_kernelTaskUnblock+0x14c>)
 8005e94:	f240 3233 	movw	r2, #819	; 0x333
 8005e98:	490f      	ldr	r1, [pc, #60]	; (8005ed8 <gos_kernelTaskUnblock+0x150>)
 8005e9a:	2034      	movs	r0, #52	; 0x34
 8005e9c:	f001 ff8c 	bl	8007db8 <gos_errorHandler>
 8005ea0:	e000      	b.n	8005ea4 <gos_kernelTaskUnblock+0x11c>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8005ea2:	bf00      	nop
    GOS_ATOMIC_EXIT
 8005ea4:	b662      	cpsie	i
 8005ea6:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <gos_kernelTaskUnblock+0x13c>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <gos_kernelTaskUnblock+0x132>
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <gos_kernelTaskUnblock+0x13c>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <gos_kernelTaskUnblock+0x13c>)
 8005eb8:	701a      	strb	r2, [r3, #0]
    return taskUnblockResult;
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20001a7a 	.word	0x20001a7a
 8005ec8:	20001a80 	.word	0x20001a80
 8005ecc:	200002cc 	.word	0x200002cc
 8005ed0:	20001a7b 	.word	0x20001a7b
 8005ed4:	0800d370 	.word	0x0800d370
 8005ed8:	0800e3c0 	.word	0x0800e3c0

08005edc <gos_kernelTaskDelete>:
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskDeleteResult = GOS_ERROR;
 8005ee6:	23ae      	movs	r3, #174	; 0xae
 8005ee8:	75fb      	strb	r3, [r7, #23]
    u32_t        taskIndex         = 0u;
 8005eea:	2300      	movs	r3, #0
 8005eec:	613b      	str	r3, [r7, #16]
    GOS_ATOMIC_ENTER
 8005eee:	4b6c      	ldr	r3, [pc, #432]	; (80060a0 <gos_kernelTaskDelete+0x1c4>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4b6a      	ldr	r3, [pc, #424]	; (80060a0 <gos_kernelTaskDelete+0x1c4>)
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	b672      	cpsid	i
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0a:	f240 80a2 	bls.w	8006052 <gos_kernelTaskDelete+0x176>
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	f248 0223 	movw	r2, #32803	; 0x8023
 8005f14:	4293      	cmp	r3, r2
 8005f16:	f200 809c 	bhi.w	8006052 <gos_kernelTaskDelete+0x176>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005f20:	613b      	str	r3, [r7, #16]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005f22:	4b60      	ldr	r3, [pc, #384]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a60      	ldr	r2, [pc, #384]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 8005f28:	216e      	movs	r1, #110	; 0x6e
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	3308      	adds	r3, #8
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	db08      	blt.n	8005f4c <gos_kernelTaskDelete+0x70>
            currentTaskIndex == taskIndex || inIsr > 0)
 8005f3a:	4b5a      	ldr	r3, [pc, #360]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d003      	beq.n	8005f4c <gos_kernelTaskDelete+0x70>
            currentTaskIndex == taskIndex || inIsr > 0)
 8005f44:	4b59      	ldr	r3, [pc, #356]	; (80060ac <gos_kernelTaskDelete+0x1d0>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d05d      	beq.n	8006008 <gos_kernelTaskDelete+0x12c>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8005f4c:	4a56      	ldr	r2, [pc, #344]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	216e      	movs	r1, #110	; 0x6e
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	3304      	adds	r3, #4
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b0d      	cmp	r3, #13
 8005f5e:	d078      	beq.n	8006052 <gos_kernelTaskDelete+0x176>
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 8005f60:	4a51      	ldr	r2, [pc, #324]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	216e      	movs	r1, #110	; 0x6e
 8005f66:	fb01 f303 	mul.w	r3, r1, r3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	220d      	movs	r2, #13
 8005f70:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 8005f72:	2355      	movs	r3, #85	; 0x55
 8005f74:	75fb      	strb	r3, [r7, #23]
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 8005f76:	4b4b      	ldr	r3, [pc, #300]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a4b      	ldr	r2, [pc, #300]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 8005f7c:	216e      	movs	r1, #110	; 0x6e
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	3308      	adds	r3, #8
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d133      	bne.n	8005ff8 <gos_kernelTaskDelete+0x11c>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 8005f90:	4b44      	ldr	r3, [pc, #272]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a44      	ldr	r2, [pc, #272]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 8005f96:	216e      	movs	r1, #110	; 0x6e
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	881a      	ldrh	r2, [r3, #0]
 8005fa2:	4b40      	ldr	r3, [pc, #256]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005faa:	b290      	uxth	r0, r2
 8005fac:	4a3e      	ldr	r2, [pc, #248]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 8005fae:	216e      	movs	r1, #110	; 0x6e
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	4602      	mov	r2, r0
 8005fba:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8005fbc:	4b3c      	ldr	r3, [pc, #240]	; (80060b0 <gos_kernelTaskDelete+0x1d4>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f003 f939 	bl	800923c <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 8005fca:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a36      	ldr	r2, [pc, #216]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 8005fd0:	216e      	movs	r1, #110	; 0x6e
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3308      	adds	r3, #8
 8005fda:	881a      	ldrh	r2, [r3, #0]
 8005fdc:	4b31      	ldr	r3, [pc, #196]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe4:	b290      	uxth	r0, r2
 8005fe6:	4a30      	ldr	r2, [pc, #192]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 8005fe8:	216e      	movs	r1, #110	; 0x6e
 8005fea:	fb01 f303 	mul.w	r3, r1, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8005ff6:	e02c      	b.n	8006052 <gos_kernelTaskDelete+0x176>
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <gos_kernelTaskDelete+0x1d4>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	4611      	mov	r1, r2
 8006000:	4618      	mov	r0, r3
 8006002:	f003 f91b 	bl	800923c <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8006006:	e024      	b.n	8006052 <gos_kernelTaskDelete+0x176>
            GOS_ATOMIC_EXIT
 8006008:	b662      	cpsie	i
 800600a:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <gos_kernelTaskDelete+0x1c4>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <gos_kernelTaskDelete+0x142>
 8006012:	4b23      	ldr	r3, [pc, #140]	; (80060a0 <gos_kernelTaskDelete+0x1c4>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	3b01      	subs	r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4b21      	ldr	r3, [pc, #132]	; (80060a0 <gos_kernelTaskDelete+0x1c4>)
 800601c:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 800601e:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	226e      	movs	r2, #110	; 0x6e
 8006024:	fb02 f303 	mul.w	r3, r2, r3
 8006028:	3308      	adds	r3, #8
 800602a:	4a1f      	ldr	r2, [pc, #124]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 800602c:	4413      	add	r3, r2
 800602e:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	216e      	movs	r1, #110	; 0x6e
 8006034:	fb01 f202 	mul.w	r2, r1, r2
 8006038:	3208      	adds	r2, #8
 800603a:	491b      	ldr	r1, [pc, #108]	; (80060a8 <gos_kernelTaskDelete+0x1cc>)
 800603c:	440a      	add	r2, r1
 800603e:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 8006040:	9201      	str	r2, [sp, #4]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <gos_kernelTaskDelete+0x1d8>)
 8006046:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800604a:	491b      	ldr	r1, [pc, #108]	; (80060b8 <gos_kernelTaskDelete+0x1dc>)
 800604c:	2034      	movs	r0, #52	; 0x34
 800604e:	f001 feb3 	bl	8007db8 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 8006052:	b662      	cpsie	i
 8006054:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <gos_kernelTaskDelete+0x1c4>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <gos_kernelTaskDelete+0x18c>
 800605c:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <gos_kernelTaskDelete+0x1c4>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	3b01      	subs	r3, #1
 8006062:	b2da      	uxtb	r2, r3
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <gos_kernelTaskDelete+0x1c4>)
 8006066:	701a      	strb	r2, [r3, #0]
    if (taskDeleteResult == GOS_SUCCESS)
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	2b55      	cmp	r3, #85	; 0x55
 800606c:	d112      	bne.n	8006094 <gos_kernelTaskDelete+0x1b8>
        if (currentTaskIndex == taskIndex)
 800606e:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <gos_kernelTaskDelete+0x1c8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	429a      	cmp	r2, r3
 8006076:	d10d      	bne.n	8006094 <gos_kernelTaskDelete+0x1b8>
 8006078:	2309      	movs	r3, #9
 800607a:	73fb      	strb	r3, [r7, #15]
    gos_ported_reschedule(privilege);
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b16      	cmp	r3, #22
 8006080:	d106      	bne.n	8006090 <gos_kernelTaskDelete+0x1b4>
 8006082:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <gos_kernelTaskDelete+0x1e0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a0d      	ldr	r2, [pc, #52]	; (80060bc <gos_kernelTaskDelete+0x1e0>)
 8006088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608c:	6013      	str	r3, [r2, #0]
}
 800608e:	e000      	b.n	8006092 <gos_kernelTaskDelete+0x1b6>
    gos_ported_reschedule(privilege);
 8006090:	dfff      	svc	255	; 0xff
}
 8006092:	bf00      	nop
    return taskDeleteResult;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20001a7a 	.word	0x20001a7a
 80060a4:	20001a80 	.word	0x20001a80
 80060a8:	200002cc 	.word	0x200002cc
 80060ac:	20001a7b 	.word	0x20001a7b
 80060b0:	20001a79 	.word	0x20001a79
 80060b4:	0800d398 	.word	0x0800d398
 80060b8:	0800e3d8 	.word	0x0800e3d8
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <gos_kernelTaskSetPriority>:
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	4603      	mov	r3, r0
 80060c8:	460a      	mov	r2, r1
 80060ca:	80fb      	strh	r3, [r7, #6]
 80060cc:	4613      	mov	r3, r2
 80060ce:	717b      	strb	r3, [r7, #5]
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80060d0:	23ae      	movs	r3, #174	; 0xae
 80060d2:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80060d8:	4b36      	ldr	r3, [pc, #216]	; (80061b4 <gos_kernelTaskSetPriority+0xf4>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <gos_kernelTaskSetPriority+0xf4>)
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	b672      	cpsid	i
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f4:	d94d      	bls.n	8006192 <gos_kernelTaskSetPriority+0xd2>
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	f248 0223 	movw	r2, #32803	; 0x8023
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d848      	bhi.n	8006192 <gos_kernelTaskSetPriority+0xd2>
 8006100:	797b      	ldrb	r3, [r7, #5]
 8006102:	2bff      	cmp	r3, #255	; 0xff
 8006104:	d045      	beq.n	8006192 <gos_kernelTaskSetPriority+0xd2>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800610c:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800610e:	4b2a      	ldr	r3, [pc, #168]	; (80061b8 <gos_kernelTaskSetPriority+0xf8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2a      	ldr	r2, [pc, #168]	; (80061bc <gos_kernelTaskSetPriority+0xfc>)
 8006114:	216e      	movs	r1, #110	; 0x6e
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	4413      	add	r3, r2
 800611c:	3308      	adds	r3, #8
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <gos_kernelTaskSetPriority+0x70>
            inIsr > 0)
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <gos_kernelTaskSetPriority+0x100>)
 800612a:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <gos_kernelTaskSetPriority+0x88>
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 8006130:	4a22      	ldr	r2, [pc, #136]	; (80061bc <gos_kernelTaskSetPriority+0xfc>)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	216e      	movs	r1, #110	; 0x6e
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	4413      	add	r3, r2
 800613c:	3306      	adds	r3, #6
 800613e:	797a      	ldrb	r2, [r7, #5]
 8006140:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 8006142:	2355      	movs	r3, #85	; 0x55
 8006144:	73fb      	strb	r3, [r7, #15]
 8006146:	e024      	b.n	8006192 <gos_kernelTaskSetPriority+0xd2>
            GOS_ATOMIC_EXIT
 8006148:	b662      	cpsie	i
 800614a:	4b1a      	ldr	r3, [pc, #104]	; (80061b4 <gos_kernelTaskSetPriority+0xf4>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <gos_kernelTaskSetPriority+0x9e>
 8006152:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <gos_kernelTaskSetPriority+0xf4>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	b2da      	uxtb	r2, r3
 800615a:	4b16      	ldr	r3, [pc, #88]	; (80061b4 <gos_kernelTaskSetPriority+0xf4>)
 800615c:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 800615e:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <gos_kernelTaskSetPriority+0xf8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	226e      	movs	r2, #110	; 0x6e
 8006164:	fb02 f303 	mul.w	r3, r2, r3
 8006168:	3308      	adds	r3, #8
 800616a:	4a14      	ldr	r2, [pc, #80]	; (80061bc <gos_kernelTaskSetPriority+0xfc>)
 800616c:	4413      	add	r3, r2
 800616e:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	216e      	movs	r1, #110	; 0x6e
 8006174:	fb01 f202 	mul.w	r2, r1, r2
 8006178:	3208      	adds	r2, #8
 800617a:	4910      	ldr	r1, [pc, #64]	; (80061bc <gos_kernelTaskSetPriority+0xfc>)
 800617c:	440a      	add	r2, r1
 800617e:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 8006180:	9201      	str	r2, [sp, #4]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <gos_kernelTaskSetPriority+0x104>)
 8006186:	f240 329f 	movw	r2, #927	; 0x39f
 800618a:	490f      	ldr	r1, [pc, #60]	; (80061c8 <gos_kernelTaskSetPriority+0x108>)
 800618c:	2034      	movs	r0, #52	; 0x34
 800618e:	f001 fe13 	bl	8007db8 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 8006192:	b662      	cpsie	i
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <gos_kernelTaskSetPriority+0xf4>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <gos_kernelTaskSetPriority+0xe8>
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <gos_kernelTaskSetPriority+0xf4>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	4b03      	ldr	r3, [pc, #12]	; (80061b4 <gos_kernelTaskSetPriority+0xf4>)
 80061a6:	701a      	strb	r2, [r3, #0]
    return taskSetPriorityResult;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20001a7a 	.word	0x20001a7a
 80061b8:	20001a80 	.word	0x20001a80
 80061bc:	200002cc 	.word	0x200002cc
 80061c0:	20001a7b 	.word	0x20001a7b
 80061c4:	0800d3c0 	.word	0x0800d3c0
 80061c8:	0800e3f0 	.word	0x0800e3f0

080061cc <gos_kernelTaskSetOriginalPriority>:
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	4603      	mov	r3, r0
 80061d4:	460a      	mov	r2, r1
 80061d6:	80fb      	strh	r3, [r7, #6]
 80061d8:	4613      	mov	r3, r2
 80061da:	717b      	strb	r3, [r7, #5]
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80061dc:	23ae      	movs	r3, #174	; 0xae
 80061de:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80061e4:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <gos_kernelTaskSetOriginalPriority+0xf4>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	4b34      	ldr	r3, [pc, #208]	; (80062c0 <gos_kernelTaskSetOriginalPriority+0xf4>)
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	b672      	cpsid	i
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006200:	d94d      	bls.n	800629e <gos_kernelTaskSetOriginalPriority+0xd2>
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	f248 0223 	movw	r2, #32803	; 0x8023
 8006208:	4293      	cmp	r3, r2
 800620a:	d848      	bhi.n	800629e <gos_kernelTaskSetOriginalPriority+0xd2>
 800620c:	797b      	ldrb	r3, [r7, #5]
 800620e:	2bff      	cmp	r3, #255	; 0xff
 8006210:	d045      	beq.n	800629e <gos_kernelTaskSetOriginalPriority+0xd2>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006218:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800621a:	4b2a      	ldr	r3, [pc, #168]	; (80062c4 <gos_kernelTaskSetOriginalPriority+0xf8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <gos_kernelTaskSetOriginalPriority+0xfc>)
 8006220:	216e      	movs	r1, #110	; 0x6e
 8006222:	fb01 f303 	mul.w	r3, r1, r3
 8006226:	4413      	add	r3, r2
 8006228:	3308      	adds	r3, #8
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <gos_kernelTaskSetOriginalPriority+0x70>
            inIsr > 0)
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <gos_kernelTaskSetOriginalPriority+0x100>)
 8006236:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <gos_kernelTaskSetOriginalPriority+0x88>
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 800623c:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <gos_kernelTaskSetOriginalPriority+0xfc>)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	216e      	movs	r1, #110	; 0x6e
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	3307      	adds	r3, #7
 800624a:	797a      	ldrb	r2, [r7, #5]
 800624c:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 800624e:	2355      	movs	r3, #85	; 0x55
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	e024      	b.n	800629e <gos_kernelTaskSetOriginalPriority+0xd2>
            GOS_ATOMIC_EXIT
 8006254:	b662      	cpsie	i
 8006256:	4b1a      	ldr	r3, [pc, #104]	; (80062c0 <gos_kernelTaskSetOriginalPriority+0xf4>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <gos_kernelTaskSetOriginalPriority+0x9e>
 800625e:	4b18      	ldr	r3, [pc, #96]	; (80062c0 <gos_kernelTaskSetOriginalPriority+0xf4>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	3b01      	subs	r3, #1
 8006264:	b2da      	uxtb	r2, r3
 8006266:	4b16      	ldr	r3, [pc, #88]	; (80062c0 <gos_kernelTaskSetOriginalPriority+0xf4>)
 8006268:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 800626a:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <gos_kernelTaskSetOriginalPriority+0xf8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	226e      	movs	r2, #110	; 0x6e
 8006270:	fb02 f303 	mul.w	r3, r2, r3
 8006274:	3308      	adds	r3, #8
 8006276:	4a14      	ldr	r2, [pc, #80]	; (80062c8 <gos_kernelTaskSetOriginalPriority+0xfc>)
 8006278:	4413      	add	r3, r2
 800627a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	216e      	movs	r1, #110	; 0x6e
 8006280:	fb01 f202 	mul.w	r2, r1, r2
 8006284:	3208      	adds	r2, #8
 8006286:	4910      	ldr	r1, [pc, #64]	; (80062c8 <gos_kernelTaskSetOriginalPriority+0xfc>)
 8006288:	440a      	add	r2, r1
 800628a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 800628c:	9201      	str	r2, [sp, #4]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <gos_kernelTaskSetOriginalPriority+0x104>)
 8006292:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006296:	490f      	ldr	r1, [pc, #60]	; (80062d4 <gos_kernelTaskSetOriginalPriority+0x108>)
 8006298:	2034      	movs	r0, #52	; 0x34
 800629a:	f001 fd8d 	bl	8007db8 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 800629e:	b662      	cpsie	i
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <gos_kernelTaskSetOriginalPriority+0xf4>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <gos_kernelTaskSetOriginalPriority+0xe8>
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <gos_kernelTaskSetOriginalPriority+0xf4>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <gos_kernelTaskSetOriginalPriority+0xf4>)
 80062b2:	701a      	strb	r2, [r3, #0]
    return taskSetPriorityResult;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20001a7a 	.word	0x20001a7a
 80062c4:	20001a80 	.word	0x20001a80
 80062c8:	200002cc 	.word	0x200002cc
 80062cc:	20001a7b 	.word	0x20001a7b
 80062d0:	0800d3c0 	.word	0x0800d3c0
 80062d4:	0800e40c 	.word	0x0800e40c

080062d8 <gos_kernelTaskGetPriority>:
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	6039      	str	r1, [r7, #0]
 80062e2:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 80062e4:	23ae      	movs	r3, #174	; 0xae
 80062e6:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80062ec:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <gos_kernelTaskGetPriority+0x88>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	3301      	adds	r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <gos_kernelTaskGetPriority+0x88>)
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	b672      	cpsid	i
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006308:	d917      	bls.n	800633a <gos_kernelTaskGetPriority+0x62>
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	f248 0223 	movw	r2, #32803	; 0x8023
 8006310:	4293      	cmp	r3, r2
 8006312:	d812      	bhi.n	800633a <gos_kernelTaskGetPriority+0x62>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00f      	beq.n	800633a <gos_kernelTaskGetPriority+0x62>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006320:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 8006322:	4a10      	ldr	r2, [pc, #64]	; (8006364 <gos_kernelTaskGetPriority+0x8c>)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	216e      	movs	r1, #110	; 0x6e
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	4413      	add	r3, r2
 800632e:	3306      	adds	r3, #6
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 8006336:	2355      	movs	r3, #85	; 0x55
 8006338:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 800633a:	b662      	cpsie	i
 800633c:	4b08      	ldr	r3, [pc, #32]	; (8006360 <gos_kernelTaskGetPriority+0x88>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <gos_kernelTaskGetPriority+0x78>
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <gos_kernelTaskGetPriority+0x88>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	4b04      	ldr	r3, [pc, #16]	; (8006360 <gos_kernelTaskGetPriority+0x88>)
 800634e:	701a      	strb	r2, [r3, #0]
    return taskGetPriorityResult;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20001a7a 	.word	0x20001a7a
 8006364:	200002cc 	.word	0x200002cc

08006368 <gos_kernelTaskGetOriginalPriority>:
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	6039      	str	r1, [r7, #0]
 8006372:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 8006374:	23ae      	movs	r3, #174	; 0xae
 8006376:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8006378:	2300      	movs	r3, #0
 800637a:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 800637c:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <gos_kernelTaskGetOriginalPriority+0x88>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	b2da      	uxtb	r2, r3
 8006384:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <gos_kernelTaskGetOriginalPriority+0x88>)
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	b672      	cpsid	i
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	d917      	bls.n	80063ca <gos_kernelTaskGetOriginalPriority+0x62>
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	f248 0223 	movw	r2, #32803	; 0x8023
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d812      	bhi.n	80063ca <gos_kernelTaskGetOriginalPriority+0x62>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00f      	beq.n	80063ca <gos_kernelTaskGetOriginalPriority+0x62>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80063b0:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskOriginalPriority;
 80063b2:	4a10      	ldr	r2, [pc, #64]	; (80063f4 <gos_kernelTaskGetOriginalPriority+0x8c>)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	216e      	movs	r1, #110	; 0x6e
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	3307      	adds	r3, #7
 80063c0:	781a      	ldrb	r2, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 80063c6:	2355      	movs	r3, #85	; 0x55
 80063c8:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 80063ca:	b662      	cpsie	i
 80063cc:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <gos_kernelTaskGetOriginalPriority+0x88>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <gos_kernelTaskGetOriginalPriority+0x78>
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <gos_kernelTaskGetOriginalPriority+0x88>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	3b01      	subs	r3, #1
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <gos_kernelTaskGetOriginalPriority+0x88>)
 80063de:	701a      	strb	r2, [r3, #0]
    return taskGetPriorityResult;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20001a7a 	.word	0x20001a7a
 80063f4:	200002cc 	.word	0x200002cc

080063f8 <gos_kernelTaskAddPrivilege>:
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	460a      	mov	r2, r1
 8006402:	80fb      	strh	r3, [r7, #6]
 8006404:	4613      	mov	r3, r2
 8006406:	80bb      	strh	r3, [r7, #4]
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 8006408:	23ae      	movs	r3, #174	; 0xae
 800640a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 800640c:	2300      	movs	r3, #0
 800640e:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8006410:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <gos_kernelTaskAddPrivilege+0x98>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	b2da      	uxtb	r2, r3
 8006418:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <gos_kernelTaskAddPrivilege+0x98>)
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	b672      	cpsid	i
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642c:	d91e      	bls.n	800646c <gos_kernelTaskAddPrivilege+0x74>
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	f248 0223 	movw	r2, #32803	; 0x8023
 8006434:	4293      	cmp	r3, r2
 8006436:	d819      	bhi.n	800646c <gos_kernelTaskAddPrivilege+0x74>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800643e:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 8006440:	4a14      	ldr	r2, [pc, #80]	; (8006494 <gos_kernelTaskAddPrivilege+0x9c>)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	216e      	movs	r1, #110	; 0x6e
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	3308      	adds	r3, #8
 800644e:	881a      	ldrh	r2, [r3, #0]
 8006450:	88bb      	ldrh	r3, [r7, #4]
 8006452:	4313      	orrs	r3, r2
 8006454:	b298      	uxth	r0, r3
 8006456:	4a0f      	ldr	r2, [pc, #60]	; (8006494 <gos_kernelTaskAddPrivilege+0x9c>)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	216e      	movs	r1, #110	; 0x6e
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	4413      	add	r3, r2
 8006462:	3308      	adds	r3, #8
 8006464:	4602      	mov	r2, r0
 8006466:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 8006468:	2355      	movs	r3, #85	; 0x55
 800646a:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 800646c:	b662      	cpsie	i
 800646e:	4b08      	ldr	r3, [pc, #32]	; (8006490 <gos_kernelTaskAddPrivilege+0x98>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <gos_kernelTaskAddPrivilege+0x8a>
 8006476:	4b06      	ldr	r3, [pc, #24]	; (8006490 <gos_kernelTaskAddPrivilege+0x98>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	3b01      	subs	r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	4b04      	ldr	r3, [pc, #16]	; (8006490 <gos_kernelTaskAddPrivilege+0x98>)
 8006480:	701a      	strb	r2, [r3, #0]
    return taskAddPrivilegeResult;
 8006482:	7bfb      	ldrb	r3, [r7, #15]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20001a7a 	.word	0x20001a7a
 8006494:	200002cc 	.word	0x200002cc

08006498 <gos_kernelTaskRemovePrivilege>:
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	460a      	mov	r2, r1
 80064a2:	80fb      	strh	r3, [r7, #6]
 80064a4:	4613      	mov	r3, r2
 80064a6:	80bb      	strh	r3, [r7, #4]
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 80064a8:	23ae      	movs	r3, #174	; 0xae
 80064aa:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80064b0:	4b22      	ldr	r3, [pc, #136]	; (800653c <gos_kernelTaskRemovePrivilege+0xa4>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	4b20      	ldr	r3, [pc, #128]	; (800653c <gos_kernelTaskRemovePrivilege+0xa4>)
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	b672      	cpsid	i
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064cc:	d923      	bls.n	8006516 <gos_kernelTaskRemovePrivilege+0x7e>
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	f248 0223 	movw	r2, #32803	; 0x8023
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d81e      	bhi.n	8006516 <gos_kernelTaskRemovePrivilege+0x7e>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80064de:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 80064e0:	4a17      	ldr	r2, [pc, #92]	; (8006540 <gos_kernelTaskRemovePrivilege+0xa8>)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	216e      	movs	r1, #110	; 0x6e
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	3308      	adds	r3, #8
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b21a      	sxth	r2, r3
 80064f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064f6:	43db      	mvns	r3, r3
 80064f8:	b21b      	sxth	r3, r3
 80064fa:	4013      	ands	r3, r2
 80064fc:	b21b      	sxth	r3, r3
 80064fe:	b298      	uxth	r0, r3
 8006500:	4a0f      	ldr	r2, [pc, #60]	; (8006540 <gos_kernelTaskRemovePrivilege+0xa8>)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	216e      	movs	r1, #110	; 0x6e
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	3308      	adds	r3, #8
 800650e:	4602      	mov	r2, r0
 8006510:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 8006512:	2355      	movs	r3, #85	; 0x55
 8006514:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8006516:	b662      	cpsie	i
 8006518:	4b08      	ldr	r3, [pc, #32]	; (800653c <gos_kernelTaskRemovePrivilege+0xa4>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <gos_kernelTaskRemovePrivilege+0x94>
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <gos_kernelTaskRemovePrivilege+0xa4>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	3b01      	subs	r3, #1
 8006526:	b2da      	uxtb	r2, r3
 8006528:	4b04      	ldr	r3, [pc, #16]	; (800653c <gos_kernelTaskRemovePrivilege+0xa4>)
 800652a:	701a      	strb	r2, [r3, #0]
    return taskRemovePrivilegeResult;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20001a7a 	.word	0x20001a7a
 8006540:	200002cc 	.word	0x200002cc

08006544 <gos_kernelTaskSetPrivileges>:
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	460a      	mov	r2, r1
 800654e:	80fb      	strh	r3, [r7, #6]
 8006550:	4613      	mov	r3, r2
 8006552:	80bb      	strh	r3, [r7, #4]
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 8006554:	23ae      	movs	r3, #174	; 0xae
 8006556:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8006558:	2300      	movs	r3, #0
 800655a:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 800655c:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <gos_kernelTaskSetPrivileges+0x84>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	3301      	adds	r3, #1
 8006562:	b2da      	uxtb	r2, r3
 8006564:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <gos_kernelTaskSetPrivileges+0x84>)
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	b672      	cpsid	i
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006578:	d913      	bls.n	80065a2 <gos_kernelTaskSetPrivileges+0x5e>
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	f248 0223 	movw	r2, #32803	; 0x8023
 8006580:	4293      	cmp	r3, r2
 8006582:	d80e      	bhi.n	80065a2 <gos_kernelTaskSetPrivileges+0x5e>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800658a:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 800658c:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <gos_kernelTaskSetPrivileges+0x88>)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	216e      	movs	r1, #110	; 0x6e
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	4413      	add	r3, r2
 8006598:	3308      	adds	r3, #8
 800659a:	88ba      	ldrh	r2, [r7, #4]
 800659c:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 800659e:	2355      	movs	r3, #85	; 0x55
 80065a0:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 80065a2:	b662      	cpsie	i
 80065a4:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <gos_kernelTaskSetPrivileges+0x84>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <gos_kernelTaskSetPrivileges+0x74>
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <gos_kernelTaskSetPrivileges+0x84>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <gos_kernelTaskSetPrivileges+0x84>)
 80065b6:	701a      	strb	r2, [r3, #0]
    return taskSetPrivilegesResult;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20001a7a 	.word	0x20001a7a
 80065cc:	200002cc 	.word	0x200002cc

080065d0 <gos_kernelTaskGetPrivileges>:
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	6039      	str	r1, [r7, #0]
 80065da:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 80065dc:	23ae      	movs	r3, #174	; 0xae
 80065de:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80065e4:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <gos_kernelTaskGetPrivileges+0x88>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	3301      	adds	r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <gos_kernelTaskGetPrivileges+0x88>)
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	b672      	cpsid	i
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006600:	d917      	bls.n	8006632 <gos_kernelTaskGetPrivileges+0x62>
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	f248 0223 	movw	r2, #32803	; 0x8023
 8006608:	4293      	cmp	r3, r2
 800660a:	d812      	bhi.n	8006632 <gos_kernelTaskGetPrivileges+0x62>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00f      	beq.n	8006632 <gos_kernelTaskGetPrivileges+0x62>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006618:	60bb      	str	r3, [r7, #8]
        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 800661a:	4a10      	ldr	r2, [pc, #64]	; (800665c <gos_kernelTaskGetPrivileges+0x8c>)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	216e      	movs	r1, #110	; 0x6e
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	4413      	add	r3, r2
 8006626:	3308      	adds	r3, #8
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 800662e:	2355      	movs	r3, #85	; 0x55
 8006630:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8006632:	b662      	cpsie	i
 8006634:	4b08      	ldr	r3, [pc, #32]	; (8006658 <gos_kernelTaskGetPrivileges+0x88>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <gos_kernelTaskGetPrivileges+0x78>
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <gos_kernelTaskGetPrivileges+0x88>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	3b01      	subs	r3, #1
 8006642:	b2da      	uxtb	r2, r3
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <gos_kernelTaskGetPrivileges+0x88>)
 8006646:	701a      	strb	r2, [r3, #0]
    return taskGetPrivilegesResult;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20001a7a 	.word	0x20001a7a
 800665c:	200002cc 	.word	0x200002cc

08006660 <gos_kernelTaskGetId>:
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
    gos_result_t taskGetIdResult = GOS_ERROR;
 800666a:	23ae      	movs	r3, #174	; 0xae
 800666c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	e01e      	b.n	80066b6 <gos_kernelTaskGetId+0x56>
        if (strcmp(taskName, taskDescriptors[taskIndex].taskName) == 0u)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	226e      	movs	r2, #110	; 0x6e
 800667c:	fb02 f303 	mul.w	r3, r2, r3
 8006680:	3308      	adds	r3, #8
 8006682:	4a12      	ldr	r2, [pc, #72]	; (80066cc <gos_kernelTaskGetId+0x6c>)
 8006684:	4413      	add	r3, r2
 8006686:	3302      	adds	r3, #2
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7f9 fdc0 	bl	8000210 <strcmp>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <gos_kernelTaskGetId+0x50>
            *taskId = taskDescriptors[taskIndex].taskId;
 8006696:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <gos_kernelTaskGetId+0x6c>)
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	216e      	movs	r1, #110	; 0x6e
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	4413      	add	r3, r2
 80066a2:	332a      	adds	r3, #42	; 0x2a
 80066a4:	881a      	ldrh	r2, [r3, #0]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	801a      	strh	r2, [r3, #0]
            taskGetIdResult = GOS_SUCCESS;
 80066aa:	2355      	movs	r3, #85	; 0x55
 80066ac:	73fb      	strb	r3, [r7, #15]
            break;
 80066ae:	e008      	b.n	80066c2 <gos_kernelTaskGetId+0x62>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b23      	cmp	r3, #35	; 0x23
 80066ba:	d802      	bhi.n	80066c2 <gos_kernelTaskGetId+0x62>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1da      	bne.n	8006678 <gos_kernelTaskGetId+0x18>
    return taskGetIdResult;
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	200002cc 	.word	0x200002cc

080066d0 <gos_kernelTaskGetCurrentId>:
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 80066d8:	23ae      	movs	r3, #174	; 0xae
 80066da:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_ENTER
 80066dc:	4b14      	ldr	r3, [pc, #80]	; (8006730 <gos_kernelTaskGetCurrentId+0x60>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <gos_kernelTaskGetCurrentId+0x60>)
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	b672      	cpsid	i
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	f3bf 8f6f 	isb	sy
    if (taskId != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <gos_kernelTaskGetCurrentId+0x3c>
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 80066f8:	4b0e      	ldr	r3, [pc, #56]	; (8006734 <gos_kernelTaskGetCurrentId+0x64>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 8006708:	2355      	movs	r3, #85	; 0x55
 800670a:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 800670c:	b662      	cpsie	i
 800670e:	4b08      	ldr	r3, [pc, #32]	; (8006730 <gos_kernelTaskGetCurrentId+0x60>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <gos_kernelTaskGetCurrentId+0x52>
 8006716:	4b06      	ldr	r3, [pc, #24]	; (8006730 <gos_kernelTaskGetCurrentId+0x60>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4b04      	ldr	r3, [pc, #16]	; (8006730 <gos_kernelTaskGetCurrentId+0x60>)
 8006720:	701a      	strb	r2, [r3, #0]
    return taskGetCurrentIdResult;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20001a7a 	.word	0x20001a7a
 8006734:	20001a80 	.word	0x20001a80

08006738 <gos_kernelTaskGetData>:
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	6039      	str	r1, [r7, #0]
 8006742:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskGetDataResult = GOS_ERROR;
 8006744:	23ae      	movs	r3, #174	; 0xae
 8006746:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8006748:	2300      	movs	r3, #0
 800674a:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 800674c:	4b1b      	ldr	r3, [pc, #108]	; (80067bc <gos_kernelTaskGetData+0x84>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	b2da      	uxtb	r2, r3
 8006754:	4b19      	ldr	r3, [pc, #100]	; (80067bc <gos_kernelTaskGetData+0x84>)
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	b672      	cpsid	i
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	f3bf 8f6f 	isb	sy
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8006762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006766:	2b00      	cmp	r3, #0
 8006768:	da18      	bge.n	800679c <gos_kernelTaskGetData+0x64>
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	f248 0223 	movw	r2, #32803	; 0x8023
 8006770:	4293      	cmp	r3, r2
 8006772:	d813      	bhi.n	800679c <gos_kernelTaskGetData+0x64>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d010      	beq.n	800679c <gos_kernelTaskGetData+0x64>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006780:	60bb      	str	r3, [r7, #8]
        memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	226e      	movs	r2, #110	; 0x6e
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	4a0d      	ldr	r2, [pc, #52]	; (80067c0 <gos_kernelTaskGetData+0x88>)
 800678c:	4413      	add	r3, r2
 800678e:	226e      	movs	r2, #110	; 0x6e
 8006790:	4619      	mov	r1, r3
 8006792:	6838      	ldr	r0, [r7, #0]
 8006794:	f004 fc08 	bl	800afa8 <memcpy>
        taskGetDataResult = GOS_SUCCESS;
 8006798:	2355      	movs	r3, #85	; 0x55
 800679a:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 800679c:	b662      	cpsie	i
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <gos_kernelTaskGetData+0x84>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <gos_kernelTaskGetData+0x7a>
 80067a6:	4b05      	ldr	r3, [pc, #20]	; (80067bc <gos_kernelTaskGetData+0x84>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b03      	ldr	r3, [pc, #12]	; (80067bc <gos_kernelTaskGetData+0x84>)
 80067b0:	701a      	strb	r2, [r3, #0]
    return taskGetDataResult;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20001a7a 	.word	0x20001a7a
 80067c0:	200002cc 	.word	0x200002cc

080067c4 <gos_kernelRegisterSysTickHook>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
    gos_result_t hookRegisterResult = GOS_ERROR;
 80067cc:	23ae      	movs	r3, #174	; 0xae
 80067ce:	73fb      	strb	r3, [r7, #15]
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <gos_kernelRegisterSysTickHook+0x24>
 80067d6:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <gos_kernelRegisterSysTickHook+0x34>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <gos_kernelRegisterSysTickHook+0x24>
        kernelSysTickHookFunction = sysTickHookFunction;
 80067de:	4a06      	ldr	r2, [pc, #24]	; (80067f8 <gos_kernelRegisterSysTickHook+0x34>)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 80067e4:	2355      	movs	r3, #85	; 0x55
 80067e6:	73fb      	strb	r3, [r7, #15]
    return hookRegisterResult;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20001a98 	.word	0x20001a98

080067fc <SysTick_Handler>:
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
    sysTicks++;
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <SysTick_Handler+0x50>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	4a10      	ldr	r2, [pc, #64]	; (800684c <SysTick_Handler+0x50>)
 800680a:	6013      	str	r3, [r2, #0]
    gos_kernelCheckTaskStack();
 800680c:	f000 fd48 	bl	80072a0 <gos_kernelCheckTaskStack>
    if (schedDisableCntr == 0u)
 8006810:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <SysTick_Handler+0x54>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10d      	bne.n	8006834 <SysTick_Handler+0x38>
 8006818:	2316      	movs	r3, #22
 800681a:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	2b16      	cmp	r3, #22
 8006820:	d106      	bne.n	8006830 <SysTick_Handler+0x34>
 8006822:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <SysTick_Handler+0x58>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a0b      	ldr	r2, [pc, #44]	; (8006854 <SysTick_Handler+0x58>)
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682c:	6013      	str	r3, [r2, #0]
}
 800682e:	e000      	b.n	8006832 <SysTick_Handler+0x36>
    gos_ported_reschedule(privilege);
 8006830:	dfff      	svc	255	; 0xff
}
 8006832:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <SysTick_Handler+0x5c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <SysTick_Handler+0x46>
        kernelSysTickHookFunction();
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <SysTick_Handler+0x5c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4798      	blx	r3
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20001a7c 	.word	0x20001a7c
 8006850:	20001a7a 	.word	0x20001a7a
 8006854:	e000ed04 	.word	0xe000ed04
 8006858:	20001a98 	.word	0x20001a98

0800685c <gos_kernelGetSysTicks>:
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
    return sysTicks;
 8006860:	4b03      	ldr	r3, [pc, #12]	; (8006870 <gos_kernelGetSysTicks+0x14>)
 8006862:	681b      	ldr	r3, [r3, #0]
}
 8006864:	4618      	mov	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20001a7c 	.word	0x20001a7c

08006874 <gos_kernelGetCpuUsage>:
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <gos_kernelGetCpuUsage+0x1c>)
 800687a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800687e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8006882:	3310      	adds	r3, #16
 8006884:	b29b      	uxth	r3, r3
}
 8006886:	4618      	mov	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	200002cc 	.word	0x200002cc

08006894 <gos_kernelReset>:
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
    resetRequired = GOS_TRUE;
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <gos_kernelReset+0x34>)
 800689c:	2236      	movs	r2, #54	; 0x36
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	2309      	movs	r3, #9
 80068a2:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	2b16      	cmp	r3, #22
 80068a8:	d106      	bne.n	80068b8 <gos_kernelReset+0x24>
 80068aa:	4b08      	ldr	r3, [pc, #32]	; (80068cc <gos_kernelReset+0x38>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a07      	ldr	r2, [pc, #28]	; (80068cc <gos_kernelReset+0x38>)
 80068b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b4:	6013      	str	r3, [r2, #0]
}
 80068b6:	e000      	b.n	80068ba <gos_kernelReset+0x26>
    gos_ported_reschedule(privilege);
 80068b8:	dfff      	svc	255	; 0xff
}
 80068ba:	bf00      	nop
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	200002c8 	.word	0x200002c8
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <gos_kernelDelayMs>:
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <gos_kernelDelayMs+0x34>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 80068e0:	bf00      	nop
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <gos_kernelDelayMs+0x34>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d8f5      	bhi.n	80068e2 <gos_kernelDelayMs+0x12>
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20001a7c 	.word	0x20001a7c

08006908 <gos_kernelCalculateTaskCpuUsages>:
{
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 8006912:	2300      	movs	r3, #0
 8006914:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800691e:	4b9f      	ldr	r3, [pc, #636]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 8006920:	795b      	ldrb	r3, [r3, #5]
 8006922:	461a      	mov	r2, r3
 8006924:	4b9e      	ldr	r3, [pc, #632]	; (8006ba0 <gos_kernelCalculateTaskCpuUsages+0x298>)
 8006926:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 800692a:	4b9c      	ldr	r3, [pc, #624]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 800692c:	791b      	ldrb	r3, [r3, #4]
 800692e:	4619      	mov	r1, r3
 8006930:	4b9c      	ldr	r3, [pc, #624]	; (8006ba4 <gos_kernelCalculateTaskCpuUsages+0x29c>)
 8006932:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8006936:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 8006938:	4b98      	ldr	r3, [pc, #608]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 800693a:	885b      	ldrh	r3, [r3, #2]
 800693c:	4619      	mov	r1, r3
 800693e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006942:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 8006946:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 8006948:	4a94      	ldr	r2, [pc, #592]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 800694a:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 800694c:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800694e:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006950:	2300      	movs	r3, #0
 8006952:	82fb      	strh	r3, [r7, #22]
 8006954:	e0fe      	b.n	8006b54 <gos_kernelCalculateTaskCpuUsages+0x24c>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8006956:	8afb      	ldrh	r3, [r7, #22]
 8006958:	4a93      	ldr	r2, [pc, #588]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 800695a:	216e      	movs	r1, #110	; 0x6e
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	4413      	add	r3, r2
 8006962:	335b      	adds	r3, #91	; 0x5b
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	4b8d      	ldr	r3, [pc, #564]	; (8006ba0 <gos_kernelCalculateTaskCpuUsages+0x298>)
 800696a:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 800696e:	8afb      	ldrh	r3, [r7, #22]
 8006970:	498d      	ldr	r1, [pc, #564]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006972:	206e      	movs	r0, #110	; 0x6e
 8006974:	fb00 f303 	mul.w	r3, r0, r3
 8006978:	440b      	add	r3, r1
 800697a:	335a      	adds	r3, #90	; 0x5a
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	4619      	mov	r1, r3
 8006980:	4b88      	ldr	r3, [pc, #544]	; (8006ba4 <gos_kernelCalculateTaskCpuUsages+0x29c>)
 8006982:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8006986:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8006988:	8afb      	ldrh	r3, [r7, #22]
 800698a:	4987      	ldr	r1, [pc, #540]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 800698c:	206e      	movs	r0, #110	; 0x6e
 800698e:	fb00 f303 	mul.w	r3, r0, r3
 8006992:	440b      	add	r3, r1
 8006994:	3358      	adds	r3, #88	; 0x58
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800699e:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80069a2:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 80069a4:	8afa      	ldrh	r2, [r7, #22]
 80069a6:	4980      	ldr	r1, [pc, #512]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 80069a8:	206e      	movs	r0, #110	; 0x6e
 80069aa:	fb00 f202 	mul.w	r2, r0, r2
 80069ae:	440a      	add	r2, r1
 80069b0:	3256      	adds	r2, #86	; 0x56
 80069b2:	8812      	ldrh	r2, [r2, #0]
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 80069b4:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80069b6:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80be 	beq.w	8006b3c <gos_kernelCalculateTaskCpuUsages+0x234>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80069c6:	fb03 f202 	mul.w	r2, r3, r2
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80069d0:	8afb      	ldrh	r3, [r7, #22]
 80069d2:	b290      	uxth	r0, r2
 80069d4:	4a74      	ldr	r2, [pc, #464]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 80069d6:	216e      	movs	r1, #110	; 0x6e
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	4413      	add	r3, r2
 80069de:	3364      	adds	r3, #100	; 0x64
 80069e0:	4602      	mov	r2, r0
 80069e2:	801a      	strh	r2, [r3, #0]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	2b36      	cmp	r3, #54	; 0x36
 80069e8:	d004      	beq.n	80069f4 <gos_kernelCalculateTaskCpuUsages+0xec>
 80069ea:	4b6c      	ldr	r3, [pc, #432]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 80069ec:	791b      	ldrb	r3, [r3, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 80a4 	beq.w	8006b3c <gos_kernelCalculateTaskCpuUsages+0x234>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80069fa:	fb03 f202 	mul.w	r2, r3, r2
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a04:	8afb      	ldrh	r3, [r7, #22]
 8006a06:	b290      	uxth	r0, r2
 8006a08:	4a67      	ldr	r2, [pc, #412]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006a0a:	216e      	movs	r1, #110	; 0x6e
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	4413      	add	r3, r2
 8006a12:	3362      	adds	r3, #98	; 0x62
 8006a14:	4602      	mov	r2, r0
 8006a16:	801a      	strh	r2, [r3, #0]
                        &taskDescriptors[taskIndex].taskRunTime,
 8006a18:	8afb      	ldrh	r3, [r7, #22]
                gos_runTimeAddMicroseconds(
 8006a1a:	226e      	movs	r2, #110	; 0x6e
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	3348      	adds	r3, #72	; 0x48
 8006a22:	4a61      	ldr	r2, [pc, #388]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006a24:	4413      	add	r3, r2
 8006a26:	1d98      	adds	r0, r3, #6
 8006a28:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 8006a2a:	4a5f      	ldr	r2, [pc, #380]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006a2c:	216e      	movs	r1, #110	; 0x6e
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	3356      	adds	r3, #86	; 0x56
 8006a36:	881b      	ldrh	r3, [r3, #0]
                gos_runTimeAddMicroseconds(
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	f002 fe1c 	bl	8009678 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 8006a40:	8afb      	ldrh	r3, [r7, #22]
                gos_runTimeAddMilliseconds(
 8006a42:	226e      	movs	r2, #110	; 0x6e
 8006a44:	fb02 f303 	mul.w	r3, r2, r3
 8006a48:	3348      	adds	r3, #72	; 0x48
 8006a4a:	4a57      	ldr	r2, [pc, #348]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006a4c:	4413      	add	r3, r2
 8006a4e:	1d98      	adds	r0, r3, #6
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 8006a50:	8afb      	ldrh	r3, [r7, #22]
 8006a52:	4a55      	ldr	r2, [pc, #340]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006a54:	216e      	movs	r1, #110	; 0x6e
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3358      	adds	r3, #88	; 0x58
 8006a5e:	881a      	ldrh	r2, [r3, #0]
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 8006a60:	8afb      	ldrh	r3, [r7, #22]
 8006a62:	4951      	ldr	r1, [pc, #324]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006a64:	246e      	movs	r4, #110	; 0x6e
 8006a66:	fb04 f303 	mul.w	r3, r4, r3
 8006a6a:	440b      	add	r3, r1
 8006a6c:	335a      	adds	r3, #90	; 0x5a
 8006a6e:	781b      	ldrb	r3, [r3, #0]
                gos_runTimeAddMilliseconds(
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	4619      	mov	r1, r3
 8006a74:	0149      	lsls	r1, r1, #5
 8006a76:	1ac9      	subs	r1, r1, r3
 8006a78:	0089      	lsls	r1, r1, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4413      	add	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	4619      	mov	r1, r3
 8006a86:	f002 fed1 	bl	800982c <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 8006a8a:	8afb      	ldrh	r3, [r7, #22]
 8006a8c:	4a46      	ldr	r2, [pc, #280]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006a8e:	216e      	movs	r1, #110	; 0x6e
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	335d      	adds	r3, #93	; 0x5d
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 8006a9c:	8afb      	ldrh	r3, [r7, #22]
 8006a9e:	4a42      	ldr	r2, [pc, #264]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006aa0:	216e      	movs	r1, #110	; 0x6e
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	335c      	adds	r3, #92	; 0x5c
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8006aae:	8afb      	ldrh	r3, [r7, #22]
 8006ab0:	4a3d      	ldr	r2, [pc, #244]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006ab2:	216e      	movs	r1, #110	; 0x6e
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	4413      	add	r3, r2
 8006aba:	335b      	adds	r3, #91	; 0x5b
 8006abc:	2200      	movs	r2, #0
 8006abe:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8006ac0:	8afb      	ldrh	r3, [r7, #22]
 8006ac2:	4a39      	ldr	r2, [pc, #228]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006ac4:	216e      	movs	r1, #110	; 0x6e
 8006ac6:	fb01 f303 	mul.w	r3, r1, r3
 8006aca:	4413      	add	r3, r2
 8006acc:	335a      	adds	r3, #90	; 0x5a
 8006ace:	2200      	movs	r2, #0
 8006ad0:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8006ad2:	8afb      	ldrh	r3, [r7, #22]
 8006ad4:	4a34      	ldr	r2, [pc, #208]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006ad6:	216e      	movs	r1, #110	; 0x6e
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	4413      	add	r3, r2
 8006ade:	3358      	adds	r3, #88	; 0x58
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	801a      	strh	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8006ae4:	8afb      	ldrh	r3, [r7, #22]
 8006ae6:	4a30      	ldr	r2, [pc, #192]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006ae8:	216e      	movs	r1, #110	; 0x6e
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	3356      	adds	r3, #86	; 0x56
 8006af2:	2200      	movs	r2, #0
 8006af4:	801a      	strh	r2, [r3, #0]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 8006af6:	8afb      	ldrh	r3, [r7, #22]
 8006af8:	4a2b      	ldr	r2, [pc, #172]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006afa:	216e      	movs	r1, #110	; 0x6e
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	4413      	add	r3, r2
 8006b02:	3362      	adds	r3, #98	; 0x62
 8006b04:	881a      	ldrh	r2, [r3, #0]
 8006b06:	8afb      	ldrh	r3, [r7, #22]
 8006b08:	4927      	ldr	r1, [pc, #156]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006b0a:	206e      	movs	r0, #110	; 0x6e
 8006b0c:	fb00 f303 	mul.w	r3, r0, r3
 8006b10:	440b      	add	r3, r1
 8006b12:	3360      	adds	r3, #96	; 0x60
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d910      	bls.n	8006b3c <gos_kernelCalculateTaskCpuUsages+0x234>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 8006b1a:	8afa      	ldrh	r2, [r7, #22]
 8006b1c:	8afb      	ldrh	r3, [r7, #22]
 8006b1e:	4922      	ldr	r1, [pc, #136]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006b20:	206e      	movs	r0, #110	; 0x6e
 8006b22:	fb00 f202 	mul.w	r2, r0, r2
 8006b26:	440a      	add	r2, r1
 8006b28:	3262      	adds	r2, #98	; 0x62
 8006b2a:	8810      	ldrh	r0, [r2, #0]
 8006b2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006b2e:	216e      	movs	r1, #110	; 0x6e
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	3360      	adds	r3, #96	; 0x60
 8006b38:	4602      	mov	r2, r0
 8006b3a:	801a      	strh	r2, [r3, #0]
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8006b3c:	8afb      	ldrh	r3, [r7, #22]
 8006b3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ba8 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8006b40:	216e      	movs	r1, #110	; 0x6e
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <gos_kernelCalculateTaskCpuUsages+0x256>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006b4e:	8afb      	ldrh	r3, [r7, #22]
 8006b50:	3301      	adds	r3, #1
 8006b52:	82fb      	strh	r3, [r7, #22]
 8006b54:	8afb      	ldrh	r3, [r7, #22]
 8006b56:	2b23      	cmp	r3, #35	; 0x23
 8006b58:	f67f aefd 	bls.w	8006956 <gos_kernelCalculateTaskCpuUsages+0x4e>
 8006b5c:	e000      	b.n	8006b60 <gos_kernelCalculateTaskCpuUsages+0x258>
            break;
 8006b5e:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	2b36      	cmp	r3, #54	; 0x36
 8006b64:	d003      	beq.n	8006b6e <gos_kernelCalculateTaskCpuUsages+0x266>
 8006b66:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 8006b68:	791b      	ldrb	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d011      	beq.n	8006b92 <gos_kernelCalculateTaskCpuUsages+0x28a>
        monitoringTime.days         = 0u;
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	71da      	strb	r2, [r3, #7]
        monitoringTime.hours        = 0u;
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 8006b7a:	4b08      	ldr	r3, [pc, #32]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <gos_kernelCalculateTaskCpuUsages+0x294>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	801a      	strh	r2, [r3, #0]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd90      	pop	{r4, r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20001a88 	.word	0x20001a88
 8006ba0:	03938700 	.word	0x03938700
 8006ba4:	000f4240 	.word	0x000f4240
 8006ba8:	200002cc 	.word	0x200002cc

08006bac <gos_kernelDump>:
{
 8006bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	b0a6      	sub	sp, #152	; 0x98
 8006bb2:	af14      	add	r7, sp, #80	; 0x50
    u16_t taskIndex = 0u;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 8006bba:	48a6      	ldr	r0, [pc, #664]	; (8006e54 <gos_kernelDump+0x2a8>)
 8006bbc:	f003 fadc 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8006bc0:	48a5      	ldr	r0, [pc, #660]	; (8006e58 <gos_kernelDump+0x2ac>)
 8006bc2:	f003 fad9 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8006bc6:	4ba5      	ldr	r3, [pc, #660]	; (8006e5c <gos_kernelDump+0x2b0>)
 8006bc8:	9302      	str	r3, [sp, #8]
 8006bca:	4ba5      	ldr	r3, [pc, #660]	; (8006e60 <gos_kernelDump+0x2b4>)
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	4ba5      	ldr	r3, [pc, #660]	; (8006e64 <gos_kernelDump+0x2b8>)
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4ba5      	ldr	r3, [pc, #660]	; (8006e68 <gos_kernelDump+0x2bc>)
 8006bd4:	4aa5      	ldr	r2, [pc, #660]	; (8006e6c <gos_kernelDump+0x2c0>)
 8006bd6:	49a6      	ldr	r1, [pc, #664]	; (8006e70 <gos_kernelDump+0x2c4>)
 8006bd8:	48a6      	ldr	r0, [pc, #664]	; (8006e74 <gos_kernelDump+0x2c8>)
 8006bda:	f003 facd 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8006bde:	489e      	ldr	r0, [pc, #632]	; (8006e58 <gos_kernelDump+0x2ac>)
 8006be0:	f003 faca 	bl	800a178 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006be4:	2300      	movs	r3, #0
 8006be6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006bea:	e1b9      	b.n	8006f60 <gos_kernelDump+0x3b4>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8006bec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006bf0:	4aa1      	ldr	r2, [pc, #644]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006bf2:	216e      	movs	r1, #110	; 0x6e
 8006bf4:	fb01 f303 	mul.w	r3, r1, r3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 81b5 	beq.w	8006f6c <gos_kernelDump+0x3c0>
                taskDescriptors[taskIndex].taskId,
 8006c02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c06:	4a9c      	ldr	r2, [pc, #624]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006c08:	216e      	movs	r1, #110	; 0x6e
 8006c0a:	fb01 f303 	mul.w	r3, r1, r3
 8006c0e:	4413      	add	r3, r2
 8006c10:	332a      	adds	r3, #42	; 0x2a
 8006c12:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8006c14:	4699      	mov	r9, r3
                taskDescriptors[taskIndex].taskName,
 8006c16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c1a:	226e      	movs	r2, #110	; 0x6e
 8006c1c:	fb02 f303 	mul.w	r3, r2, r3
 8006c20:	3308      	adds	r3, #8
 8006c22:	4a95      	ldr	r2, [pc, #596]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006c24:	4413      	add	r3, r2
 8006c26:	f103 0802 	add.w	r8, r3, #2
                taskDescriptors[taskIndex].taskPriority,
 8006c2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c2e:	4a92      	ldr	r2, [pc, #584]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006c30:	216e      	movs	r1, #110	; 0x6e
 8006c32:	fb01 f303 	mul.w	r3, r1, r3
 8006c36:	4413      	add	r3, r2
 8006c38:	3306      	adds	r3, #6
 8006c3a:	781b      	ldrb	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8006c3c:	469a      	mov	sl, r3
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006c3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c42:	4a8d      	ldr	r2, [pc, #564]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006c44:	216e      	movs	r1, #110	; 0x6e
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b21b      	sxth	r3, r3
        (void_t) gos_shellDriverTransmitString(
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da02      	bge.n	8006c5c <gos_kernelDump+0xb0>
 8006c56:	4b89      	ldr	r3, [pc, #548]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c5a:	e001      	b.n	8006c60 <gos_kernelDump+0xb4>
 8006c5c:	4b88      	ldr	r3, [pc, #544]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006c60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c64:	4a84      	ldr	r2, [pc, #528]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006c66:	216e      	movs	r1, #110	; 0x6e
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3308      	adds	r3, #8
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        (void_t) gos_shellDriverTransmitString(
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <gos_kernelDump+0xd4>
 8006c7a:	4b80      	ldr	r3, [pc, #512]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c7e:	e001      	b.n	8006c84 <gos_kernelDump+0xd8>
 8006c80:	4b7f      	ldr	r3, [pc, #508]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006c82:	63bb      	str	r3, [r7, #56]	; 0x38
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006c84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c88:	4a7b      	ldr	r2, [pc, #492]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006c8a:	216e      	movs	r1, #110	; 0x6e
 8006c8c:	fb01 f303 	mul.w	r3, r1, r3
 8006c90:	4413      	add	r3, r2
 8006c92:	3308      	adds	r3, #8
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (void_t) gos_shellDriverTransmitString(
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <gos_kernelDump+0xf8>
 8006c9e:	4b77      	ldr	r3, [pc, #476]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca2:	e001      	b.n	8006ca8 <gos_kernelDump+0xfc>
 8006ca4:	4b76      	ldr	r3, [pc, #472]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006ca8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006cac:	4a72      	ldr	r2, [pc, #456]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006cae:	216e      	movs	r1, #110	; 0x6e
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
        (void_t) gos_shellDriverTransmitString(
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <gos_kernelDump+0x11c>
 8006cc2:	4b6e      	ldr	r3, [pc, #440]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc6:	e001      	b.n	8006ccc <gos_kernelDump+0x120>
 8006cc8:	4b6d      	ldr	r3, [pc, #436]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006cca:	633b      	str	r3, [r7, #48]	; 0x30
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006ccc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006cd0:	4a69      	ldr	r2, [pc, #420]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006cd2:	216e      	movs	r1, #110	; 0x6e
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	3308      	adds	r3, #8
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
        (void_t) gos_shellDriverTransmitString(
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <gos_kernelDump+0x140>
 8006ce6:	4b65      	ldr	r3, [pc, #404]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cea:	e001      	b.n	8006cf0 <gos_kernelDump+0x144>
 8006cec:	4b64      	ldr	r3, [pc, #400]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006cf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006cf4:	4a60      	ldr	r2, [pc, #384]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006cf6:	216e      	movs	r1, #110	; 0x6e
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3308      	adds	r3, #8
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (void_t) gos_shellDriverTransmitString(
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <gos_kernelDump+0x164>
 8006d0a:	4b5c      	ldr	r3, [pc, #368]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0e:	e001      	b.n	8006d14 <gos_kernelDump+0x168>
 8006d10:	4b5b      	ldr	r3, [pc, #364]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006d14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d18:	4a57      	ldr	r2, [pc, #348]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006d1a:	216e      	movs	r1, #110	; 0x6e
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	4413      	add	r3, r2
 8006d22:	3308      	adds	r3, #8
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
        (void_t) gos_shellDriverTransmitString(
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <gos_kernelDump+0x188>
 8006d2e:	4b53      	ldr	r3, [pc, #332]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
 8006d32:	e001      	b.n	8006d38 <gos_kernelDump+0x18c>
 8006d34:	4b52      	ldr	r3, [pc, #328]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006d38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d3c:	4a4e      	ldr	r2, [pc, #312]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006d3e:	216e      	movs	r1, #110	; 0x6e
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	4413      	add	r3, r2
 8006d46:	3308      	adds	r3, #8
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
        (void_t) gos_shellDriverTransmitString(
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <gos_kernelDump+0x1ac>
 8006d52:	4b4a      	ldr	r3, [pc, #296]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006d54:	623b      	str	r3, [r7, #32]
 8006d56:	e001      	b.n	8006d5c <gos_kernelDump+0x1b0>
 8006d58:	4b49      	ldr	r3, [pc, #292]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006d5a:	623b      	str	r3, [r7, #32]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006d5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d60:	4a45      	ldr	r2, [pc, #276]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006d62:	216e      	movs	r1, #110	; 0x6e
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
        (void_t) gos_shellDriverTransmitString(
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <gos_kernelDump+0x1d0>
 8006d76:	4b41      	ldr	r3, [pc, #260]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	e001      	b.n	8006d80 <gos_kernelDump+0x1d4>
 8006d7c:	4b40      	ldr	r3, [pc, #256]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006d7e:	61fb      	str	r3, [r7, #28]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006d80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006d84:	493c      	ldr	r1, [pc, #240]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006d86:	236e      	movs	r3, #110	; 0x6e
 8006d88:	fb02 f303 	mul.w	r3, r2, r3
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3308      	adds	r3, #8
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
        (void_t) gos_shellDriverTransmitString(
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <gos_kernelDump+0x1f4>
 8006d9a:	4b38      	ldr	r3, [pc, #224]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	e001      	b.n	8006da4 <gos_kernelDump+0x1f8>
 8006da0:	4b37      	ldr	r3, [pc, #220]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006da2:	61bb      	str	r3, [r7, #24]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006da4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006da8:	4933      	ldr	r1, [pc, #204]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006daa:	236e      	movs	r3, #110	; 0x6e
 8006dac:	fb02 f303 	mul.w	r3, r2, r3
 8006db0:	440b      	add	r3, r1
 8006db2:	3308      	adds	r3, #8
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	f003 0320 	and.w	r3, r3, #32
        (void_t) gos_shellDriverTransmitString(
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <gos_kernelDump+0x218>
 8006dbe:	4b2f      	ldr	r3, [pc, #188]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e001      	b.n	8006dc8 <gos_kernelDump+0x21c>
 8006dc4:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006dc6:	617b      	str	r3, [r7, #20]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006dc8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006dcc:	492a      	ldr	r1, [pc, #168]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006dce:	236e      	movs	r3, #110	; 0x6e
 8006dd0:	fb02 f303 	mul.w	r3, r2, r3
 8006dd4:	440b      	add	r3, r1
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	f003 0310 	and.w	r3, r3, #16
        (void_t) gos_shellDriverTransmitString(
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <gos_kernelDump+0x23c>
 8006de2:	4b26      	ldr	r3, [pc, #152]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	e001      	b.n	8006dec <gos_kernelDump+0x240>
 8006de8:	4b25      	ldr	r3, [pc, #148]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006dea:	613b      	str	r3, [r7, #16]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006dec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006df0:	4921      	ldr	r1, [pc, #132]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006df2:	236e      	movs	r3, #110	; 0x6e
 8006df4:	fb02 f303 	mul.w	r3, r2, r3
 8006df8:	440b      	add	r3, r1
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
        (void_t) gos_shellDriverTransmitString(
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <gos_kernelDump+0x260>
 8006e06:	4b1d      	ldr	r3, [pc, #116]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	e001      	b.n	8006e10 <gos_kernelDump+0x264>
 8006e0c:	4b1c      	ldr	r3, [pc, #112]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006e0e:	60fb      	str	r3, [r7, #12]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006e10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006e14:	4918      	ldr	r1, [pc, #96]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006e16:	236e      	movs	r3, #110	; 0x6e
 8006e18:	fb02 f303 	mul.w	r3, r2, r3
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3308      	adds	r3, #8
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	f003 0304 	and.w	r3, r3, #4
        (void_t) gos_shellDriverTransmitString(
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <gos_kernelDump+0x284>
 8006e2a:	4b14      	ldr	r3, [pc, #80]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	e001      	b.n	8006e34 <gos_kernelDump+0x288>
 8006e30:	4b13      	ldr	r3, [pc, #76]	; (8006e80 <gos_kernelDump+0x2d4>)
 8006e32:	60bb      	str	r3, [r7, #8]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006e34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006e38:	490f      	ldr	r1, [pc, #60]	; (8006e78 <gos_kernelDump+0x2cc>)
 8006e3a:	236e      	movs	r3, #110	; 0x6e
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	440b      	add	r3, r1
 8006e42:	3308      	adds	r3, #8
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
        (void_t) gos_shellDriverTransmitString(
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01a      	beq.n	8006e84 <gos_kernelDump+0x2d8>
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <gos_kernelDump+0x2d0>)
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	e019      	b.n	8006e88 <gos_kernelDump+0x2dc>
 8006e54:	0800d3f4 	.word	0x0800d3f4
 8006e58:	0800d404 	.word	0x0800d404
 8006e5c:	0800d4a0 	.word	0x0800d4a0
 8006e60:	0800d4a8 	.word	0x0800d4a8
 8006e64:	0800d4b0 	.word	0x0800d4b0
 8006e68:	0800d460 	.word	0x0800d460
 8006e6c:	0800d468 	.word	0x0800d468
 8006e70:	0800d470 	.word	0x0800d470
 8006e74:	0800d474 	.word	0x0800d474
 8006e78:	200002cc 	.word	0x200002cc
 8006e7c:	0800d4bc 	.word	0x0800d4bc
 8006e80:	0800d4c4 	.word	0x0800d4c4
 8006e84:	4bbe      	ldr	r3, [pc, #760]	; (8007180 <gos_kernelDump+0x5d4>)
 8006e86:	607b      	str	r3, [r7, #4]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006e88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006e8c:	49bd      	ldr	r1, [pc, #756]	; (8007184 <gos_kernelDump+0x5d8>)
 8006e8e:	236e      	movs	r3, #110	; 0x6e
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	440b      	add	r3, r1
 8006e96:	3308      	adds	r3, #8
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
        (void_t) gos_shellDriverTransmitString(
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <gos_kernelDump+0x2fa>
 8006ea2:	4db9      	ldr	r5, [pc, #740]	; (8007188 <gos_kernelDump+0x5dc>)
 8006ea4:	e000      	b.n	8006ea8 <gos_kernelDump+0x2fc>
 8006ea6:	4db6      	ldr	r5, [pc, #728]	; (8007180 <gos_kernelDump+0x5d4>)
                taskDescriptors[taskIndex].taskCpuUsage / 100,
 8006ea8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006eac:	49b5      	ldr	r1, [pc, #724]	; (8007184 <gos_kernelDump+0x5d8>)
 8006eae:	236e      	movs	r3, #110	; 0x6e
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
 8006eb4:	440b      	add	r3, r1
 8006eb6:	3362      	adds	r3, #98	; 0x62
 8006eb8:	881a      	ldrh	r2, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8006eba:	4bb4      	ldr	r3, [pc, #720]	; (800718c <gos_kernelDump+0x5e0>)
 8006ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	461e      	mov	r6, r3
                taskDescriptors[taskIndex].taskCpuUsage % 100,
 8006ec6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006eca:	49ae      	ldr	r1, [pc, #696]	; (8007184 <gos_kernelDump+0x5d8>)
 8006ecc:	236e      	movs	r3, #110	; 0x6e
 8006ece:	fb02 f303 	mul.w	r3, r2, r3
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3362      	adds	r3, #98	; 0x62
 8006ed6:	8819      	ldrh	r1, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8006ed8:	4bac      	ldr	r3, [pc, #688]	; (800718c <gos_kernelDump+0x5e0>)
 8006eda:	fba3 2301 	umull	r2, r3, r3, r1
 8006ede:	095a      	lsrs	r2, r3, #5
 8006ee0:	2364      	movs	r3, #100	; 0x64
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
 8006ee6:	1acb      	subs	r3, r1, r3
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	461c      	mov	r4, r3
 8006eec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006ef0:	49a4      	ldr	r1, [pc, #656]	; (8007184 <gos_kernelDump+0x5d8>)
 8006ef2:	236e      	movs	r3, #110	; 0x6e
 8006ef4:	fb02 f303 	mul.w	r3, r2, r3
 8006ef8:	440b      	add	r3, r1
 8006efa:	3304      	adds	r3, #4
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fd92 	bl	8007a28 <gos_kernelGetTaskStateString>
 8006f04:	4603      	mov	r3, r0
 8006f06:	9312      	str	r3, [sp, #72]	; 0x48
 8006f08:	9411      	str	r4, [sp, #68]	; 0x44
 8006f0a:	9610      	str	r6, [sp, #64]	; 0x40
 8006f0c:	950f      	str	r5, [sp, #60]	; 0x3c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	930e      	str	r3, [sp, #56]	; 0x38
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	930d      	str	r3, [sp, #52]	; 0x34
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	930c      	str	r3, [sp, #48]	; 0x30
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	930a      	str	r3, [sp, #40]	; 0x28
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	9309      	str	r3, [sp, #36]	; 0x24
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	9308      	str	r3, [sp, #32]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	9307      	str	r3, [sp, #28]
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	9306      	str	r3, [sp, #24]
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	9303      	str	r3, [sp, #12]
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	9302      	str	r3, [sp, #8]
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4653      	mov	r3, sl
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	488f      	ldr	r0, [pc, #572]	; (8007190 <gos_kernelDump+0x5e4>)
 8006f52:	f003 f911 	bl	800a178 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006f56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f64:	2b23      	cmp	r3, #35	; 0x23
 8006f66:	f67f ae41 	bls.w	8006bec <gos_kernelDump+0x40>
 8006f6a:	e000      	b.n	8006f6e <gos_kernelDump+0x3c2>
            break;
 8006f6c:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 8006f6e:	4889      	ldr	r0, [pc, #548]	; (8007194 <gos_kernelDump+0x5e8>)
 8006f70:	f003 f902 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 8006f74:	4888      	ldr	r0, [pc, #544]	; (8007198 <gos_kernelDump+0x5ec>)
 8006f76:	f003 f8ff 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8006f7a:	4888      	ldr	r0, [pc, #544]	; (800719c <gos_kernelDump+0x5f0>)
 8006f7c:	f003 f8fc 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8006f80:	4b87      	ldr	r3, [pc, #540]	; (80071a0 <gos_kernelDump+0x5f4>)
 8006f82:	4a88      	ldr	r2, [pc, #544]	; (80071a4 <gos_kernelDump+0x5f8>)
 8006f84:	4988      	ldr	r1, [pc, #544]	; (80071a8 <gos_kernelDump+0x5fc>)
 8006f86:	4889      	ldr	r0, [pc, #548]	; (80071ac <gos_kernelDump+0x600>)
 8006f88:	f003 f8f6 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8006f8c:	4883      	ldr	r0, [pc, #524]	; (800719c <gos_kernelDump+0x5f0>)
 8006f8e:	f003 f8f3 	bl	800a178 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006f92:	2300      	movs	r3, #0
 8006f94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f98:	e049      	b.n	800702e <gos_kernelDump+0x482>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8006f9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f9e:	4a79      	ldr	r2, [pc, #484]	; (8007184 <gos_kernelDump+0x5d8>)
 8006fa0:	216e      	movs	r1, #110	; 0x6e
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d044      	beq.n	8007038 <gos_kernelDump+0x48c>
                taskDescriptors[taskIndex].taskId,
 8006fae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fb2:	4a74      	ldr	r2, [pc, #464]	; (8007184 <gos_kernelDump+0x5d8>)
 8006fb4:	216e      	movs	r1, #110	; 0x6e
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	332a      	adds	r3, #42	; 0x2a
 8006fbe:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8006fc0:	461c      	mov	r4, r3
                taskDescriptors[taskIndex].taskName,
 8006fc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fc6:	226e      	movs	r2, #110	; 0x6e
 8006fc8:	fb02 f303 	mul.w	r3, r2, r3
 8006fcc:	3308      	adds	r3, #8
 8006fce:	4a6d      	ldr	r2, [pc, #436]	; (8007184 <gos_kernelDump+0x5d8>)
 8006fd0:	4413      	add	r3, r2
 8006fd2:	1c99      	adds	r1, r3, #2
                taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 8006fd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fd8:	4a6a      	ldr	r2, [pc, #424]	; (8007184 <gos_kernelDump+0x5d8>)
 8006fda:	206e      	movs	r0, #110	; 0x6e
 8006fdc:	fb00 f303 	mul.w	r3, r0, r3
 8006fe0:	4413      	add	r3, r2
 8006fe2:	3360      	adds	r3, #96	; 0x60
 8006fe4:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8006fe6:	4a69      	ldr	r2, [pc, #420]	; (800718c <gos_kernelDump+0x5e0>)
 8006fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461d      	mov	r5, r3
                taskDescriptors[taskIndex].taskCpuUsageMax % 100
 8006ff2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ff6:	4a63      	ldr	r2, [pc, #396]	; (8007184 <gos_kernelDump+0x5d8>)
 8006ff8:	206e      	movs	r0, #110	; 0x6e
 8006ffa:	fb00 f303 	mul.w	r3, r0, r3
 8006ffe:	4413      	add	r3, r2
 8007000:	3360      	adds	r3, #96	; 0x60
 8007002:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8007004:	4a61      	ldr	r2, [pc, #388]	; (800718c <gos_kernelDump+0x5e0>)
 8007006:	fba2 0203 	umull	r0, r2, r2, r3
 800700a:	0952      	lsrs	r2, r2, #5
 800700c:	2064      	movs	r0, #100	; 0x64
 800700e:	fb00 f202 	mul.w	r2, r0, r2
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	b29b      	uxth	r3, r3
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	462b      	mov	r3, r5
 800701a:	460a      	mov	r2, r1
 800701c:	4621      	mov	r1, r4
 800701e:	4864      	ldr	r0, [pc, #400]	; (80071b0 <gos_kernelDump+0x604>)
 8007020:	f003 f8aa 	bl	800a178 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8007024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007028:	3301      	adds	r3, #1
 800702a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800702e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007032:	2b23      	cmp	r3, #35	; 0x23
 8007034:	d9b1      	bls.n	8006f9a <gos_kernelDump+0x3ee>
 8007036:	e000      	b.n	800703a <gos_kernelDump+0x48e>
            break;
 8007038:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 800703a:	485e      	ldr	r0, [pc, #376]	; (80071b4 <gos_kernelDump+0x608>)
 800703c:	f003 f89c 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 8007040:	485d      	ldr	r0, [pc, #372]	; (80071b8 <gos_kernelDump+0x60c>)
 8007042:	f003 f899 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8007046:	485d      	ldr	r0, [pc, #372]	; (80071bc <gos_kernelDump+0x610>)
 8007048:	f003 f896 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 800704c:	4b5c      	ldr	r3, [pc, #368]	; (80071c0 <gos_kernelDump+0x614>)
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	4b5c      	ldr	r3, [pc, #368]	; (80071c4 <gos_kernelDump+0x618>)
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4b5c      	ldr	r3, [pc, #368]	; (80071c8 <gos_kernelDump+0x61c>)
 8007056:	4a53      	ldr	r2, [pc, #332]	; (80071a4 <gos_kernelDump+0x5f8>)
 8007058:	4953      	ldr	r1, [pc, #332]	; (80071a8 <gos_kernelDump+0x5fc>)
 800705a:	485c      	ldr	r0, [pc, #368]	; (80071cc <gos_kernelDump+0x620>)
 800705c:	f003 f88c 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8007060:	4856      	ldr	r0, [pc, #344]	; (80071bc <gos_kernelDump+0x610>)
 8007062:	f003 f889 	bl	800a178 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8007066:	2300      	movs	r3, #0
 8007068:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800706c:	e081      	b.n	8007172 <gos_kernelDump+0x5c6>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 800706e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007072:	4a44      	ldr	r2, [pc, #272]	; (8007184 <gos_kernelDump+0x5d8>)
 8007074:	216e      	movs	r1, #110	; 0x6e
 8007076:	fb01 f303 	mul.w	r3, r1, r3
 800707a:	4413      	add	r3, r2
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 80a8 	beq.w	80071d4 <gos_kernelDump+0x628>
                taskDescriptors[taskIndex].taskId,
 8007084:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007088:	4a3e      	ldr	r2, [pc, #248]	; (8007184 <gos_kernelDump+0x5d8>)
 800708a:	216e      	movs	r1, #110	; 0x6e
 800708c:	fb01 f303 	mul.w	r3, r1, r3
 8007090:	4413      	add	r3, r2
 8007092:	332a      	adds	r3, #42	; 0x2a
 8007094:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8007096:	469c      	mov	ip, r3
                taskDescriptors[taskIndex].taskName,
 8007098:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800709c:	226e      	movs	r2, #110	; 0x6e
 800709e:	fb02 f303 	mul.w	r3, r2, r3
 80070a2:	3308      	adds	r3, #8
 80070a4:	4a37      	ldr	r2, [pc, #220]	; (8007184 <gos_kernelDump+0x5d8>)
 80070a6:	4413      	add	r3, r2
 80070a8:	1c9c      	adds	r4, r3, #2
                taskDescriptors[taskIndex].taskStackSize,
 80070aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80070ae:	4a35      	ldr	r2, [pc, #212]	; (8007184 <gos_kernelDump+0x5d8>)
 80070b0:	216e      	movs	r1, #110	; 0x6e
 80070b2:	fb01 f303 	mul.w	r3, r1, r3
 80070b6:	4413      	add	r3, r2
 80070b8:	334c      	adds	r3, #76	; 0x4c
 80070ba:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80070bc:	469e      	mov	lr, r3
                taskDescriptors[taskIndex].taskStackMaxUsage,
 80070be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80070c2:	4a30      	ldr	r2, [pc, #192]	; (8007184 <gos_kernelDump+0x5d8>)
 80070c4:	216e      	movs	r1, #110	; 0x6e
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	4413      	add	r3, r2
 80070cc:	336a      	adds	r3, #106	; 0x6a
 80070ce:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80070d0:	461e      	mov	r6, r3
                ((10000 * taskDescriptors[taskIndex].taskStackMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 80070d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80070d6:	4a2b      	ldr	r2, [pc, #172]	; (8007184 <gos_kernelDump+0x5d8>)
 80070d8:	216e      	movs	r1, #110	; 0x6e
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	4413      	add	r3, r2
 80070e0:	336a      	adds	r3, #106	; 0x6a
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80070ea:	fb02 f303 	mul.w	r3, r2, r3
 80070ee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80070f2:	4924      	ldr	r1, [pc, #144]	; (8007184 <gos_kernelDump+0x5d8>)
 80070f4:	206e      	movs	r0, #110	; 0x6e
 80070f6:	fb00 f202 	mul.w	r2, r0, r2
 80070fa:	440a      	add	r2, r1
 80070fc:	324c      	adds	r2, #76	; 0x4c
 80070fe:	8812      	ldrh	r2, [r2, #0]
 8007100:	fb93 f3f2 	sdiv	r3, r3, r2
        (void_t) gos_shellDriverTransmitString(
 8007104:	4a21      	ldr	r2, [pc, #132]	; (800718c <gos_kernelDump+0x5e0>)
 8007106:	fb82 1203 	smull	r1, r2, r2, r3
 800710a:	1152      	asrs	r2, r2, #5
 800710c:	17db      	asrs	r3, r3, #31
 800710e:	1ad1      	subs	r1, r2, r3
                ((10000 * taskDescriptors[taskIndex].taskStackMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 8007110:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <gos_kernelDump+0x5d8>)
 8007116:	206e      	movs	r0, #110	; 0x6e
 8007118:	fb00 f303 	mul.w	r3, r0, r3
 800711c:	4413      	add	r3, r2
 800711e:	336a      	adds	r3, #106	; 0x6a
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f242 7310 	movw	r3, #10000	; 0x2710
 8007128:	fb02 f303 	mul.w	r3, r2, r3
 800712c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007130:	4814      	ldr	r0, [pc, #80]	; (8007184 <gos_kernelDump+0x5d8>)
 8007132:	256e      	movs	r5, #110	; 0x6e
 8007134:	fb05 f202 	mul.w	r2, r5, r2
 8007138:	4402      	add	r2, r0
 800713a:	324c      	adds	r2, #76	; 0x4c
 800713c:	8812      	ldrh	r2, [r2, #0]
 800713e:	fb93 f2f2 	sdiv	r2, r3, r2
        (void_t) gos_shellDriverTransmitString(
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <gos_kernelDump+0x5e0>)
 8007144:	fb83 0302 	smull	r0, r3, r3, r2
 8007148:	1158      	asrs	r0, r3, #5
 800714a:	17d3      	asrs	r3, r2, #31
 800714c:	1ac3      	subs	r3, r0, r3
 800714e:	2064      	movs	r0, #100	; 0x64
 8007150:	fb00 f303 	mul.w	r3, r0, r3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	9302      	str	r3, [sp, #8]
 8007158:	9101      	str	r1, [sp, #4]
 800715a:	9600      	str	r6, [sp, #0]
 800715c:	4673      	mov	r3, lr
 800715e:	4622      	mov	r2, r4
 8007160:	4661      	mov	r1, ip
 8007162:	481b      	ldr	r0, [pc, #108]	; (80071d0 <gos_kernelDump+0x624>)
 8007164:	f003 f808 	bl	800a178 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8007168:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800716c:	3301      	adds	r3, #1
 800716e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007172:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007176:	2b23      	cmp	r3, #35	; 0x23
 8007178:	f67f af79 	bls.w	800706e <gos_kernelDump+0x4c2>
 800717c:	e02b      	b.n	80071d6 <gos_kernelDump+0x62a>
 800717e:	bf00      	nop
 8007180:	0800d4c4 	.word	0x0800d4c4
 8007184:	200002cc 	.word	0x200002cc
 8007188:	0800d4bc 	.word	0x0800d4bc
 800718c:	51eb851f 	.word	0x51eb851f
 8007190:	0800d4cc 	.word	0x0800d4cc
 8007194:	0800d520 	.word	0x0800d520
 8007198:	0800d580 	.word	0x0800d580
 800719c:	0800d594 	.word	0x0800d594
 80071a0:	0800d5d0 	.word	0x0800d5d0
 80071a4:	0800d468 	.word	0x0800d468
 80071a8:	0800d470 	.word	0x0800d470
 80071ac:	0800d5dc 	.word	0x0800d5dc
 80071b0:	0800d5f4 	.word	0x0800d5f4
 80071b4:	0800d614 	.word	0x0800d614
 80071b8:	0800d650 	.word	0x0800d650
 80071bc:	0800d664 	.word	0x0800d664
 80071c0:	0800d6e4 	.word	0x0800d6e4
 80071c4:	0800d6f0 	.word	0x0800d6f0
 80071c8:	0800d6b8 	.word	0x0800d6b8
 80071cc:	0800d6c0 	.word	0x0800d6c0
 80071d0:	0800d700 	.word	0x0800d700
            break;
 80071d4:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 80071d6:	4804      	ldr	r0, [pc, #16]	; (80071e8 <gos_kernelDump+0x63c>)
 80071d8:	f002 ffce 	bl	800a178 <gos_shellDriverTransmitString>
}
 80071dc:	bf00      	nop
 80071de:	3748      	adds	r7, #72	; 0x48
 80071e0:	46bd      	mov	sp, r7
 80071e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e6:	bf00      	nop
 80071e8:	0800d734 	.word	0x0800d734

080071ec <gos_kernelIsCallerIsr>:
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <gos_kernelIsCallerIsr+0x1c>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <gos_kernelIsCallerIsr+0x10>
 80071f8:	2336      	movs	r3, #54	; 0x36
 80071fa:	e000      	b.n	80071fe <gos_kernelIsCallerIsr+0x12>
 80071fc:	2349      	movs	r3, #73	; 0x49
}
 80071fe:	4618      	mov	r0, r3
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	20001a7b 	.word	0x20001a7b

0800720c <SVC_Handler>:
    gos_ported_handleSVC();
 800720c:	f01e 0f04 	tst.w	lr, #4
 8007210:	bf0c      	ite	eq
 8007212:	f3ef 8008 	mrseq	r0, MSP
 8007216:	f3ef 8009 	mrsne	r0, PSP
 800721a:	4b06      	ldr	r3, [pc, #24]	; (8007234 <SVC_Handler+0x28>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b36      	cmp	r3, #54	; 0x36
 8007220:	d104      	bne.n	800722c <SVC_Handler+0x20>
 8007222:	4b04      	ldr	r3, [pc, #16]	; (8007234 <SVC_Handler+0x28>)
 8007224:	2249      	movs	r2, #73	; 0x49
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	f000 fc52 	bl	8007ad0 <gos_kernelProcessorReset>
 800722c:	f000 b804 	b.w	8007238 <gos_kernelSVC_HandlerMain>
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	200002c8 	.word	0x200002c8

08007238 <gos_kernelSVC_HandlerMain>:
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3318      	adds	r3, #24
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3b02      	subs	r3, #2
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	72fb      	strb	r3, [r7, #11]
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	2bff      	cmp	r3, #255	; 0xff
 8007258:	d105      	bne.n	8007266 <gos_kernelSVC_HandlerMain+0x2e>
 800725a:	4b06      	ldr	r3, [pc, #24]	; (8007274 <gos_kernelSVC_HandlerMain+0x3c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a05      	ldr	r2, [pc, #20]	; (8007274 <gos_kernelSVC_HandlerMain+0x3c>)
 8007260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007264:	6013      	str	r3, [r2, #0]
}
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	e000ed04 	.word	0xe000ed04

08007278 <PendSV_Handler>:
    gos_ported_doContextSwitch();
 8007278:	b500      	push	{lr}
 800727a:	f3ef 8009 	mrs	r0, PSP
 800727e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007282:	f000 f8e3 	bl	800744c <gos_kernelSaveCurrentPsp>
 8007286:	f000 f8f9 	bl	800747c <gos_kernelSelectNextTask>
 800728a:	f000 f8cb 	bl	8007424 <gos_kernelGetCurrentPsp>
 800728e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007292:	f380 8809 	msr	PSP, r0
 8007296:	f85d eb04 	ldr.w	lr, [sp], #4
 800729a:	4770      	bx	lr
}
 800729c:	bf00      	nop
	...

080072a0 <gos_kernelCheckTaskStack>:
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af04      	add	r7, sp, #16
    u32_t sp = 0u;
 80072a6:	2300      	movs	r3, #0
 80072a8:	607b      	str	r3, [r7, #4]
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 80072aa:	f3ef 8309 	mrs	r3, PSP
 80072ae:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d02b      	beq.n	800730e <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 80072b6:	4b3d      	ldr	r3, [pc, #244]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a3d      	ldr	r2, [pc, #244]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 80072bc:	216e      	movs	r1, #110	; 0x6e
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	3360      	adds	r3, #96	; 0x60
 80072c6:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d21e      	bcs.n	800730e <gos_kernelCheckTaskStack+0x6e>
                taskDescriptors[currentTaskIndex].taskName,
 80072d0:	4b36      	ldr	r3, [pc, #216]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	226e      	movs	r2, #110	; 0x6e
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	3308      	adds	r3, #8
 80072dc:	4a34      	ldr	r2, [pc, #208]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 80072de:	4413      	add	r3, r2
 80072e0:	3302      	adds	r3, #2
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 80072e2:	4a32      	ldr	r2, [pc, #200]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	4932      	ldr	r1, [pc, #200]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 80072e8:	206e      	movs	r0, #110	; 0x6e
 80072ea:	fb00 f202 	mul.w	r2, r0, r2
 80072ee:	440a      	add	r2, r1
 80072f0:	3260      	adds	r2, #96	; 0x60
 80072f2:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	1a8a      	subs	r2, r1, r2
 80072fa:	9202      	str	r2, [sp, #8]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	9201      	str	r2, [sp, #4]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	4b2c      	ldr	r3, [pc, #176]	; (80073b4 <gos_kernelCheckTaskStack+0x114>)
 8007304:	2200      	movs	r2, #0
 8007306:	2100      	movs	r1, #0
 8007308:	2034      	movs	r0, #52	; 0x34
 800730a:	f000 fd55 	bl	8007db8 <gos_errorHandler>
    if (sp != 0 &&
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d047      	beq.n	80073a4 <gos_kernelCheckTaskStack+0x104>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a25      	ldr	r2, [pc, #148]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 800731a:	216e      	movs	r1, #110	; 0x6e
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	4413      	add	r3, r2
 8007322:	3360      	adds	r3, #96	; 0x60
 8007324:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8007328:	4a20      	ldr	r2, [pc, #128]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	4920      	ldr	r1, [pc, #128]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 800732e:	206e      	movs	r0, #110	; 0x6e
 8007330:	fb00 f202 	mul.w	r2, r0, r2
 8007334:	440a      	add	r2, r1
 8007336:	324c      	adds	r2, #76	; 0x4c
 8007338:	8812      	ldrh	r2, [r2, #0]
 800733a:	441a      	add	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	3b40      	subs	r3, #64	; 0x40
        taskDescriptors[currentTaskIndex].taskStackMaxUsage)
 8007342:	4a1a      	ldr	r2, [pc, #104]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 8007344:	6812      	ldr	r2, [r2, #0]
 8007346:	491a      	ldr	r1, [pc, #104]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 8007348:	206e      	movs	r0, #110	; 0x6e
 800734a:	fb00 f202 	mul.w	r2, r0, r2
 800734e:	440a      	add	r2, r1
 8007350:	326a      	adds	r2, #106	; 0x6a
 8007352:	8812      	ldrh	r2, [r2, #0]
    if (sp != 0 &&
 8007354:	4293      	cmp	r3, r2
 8007356:	d925      	bls.n	80073a4 <gos_kernelCheckTaskStack+0x104>
        taskDescriptors[currentTaskIndex].taskStackMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 8007358:	4b14      	ldr	r3, [pc, #80]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 800735e:	216e      	movs	r1, #110	; 0x6e
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	4413      	add	r3, r2
 8007366:	3360      	adds	r3, #96	; 0x60
 8007368:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800736c:	b29a      	uxth	r2, r3
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	490f      	ldr	r1, [pc, #60]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 8007374:	206e      	movs	r0, #110	; 0x6e
 8007376:	fb00 f303 	mul.w	r3, r0, r3
 800737a:	440b      	add	r3, r1
 800737c:	334c      	adds	r3, #76	; 0x4c
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	4413      	add	r3, r2
 8007382:	b29a      	uxth	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	b29b      	uxth	r3, r3
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	b29a      	uxth	r2, r3
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <gos_kernelCheckTaskStack+0x10c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3a20      	subs	r2, #32
 8007392:	b290      	uxth	r0, r2
 8007394:	4a06      	ldr	r2, [pc, #24]	; (80073b0 <gos_kernelCheckTaskStack+0x110>)
 8007396:	216e      	movs	r1, #110	; 0x6e
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	336a      	adds	r3, #106	; 0x6a
 80073a0:	4602      	mov	r2, r0
 80073a2:	801a      	strh	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20001a80 	.word	0x20001a80
 80073b0:	200002cc 	.word	0x200002cc
 80073b4:	0800d788 	.word	0x0800d788

080073b8 <gos_kernelCheckTaskDescriptor>:
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
    gos_result_t taskDescCheckResult = GOS_SUCCESS;
 80073c0:	2355      	movs	r3, #85	; 0x55
 80073c2:	73fb      	strb	r3, [r7, #15]
    if (taskDescriptor->taskFunction == NULL                    ||
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d020      	beq.n	800740e <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskPrivilegeLevel == 0                 ||
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	891b      	ldrh	r3, [r3, #8]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01b      	beq.n	800740e <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskFunction == gos_kernelIdleTask      ||
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
 80073da:	4a11      	ldr	r2, [pc, #68]	; (8007420 <gos_kernelCheckTaskDescriptor+0x68>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d016      	beq.n	800740e <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80073e6:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction == gos_kernelIdleTask      ||
 80073e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ec:	d80f      	bhi.n	800740e <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80073f4:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 80073f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fa:	d308      	bcc.n	800740e <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskStackSize % 4 != 0u)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8007402:	b29b      	uxth	r3, r3
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <gos_kernelCheckTaskDescriptor+0x5a>
        taskDescCheckResult = GOS_ERROR;
 800740e:	23ae      	movs	r3, #174	; 0xae
 8007410:	73fb      	strb	r3, [r7, #15]
    return taskDescCheckResult;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	0800773d 	.word	0x0800773d

08007424 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <gos_kernelGetCurrentPsp+0x20>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a06      	ldr	r2, [pc, #24]	; (8007448 <gos_kernelGetCurrentPsp+0x24>)
 800742e:	216e      	movs	r1, #110	; 0x6e
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	4413      	add	r3, r2
 8007436:	3340      	adds	r3, #64	; 0x40
 8007438:	681b      	ldr	r3, [r3, #0]
}
 800743a:	4618      	mov	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	20001a80 	.word	0x20001a80
 8007448:	200002cc 	.word	0x200002cc

0800744c <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 8007454:	4b07      	ldr	r3, [pc, #28]	; (8007474 <gos_kernelSaveCurrentPsp+0x28>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a07      	ldr	r2, [pc, #28]	; (8007478 <gos_kernelSaveCurrentPsp+0x2c>)
 800745a:	216e      	movs	r1, #110	; 0x6e
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	4413      	add	r3, r2
 8007462:	3340      	adds	r3, #64	; 0x40
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	20001a80 	.word	0x20001a80
 8007478:	200002cc 	.word	0x200002cc

0800747c <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 8007482:	2300      	movs	r3, #0
 8007484:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 8007486:	23ff      	movs	r3, #255	; 0xff
 8007488:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 800748a:	2300      	movs	r3, #0
 800748c:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 800748e:	2300      	movs	r3, #0
 8007490:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 8007492:	2300      	movs	r3, #0
 8007494:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 8007496:	4ba0      	ldr	r3, [pc, #640]	; (8007718 <gos_kernelSelectNextTask+0x29c>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4ba0      	ldr	r3, [pc, #640]	; (800771c <gos_kernelSelectNextTask+0x2a0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 80074a2:	f7ff fefd 	bl	80072a0 <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 80074a6:	4b9e      	ldr	r3, [pc, #632]	; (8007720 <gos_kernelSelectNextTask+0x2a4>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f040 8130 	bne.w	8007710 <gos_kernelSelectNextTask+0x294>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	81fb      	strh	r3, [r7, #14]
 80074b4:	e0cc      	b.n	8007650 <gos_kernelSelectNextTask+0x1d4>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 80074b6:	89fb      	ldrh	r3, [r7, #14]
 80074b8:	4a9a      	ldr	r2, [pc, #616]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80074ba:	216e      	movs	r1, #110	; 0x6e
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	3304      	adds	r3, #4
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b16      	cmp	r3, #22
 80074c8:	d12c      	bne.n	8007524 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) == taskDescriptors[taskIndex].taskSleepTicks)
 80074ca:	89fb      	ldrh	r3, [r7, #14]
 80074cc:	4a95      	ldr	r2, [pc, #596]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80074ce:	216e      	movs	r1, #110	; 0x6e
 80074d0:	fb01 f303 	mul.w	r3, r1, r3
 80074d4:	4413      	add	r3, r2
 80074d6:	3334      	adds	r3, #52	; 0x34
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	89fb      	ldrh	r3, [r7, #14]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4411      	add	r1, r2
 80074e0:	4890      	ldr	r0, [pc, #576]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80074e2:	226e      	movs	r2, #110	; 0x6e
 80074e4:	fb03 f202 	mul.w	r2, r3, r2
 80074e8:	4402      	add	r2, r0
 80074ea:	3234      	adds	r2, #52	; 0x34
 80074ec:	6011      	str	r1, [r2, #0]
 80074ee:	4a8d      	ldr	r2, [pc, #564]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80074f0:	216e      	movs	r1, #110	; 0x6e
 80074f2:	fb01 f303 	mul.w	r3, r1, r3
 80074f6:	4413      	add	r3, r2
 80074f8:	3334      	adds	r3, #52	; 0x34
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	89fb      	ldrh	r3, [r7, #14]
 80074fe:	4989      	ldr	r1, [pc, #548]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007500:	206e      	movs	r0, #110	; 0x6e
 8007502:	fb00 f303 	mul.w	r3, r0, r3
 8007506:	440b      	add	r3, r1
 8007508:	3330      	adds	r3, #48	; 0x30
 800750a:	681b      	ldr	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 800750c:	429a      	cmp	r2, r3
 800750e:	d109      	bne.n	8007524 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8007510:	89fb      	ldrh	r3, [r7, #14]
 8007512:	4a84      	ldr	r2, [pc, #528]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007514:	216e      	movs	r1, #110	; 0x6e
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	3304      	adds	r3, #4
 800751e:	220a      	movs	r2, #10
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	e040      	b.n	80075a6 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8007524:	89fb      	ldrh	r3, [r7, #14]
 8007526:	4a7f      	ldr	r2, [pc, #508]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007528:	216e      	movs	r1, #110	; 0x6e
 800752a:	fb01 f303 	mul.w	r3, r1, r3
 800752e:	4413      	add	r3, r2
 8007530:	3304      	adds	r3, #4
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b19      	cmp	r3, #25
 8007536:	d136      	bne.n	80075a6 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8007538:	89fb      	ldrh	r3, [r7, #14]
 800753a:	4a7a      	ldr	r2, [pc, #488]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 800753c:	216e      	movs	r1, #110	; 0x6e
 800753e:	fb01 f303 	mul.w	r3, r1, r3
 8007542:	4413      	add	r3, r2
 8007544:	3338      	adds	r3, #56	; 0x38
 8007546:	681b      	ldr	r3, [r3, #0]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d02b      	beq.n	80075a6 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) == taskDescriptors[taskIndex].taskBlockTicks))
 800754e:	89fb      	ldrh	r3, [r7, #14]
 8007550:	4a74      	ldr	r2, [pc, #464]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007552:	216e      	movs	r1, #110	; 0x6e
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	4413      	add	r3, r2
 800755a:	333c      	adds	r3, #60	; 0x3c
 800755c:	6819      	ldr	r1, [r3, #0]
 800755e:	89fb      	ldrh	r3, [r7, #14]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	4411      	add	r1, r2
 8007564:	486f      	ldr	r0, [pc, #444]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007566:	226e      	movs	r2, #110	; 0x6e
 8007568:	fb03 f202 	mul.w	r2, r3, r2
 800756c:	4402      	add	r2, r0
 800756e:	323c      	adds	r2, #60	; 0x3c
 8007570:	6011      	str	r1, [r2, #0]
 8007572:	4a6c      	ldr	r2, [pc, #432]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007574:	216e      	movs	r1, #110	; 0x6e
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	4413      	add	r3, r2
 800757c:	333c      	adds	r3, #60	; 0x3c
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	89fb      	ldrh	r3, [r7, #14]
 8007582:	4968      	ldr	r1, [pc, #416]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007584:	206e      	movs	r0, #110	; 0x6e
 8007586:	fb00 f303 	mul.w	r3, r0, r3
 800758a:	440b      	add	r3, r1
 800758c:	3338      	adds	r3, #56	; 0x38
 800758e:	681b      	ldr	r3, [r3, #0]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8007590:	429a      	cmp	r2, r3
 8007592:	d108      	bne.n	80075a6 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8007594:	89fb      	ldrh	r3, [r7, #14]
 8007596:	4a63      	ldr	r2, [pc, #396]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007598:	216e      	movs	r1, #110	; 0x6e
 800759a:	fb01 f303 	mul.w	r3, r1, r3
 800759e:	4413      	add	r3, r2
 80075a0:	3304      	adds	r3, #4
 80075a2:	220a      	movs	r2, #10
 80075a4:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 80075a6:	89fa      	ldrh	r2, [r7, #14]
 80075a8:	4b5f      	ldr	r3, [pc, #380]	; (8007728 <gos_kernelSelectNextTask+0x2ac>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d043      	beq.n	8007638 <gos_kernelSelectNextTask+0x1bc>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 80075b0:	89fb      	ldrh	r3, [r7, #14]
 80075b2:	4a5c      	ldr	r2, [pc, #368]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80075b4:	216e      	movs	r1, #110	; 0x6e
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	4413      	add	r3, r2
 80075bc:	3304      	adds	r3, #4
 80075be:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 80075c0:	2b0a      	cmp	r3, #10
 80075c2:	d139      	bne.n	8007638 <gos_kernelSelectNextTask+0x1bc>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 80075c4:	89fb      	ldrh	r3, [r7, #14]
 80075c6:	4a57      	ldr	r2, [pc, #348]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80075c8:	216e      	movs	r1, #110	; 0x6e
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	4413      	add	r3, r2
 80075d0:	3306      	adds	r3, #6
 80075d2:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 80075d4:	7b7a      	ldrb	r2, [r7, #13]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d92e      	bls.n	8007638 <gos_kernelSelectNextTask+0x1bc>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 80075da:	89fb      	ldrh	r3, [r7, #14]
 80075dc:	4a51      	ldr	r2, [pc, #324]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80075de:	216e      	movs	r1, #110	; 0x6e
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	3364      	adds	r3, #100	; 0x64
 80075e8:	881a      	ldrh	r2, [r3, #0]
 80075ea:	89fb      	ldrh	r3, [r7, #14]
 80075ec:	494d      	ldr	r1, [pc, #308]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80075ee:	206e      	movs	r0, #110	; 0x6e
 80075f0:	fb00 f303 	mul.w	r3, r0, r3
 80075f4:	440b      	add	r3, r1
 80075f6:	335e      	adds	r3, #94	; 0x5e
 80075f8:	881b      	ldrh	r3, [r3, #0]
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d21c      	bcs.n	8007638 <gos_kernelSelectNextTask+0x1bc>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 80075fe:	89fb      	ldrh	r3, [r7, #14]
 8007600:	4a48      	ldr	r2, [pc, #288]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007602:	216e      	movs	r1, #110	; 0x6e
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	4413      	add	r3, r2
 800760a:	3362      	adds	r3, #98	; 0x62
 800760c:	881a      	ldrh	r2, [r3, #0]
 800760e:	89fb      	ldrh	r3, [r7, #14]
 8007610:	4944      	ldr	r1, [pc, #272]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 8007612:	206e      	movs	r0, #110	; 0x6e
 8007614:	fb00 f303 	mul.w	r3, r0, r3
 8007618:	440b      	add	r3, r1
 800761a:	335e      	adds	r3, #94	; 0x5e
 800761c:	881b      	ldrh	r3, [r3, #0]
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 800761e:	429a      	cmp	r2, r3
 8007620:	d20a      	bcs.n	8007638 <gos_kernelSelectNextTask+0x1bc>
            {
                nextTask = taskIndex;
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	4a3e      	ldr	r2, [pc, #248]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 800762a:	216e      	movs	r1, #110	; 0x6e
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	4413      	add	r3, r2
 8007632:	3306      	adds	r3, #6
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8007638:	89fb      	ldrh	r3, [r7, #14]
 800763a:	4a3a      	ldr	r2, [pc, #232]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 800763c:	216e      	movs	r1, #110	; 0x6e
 800763e:	fb01 f303 	mul.w	r3, r1, r3
 8007642:	4413      	add	r3, r2
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <gos_kernelSelectNextTask+0x1de>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800764a:	89fb      	ldrh	r3, [r7, #14]
 800764c:	3301      	adds	r3, #1
 800764e:	81fb      	strh	r3, [r7, #14]
 8007650:	89fb      	ldrh	r3, [r7, #14]
 8007652:	2b23      	cmp	r3, #35	; 0x23
 8007654:	f67f af2f 	bls.w	80074b6 <gos_kernelSelectNextTask+0x3a>
 8007658:	e000      	b.n	800765c <gos_kernelSelectNextTask+0x1e0>
            {
                break;
 800765a:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 800765c:	f7ff f90a 	bl	8006874 <gos_kernelGetCpuUsage>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	4b31      	ldr	r3, [pc, #196]	; (800772c <gos_kernelSelectNextTask+0x2b0>)
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	429a      	cmp	r2, r3
 800766a:	d901      	bls.n	8007670 <gos_kernelSelectNextTask+0x1f4>
        {
            nextTask = 0u;
 800766c:	2300      	movs	r3, #0
 800766e:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 8007670:	897a      	ldrh	r2, [r7, #10]
 8007672:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <gos_kernelSelectNextTask+0x2ac>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d029      	beq.n	80076ce <gos_kernelSelectNextTask+0x252>
        {
            if (kernelSwapHookFunction != NULL)
 800767a:	4b2d      	ldr	r3, [pc, #180]	; (8007730 <gos_kernelSelectNextTask+0x2b4>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d014      	beq.n	80076ac <gos_kernelSelectNextTask+0x230>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 8007682:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <gos_kernelSelectNextTask+0x2b4>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a28      	ldr	r2, [pc, #160]	; (8007728 <gos_kernelSelectNextTask+0x2ac>)
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	4926      	ldr	r1, [pc, #152]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 800768c:	206e      	movs	r0, #110	; 0x6e
 800768e:	fb00 f202 	mul.w	r2, r0, r2
 8007692:	440a      	add	r2, r1
 8007694:	322a      	adds	r2, #42	; 0x2a
 8007696:	8810      	ldrh	r0, [r2, #0]
 8007698:	897a      	ldrh	r2, [r7, #10]
 800769a:	4922      	ldr	r1, [pc, #136]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 800769c:	246e      	movs	r4, #110	; 0x6e
 800769e:	fb04 f202 	mul.w	r2, r4, r2
 80076a2:	440a      	add	r2, r1
 80076a4:	322a      	adds	r2, #42	; 0x2a
 80076a6:	8812      	ldrh	r2, [r2, #0]
 80076a8:	4611      	mov	r1, r2
 80076aa:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 80076ac:	4b1e      	ldr	r3, [pc, #120]	; (8007728 <gos_kernelSelectNextTask+0x2ac>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	491c      	ldr	r1, [pc, #112]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80076b2:	226e      	movs	r2, #110	; 0x6e
 80076b4:	fb03 f202 	mul.w	r2, r3, r2
 80076b8:	440a      	add	r2, r1
 80076ba:	3248      	adds	r2, #72	; 0x48
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	3201      	adds	r2, #1
 80076c0:	4918      	ldr	r1, [pc, #96]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80076c2:	206e      	movs	r0, #110	; 0x6e
 80076c4:	fb00 f303 	mul.w	r3, r0, r3
 80076c8:	440b      	add	r3, r1
 80076ca:	3348      	adds	r3, #72	; 0x48
 80076cc:	601a      	str	r2, [r3, #0]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 80076ce:	1cbb      	adds	r3, r7, #2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f002 fd75 	bl	800a1c0 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 80076d6:	887a      	ldrh	r2, [r7, #2]
 80076d8:	4b16      	ldr	r3, [pc, #88]	; (8007734 <gos_kernelSelectNextTask+0x2b8>)
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 80076e0:	4b11      	ldr	r3, [pc, #68]	; (8007728 <gos_kernelSelectNextTask+0x2ac>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	226e      	movs	r2, #110	; 0x6e
 80076e6:	fb02 f303 	mul.w	r3, r2, r3
 80076ea:	3350      	adds	r3, #80	; 0x50
 80076ec:	4a0d      	ldr	r2, [pc, #52]	; (8007724 <gos_kernelSelectNextTask+0x2a8>)
 80076ee:	4413      	add	r3, r2
 80076f0:	3306      	adds	r3, #6
 80076f2:	893a      	ldrh	r2, [r7, #8]
 80076f4:	4619      	mov	r1, r3
 80076f6:	4810      	ldr	r0, [pc, #64]	; (8007738 <gos_kernelSelectNextTask+0x2bc>)
 80076f8:	f001 ffbe 	bl	8009678 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 80076fc:	480d      	ldr	r0, [pc, #52]	; (8007734 <gos_kernelSelectNextTask+0x2b8>)
 80076fe:	f002 fd5f 	bl	800a1c0 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 8007702:	897b      	ldrh	r3, [r7, #10]
 8007704:	4a08      	ldr	r2, [pc, #32]	; (8007728 <gos_kernelSelectNextTask+0x2ac>)
 8007706:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 8007708:	4b03      	ldr	r3, [pc, #12]	; (8007718 <gos_kernelSelectNextTask+0x29c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a03      	ldr	r2, [pc, #12]	; (800771c <gos_kernelSelectNextTask+0x2a0>)
 800770e:	6013      	str	r3, [r2, #0]
    }
}
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	bd90      	pop	{r4, r7, pc}
 8007718:	20001a7c 	.word	0x20001a7c
 800771c:	20001a9c 	.word	0x20001a9c
 8007720:	20001a7a 	.word	0x20001a7a
 8007724:	200002cc 	.word	0x200002cc
 8007728:	20001a80 	.word	0x20001a80
 800772c:	200002c6 	.word	0x200002c6
 8007730:	20001a94 	.word	0x20001a94
 8007734:	20001a84 	.word	0x20001a84
 8007738:	20001a88 	.word	0x20001a88

0800773c <gos_kernelIdleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelIdleTask (void_t)
{
 800773c:	b590      	push	{r4, r7, lr}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 8007742:	2155      	movs	r1, #85	; 0x55
 8007744:	48b1      	ldr	r0, [pc, #708]	; (8007a0c <gos_kernelIdleTask+0x2d0>)
 8007746:	f000 fbbb 	bl	8007ec0 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 800774a:	4bb1      	ldr	r3, [pc, #708]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 800774c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774e:	3301      	adds	r3, #1
 8007750:	4aaf      	ldr	r2, [pc, #700]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 8007752:	6453      	str	r3, [r2, #68]	; 0x44

        if (kernelIdleHookFunction != NULL)
 8007754:	4baf      	ldr	r3, [pc, #700]	; (8007a14 <gos_kernelIdleTask+0x2d8>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <gos_kernelIdleTask+0x26>
        {
            kernelIdleHookFunction();
 800775c:	4bad      	ldr	r3, [pc, #692]	; (8007a14 <gos_kernelIdleTask+0x2d8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4798      	blx	r3
 8007762:	2349      	movs	r3, #73	; 0x49
 8007764:	737b      	strb	r3, [r7, #13]
    u16_t taskIndex           = 0u;
 8007766:	2300      	movs	r3, #0
 8007768:	817b      	strh	r3, [r7, #10]
    u32_t systemConvertedTime = 0u;
 800776a:	2300      	movs	r3, #0
 800776c:	607b      	str	r3, [r7, #4]
    u32_t taskConvertedTime   = 0u;
 800776e:	2300      	movs	r3, #0
 8007770:	603b      	str	r3, [r7, #0]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8007772:	4ba9      	ldr	r3, [pc, #676]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 8007774:	795b      	ldrb	r3, [r3, #5]
 8007776:	461a      	mov	r2, r3
 8007778:	4ba8      	ldr	r3, [pc, #672]	; (8007a1c <gos_kernelIdleTask+0x2e0>)
 800777a:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 800777e:	4ba6      	ldr	r3, [pc, #664]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 8007780:	791b      	ldrb	r3, [r3, #4]
 8007782:	4619      	mov	r1, r3
 8007784:	4ba6      	ldr	r3, [pc, #664]	; (8007a20 <gos_kernelIdleTask+0x2e4>)
 8007786:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800778a:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 800778c:	4ba2      	ldr	r3, [pc, #648]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 800778e:	885b      	ldrh	r3, [r3, #2]
 8007790:	4619      	mov	r1, r3
 8007792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007796:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 800779a:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 800779c:	4a9e      	ldr	r2, [pc, #632]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 800779e:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 80077a0:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 80077a2:	607b      	str	r3, [r7, #4]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80077a4:	2300      	movs	r3, #0
 80077a6:	817b      	strh	r3, [r7, #10]
 80077a8:	e0fe      	b.n	80079a8 <gos_kernelIdleTask+0x26c>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80077aa:	897b      	ldrh	r3, [r7, #10]
 80077ac:	4a98      	ldr	r2, [pc, #608]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80077ae:	216e      	movs	r1, #110	; 0x6e
 80077b0:	fb01 f303 	mul.w	r3, r1, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	335b      	adds	r3, #91	; 0x5b
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	4b97      	ldr	r3, [pc, #604]	; (8007a1c <gos_kernelIdleTask+0x2e0>)
 80077be:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80077c2:	897b      	ldrh	r3, [r7, #10]
 80077c4:	4992      	ldr	r1, [pc, #584]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80077c6:	206e      	movs	r0, #110	; 0x6e
 80077c8:	fb00 f303 	mul.w	r3, r0, r3
 80077cc:	440b      	add	r3, r1
 80077ce:	335a      	adds	r3, #90	; 0x5a
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	4619      	mov	r1, r3
 80077d4:	4b92      	ldr	r3, [pc, #584]	; (8007a20 <gos_kernelIdleTask+0x2e4>)
 80077d6:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80077da:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 80077dc:	897b      	ldrh	r3, [r7, #10]
 80077de:	498c      	ldr	r1, [pc, #560]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80077e0:	206e      	movs	r0, #110	; 0x6e
 80077e2:	fb00 f303 	mul.w	r3, r0, r3
 80077e6:	440b      	add	r3, r1
 80077e8:	3358      	adds	r3, #88	; 0x58
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	4619      	mov	r1, r3
 80077ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077f2:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80077f6:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 80077f8:	897a      	ldrh	r2, [r7, #10]
 80077fa:	4985      	ldr	r1, [pc, #532]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80077fc:	206e      	movs	r0, #110	; 0x6e
 80077fe:	fb00 f202 	mul.w	r2, r0, r2
 8007802:	440a      	add	r2, r1
 8007804:	3256      	adds	r2, #86	; 0x56
 8007806:	8812      	ldrh	r2, [r2, #0]
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8007808:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 800780a:	603b      	str	r3, [r7, #0]
        if (systemConvertedTime > 0)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 80be 	beq.w	8007990 <gos_kernelIdleTask+0x254>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f242 7210 	movw	r2, #10000	; 0x2710
 800781a:	fb03 f202 	mul.w	r2, r3, r2
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	fbb2 f2f3 	udiv	r2, r2, r3
 8007824:	897b      	ldrh	r3, [r7, #10]
 8007826:	b290      	uxth	r0, r2
 8007828:	4a79      	ldr	r2, [pc, #484]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 800782a:	216e      	movs	r1, #110	; 0x6e
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	4413      	add	r3, r2
 8007832:	3364      	adds	r3, #100	; 0x64
 8007834:	4602      	mov	r2, r0
 8007836:	801a      	strh	r2, [r3, #0]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8007838:	7b7b      	ldrb	r3, [r7, #13]
 800783a:	2b36      	cmp	r3, #54	; 0x36
 800783c:	d004      	beq.n	8007848 <gos_kernelIdleTask+0x10c>
 800783e:	4b76      	ldr	r3, [pc, #472]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 8007840:	791b      	ldrb	r3, [r3, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 80a4 	beq.w	8007990 <gos_kernelIdleTask+0x254>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f242 7210 	movw	r2, #10000	; 0x2710
 800784e:	fb03 f202 	mul.w	r2, r3, r2
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	fbb2 f2f3 	udiv	r2, r2, r3
 8007858:	897b      	ldrh	r3, [r7, #10]
 800785a:	b290      	uxth	r0, r2
 800785c:	4a6c      	ldr	r2, [pc, #432]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 800785e:	216e      	movs	r1, #110	; 0x6e
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	4413      	add	r3, r2
 8007866:	3362      	adds	r3, #98	; 0x62
 8007868:	4602      	mov	r2, r0
 800786a:	801a      	strh	r2, [r3, #0]
                        &taskDescriptors[taskIndex].taskRunTime,
 800786c:	897b      	ldrh	r3, [r7, #10]
                gos_runTimeAddMicroseconds(
 800786e:	226e      	movs	r2, #110	; 0x6e
 8007870:	fb02 f303 	mul.w	r3, r2, r3
 8007874:	3348      	adds	r3, #72	; 0x48
 8007876:	4a66      	ldr	r2, [pc, #408]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 8007878:	4413      	add	r3, r2
 800787a:	1d98      	adds	r0, r3, #6
 800787c:	897b      	ldrh	r3, [r7, #10]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 800787e:	4a64      	ldr	r2, [pc, #400]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 8007880:	216e      	movs	r1, #110	; 0x6e
 8007882:	fb01 f303 	mul.w	r3, r1, r3
 8007886:	4413      	add	r3, r2
 8007888:	3356      	adds	r3, #86	; 0x56
 800788a:	881b      	ldrh	r3, [r3, #0]
                gos_runTimeAddMicroseconds(
 800788c:	461a      	mov	r2, r3
 800788e:	2100      	movs	r1, #0
 8007890:	f001 fef2 	bl	8009678 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 8007894:	897b      	ldrh	r3, [r7, #10]
                gos_runTimeAddMilliseconds(
 8007896:	226e      	movs	r2, #110	; 0x6e
 8007898:	fb02 f303 	mul.w	r3, r2, r3
 800789c:	3348      	adds	r3, #72	; 0x48
 800789e:	4a5c      	ldr	r2, [pc, #368]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80078a0:	4413      	add	r3, r2
 80078a2:	1d98      	adds	r0, r3, #6
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 80078a4:	897b      	ldrh	r3, [r7, #10]
 80078a6:	4a5a      	ldr	r2, [pc, #360]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80078a8:	216e      	movs	r1, #110	; 0x6e
 80078aa:	fb01 f303 	mul.w	r3, r1, r3
 80078ae:	4413      	add	r3, r2
 80078b0:	3358      	adds	r3, #88	; 0x58
 80078b2:	881a      	ldrh	r2, [r3, #0]
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 80078b4:	897b      	ldrh	r3, [r7, #10]
 80078b6:	4956      	ldr	r1, [pc, #344]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80078b8:	246e      	movs	r4, #110	; 0x6e
 80078ba:	fb04 f303 	mul.w	r3, r4, r3
 80078be:	440b      	add	r3, r1
 80078c0:	335a      	adds	r3, #90	; 0x5a
 80078c2:	781b      	ldrb	r3, [r3, #0]
                gos_runTimeAddMilliseconds(
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	4619      	mov	r1, r3
 80078c8:	0149      	lsls	r1, r1, #5
 80078ca:	1ac9      	subs	r1, r1, r3
 80078cc:	0089      	lsls	r1, r1, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	4619      	mov	r1, r3
 80078da:	f001 ffa7 	bl	800982c <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 80078de:	897b      	ldrh	r3, [r7, #10]
 80078e0:	4a4b      	ldr	r2, [pc, #300]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80078e2:	216e      	movs	r1, #110	; 0x6e
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	335d      	adds	r3, #93	; 0x5d
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 80078f0:	897b      	ldrh	r3, [r7, #10]
 80078f2:	4a47      	ldr	r2, [pc, #284]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 80078f4:	216e      	movs	r1, #110	; 0x6e
 80078f6:	fb01 f303 	mul.w	r3, r1, r3
 80078fa:	4413      	add	r3, r2
 80078fc:	335c      	adds	r3, #92	; 0x5c
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8007902:	897b      	ldrh	r3, [r7, #10]
 8007904:	4a42      	ldr	r2, [pc, #264]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 8007906:	216e      	movs	r1, #110	; 0x6e
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	4413      	add	r3, r2
 800790e:	335b      	adds	r3, #91	; 0x5b
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8007914:	897b      	ldrh	r3, [r7, #10]
 8007916:	4a3e      	ldr	r2, [pc, #248]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 8007918:	216e      	movs	r1, #110	; 0x6e
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	4413      	add	r3, r2
 8007920:	335a      	adds	r3, #90	; 0x5a
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8007926:	897b      	ldrh	r3, [r7, #10]
 8007928:	4a39      	ldr	r2, [pc, #228]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 800792a:	216e      	movs	r1, #110	; 0x6e
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	4413      	add	r3, r2
 8007932:	3358      	adds	r3, #88	; 0x58
 8007934:	2200      	movs	r2, #0
 8007936:	801a      	strh	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8007938:	897b      	ldrh	r3, [r7, #10]
 800793a:	4a35      	ldr	r2, [pc, #212]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 800793c:	216e      	movs	r1, #110	; 0x6e
 800793e:	fb01 f303 	mul.w	r3, r1, r3
 8007942:	4413      	add	r3, r2
 8007944:	3356      	adds	r3, #86	; 0x56
 8007946:	2200      	movs	r2, #0
 8007948:	801a      	strh	r2, [r3, #0]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 800794a:	897b      	ldrh	r3, [r7, #10]
 800794c:	4a30      	ldr	r2, [pc, #192]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 800794e:	216e      	movs	r1, #110	; 0x6e
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	4413      	add	r3, r2
 8007956:	3362      	adds	r3, #98	; 0x62
 8007958:	881a      	ldrh	r2, [r3, #0]
 800795a:	897b      	ldrh	r3, [r7, #10]
 800795c:	492c      	ldr	r1, [pc, #176]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 800795e:	206e      	movs	r0, #110	; 0x6e
 8007960:	fb00 f303 	mul.w	r3, r0, r3
 8007964:	440b      	add	r3, r1
 8007966:	3360      	adds	r3, #96	; 0x60
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d910      	bls.n	8007990 <gos_kernelIdleTask+0x254>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 800796e:	897a      	ldrh	r2, [r7, #10]
 8007970:	897b      	ldrh	r3, [r7, #10]
 8007972:	4927      	ldr	r1, [pc, #156]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 8007974:	206e      	movs	r0, #110	; 0x6e
 8007976:	fb00 f202 	mul.w	r2, r0, r2
 800797a:	440a      	add	r2, r1
 800797c:	3262      	adds	r2, #98	; 0x62
 800797e:	8810      	ldrh	r0, [r2, #0]
 8007980:	4a23      	ldr	r2, [pc, #140]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 8007982:	216e      	movs	r1, #110	; 0x6e
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	4413      	add	r3, r2
 800798a:	3360      	adds	r3, #96	; 0x60
 800798c:	4602      	mov	r2, r0
 800798e:	801a      	strh	r2, [r3, #0]
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8007990:	897b      	ldrh	r3, [r7, #10]
 8007992:	4a1f      	ldr	r2, [pc, #124]	; (8007a10 <gos_kernelIdleTask+0x2d4>)
 8007994:	216e      	movs	r1, #110	; 0x6e
 8007996:	fb01 f303 	mul.w	r3, r1, r3
 800799a:	4413      	add	r3, r2
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d007      	beq.n	80079b2 <gos_kernelIdleTask+0x276>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80079a2:	897b      	ldrh	r3, [r7, #10]
 80079a4:	3301      	adds	r3, #1
 80079a6:	817b      	strh	r3, [r7, #10]
 80079a8:	897b      	ldrh	r3, [r7, #10]
 80079aa:	2b23      	cmp	r3, #35	; 0x23
 80079ac:	f67f aefd 	bls.w	80077aa <gos_kernelIdleTask+0x6e>
 80079b0:	e000      	b.n	80079b4 <gos_kernelIdleTask+0x278>
            break;
 80079b2:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 80079b4:	7b7b      	ldrb	r3, [r7, #13]
 80079b6:	2b36      	cmp	r3, #54	; 0x36
 80079b8:	d003      	beq.n	80079c2 <gos_kernelIdleTask+0x286>
 80079ba:	4b17      	ldr	r3, [pc, #92]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 80079bc:	791b      	ldrb	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d011      	beq.n	80079e6 <gos_kernelIdleTask+0x2aa>
        monitoringTime.days         = 0u;
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	71da      	strb	r2, [r3, #7]
        monitoringTime.hours        = 0u;
 80079c8:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 80079ce:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 80079d4:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 80079dc:	2200      	movs	r2, #0
 80079de:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 80079e0:	4b0d      	ldr	r3, [pc, #52]	; (8007a18 <gos_kernelIdleTask+0x2dc>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	801a      	strh	r2, [r3, #0]
}
 80079e6:	bf00      	nop
    gos_result_t taskYieldResult = GOS_SUCCESS;
 80079e8:	2355      	movs	r3, #85	; 0x55
 80079ea:	73fb      	strb	r3, [r7, #15]
 80079ec:	2309      	movs	r3, #9
 80079ee:	73bb      	strb	r3, [r7, #14]
    gos_ported_reschedule(privilege);
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b16      	cmp	r3, #22
 80079f4:	d106      	bne.n	8007a04 <gos_kernelIdleTask+0x2c8>
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <gos_kernelIdleTask+0x2e8>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <gos_kernelIdleTask+0x2e8>)
 80079fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a00:	6013      	str	r3, [r2, #0]
}
 8007a02:	e000      	b.n	8007a06 <gos_kernelIdleTask+0x2ca>
    gos_ported_reschedule(privilege);
 8007a04:	dfff      	svc	255	; 0xff
}
 8007a06:	bf00      	nop
    return taskYieldResult;
 8007a08:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 8007a0a:	e69e      	b.n	800774a <gos_kernelIdleTask+0xe>
 8007a0c:	0800d7cc 	.word	0x0800d7cc
 8007a10:	200002cc 	.word	0x200002cc
 8007a14:	20001a90 	.word	0x20001a90
 8007a18:	20001a88 	.word	0x20001a88
 8007a1c:	03938700 	.word	0x03938700
 8007a20:	000f4240 	.word	0x000f4240
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 8007a32:	79fb      	ldrb	r3, [r7, #7]
 8007a34:	3b05      	subs	r3, #5
 8007a36:	2b14      	cmp	r3, #20
 8007a38:	d836      	bhi.n	8007aa8 <gos_kernelGetTaskStateString+0x80>
 8007a3a:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <gos_kernelGetTaskStateString+0x18>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007a9d 	.word	0x08007a9d
 8007a44:	08007aa9 	.word	0x08007aa9
 8007a48:	08007aa9 	.word	0x08007aa9
 8007a4c:	08007aa9 	.word	0x08007aa9
 8007a50:	08007aa9 	.word	0x08007aa9
 8007a54:	08007a95 	.word	0x08007a95
 8007a58:	08007aa9 	.word	0x08007aa9
 8007a5c:	08007aa9 	.word	0x08007aa9
 8007a60:	08007aa5 	.word	0x08007aa5
 8007a64:	08007aa9 	.word	0x08007aa9
 8007a68:	08007aa9 	.word	0x08007aa9
 8007a6c:	08007aa9 	.word	0x08007aa9
 8007a70:	08007aa9 	.word	0x08007aa9
 8007a74:	08007aa9 	.word	0x08007aa9
 8007a78:	08007aa9 	.word	0x08007aa9
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	08007aa9 	.word	0x08007aa9
 8007a84:	08007a99 	.word	0x08007a99
 8007a88:	08007aa9 	.word	0x08007aa9
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	08007aa1 	.word	0x08007aa1
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 8007a94:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <gos_kernelGetTaskStateString+0x90>)
 8007a96:	e008      	b.n	8007aaa <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 8007a98:	4b08      	ldr	r3, [pc, #32]	; (8007abc <gos_kernelGetTaskStateString+0x94>)
 8007a9a:	e006      	b.n	8007aaa <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 8007a9c:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <gos_kernelGetTaskStateString+0x98>)
 8007a9e:	e004      	b.n	8007aaa <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 8007aa0:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <gos_kernelGetTaskStateString+0x9c>)
 8007aa2:	e002      	b.n	8007aaa <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <gos_kernelGetTaskStateString+0xa0>)
 8007aa6:	e000      	b.n	8007aaa <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	0800d7dc 	.word	0x0800d7dc
 8007abc:	0800d7ec 	.word	0x0800d7ec
 8007ac0:	0800d800 	.word	0x0800d800
 8007ac4:	0800d814 	.word	0x0800d814
 8007ac8:	0800d828 	.word	0x0800d828
 8007acc:	0800d838 	.word	0x0800d838

08007ad0 <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <gos_kernelProcessorReset+0x20>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ae0:	4903      	ldr	r1, [pc, #12]	; (8007af0 <gos_kernelProcessorReset+0x20>)
 8007ae2:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <gos_kernelProcessorReset+0x24>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	600b      	str	r3, [r1, #0]
 8007ae8:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 8007aec:	bf00      	nop
 8007aee:	e7fd      	b.n	8007aec <gos_kernelProcessorReset+0x1c>
 8007af0:	e000ed0c 	.word	0xe000ed0c
 8007af4:	05fa0004 	.word	0x05fa0004

08007af8 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8007afc:	bf00      	nop
 8007afe:	e7fd      	b.n	8007afc <NMI_Handler+0x4>

08007b00 <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <HardFault_Handler+0x4>

08007b08 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8007b0c:	bf00      	nop
 8007b0e:	e7fd      	b.n	8007b0c <MemManage_Handler+0x4>

08007b10 <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8007b14:	bf00      	nop
 8007b16:	e7fd      	b.n	8007b14 <BusFault_Handler+0x4>

08007b18 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <UsageFault_Handler+0x4>

08007b20 <main>:

/*
 * Main
 */
int main (void_t)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8007b26:	4b1c      	ldr	r3, [pc, #112]	; (8007b98 <main+0x78>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <main+0x78>)
 8007b30:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 8007b32:	f7f9 f9e7 	bl	8000f04 <gos_platformDriverInit>
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 8007b3a:	f000 f903 	bl	8007d44 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	4619      	mov	r1, r3
 8007b42:	4816      	ldr	r0, [pc, #88]	; (8007b9c <main+0x7c>)
 8007b44:	f000 f9bc 	bl	8007ec0 <gos_errorTraceInit>

    // Initialize teche kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8007b48:	f7fd fb4e 	bl	80051e8 <gos_kernelInit>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4813      	ldr	r0, [pc, #76]	; (8007ba0 <main+0x80>)
 8007b52:	f000 f9b5 	bl	8007ec0 <gos_errorTraceInit>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b55      	cmp	r3, #85	; 0x55
 8007b5a:	d109      	bne.n	8007b70 <main+0x50>
        gos_kernelTaskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 8007b5c:	4911      	ldr	r1, [pc, #68]	; (8007ba4 <main+0x84>)
 8007b5e:	4812      	ldr	r0, [pc, #72]	; (8007ba8 <main+0x88>)
 8007b60:	f7fd fc64 	bl	800542c <gos_kernelTaskRegister>
 8007b64:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8007b66:	2b55      	cmp	r3, #85	; 0x55
 8007b68:	d102      	bne.n	8007b70 <main+0x50>
    {
        initError = GOS_FALSE;
 8007b6a:	4b10      	ldr	r3, [pc, #64]	; (8007bac <main+0x8c>)
 8007b6c:	2249      	movs	r2, #73	; 0x49
 8007b6e:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 8007b70:	f000 f85c 	bl	8007c2c <gos_Start>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2bae      	cmp	r3, #174	; 0xae
 8007b78:	d106      	bne.n	8007b88 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <main+0x90>)
 8007b7c:	22c3      	movs	r2, #195	; 0xc3
 8007b7e:	490d      	ldr	r1, [pc, #52]	; (8007bb4 <main+0x94>)
 8007b80:	2034      	movs	r0, #52	; 0x34
 8007b82:	f000 f919 	bl	8007db8 <gos_errorHandler>
 8007b86:	e005      	b.n	8007b94 <main+0x74>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 8007b88:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <main+0x98>)
 8007b8a:	22c7      	movs	r2, #199	; 0xc7
 8007b8c:	4909      	ldr	r1, [pc, #36]	; (8007bb4 <main+0x94>)
 8007b8e:	2034      	movs	r0, #52	; 0x34
 8007b90:	f000 f912 	bl	8007db8 <gos_errorHandler>
    }

    for (;;);
 8007b94:	e7fe      	b.n	8007b94 <main+0x74>
 8007b96:	bf00      	nop
 8007b98:	20001a7a 	.word	0x20001a7a
 8007b9c:	0800d83c 	.word	0x0800d83c
 8007ba0:	0800d85c 	.word	0x0800d85c
 8007ba4:	20001aa2 	.word	0x20001aa2
 8007ba8:	20001364 	.word	0x20001364
 8007bac:	20001aa0 	.word	0x20001aa0
 8007bb0:	0800d874 	.word	0x0800d874
 8007bb4:	0800e430 	.word	0x0800e430
 8007bb8:	0800d894 	.word	0x0800d894

08007bbc <gos_Dump>:

/*
 * Function: gos_Dump
 */
void_t gos_Dump (void_t)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
    gos_taskPrivilegeLevel_t privileges = 0u;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	80fb      	strh	r3, [r7, #6]
    gos_tid_t currentTaskId = GOS_INVALID_TASK_ID;
 8007bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bca:	80bb      	strh	r3, [r7, #4]

    dumpRequired = GOS_TRUE;
 8007bcc:	4b15      	ldr	r3, [pc, #84]	; (8007c24 <gos_Dump+0x68>)
 8007bce:	2236      	movs	r2, #54	; 0x36
 8007bd0:	701a      	strb	r2, [r3, #0]

    (void_t) gos_kernelTaskGetCurrentId(&currentTaskId);
 8007bd2:	1d3b      	adds	r3, r7, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fd7b 	bl	80066d0 <gos_kernelTaskGetCurrentId>
    (void_t) gos_kernelTaskGetPrivileges(currentTaskId, &privileges);
 8007bda:	88bb      	ldrh	r3, [r7, #4]
 8007bdc:	1dba      	adds	r2, r7, #6
 8007bde:	4611      	mov	r1, r2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fcf5 	bl	80065d0 <gos_kernelTaskGetPrivileges>

    if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	b21b      	sxth	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	db11      	blt.n	8007c12 <gos_Dump+0x56>
    {
        (void_t) gos_kernelTaskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8007bee:	88bb      	ldrh	r3, [r7, #4]
 8007bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe fbff 	bl	80063f8 <gos_kernelTaskAddPrivilege>
        gos_kernelTaskWakeup(systemTaskId);
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <gos_Dump+0x6c>)
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fd fe0e 	bl	8005820 <gos_kernelTaskWakeup>
        (void_t) gos_kernelTaskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8007c04:	88bb      	ldrh	r3, [r7, #4]
 8007c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fc44 	bl	8006498 <gos_kernelTaskRemovePrivilege>
    }
    else
    {
        gos_kernelTaskWakeup(systemTaskId);
    }
}
 8007c10:	e004      	b.n	8007c1c <gos_Dump+0x60>
        gos_kernelTaskWakeup(systemTaskId);
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <gos_Dump+0x6c>)
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fd fe02 	bl	8005820 <gos_kernelTaskWakeup>
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20001aa1 	.word	0x20001aa1
 8007c28:	20001aa2 	.word	0x20001aa2

08007c2c <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 8007c32:	23b1      	movs	r3, #177	; 0xb1
 8007c34:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 8007c36:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <gos_Start+0x24>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b49      	cmp	r3, #73	; 0x49
 8007c3c:	d103      	bne.n	8007c46 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 8007c3e:	f7fd fbb7 	bl	80053b0 <gos_kernelStart>
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 8007c46:	79fb      	ldrb	r3, [r7, #7]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	20001aa0 	.word	0x20001aa0

08007c54 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 8007c54:	b590      	push	{r4, r7, lr}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 8007c5a:	2355      	movs	r3, #85	; 0x55
 8007c5c:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8007c62:	4b32      	ldr	r3, [pc, #200]	; (8007d2c <gos_systemTask+0xd8>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4b30      	ldr	r3, [pc, #192]	; (8007d2c <gos_systemTask+0xd8>)
 8007c6c:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 8007c6e:	2300      	movs	r3, #0
 8007c70:	71bb      	strb	r3, [r7, #6]
 8007c72:	e01d      	b.n	8007cb0 <gos_systemTask+0x5c>
    {
        sysInitResult &= gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc());
 8007c74:	79ba      	ldrb	r2, [r7, #6]
 8007c76:	4613      	mov	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4a2c      	ldr	r2, [pc, #176]	; (8007d30 <gos_systemTask+0xdc>)
 8007c80:	189c      	adds	r4, r3, r2
 8007c82:	79ba      	ldrb	r2, [r7, #6]
 8007c84:	492a      	ldr	r1, [pc, #168]	; (8007d30 <gos_systemTask+0xdc>)
 8007c86:	4613      	mov	r3, r2
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	440b      	add	r3, r1
 8007c90:	3320      	adds	r3, #32
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4798      	blx	r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 f910 	bl	8007ec0 <gos_errorTraceInit>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 8007caa:	79bb      	ldrb	r3, [r7, #6]
 8007cac:	3301      	adds	r3, #1
 8007cae:	71bb      	strb	r3, [r7, #6]
 8007cb0:	79bb      	ldrb	r3, [r7, #6]
 8007cb2:	2b07      	cmp	r3, #7
 8007cb4:	d9de      	bls.n	8007c74 <gos_systemTask+0x20>
    }

    // Check and correct flag value.
    if (sysInitResult != GOS_SUCCESS)
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	2b55      	cmp	r3, #85	; 0x55
 8007cba:	d001      	beq.n	8007cc0 <gos_systemTask+0x6c>
    {
        sysInitResult = GOS_ERROR;
 8007cbc:	23ae      	movs	r3, #174	; 0xae
 8007cbe:	71fb      	strb	r3, [r7, #7]
    {
        // Nothing to do.
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	481b      	ldr	r0, [pc, #108]	; (8007d34 <gos_systemTask+0xe0>)
 8007cc6:	f000 f8fb 	bl	8007ec0 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 8007cca:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <gos_systemTask+0xd8>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <gos_systemTask+0x8a>
 8007cd2:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <gos_systemTask+0xd8>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <gos_systemTask+0xd8>)
 8007cdc:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_kernelTaskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <gos_systemTask+0xe4>)
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	21c3      	movs	r1, #195	; 0xc3
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fa71 	bl	80061cc <gos_kernelTaskSetOriginalPriority>
    (void_t) gos_kernelTaskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 8007cea:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <gos_systemTask+0xe4>)
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	21c3      	movs	r1, #195	; 0xc3
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe f9e5 	bl	80060c0 <gos_kernelTaskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8007cf6:	2036      	movs	r0, #54	; 0x36
 8007cf8:	f7fe fe06 	bl	8006908 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 8007cfc:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <gos_systemTask+0xe8>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b36      	cmp	r3, #54	; 0x36
 8007d02:	d10f      	bne.n	8007d24 <gos_systemTask+0xd0>
        {
            (void_t) gos_kernelTaskSleep(100);
 8007d04:	2064      	movs	r0, #100	; 0x64
 8007d06:	f7fd fd1d 	bl	8005744 <gos_kernelTaskSleep>
            gos_kernelDump();
 8007d0a:	f7fe ff4f 	bl	8006bac <gos_kernelDump>
#if CFG_PROC_USE_SERVICE
            gos_procDump();
#endif
            gos_queueDump();
 8007d0e:	f000 fe2f 	bl	8008970 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 8007d12:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <gos_systemTask+0xec>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 fa8f 	bl	800923c <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 8007d1e:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <gos_systemTask+0xe8>)
 8007d20:	2249      	movs	r2, #73	; 0x49
 8007d22:	701a      	strb	r2, [r3, #0]
        else
        {
            // Nothing to do.
        }

        (void_t) gos_kernelTaskSleep(GOS_SYS_TASK_SLEEP_TIME);
 8007d24:	2064      	movs	r0, #100	; 0x64
 8007d26:	f7fd fd0d 	bl	8005744 <gos_kernelTaskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8007d2a:	e7e4      	b.n	8007cf6 <gos_systemTask+0xa2>
 8007d2c:	20001a7a 	.word	0x20001a7a
 8007d30:	20001244 	.word	0x20001244
 8007d34:	0800d910 	.word	0x0800d910
 8007d38:	20001aa2 	.word	0x20001aa2
 8007d3c:	20001aa1 	.word	0x20001aa1
 8007d40:	20001a78 	.word	0x20001a78

08007d44 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
void_t gos_printStartupLogo (void_t)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 8007d48:	4811      	ldr	r0, [pc, #68]	; (8007d90 <gos_printStartupLogo+0x4c>)
 8007d4a:	f002 f8db 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 8007d4e:	4811      	ldr	r0, [pc, #68]	; (8007d94 <gos_printStartupLogo+0x50>)
 8007d50:	f002 f8d8 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 8007d54:	4810      	ldr	r0, [pc, #64]	; (8007d98 <gos_printStartupLogo+0x54>)
 8007d56:	f002 f8d5 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 8007d5a:	4810      	ldr	r0, [pc, #64]	; (8007d9c <gos_printStartupLogo+0x58>)
 8007d5c:	f002 f8d2 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 8007d60:	480f      	ldr	r0, [pc, #60]	; (8007da0 <gos_printStartupLogo+0x5c>)
 8007d62:	f002 f8cf 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 8007d66:	480f      	ldr	r0, [pc, #60]	; (8007da4 <gos_printStartupLogo+0x60>)
 8007d68:	f002 f8cc 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 8007d6c:	480e      	ldr	r0, [pc, #56]	; (8007da8 <gos_printStartupLogo+0x64>)
 8007d6e:	f002 f8c9 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 8007d72:	4809      	ldr	r0, [pc, #36]	; (8007d98 <gos_printStartupLogo+0x54>)
 8007d74:	f002 f8c6 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 8007d78:	480c      	ldr	r0, [pc, #48]	; (8007dac <gos_printStartupLogo+0x68>)
 8007d7a:	f002 f8c3 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                           (c) Ahmed Gazar, 2023                          \r\n\r\n");
 8007d7e:	480c      	ldr	r0, [pc, #48]	; (8007db0 <gos_printStartupLogo+0x6c>)
 8007d80:	f002 f8c0 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 8007d84:	480b      	ldr	r0, [pc, #44]	; (8007db4 <gos_printStartupLogo+0x70>)
 8007d86:	f002 f8bd 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
}
 8007d8a:	bf00      	nop
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	0800d928 	.word	0x0800d928
 8007d94:	0800d978 	.word	0x0800d978
 8007d98:	0800d9c8 	.word	0x0800d9c8
 8007d9c:	0800da18 	.word	0x0800da18
 8007da0:	0800da68 	.word	0x0800da68
 8007da4:	0800dab8 	.word	0x0800dab8
 8007da8:	0800db08 	.word	0x0800db08
 8007dac:	0800db58 	.word	0x0800db58
 8007db0:	0800dba8 	.word	0x0800dba8
 8007db4:	0800dbf8 	.word	0x0800dbf8

08007db8 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 8007db8:	b408      	push	{r3}
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b087      	sub	sp, #28
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
 8007dc6:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 8007dc8:	4832      	ldr	r0, [pc, #200]	; (8007e94 <gos_errorHandler+0xdc>)
 8007dca:	f002 f89b 	bl	8009f04 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b34      	cmp	r3, #52	; 0x34
 8007dd2:	d103      	bne.n	8007ddc <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8007dd4:	4830      	ldr	r0, [pc, #192]	; (8007e98 <gos_errorHandler+0xe0>)
 8007dd6:	f002 f895 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
 8007dda:	e013      	b.n	8007e04 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b2e      	cmp	r3, #46	; 0x2e
 8007de0:	d103      	bne.n	8007dea <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8007de2:	482e      	ldr	r0, [pc, #184]	; (8007e9c <gos_errorHandler+0xe4>)
 8007de4:	f002 f88e 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
 8007de8:	e00c      	b.n	8007e04 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b1a      	cmp	r3, #26
 8007dee:	d103      	bne.n	8007df8 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8007df0:	482b      	ldr	r0, [pc, #172]	; (8007ea0 <gos_errorHandler+0xe8>)
 8007df2:	f002 f887 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
 8007df6:	e005      	b.n	8007e04 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	2b3a      	cmp	r3, #58	; 0x3a
 8007dfc:	d102      	bne.n	8007e04 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8007dfe:	4829      	ldr	r0, [pc, #164]	; (8007ea4 <gos_errorHandler+0xec>)
 8007e00:	f002 f880 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	4826      	ldr	r0, [pc, #152]	; (8007ea8 <gos_errorHandler+0xf0>)
 8007e10:	f002 f878 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
 8007e14:	e006      	b.n	8007e24 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4823      	ldr	r0, [pc, #140]	; (8007eac <gos_errorHandler+0xf4>)
 8007e20:	f002 f870 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00b      	beq.n	8007e42 <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 8007e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e2e:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e34:	481e      	ldr	r0, [pc, #120]	; (8007eb0 <gos_errorHandler+0xf8>)
 8007e36:	f003 f827 	bl	800ae88 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 8007e3a:	491d      	ldr	r1, [pc, #116]	; (8007eb0 <gos_errorHandler+0xf8>)
 8007e3c:	481d      	ldr	r0, [pc, #116]	; (8007eb4 <gos_errorHandler+0xfc>)
 8007e3e:	f002 f861 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 8007e42:	481d      	ldr	r0, [pc, #116]	; (8007eb8 <gos_errorHandler+0x100>)
 8007e44:	f002 f85e 	bl	8009f04 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b34      	cmp	r3, #52	; 0x34
 8007e4c:	d002      	beq.n	8007e54 <gos_errorHandler+0x9c>
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b1a      	cmp	r3, #26
 8007e52:	d118      	bne.n	8007e86 <gos_errorHandler+0xce>
    {
        GOS_DISABLE_SCHED
 8007e54:	4b19      	ldr	r3, [pc, #100]	; (8007ebc <gos_errorHandler+0x104>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <gos_errorHandler+0x104>)
 8007e5e:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 8007e60:	4b16      	ldr	r3, [pc, #88]	; (8007ebc <gos_errorHandler+0x104>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	4b14      	ldr	r3, [pc, #80]	; (8007ebc <gos_errorHandler+0x104>)
 8007e6a:	701a      	strb	r2, [r3, #0]
 8007e6c:	b672      	cpsid	i
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
        for (;;)
        {
            GOS_NOP;
 8007e76:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 8007e78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007e7c:	f7fe fd28 	bl	80068d0 <gos_kernelDelayMs>
            gos_kernelReset();
 8007e80:	f7fe fd08 	bl	8006894 <gos_kernelReset>
            GOS_NOP;
 8007e84:	e7f7      	b.n	8007e76 <gos_errorHandler+0xbe>
    }
    else
    {
        // Nothing to do.
    }
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e90:	b001      	add	sp, #4
 8007e92:	4770      	bx	lr
 8007e94:	0800dc48 	.word	0x0800dc48
 8007e98:	0800dc9c 	.word	0x0800dc9c
 8007e9c:	0800dcc8 	.word	0x0800dcc8
 8007ea0:	0800dce8 	.word	0x0800dce8
 8007ea4:	0800dd18 	.word	0x0800dd18
 8007ea8:	0800dd38 	.word	0x0800dd38
 8007eac:	0800dd5c 	.word	0x0800dd5c
 8007eb0:	20001aa4 	.word	0x20001aa4
 8007eb4:	0800dd88 	.word	0x0800dd88
 8007eb8:	0800dd90 	.word	0x0800dd90
 8007ebc:	20001a7a 	.word	0x20001a7a

08007ec0 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 8007ec0:	b590      	push	{r4, r7, lr}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */

    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 8007ecc:	f7fe fcc6 	bl	800685c <gos_kernelGetSysTicks>
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	1cfb      	adds	r3, r7, #3
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f80d 	bl	8007ef4 <gos_traceResultToString>
 8007eda:	4603      	mov	r3, r0
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4803      	ldr	r0, [pc, #12]	; (8007ef0 <gos_errorTraceInit+0x30>)
 8007ee2:	f002 f80f 	bl	8009f04 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd90      	pop	{r4, r7, pc}
 8007ef0:	0800dde0 	.word	0x0800dde0

08007ef4 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b55      	cmp	r3, #85	; 0x55
 8007f02:	d002      	beq.n	8007f0a <gos_traceResultToString+0x16>
 8007f04:	2bae      	cmp	r3, #174	; 0xae
 8007f06:	d002      	beq.n	8007f0e <gos_traceResultToString+0x1a>
 8007f08:	e003      	b.n	8007f12 <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <gos_traceResultToString+0x2c>)
 8007f0c:	e002      	b.n	8007f14 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <gos_traceResultToString+0x30>)
 8007f10:	e000      	b.n	8007f14 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 8007f12:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <gos_traceResultToString+0x34>)
        }
    }
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	0800ddfc 	.word	0x0800ddfc
 8007f24:	0800de10 	.word	0x0800de10
 8007f28:	0800de24 	.word	0x0800de24

08007f2c <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 8007f32:	2355      	movs	r3, #85	; 0x55
 8007f34:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 8007f36:	2300      	movs	r3, #0
 8007f38:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	80bb      	strh	r3, [r7, #4]
 8007f3e:	e01a      	b.n	8007f76 <gos_gcpInit+0x4a>
    {
        gcpInitResult &= gos_mutexInit(&gcpRxMutexes[mutexIdx]);
 8007f40:	88bb      	ldrh	r3, [r7, #4]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4a12      	ldr	r2, [pc, #72]	; (8007f90 <gos_gcpInit+0x64>)
 8007f46:	4413      	add	r3, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 f973 	bl	8008234 <gos_mutexInit>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	461a      	mov	r2, r3
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	4013      	ands	r3, r2
 8007f56:	71fb      	strb	r3, [r7, #7]
        gcpInitResult &= gos_mutexInit(&gcpTxMutexes[mutexIdx]);
 8007f58:	88bb      	ldrh	r3, [r7, #4]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4a0d      	ldr	r2, [pc, #52]	; (8007f94 <gos_gcpInit+0x68>)
 8007f5e:	4413      	add	r3, r2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f967 	bl	8008234 <gos_mutexInit>
 8007f66:	4603      	mov	r3, r0
 8007f68:	461a      	mov	r2, r3
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8007f70:	88bb      	ldrh	r3, [r7, #4]
 8007f72:	3301      	adds	r3, #1
 8007f74:	80bb      	strh	r3, [r7, #4]
 8007f76:	88bb      	ldrh	r3, [r7, #4]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d9e1      	bls.n	8007f40 <gos_gcpInit+0x14>
    }

    if (gcpInitResult != GOS_SUCCESS)
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	2b55      	cmp	r3, #85	; 0x55
 8007f80:	d001      	beq.n	8007f86 <gos_gcpInit+0x5a>
    {
        gcpInitResult = GOS_ERROR;
 8007f82:	23ae      	movs	r3, #174	; 0xae
 8007f84:	71fb      	strb	r3, [r7, #7]
    }

    return gcpInitResult;
 8007f86:	79fb      	ldrb	r3, [r7, #7]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20001af4 	.word	0x20001af4
 8007f94:	20001b00 	.word	0x20001b00

08007f98 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_SUCCESS;
 8007f9e:	2355      	movs	r3, #85	; 0x55
 8007fa0:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 8007faa:	4b22      	ldr	r3, [pc, #136]	; (8008034 <gos_messageInit+0x9c>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 8007fb0:	4b21      	ldr	r3, [pc, #132]	; (8008038 <gos_messageInit+0xa0>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	71bb      	strb	r3, [r7, #6]
 8007fba:	e014      	b.n	8007fe6 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 8007fbc:	79bb      	ldrb	r3, [r7, #6]
 8007fbe:	4a1f      	ldr	r2, [pc, #124]	; (800803c <gos_messageInit+0xa4>)
 8007fc0:	2154      	movs	r1, #84	; 0x54
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fcc:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 8007fce:	79bb      	ldrb	r3, [r7, #6]
 8007fd0:	4a1a      	ldr	r2, [pc, #104]	; (800803c <gos_messageInit+0xa4>)
 8007fd2:	2154      	movs	r1, #84	; 0x54
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	3302      	adds	r3, #2
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8007fe0:	79bb      	ldrb	r3, [r7, #6]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	71bb      	strb	r3, [r7, #6]
 8007fe6:	79bb      	ldrb	r3, [r7, #6]
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d9e7      	bls.n	8007fbc <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8007fec:	2300      	movs	r3, #0
 8007fee:	717b      	strb	r3, [r7, #5]
 8007ff0:	e009      	b.n	8008006 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8007ff2:	797b      	ldrb	r3, [r7, #5]
 8007ff4:	4a12      	ldr	r2, [pc, #72]	; (8008040 <gos_messageInit+0xa8>)
 8007ff6:	015b      	lsls	r3, r3, #5
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ffe:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8008000:	797b      	ldrb	r3, [r7, #5]
 8008002:	3301      	adds	r3, #1
 8008004:	717b      	strb	r3, [r7, #5]
 8008006:	797b      	ldrb	r3, [r7, #5]
 8008008:	2b09      	cmp	r3, #9
 800800a:	d9f2      	bls.n	8007ff2 <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 800800c:	480d      	ldr	r0, [pc, #52]	; (8008044 <gos_messageInit+0xac>)
 800800e:	f000 f911 	bl	8008234 <gos_mutexInit>
 8008012:	4603      	mov	r3, r0
 8008014:	2b55      	cmp	r3, #85	; 0x55
 8008016:	d106      	bne.n	8008026 <gos_messageInit+0x8e>
        gos_kernelTaskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) != GOS_SUCCESS)
 8008018:	490b      	ldr	r1, [pc, #44]	; (8008048 <gos_messageInit+0xb0>)
 800801a:	480c      	ldr	r0, [pc, #48]	; (800804c <gos_messageInit+0xb4>)
 800801c:	f7fd fa06 	bl	800542c <gos_kernelTaskRegister>
 8008020:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8008022:	2b55      	cmp	r3, #85	; 0x55
 8008024:	d001      	beq.n	800802a <gos_messageInit+0x92>
    {
        messageInitResult = GOS_ERROR;
 8008026:	23ae      	movs	r3, #174	; 0xae
 8008028:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 800802a:	79fb      	ldrb	r3, [r7, #7]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	20001d9e 	.word	0x20001d9e
 8008038:	20001d9f 	.word	0x20001d9f
 800803c:	20001b0c 	.word	0x20001b0c
 8008040:	20001c5c 	.word	0x20001c5c
 8008044:	20001da0 	.word	0x20001da0
 8008048:	20001d9c 	.word	0x20001d9c
 800804c:	200013d4 	.word	0x200013d4

08008050 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 8008050:	b590      	push	{r4, r7, lr}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 8008056:	2300      	movs	r3, #0
 8008058:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 800805a:	2300      	movs	r3, #0
 800805c:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 800805e:	2300      	movs	r3, #0
 8008060:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for(;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8008062:	f04f 31ff 	mov.w	r1, #4294967295
 8008066:	4870      	ldr	r0, [pc, #448]	; (8008228 <gos_messageDaemonTask+0x1d8>)
 8008068:	f000 f8fe 	bl	8008268 <gos_mutexLock>
 800806c:	4603      	mov	r3, r0
 800806e:	2b55      	cmp	r3, #85	; 0x55
 8008070:	f040 80d5 	bne.w	800821e <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8008074:	2300      	movs	r3, #0
 8008076:	71bb      	strb	r3, [r7, #6]
 8008078:	e0ca      	b.n	8008210 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 800807a:	79bb      	ldrb	r3, [r7, #6]
 800807c:	4a6b      	ldr	r2, [pc, #428]	; (800822c <gos_messageDaemonTask+0x1dc>)
 800807e:	015b      	lsls	r3, r3, #5
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008088:	f000 80bf 	beq.w	800820a <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800808c:	2300      	movs	r3, #0
 800808e:	717b      	strb	r3, [r7, #5]
 8008090:	e077      	b.n	8008182 <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8008092:	2300      	movs	r3, #0
 8008094:	71fb      	strb	r3, [r7, #7]
 8008096:	e06e      	b.n	8008176 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8008098:	79ba      	ldrb	r2, [r7, #6]
 800809a:	797b      	ldrb	r3, [r7, #5]
 800809c:	4963      	ldr	r1, [pc, #396]	; (800822c <gos_messageDaemonTask+0x1dc>)
 800809e:	0112      	lsls	r2, r2, #4
 80080a0:	4413      	add	r3, r2
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	440b      	add	r3, r1
 80080a6:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	4961      	ldr	r1, [pc, #388]	; (8008230 <gos_messageDaemonTask+0x1e0>)
 80080ac:	2054      	movs	r0, #84	; 0x54
 80080ae:	fb00 f303 	mul.w	r3, r0, r3
 80080b2:	440b      	add	r3, r1
 80080b4:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d15a      	bne.n	8008170 <gos_messageDaemonTask+0x120>
                            {
                                memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 80080ba:	79bb      	ldrb	r3, [r7, #6]
 80080bc:	4a5b      	ldr	r2, [pc, #364]	; (800822c <gos_messageDaemonTask+0x1dc>)
 80080be:	015b      	lsls	r3, r3, #5
 80080c0:	4413      	add	r3, r2
 80080c2:	3318      	adds	r3, #24
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	2254      	movs	r2, #84	; 0x54
 80080cc:	fb02 f303 	mul.w	r3, r2, r3
 80080d0:	4a57      	ldr	r2, [pc, #348]	; (8008230 <gos_messageDaemonTask+0x1e0>)
 80080d2:	4413      	add	r3, r2
 80080d4:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	4a55      	ldr	r2, [pc, #340]	; (8008230 <gos_messageDaemonTask+0x1e0>)
 80080da:	2454      	movs	r4, #84	; 0x54
 80080dc:	fb04 f303 	mul.w	r3, r4, r3
 80080e0:	4413      	add	r3, r2
 80080e2:	3302      	adds	r3, #2
 80080e4:	781b      	ldrb	r3, [r3, #0]
                                memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 80080e6:	461a      	mov	r2, r3
 80080e8:	f002 ff5e 	bl	800afa8 <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize    = messageArray[messageIndex].messageSize;
 80080ec:	79fa      	ldrb	r2, [r7, #7]
 80080ee:	79bb      	ldrb	r3, [r7, #6]
 80080f0:	494e      	ldr	r1, [pc, #312]	; (800822c <gos_messageDaemonTask+0x1dc>)
 80080f2:	015b      	lsls	r3, r3, #5
 80080f4:	440b      	add	r3, r1
 80080f6:	3318      	adds	r3, #24
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	494d      	ldr	r1, [pc, #308]	; (8008230 <gos_messageDaemonTask+0x1e0>)
 80080fc:	2054      	movs	r0, #84	; 0x54
 80080fe:	fb00 f202 	mul.w	r2, r0, r2
 8008102:	440a      	add	r2, r1
 8008104:	3202      	adds	r2, #2
 8008106:	7812      	ldrb	r2, [r2, #0]
 8008108:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 800810a:	79fa      	ldrb	r2, [r7, #7]
 800810c:	79bb      	ldrb	r3, [r7, #6]
 800810e:	4947      	ldr	r1, [pc, #284]	; (800822c <gos_messageDaemonTask+0x1dc>)
 8008110:	015b      	lsls	r3, r3, #5
 8008112:	440b      	add	r3, r1
 8008114:	3318      	adds	r3, #24
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4945      	ldr	r1, [pc, #276]	; (8008230 <gos_messageDaemonTask+0x1e0>)
 800811a:	2054      	movs	r0, #84	; 0x54
 800811c:	fb00 f202 	mul.w	r2, r0, r2
 8008120:	440a      	add	r2, r1
 8008122:	8812      	ldrh	r2, [r2, #0]
 8008124:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_kernelTaskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8008126:	79bb      	ldrb	r3, [r7, #6]
 8008128:	4a40      	ldr	r2, [pc, #256]	; (800822c <gos_messageDaemonTask+0x1dc>)
 800812a:	015b      	lsls	r3, r3, #5
 800812c:	4413      	add	r3, r2
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f7fd fe29 	bl	8005d88 <gos_kernelTaskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	4a3d      	ldr	r2, [pc, #244]	; (8008230 <gos_messageDaemonTask+0x1e0>)
 800813a:	2154      	movs	r1, #84	; 0x54
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	4413      	add	r3, r2
 8008142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008146:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8008148:	79bb      	ldrb	r3, [r7, #6]
 800814a:	4a38      	ldr	r2, [pc, #224]	; (800822c <gos_messageDaemonTask+0x1dc>)
 800814c:	015b      	lsls	r3, r3, #5
 800814e:	4413      	add	r3, r2
 8008150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008154:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 8008156:	79bb      	ldrb	r3, [r7, #6]
 8008158:	4a34      	ldr	r2, [pc, #208]	; (800822c <gos_messageDaemonTask+0x1dc>)
 800815a:	015b      	lsls	r3, r3, #5
 800815c:	4413      	add	r3, r2
 800815e:	331c      	adds	r3, #28
 8008160:	2236      	movs	r2, #54	; 0x36
 8008162:	701a      	strb	r2, [r3, #0]

                                messageIndex = CFG_MESSAGE_MAX_NUMBER;
 8008164:	2304      	movs	r3, #4
 8008166:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex = CFG_MESSAGE_MAX_WAITER_IDS;
 8008168:	2308      	movs	r3, #8
 800816a:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 800816c:	230a      	movs	r3, #10
 800816e:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	3301      	adds	r3, #1
 8008174:	71fb      	strb	r3, [r7, #7]
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	2b03      	cmp	r3, #3
 800817a:	d98d      	bls.n	8008098 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800817c:	797b      	ldrb	r3, [r7, #5]
 800817e:	3301      	adds	r3, #1
 8008180:	717b      	strb	r3, [r7, #5]
 8008182:	797b      	ldrb	r3, [r7, #5]
 8008184:	2b07      	cmp	r3, #7
 8008186:	d984      	bls.n	8008092 <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8008188:	79bb      	ldrb	r3, [r7, #6]
 800818a:	4a28      	ldr	r2, [pc, #160]	; (800822c <gos_messageDaemonTask+0x1dc>)
 800818c:	015b      	lsls	r3, r3, #5
 800818e:	4413      	add	r3, r2
 8008190:	331c      	adds	r3, #28
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b49      	cmp	r3, #73	; 0x49
 8008196:	d138      	bne.n	800820a <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 8008198:	79bb      	ldrb	r3, [r7, #6]
 800819a:	4a24      	ldr	r2, [pc, #144]	; (800822c <gos_messageDaemonTask+0x1dc>)
 800819c:	015b      	lsls	r3, r3, #5
 800819e:	4413      	add	r3, r2
 80081a0:	3302      	adds	r3, #2
 80081a2:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 80081a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d02e      	beq.n	800820a <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 80081ac:	79bb      	ldrb	r3, [r7, #6]
 80081ae:	491f      	ldr	r1, [pc, #124]	; (800822c <gos_messageDaemonTask+0x1dc>)
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	440a      	add	r2, r1
 80081b4:	3204      	adds	r2, #4
 80081b6:	8812      	ldrh	r2, [r2, #0]
 80081b8:	3201      	adds	r2, #1
 80081ba:	b291      	uxth	r1, r2
 80081bc:	4a1b      	ldr	r2, [pc, #108]	; (800822c <gos_messageDaemonTask+0x1dc>)
 80081be:	015b      	lsls	r3, r3, #5
 80081c0:	4413      	add	r3, r2
 80081c2:	3304      	adds	r3, #4
 80081c4:	460a      	mov	r2, r1
 80081c6:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS)  > messageWaiterArray[messageWaiterIndex].waitTmo)
 80081c8:	79bb      	ldrb	r3, [r7, #6]
 80081ca:	4a18      	ldr	r2, [pc, #96]	; (800822c <gos_messageDaemonTask+0x1dc>)
 80081cc:	015b      	lsls	r3, r3, #5
 80081ce:	4413      	add	r3, r2
 80081d0:	3304      	adds	r3, #4
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	2396      	movs	r3, #150	; 0x96
 80081d8:	fb02 f303 	mul.w	r3, r2, r3
 80081dc:	79ba      	ldrb	r2, [r7, #6]
 80081de:	4913      	ldr	r1, [pc, #76]	; (800822c <gos_messageDaemonTask+0x1dc>)
 80081e0:	0152      	lsls	r2, r2, #5
 80081e2:	440a      	add	r2, r1
 80081e4:	3202      	adds	r2, #2
 80081e6:	8812      	ldrh	r2, [r2, #0]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d90e      	bls.n	800820a <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_kernelTaskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 80081ec:	79bb      	ldrb	r3, [r7, #6]
 80081ee:	4a0f      	ldr	r2, [pc, #60]	; (800822c <gos_messageDaemonTask+0x1dc>)
 80081f0:	015b      	lsls	r3, r3, #5
 80081f2:	4413      	add	r3, r2
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd fdc6 	bl	8005d88 <gos_kernelTaskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 80081fc:	79bb      	ldrb	r3, [r7, #6]
 80081fe:	4a0b      	ldr	r2, [pc, #44]	; (800822c <gos_messageDaemonTask+0x1dc>)
 8008200:	015b      	lsls	r3, r3, #5
 8008202:	4413      	add	r3, r2
 8008204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008208:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800820a:	79bb      	ldrb	r3, [r7, #6]
 800820c:	3301      	adds	r3, #1
 800820e:	71bb      	strb	r3, [r7, #6]
 8008210:	79bb      	ldrb	r3, [r7, #6]
 8008212:	2b09      	cmp	r3, #9
 8008214:	f67f af31 	bls.w	800807a <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            gos_mutexUnlock(&messageMutex);
 8008218:	4803      	ldr	r0, [pc, #12]	; (8008228 <gos_messageDaemonTask+0x1d8>)
 800821a:	f000 f8cd 	bl	80083b8 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_kernelTaskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 800821e:	2096      	movs	r0, #150	; 0x96
 8008220:	f7fd fa90 	bl	8005744 <gos_kernelTaskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8008224:	e71d      	b.n	8008062 <gos_messageDaemonTask+0x12>
 8008226:	bf00      	nop
 8008228:	20001da0 	.word	0x20001da0
 800822c:	20001c5c 	.word	0x20001c5c
 8008230:	20001b0c 	.word	0x20001b0c

08008234 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 800823c:	23ae      	movs	r3, #174	; 0xae
 800823e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d008      	beq.n	8008258 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	22d2      	movs	r2, #210	; 0xd2
 800824a:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008252:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 8008254:	2355      	movs	r3, #85	; 0x55
 8008256:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
GOS_INLINE gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    bool_t                   isLocked        = GOS_TRUE;
 8008272:	2336      	movs	r3, #54	; 0x36
 8008274:	75fb      	strb	r3, [r7, #23]
    gos_result_t             mutexLockResult = GOS_ERROR;
 8008276:	23ae      	movs	r3, #174	; 0xae
 8008278:	75bb      	strb	r3, [r7, #22]
    u32_t                    sysTickInitial  = 0u;
 800827a:	2300      	movs	r3, #0
 800827c:	613b      	str	r3, [r7, #16]
    gos_taskPrivilegeLevel_t privileges      = 0u;
 800827e:	2300      	movs	r3, #0
 8008280:	81fb      	strh	r3, [r7, #14]
#if CFG_USE_PRIO_INHERITANCE
    gos_taskPrio_t           ownerPrio       = CFG_PROC_MAX_PRIO_LEVELS;
 8008282:	23ff      	movs	r3, #255	; 0xff
 8008284:	737b      	strb	r3, [r7, #13]
    gos_taskPrio_t           currentPrio     = CFG_PROC_MAX_PRIO_LEVELS;
 8008286:	23ff      	movs	r3, #255	; 0xff
 8008288:	733b      	strb	r3, [r7, #12]
    gos_tid_t                currentId       = GOS_INVALID_TASK_ID;
 800828a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800828e:	817b      	strh	r3, [r7, #10]
#endif

    /*
     * Function code.
     */
    sysTickInitial = gos_kernelGetSysTicks();
 8008290:	f7fe fae4 	bl	800685c <gos_kernelGetSysTicks>
 8008294:	6138      	str	r0, [r7, #16]

#if CFG_USE_PRIO_INHERITANCE
    (void_t) gos_kernelTaskGetCurrentId(&currentId);
 8008296:	f107 030a 	add.w	r3, r7, #10
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fa18 	bl	80066d0 <gos_kernelTaskGetCurrentId>
    (void_t) gos_kernelTaskGetPriority(currentId, &currentPrio);
 80082a0:	897b      	ldrh	r3, [r7, #10]
 80082a2:	f107 020c 	add.w	r2, r7, #12
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe f815 	bl	80062d8 <gos_kernelTaskGetPriority>
    (void_t) gos_kernelTaskGetPriority(pMutex->owner, &ownerPrio);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	f107 020d 	add.w	r2, r7, #13
 80082b6:	4611      	mov	r1, r2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe f80d 	bl	80062d8 <gos_kernelTaskGetPriority>
#endif

    // Wait for the mutex to become available
    while (isLocked == GOS_TRUE)
 80082be:	e06f      	b.n	80083a0 <gos_mutexLock+0x138>
    {
        // Check if the mutex is locked
        GOS_ATOMIC_ENTER
 80082c0:	4b3c      	ldr	r3, [pc, #240]	; (80083b4 <gos_mutexLock+0x14c>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	3301      	adds	r3, #1
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	4b3a      	ldr	r3, [pc, #232]	; (80083b4 <gos_mutexLock+0x14c>)
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	b672      	cpsid	i
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2bd2      	cmp	r3, #210	; 0xd2
 80082dc:	d10c      	bne.n	80082f8 <gos_mutexLock+0x90>
        {
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	226b      	movs	r2, #107	; 0x6b
 80082e2:	701a      	strb	r2, [r3, #0]
            (void_t) gos_kernelTaskGetCurrentId((gos_tid_t*)&(pMutex->owner));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3302      	adds	r3, #2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe f9f1 	bl	80066d0 <gos_kernelTaskGetCurrentId>
            isLocked = GOS_FALSE;
 80082ee:	2349      	movs	r3, #73	; 0x49
 80082f0:	75fb      	strb	r3, [r7, #23]
            mutexLockResult = GOS_SUCCESS;
 80082f2:	2355      	movs	r3, #85	; 0x55
 80082f4:	75bb      	strb	r3, [r7, #22]
 80082f6:	e034      	b.n	8008362 <gos_mutexLock+0xfa>
        }
#if CFG_USE_PRIO_INHERITANCE
        else
        {
            if (ownerPrio > currentPrio)
 80082f8:	7b7a      	ldrb	r2, [r7, #13]
 80082fa:	7b3b      	ldrb	r3, [r7, #12]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d930      	bls.n	8008362 <gos_mutexLock+0xfa>
            {
                (void_t) gos_kernelTaskGetPrivileges(currentId, &privileges);
 8008300:	897b      	ldrh	r3, [r7, #10]
 8008302:	f107 020e 	add.w	r2, r7, #14
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f7fe f961 	bl	80065d0 <gos_kernelTaskGetPrivileges>

                if ((privileges & GOS_PRIV_TASK_PRIO_CHANGE) != GOS_PRIV_TASK_PRIO_CHANGE)
 800830e:	89fb      	ldrh	r3, [r7, #14]
 8008310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d118      	bne.n	800834a <gos_mutexLock+0xe2>
                {
                    (void_t) gos_kernelTaskAddPrivilege(currentId, GOS_PRIV_TASK_PRIO_CHANGE);
 8008318:	897b      	ldrh	r3, [r7, #10]
 800831a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe f86a 	bl	80063f8 <gos_kernelTaskAddPrivilege>
                    if (gos_kernelTaskSetPriority(pMutex->owner, currentPrio) == GOS_SUCCESS)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	885b      	ldrh	r3, [r3, #2]
 8008328:	7b3a      	ldrb	r2, [r7, #12]
 800832a:	4611      	mov	r1, r2
 800832c:	4618      	mov	r0, r3
 800832e:	f7fd fec7 	bl	80060c0 <gos_kernelTaskSetPriority>
 8008332:	4603      	mov	r3, r0
 8008334:	2b55      	cmp	r3, #85	; 0x55
 8008336:	d101      	bne.n	800833c <gos_mutexLock+0xd4>
                    {
                        ownerPrio = currentPrio;
 8008338:	7b3b      	ldrb	r3, [r7, #12]
 800833a:	737b      	strb	r3, [r7, #13]
                    }
                    else
                    {
                        // Nothing to do.
                    }
                    (void_t) gos_kernelTaskRemovePrivilege(currentId, GOS_PRIV_TASK_PRIO_CHANGE);
 800833c:	897b      	ldrh	r3, [r7, #10]
 800833e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe f8a8 	bl	8006498 <gos_kernelTaskRemovePrivilege>
 8008348:	e00b      	b.n	8008362 <gos_mutexLock+0xfa>
                }
                else
                {
                    if (gos_kernelTaskSetPriority(pMutex->owner, currentPrio) == GOS_SUCCESS)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	885b      	ldrh	r3, [r3, #2]
 800834e:	7b3a      	ldrb	r2, [r7, #12]
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f7fd feb4 	bl	80060c0 <gos_kernelTaskSetPriority>
 8008358:	4603      	mov	r3, r0
 800835a:	2b55      	cmp	r3, #85	; 0x55
 800835c:	d101      	bne.n	8008362 <gos_mutexLock+0xfa>
                    {
                        ownerPrio = currentPrio;
 800835e:	7b3b      	ldrb	r3, [r7, #12]
 8008360:	737b      	strb	r3, [r7, #13]
            {
                // Nothing to do.
            }
        }
#endif
        GOS_ATOMIC_EXIT
 8008362:	b662      	cpsie	i
 8008364:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <gos_mutexLock+0x14c>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <gos_mutexLock+0x110>
 800836c:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <gos_mutexLock+0x14c>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	3b01      	subs	r3, #1
 8008372:	b2da      	uxtb	r2, r3
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <gos_mutexLock+0x14c>)
 8008376:	701a      	strb	r2, [r3, #0]

        if (isLocked == GOS_TRUE)
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b36      	cmp	r3, #54	; 0x36
 800837c:	d104      	bne.n	8008388 <gos_mutexLock+0x120>
        {
            (void_t) gos_kernelTaskBlock(currentId, MUTEX_LOCK_SLEEP_MS);
 800837e:	897b      	ldrh	r3, [r7, #10]
 8008380:	210a      	movs	r1, #10
 8008382:	4618      	mov	r0, r3
 8008384:	f7fd fc34 	bl	8005bf0 <gos_kernelTaskBlock>
        else
        {
            // Nothing to do.
        }

        if ((timeout != GOS_MUTEX_ENDLESS_TMO) &&
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	d007      	beq.n	80083a0 <gos_mutexLock+0x138>
            ((gos_kernelGetSysTicks() - sysTickInitial) >= timeout))
 8008390:	f7fe fa64 	bl	800685c <gos_kernelGetSysTicks>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
        if ((timeout != GOS_MUTEX_ENDLESS_TMO) &&
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d903      	bls.n	80083a8 <gos_mutexLock+0x140>
    while (isLocked == GOS_TRUE)
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	2b36      	cmp	r3, #54	; 0x36
 80083a4:	d08c      	beq.n	80082c0 <gos_mutexLock+0x58>
 80083a6:	e000      	b.n	80083aa <gos_mutexLock+0x142>
        {
            break;
 80083a8:	bf00      	nop
        {
            // Nothing to do.
        }
    }

    return mutexLockResult;
 80083aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20001a7a 	.word	0x20001a7a

080083b8 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
GOS_INLINE void_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_tid_t                currentTaskId     = GOS_INVALID_TASK_ID;
 80083c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083c4:	81fb      	strh	r3, [r7, #14]
    gos_taskPrivilegeLevel_t privileges        = 0u;
 80083c6:	2300      	movs	r3, #0
 80083c8:	81bb      	strh	r3, [r7, #12]
#if CFG_USE_PRIO_INHERITANCE
    gos_taskPrio_t           ownerOriginalPrio = GOS_TASK_MAX_PRIO_LEVELS;
 80083ca:	23ff      	movs	r3, #255	; 0xff
 80083cc:	72fb      	strb	r3, [r7, #11]
    gos_taskPrio_t           ownerCurrentPrio  = GOS_TASK_MAX_PRIO_LEVELS;
 80083ce:	23ff      	movs	r3, #255	; 0xff
 80083d0:	72bb      	strb	r3, [r7, #10]
#endif
    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80083d2:	4b33      	ldr	r3, [pc, #204]	; (80084a0 <gos_mutexUnlock+0xe8>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	3301      	adds	r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <gos_mutexUnlock+0xe8>)
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	b672      	cpsid	i
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy

#if CFG_USE_PRIO_INHERITANCE
    (void_t) gos_kernelTaskGetOriginalPriority(pMutex->owner, &ownerOriginalPrio);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	885b      	ldrh	r3, [r3, #2]
 80083ec:	f107 020b 	add.w	r2, r7, #11
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fd ffb8 	bl	8006368 <gos_kernelTaskGetOriginalPriority>
    (void_t) gos_kernelTaskGetPriority(pMutex->owner, &ownerCurrentPrio);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	885b      	ldrh	r3, [r3, #2]
 80083fc:	f107 020a 	add.w	r2, r7, #10
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f7fd ff68 	bl	80062d8 <gos_kernelTaskGetPriority>
    (void_t) gos_kernelTaskGetCurrentId(&currentTaskId);
 8008408:	f107 030e 	add.w	r3, r7, #14
 800840c:	4618      	mov	r0, r3
 800840e:	f7fe f95f 	bl	80066d0 <gos_kernelTaskGetCurrentId>

    if (ownerCurrentPrio != ownerOriginalPrio)
 8008412:	7aba      	ldrb	r2, [r7, #10]
 8008414:	7afb      	ldrb	r3, [r7, #11]
 8008416:	429a      	cmp	r2, r3
 8008418:	d026      	beq.n	8008468 <gos_mutexUnlock+0xb0>
    {
        (void_t) gos_kernelTaskGetPrivileges(currentTaskId, &privileges);
 800841a:	89fb      	ldrh	r3, [r7, #14]
 800841c:	f107 020c 	add.w	r2, r7, #12
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe f8d4 	bl	80065d0 <gos_kernelTaskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_PRIO_CHANGE) != GOS_PRIV_TASK_PRIO_CHANGE)
 8008428:	89bb      	ldrh	r3, [r7, #12]
 800842a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d113      	bne.n	800845a <gos_mutexUnlock+0xa2>
        {
            (void_t) gos_kernelTaskAddPrivilege(currentTaskId, GOS_PRIV_TASK_PRIO_CHANGE);
 8008432:	89fb      	ldrh	r3, [r7, #14]
 8008434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008438:	4618      	mov	r0, r3
 800843a:	f7fd ffdd 	bl	80063f8 <gos_kernelTaskAddPrivilege>
            (void_t) gos_kernelTaskSetPriority(pMutex->owner, ownerOriginalPrio);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	885b      	ldrh	r3, [r3, #2]
 8008442:	7afa      	ldrb	r2, [r7, #11]
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd fe3a 	bl	80060c0 <gos_kernelTaskSetPriority>
            (void_t) gos_kernelTaskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_PRIO_CHANGE);
 800844c:	89fb      	ldrh	r3, [r7, #14]
 800844e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe f820 	bl	8006498 <gos_kernelTaskRemovePrivilege>
 8008458:	e006      	b.n	8008468 <gos_mutexUnlock+0xb0>
        }
        else
        {
            (void_t) gos_kernelTaskSetPriority(pMutex->owner, ownerOriginalPrio);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	7afa      	ldrb	r2, [r7, #11]
 8008460:	4611      	mov	r1, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f7fd fe2c 	bl	80060c0 <gos_kernelTaskSetPriority>
        // Nothing to do.
    }
#endif

    // Only owner can release the mutex.
    if (currentTaskId == pMutex->owner)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	885a      	ldrh	r2, [r3, #2]
 800846c:	89fb      	ldrh	r3, [r7, #14]
 800846e:	429a      	cmp	r2, r3
 8008470:	d106      	bne.n	8008480 <gos_mutexUnlock+0xc8>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	22d2      	movs	r2, #210	; 0xd2
 8008476:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800847e:	805a      	strh	r2, [r3, #2]
    else
    {
        // Nothing to do.
    }

    GOS_ATOMIC_EXIT
 8008480:	b662      	cpsie	i
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <gos_mutexUnlock+0xe8>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <gos_mutexUnlock+0xde>
 800848a:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <gos_mutexUnlock+0xe8>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	3b01      	subs	r3, #1
 8008490:	b2da      	uxtb	r2, r3
 8008492:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <gos_mutexUnlock+0xe8>)
 8008494:	701a      	strb	r2, [r3, #0]
}
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20001a7a 	.word	0x20001a7a

080084a4 <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_SUCCESS;
 80084aa:	2355      	movs	r3, #85	; 0x55
 80084ac:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 80084ae:	2300      	movs	r3, #0
 80084b0:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 80084b2:	2300      	movs	r3, #0
 80084b4:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80084b6:	2300      	movs	r3, #0
 80084b8:	71fb      	strb	r3, [r7, #7]
 80084ba:	e038      	b.n	800852e <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	4a22      	ldr	r2, [pc, #136]	; (8008548 <gos_queueInit+0xa4>)
 80084c0:	2100      	movs	r1, #0
 80084c2:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	4a21      	ldr	r2, [pc, #132]	; (800854c <gos_queueInit+0xa8>)
 80084c8:	2100      	movs	r1, #0
 80084ca:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	4a20      	ldr	r2, [pc, #128]	; (8008550 <gos_queueInit+0xac>)
 80084d0:	f641 7184 	movw	r1, #8068	; 0x1f84
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	4413      	add	r3, r2
 80084da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80084de:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	4a1b      	ldr	r2, [pc, #108]	; (8008550 <gos_queueInit+0xac>)
 80084e4:	f641 7184 	movw	r1, #8068	; 0x1f84
 80084e8:	fb01 f303 	mul.w	r3, r1, r3
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80084f2:	3302      	adds	r3, #2
 80084f4:	2200      	movs	r2, #0
 80084f6:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 80084f8:	2300      	movs	r3, #0
 80084fa:	71bb      	strb	r3, [r7, #6]
 80084fc:	e011      	b.n	8008522 <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	79ba      	ldrb	r2, [r7, #6]
 8008502:	4913      	ldr	r1, [pc, #76]	; (8008550 <gos_queueInit+0xac>)
 8008504:	20c9      	movs	r0, #201	; 0xc9
 8008506:	fb00 f202 	mul.w	r2, r0, r2
 800850a:	f641 7084 	movw	r0, #8068	; 0x1f84
 800850e:	fb00 f303 	mul.w	r3, r0, r3
 8008512:	4413      	add	r3, r2
 8008514:	440b      	add	r3, r1
 8008516:	33e2      	adds	r3, #226	; 0xe2
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 800851c:	79bb      	ldrb	r3, [r7, #6]
 800851e:	3301      	adds	r3, #1
 8008520:	71bb      	strb	r3, [r7, #6]
 8008522:	79bb      	ldrb	r3, [r7, #6]
 8008524:	2b27      	cmp	r3, #39	; 0x27
 8008526:	d9ea      	bls.n	80084fe <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	3301      	adds	r3, #1
 800852c:	71fb      	strb	r3, [r7, #7]
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b03      	cmp	r3, #3
 8008532:	d9c3      	bls.n	80084bc <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 8008534:	4807      	ldr	r0, [pc, #28]	; (8008554 <gos_queueInit+0xb0>)
 8008536:	f7ff fe7d 	bl	8008234 <gos_mutexInit>
 800853a:	4603      	mov	r3, r0
 800853c:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 800853e:	797b      	ldrb	r3, [r7, #5]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20009bb4 	.word	0x20009bb4
 800854c:	20009bb8 	.word	0x20009bb8
 8008550:	20001da4 	.word	0x20001da4
 8008554:	20009bbc 	.word	0x20009bbc

08008558 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 8008560:	23ae      	movs	r3, #174	; 0xae
 8008562:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d048      	beq.n	8008600 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800856e:	2300      	movs	r3, #0
 8008570:	73bb      	strb	r3, [r7, #14]
 8008572:	e042      	b.n	80085fa <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	4a25      	ldr	r2, [pc, #148]	; (800860c <gos_queueCreate+0xb4>)
 8008578:	f641 7184 	movw	r1, #8068	; 0x1f84
 800857c:	fb01 f303 	mul.w	r3, r1, r3
 8008580:	4413      	add	r3, r2
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008588:	d134      	bne.n	80085f4 <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	b29a      	uxth	r2, r3
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8008594:	b290      	uxth	r0, r2
 8008596:	4a1d      	ldr	r2, [pc, #116]	; (800860c <gos_queueCreate+0xb4>)
 8008598:	f641 7184 	movw	r1, #8068	; 0x1f84
 800859c:	fb01 f303 	mul.w	r3, r1, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	4602      	mov	r2, r0
 80085a4:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	4a18      	ldr	r2, [pc, #96]	; (800860c <gos_queueCreate+0xb4>)
 80085aa:	f641 7184 	movw	r1, #8068	; 0x1f84
 80085ae:	fb01 f303 	mul.w	r3, r1, r3
 80085b2:	4413      	add	r3, r2
 80085b4:	881a      	ldrh	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3302      	adds	r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d015      	beq.n	80085ee <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3302      	adds	r3, #2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7f7 fe82 	bl	80002d0 <strlen>
 80085cc:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 80085ce:	2b18      	cmp	r3, #24
 80085d0:	d80d      	bhi.n	80085ee <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	f641 7284 	movw	r2, #8068	; 0x1f84
 80085d8:	fb02 f303 	mul.w	r3, r2, r3
 80085dc:	4a0b      	ldr	r2, [pc, #44]	; (800860c <gos_queueCreate+0xb4>)
 80085de:	4413      	add	r3, r2
 80085e0:	1c9a      	adds	r2, r3, #2
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3302      	adds	r3, #2
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f002 fcd5 	bl	800af98 <strcpy>
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 80085ee:	2355      	movs	r3, #85	; 0x55
 80085f0:	73fb      	strb	r3, [r7, #15]
                break;
 80085f2:	e005      	b.n	8008600 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	3301      	adds	r3, #1
 80085f8:	73bb      	strb	r3, [r7, #14]
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d9b9      	bls.n	8008574 <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20001da4 	.word	0x20001da4

08008610 <gos_queuePut>:
 */
GOS_INLINE gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607b      	str	r3, [r7, #4]
 800861a:	4603      	mov	r3, r0
 800861c:	81fb      	strh	r3, [r7, #14]
 800861e:	4613      	mov	r3, r2
 8008620:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 8008622:	23ae      	movs	r3, #174	; 0xae
 8008624:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 8008626:	2300      	movs	r3, #0
 8008628:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	485a      	ldr	r0, [pc, #360]	; (8008798 <gos_queuePut+0x188>)
 800862e:	f7ff fe1b 	bl	8008268 <gos_mutexLock>
 8008632:	4603      	mov	r3, r0
 8008634:	2b55      	cmp	r3, #85	; 0x55
 8008636:	f040 80a7 	bne.w	8008788 <gos_queuePut+0x178>
 800863a:	89fb      	ldrh	r3, [r7, #14]
 800863c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008640:	f0c0 80a2 	bcc.w	8008788 <gos_queuePut+0x178>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8008644:	89fb      	ldrh	r3, [r7, #14]
 8008646:	f243 0203 	movw	r2, #12291	; 0x3003
 800864a:	4293      	cmp	r3, r2
 800864c:	f200 809c 	bhi.w	8008788 <gos_queuePut+0x178>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 8098 	beq.w	8008788 <gos_queuePut+0x178>
        element                                          != NULL                 &&
 8008658:	7b7b      	ldrb	r3, [r7, #13]
 800865a:	2bc8      	cmp	r3, #200	; 0xc8
 800865c:	f200 8094 	bhi.w	8008788 <gos_queuePut+0x178>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 8008660:	89fb      	ldrh	r3, [r7, #14]
 8008662:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8008666:	4a4d      	ldr	r2, [pc, #308]	; (800879c <gos_queuePut+0x18c>)
 8008668:	f641 7184 	movw	r1, #8068	; 0x1f84
 800866c:	fb01 f303 	mul.w	r3, r1, r3
 8008670:	4413      	add	r3, r2
 8008672:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 8008674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008678:	f000 8086 	beq.w	8008788 <gos_queuePut+0x178>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 800867c:	89fb      	ldrh	r3, [r7, #14]
 800867e:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8008680:	7dbb      	ldrb	r3, [r7, #22]
 8008682:	4a47      	ldr	r2, [pc, #284]	; (80087a0 <gos_queuePut+0x190>)
 8008684:	5cd3      	ldrb	r3, [r2, r3]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <gos_queuePut+0x8e>
 800868a:	7dbb      	ldrb	r3, [r7, #22]
 800868c:	4a45      	ldr	r2, [pc, #276]	; (80087a4 <gos_queuePut+0x194>)
 800868e:	5cd3      	ldrb	r3, [r2, r3]
 8008690:	4619      	mov	r1, r3
 8008692:	7dbb      	ldrb	r3, [r7, #22]
 8008694:	4a42      	ldr	r2, [pc, #264]	; (80087a0 <gos_queuePut+0x190>)
 8008696:	5cd3      	ldrb	r3, [r2, r3]
 8008698:	3b01      	subs	r3, #1
 800869a:	4299      	cmp	r1, r3
 800869c:	d109      	bne.n	80086b2 <gos_queuePut+0xa2>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 800869e:	7dbb      	ldrb	r3, [r7, #22]
 80086a0:	4a3f      	ldr	r2, [pc, #252]	; (80087a0 <gos_queuePut+0x190>)
 80086a2:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d16f      	bne.n	8008788 <gos_queuePut+0x178>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 80086a8:	7dbb      	ldrb	r3, [r7, #22]
 80086aa:	4a3e      	ldr	r2, [pc, #248]	; (80087a4 <gos_queuePut+0x194>)
 80086ac:	5cd3      	ldrb	r3, [r2, r3]
 80086ae:	2b27      	cmp	r3, #39	; 0x27
 80086b0:	d06a      	beq.n	8008788 <gos_queuePut+0x178>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 80086b2:	7dbb      	ldrb	r3, [r7, #22]
 80086b4:	7dba      	ldrb	r2, [r7, #22]
 80086b6:	493b      	ldr	r1, [pc, #236]	; (80087a4 <gos_queuePut+0x194>)
 80086b8:	5c8a      	ldrb	r2, [r1, r2]
 80086ba:	4611      	mov	r1, r2
 80086bc:	22c9      	movs	r2, #201	; 0xc9
 80086be:	fb01 f202 	mul.w	r2, r1, r2
 80086c2:	f641 7184 	movw	r1, #8068	; 0x1f84
 80086c6:	fb01 f303 	mul.w	r3, r1, r3
 80086ca:	4413      	add	r3, r2
 80086cc:	3318      	adds	r3, #24
 80086ce:	4a33      	ldr	r2, [pc, #204]	; (800879c <gos_queuePut+0x18c>)
 80086d0:	4413      	add	r3, r2
 80086d2:	3302      	adds	r3, #2
            (void_t) memcpy(
 80086d4:	7b7a      	ldrb	r2, [r7, #13]
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	4618      	mov	r0, r3
 80086da:	f002 fc65 	bl	800afa8 <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 80086de:	7dbb      	ldrb	r3, [r7, #22]
 80086e0:	7dba      	ldrb	r2, [r7, #22]
 80086e2:	4930      	ldr	r1, [pc, #192]	; (80087a4 <gos_queuePut+0x194>)
 80086e4:	5c8a      	ldrb	r2, [r1, r2]
 80086e6:	4610      	mov	r0, r2
 80086e8:	492c      	ldr	r1, [pc, #176]	; (800879c <gos_queuePut+0x18c>)
 80086ea:	22c9      	movs	r2, #201	; 0xc9
 80086ec:	fb00 f202 	mul.w	r2, r0, r2
 80086f0:	f641 7084 	movw	r0, #8068	; 0x1f84
 80086f4:	fb00 f303 	mul.w	r3, r0, r3
 80086f8:	4413      	add	r3, r2
 80086fa:	440b      	add	r3, r1
 80086fc:	33e2      	adds	r3, #226	; 0xe2
 80086fe:	7b7a      	ldrb	r2, [r7, #13]
 8008700:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 8008702:	7dbb      	ldrb	r3, [r7, #22]
 8008704:	4a27      	ldr	r2, [pc, #156]	; (80087a4 <gos_queuePut+0x194>)
 8008706:	5cd2      	ldrb	r2, [r2, r3]
 8008708:	3201      	adds	r2, #1
 800870a:	b2d1      	uxtb	r1, r2
 800870c:	4a25      	ldr	r2, [pc, #148]	; (80087a4 <gos_queuePut+0x194>)
 800870e:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 8008710:	7dba      	ldrb	r2, [r7, #22]
 8008712:	4922      	ldr	r1, [pc, #136]	; (800879c <gos_queuePut+0x18c>)
 8008714:	f641 7384 	movw	r3, #8068	; 0x1f84
 8008718:	fb02 f303 	mul.w	r3, r2, r3
 800871c:	440b      	add	r3, r1
 800871e:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8008722:	3302      	adds	r3, #2
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	b2d8      	uxtb	r0, r3
 800872a:	491c      	ldr	r1, [pc, #112]	; (800879c <gos_queuePut+0x18c>)
 800872c:	f641 7384 	movw	r3, #8068	; 0x1f84
 8008730:	fb02 f303 	mul.w	r3, r2, r3
 8008734:	440b      	add	r3, r1
 8008736:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800873a:	3302      	adds	r3, #2
 800873c:	4602      	mov	r2, r0
 800873e:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8008740:	7dbb      	ldrb	r3, [r7, #22]
 8008742:	4a18      	ldr	r2, [pc, #96]	; (80087a4 <gos_queuePut+0x194>)
 8008744:	5cd3      	ldrb	r3, [r2, r3]
 8008746:	2b27      	cmp	r3, #39	; 0x27
 8008748:	d903      	bls.n	8008752 <gos_queuePut+0x142>
            {
                writeCounters[queueIndex] = 0u;
 800874a:	7dbb      	ldrb	r3, [r7, #22]
 800874c:	4a15      	ldr	r2, [pc, #84]	; (80087a4 <gos_queuePut+0x194>)
 800874e:	2100      	movs	r1, #0
 8008750:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8008752:	7dbb      	ldrb	r3, [r7, #22]
 8008754:	4a11      	ldr	r2, [pc, #68]	; (800879c <gos_queuePut+0x18c>)
 8008756:	f641 7184 	movw	r1, #8068	; 0x1f84
 800875a:	fb01 f303 	mul.w	r3, r1, r3
 800875e:	4413      	add	r3, r2
 8008760:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8008764:	3302      	adds	r3, #2
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b27      	cmp	r3, #39	; 0x27
 800876a:	d10b      	bne.n	8008784 <gos_queuePut+0x174>
                queueFullHook != NULL)
 800876c:	4b0e      	ldr	r3, [pc, #56]	; (80087a8 <gos_queuePut+0x198>)
 800876e:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8008770:	2b00      	cmp	r3, #0
 8008772:	d007      	beq.n	8008784 <gos_queuePut+0x174>
            {
                gos_mutexUnlock(&queueMutex);
 8008774:	4808      	ldr	r0, [pc, #32]	; (8008798 <gos_queuePut+0x188>)
 8008776:	f7ff fe1f 	bl	80083b8 <gos_mutexUnlock>
                queueFullHook(queueId);
 800877a:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <gos_queuePut+0x198>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	89fa      	ldrh	r2, [r7, #14]
 8008780:	4610      	mov	r0, r2
 8008782:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 8008784:	2355      	movs	r3, #85	; 0x55
 8008786:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    gos_mutexUnlock(&queueMutex);
 8008788:	4803      	ldr	r0, [pc, #12]	; (8008798 <gos_queuePut+0x188>)
 800878a:	f7ff fe15 	bl	80083b8 <gos_mutexUnlock>

    return queuePutResult;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20009bbc 	.word	0x20009bbc
 800879c:	20001da4 	.word	0x20001da4
 80087a0:	20009bb4 	.word	0x20009bb4
 80087a4:	20009bb8 	.word	0x20009bb8
 80087a8:	20009bc0 	.word	0x20009bc0

080087ac <gos_queueGet>:
 */
GOS_INLINE gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607b      	str	r3, [r7, #4]
 80087b6:	4603      	mov	r3, r0
 80087b8:	81fb      	strh	r3, [r7, #14]
 80087ba:	4613      	mov	r3, r2
 80087bc:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 80087be:	23ae      	movs	r3, #174	; 0xae
 80087c0:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4864      	ldr	r0, [pc, #400]	; (800895c <gos_queueGet+0x1b0>)
 80087ca:	f7ff fd4d 	bl	8008268 <gos_mutexLock>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b55      	cmp	r3, #85	; 0x55
 80087d2:	f040 80bb 	bne.w	800894c <gos_queueGet+0x1a0>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 80b7 	beq.w	800894c <gos_queueGet+0x1a0>
        target                                           != NULL                 &&
 80087de:	89fb      	ldrh	r3, [r7, #14]
 80087e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087e4:	f0c0 80b2 	bcc.w	800894c <gos_queueGet+0x1a0>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 80087e8:	89fb      	ldrh	r3, [r7, #14]
 80087ea:	f243 0203 	movw	r2, #12291	; 0x3003
 80087ee:	4293      	cmp	r3, r2
 80087f0:	f200 80ac 	bhi.w	800894c <gos_queueGet+0x1a0>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 80087f4:	89fb      	ldrh	r3, [r7, #14]
 80087f6:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 80087fa:	4a59      	ldr	r2, [pc, #356]	; (8008960 <gos_queueGet+0x1b4>)
 80087fc:	f641 7184 	movw	r1, #8068	; 0x1f84
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	4413      	add	r3, r2
 8008806:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8008808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800880c:	f000 809e 	beq.w	800894c <gos_queueGet+0x1a0>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 8008810:	89fb      	ldrh	r3, [r7, #14]
 8008812:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8008816:	89fa      	ldrh	r2, [r7, #14]
 8008818:	f5a2 5240 	sub.w	r2, r2, #12288	; 0x3000
 800881c:	4951      	ldr	r1, [pc, #324]	; (8008964 <gos_queueGet+0x1b8>)
 800881e:	5c8a      	ldrb	r2, [r1, r2]
 8008820:	4610      	mov	r0, r2
 8008822:	494f      	ldr	r1, [pc, #316]	; (8008960 <gos_queueGet+0x1b4>)
 8008824:	22c9      	movs	r2, #201	; 0xc9
 8008826:	fb00 f202 	mul.w	r2, r0, r2
 800882a:	f641 7084 	movw	r0, #8068	; 0x1f84
 800882e:	fb00 f303 	mul.w	r3, r0, r3
 8008832:	4413      	add	r3, r2
 8008834:	440b      	add	r3, r1
 8008836:	33e2      	adds	r3, #226	; 0xe2
 8008838:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 800883a:	7b7a      	ldrb	r2, [r7, #13]
 800883c:	429a      	cmp	r2, r3
 800883e:	f0c0 8085 	bcc.w	800894c <gos_queueGet+0x1a0>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8008842:	89fb      	ldrh	r3, [r7, #14]
 8008844:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 8008846:	7dbb      	ldrb	r3, [r7, #22]
 8008848:	4a46      	ldr	r2, [pc, #280]	; (8008964 <gos_queueGet+0x1b8>)
 800884a:	5cd2      	ldrb	r2, [r2, r3]
 800884c:	7dbb      	ldrb	r3, [r7, #22]
 800884e:	4946      	ldr	r1, [pc, #280]	; (8008968 <gos_queueGet+0x1bc>)
 8008850:	5ccb      	ldrb	r3, [r1, r3]
 8008852:	429a      	cmp	r2, r3
 8008854:	d07a      	beq.n	800894c <gos_queueGet+0x1a0>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 8008856:	7dbb      	ldrb	r3, [r7, #22]
 8008858:	7dba      	ldrb	r2, [r7, #22]
 800885a:	4942      	ldr	r1, [pc, #264]	; (8008964 <gos_queueGet+0x1b8>)
 800885c:	5c8a      	ldrb	r2, [r1, r2]
 800885e:	4611      	mov	r1, r2
 8008860:	22c9      	movs	r2, #201	; 0xc9
 8008862:	fb01 f202 	mul.w	r2, r1, r2
 8008866:	f641 7184 	movw	r1, #8068	; 0x1f84
 800886a:	fb01 f303 	mul.w	r3, r1, r3
 800886e:	4413      	add	r3, r2
 8008870:	3318      	adds	r3, #24
 8008872:	4a3b      	ldr	r2, [pc, #236]	; (8008960 <gos_queueGet+0x1b4>)
 8008874:	4413      	add	r3, r2
 8008876:	1c99      	adds	r1, r3, #2
 8008878:	7dbb      	ldrb	r3, [r7, #22]
 800887a:	7dba      	ldrb	r2, [r7, #22]
 800887c:	4839      	ldr	r0, [pc, #228]	; (8008964 <gos_queueGet+0x1b8>)
 800887e:	5c82      	ldrb	r2, [r0, r2]
 8008880:	4614      	mov	r4, r2
 8008882:	4837      	ldr	r0, [pc, #220]	; (8008960 <gos_queueGet+0x1b4>)
 8008884:	22c9      	movs	r2, #201	; 0xc9
 8008886:	fb04 f202 	mul.w	r2, r4, r2
 800888a:	f641 7484 	movw	r4, #8068	; 0x1f84
 800888e:	fb04 f303 	mul.w	r3, r4, r3
 8008892:	4413      	add	r3, r2
 8008894:	4403      	add	r3, r0
 8008896:	33e2      	adds	r3, #226	; 0xe2
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	68b8      	ldr	r0, [r7, #8]
 800889e:	f002 fb83 	bl	800afa8 <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 80088a2:	7dbb      	ldrb	r3, [r7, #22]
 80088a4:	7dba      	ldrb	r2, [r7, #22]
 80088a6:	492f      	ldr	r1, [pc, #188]	; (8008964 <gos_queueGet+0x1b8>)
 80088a8:	5c8a      	ldrb	r2, [r1, r2]
 80088aa:	4610      	mov	r0, r2
 80088ac:	492c      	ldr	r1, [pc, #176]	; (8008960 <gos_queueGet+0x1b4>)
 80088ae:	22c9      	movs	r2, #201	; 0xc9
 80088b0:	fb00 f202 	mul.w	r2, r0, r2
 80088b4:	f641 7084 	movw	r0, #8068	; 0x1f84
 80088b8:	fb00 f303 	mul.w	r3, r0, r3
 80088bc:	4413      	add	r3, r2
 80088be:	440b      	add	r3, r1
 80088c0:	33e2      	adds	r3, #226	; 0xe2
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 80088c6:	7dbb      	ldrb	r3, [r7, #22]
 80088c8:	4a26      	ldr	r2, [pc, #152]	; (8008964 <gos_queueGet+0x1b8>)
 80088ca:	5cd2      	ldrb	r2, [r2, r3]
 80088cc:	3201      	adds	r2, #1
 80088ce:	b2d1      	uxtb	r1, r2
 80088d0:	4a24      	ldr	r2, [pc, #144]	; (8008964 <gos_queueGet+0x1b8>)
 80088d2:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 80088d4:	7dba      	ldrb	r2, [r7, #22]
 80088d6:	4922      	ldr	r1, [pc, #136]	; (8008960 <gos_queueGet+0x1b4>)
 80088d8:	f641 7384 	movw	r3, #8068	; 0x1f84
 80088dc:	fb02 f303 	mul.w	r3, r2, r3
 80088e0:	440b      	add	r3, r1
 80088e2:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80088e6:	3302      	adds	r3, #2
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b2d8      	uxtb	r0, r3
 80088ee:	491c      	ldr	r1, [pc, #112]	; (8008960 <gos_queueGet+0x1b4>)
 80088f0:	f641 7384 	movw	r3, #8068	; 0x1f84
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	440b      	add	r3, r1
 80088fa:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80088fe:	3302      	adds	r3, #2
 8008900:	4602      	mov	r2, r0
 8008902:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8008904:	7dbb      	ldrb	r3, [r7, #22]
 8008906:	4a17      	ldr	r2, [pc, #92]	; (8008964 <gos_queueGet+0x1b8>)
 8008908:	5cd3      	ldrb	r3, [r2, r3]
 800890a:	2b27      	cmp	r3, #39	; 0x27
 800890c:	d903      	bls.n	8008916 <gos_queueGet+0x16a>
            {
                readCounters[queueIndex] = 0u;
 800890e:	7dbb      	ldrb	r3, [r7, #22]
 8008910:	4a14      	ldr	r2, [pc, #80]	; (8008964 <gos_queueGet+0x1b8>)
 8008912:	2100      	movs	r1, #0
 8008914:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 8008916:	7dbb      	ldrb	r3, [r7, #22]
 8008918:	4a11      	ldr	r2, [pc, #68]	; (8008960 <gos_queueGet+0x1b4>)
 800891a:	f641 7184 	movw	r1, #8068	; 0x1f84
 800891e:	fb01 f303 	mul.w	r3, r1, r3
 8008922:	4413      	add	r3, r2
 8008924:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8008928:	3302      	adds	r3, #2
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10b      	bne.n	8008948 <gos_queueGet+0x19c>
                queueEmptyHook != NULL)
 8008930:	4b0e      	ldr	r3, [pc, #56]	; (800896c <gos_queueGet+0x1c0>)
 8008932:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <gos_queueGet+0x19c>
            {
                gos_mutexUnlock(&queueMutex);
 8008938:	4808      	ldr	r0, [pc, #32]	; (800895c <gos_queueGet+0x1b0>)
 800893a:	f7ff fd3d 	bl	80083b8 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 800893e:	4b0b      	ldr	r3, [pc, #44]	; (800896c <gos_queueGet+0x1c0>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	89fa      	ldrh	r2, [r7, #14]
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 8008948:	2355      	movs	r3, #85	; 0x55
 800894a:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    gos_mutexUnlock(&queueMutex);
 800894c:	4803      	ldr	r0, [pc, #12]	; (800895c <gos_queueGet+0x1b0>)
 800894e:	f7ff fd33 	bl	80083b8 <gos_mutexUnlock>

    return queueGetResult;
 8008952:	7dfb      	ldrb	r3, [r7, #23]
}
 8008954:	4618      	mov	r0, r3
 8008956:	371c      	adds	r7, #28
 8008958:	46bd      	mov	sp, r7
 800895a:	bd90      	pop	{r4, r7, pc}
 800895c:	20009bbc 	.word	0x20009bbc
 8008960:	20001da4 	.word	0x20001da4
 8008964:	20009bb4 	.word	0x20009bb4
 8008968:	20009bb8 	.word	0x20009bb8
 800896c:	20009bc4 	.word	0x20009bc4

08008970 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 8008976:	2300      	movs	r3, #0
 8008978:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 800897a:	4826      	ldr	r0, [pc, #152]	; (8008a14 <gos_queueDump+0xa4>)
 800897c:	f001 fbfc 	bl	800a178 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8008980:	4825      	ldr	r0, [pc, #148]	; (8008a18 <gos_queueDump+0xa8>)
 8008982:	f001 fbf9 	bl	800a178 <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 8008986:	4b25      	ldr	r3, [pc, #148]	; (8008a1c <gos_queueDump+0xac>)
 8008988:	4a25      	ldr	r2, [pc, #148]	; (8008a20 <gos_queueDump+0xb0>)
 800898a:	4926      	ldr	r1, [pc, #152]	; (8008a24 <gos_queueDump+0xb4>)
 800898c:	4826      	ldr	r0, [pc, #152]	; (8008a28 <gos_queueDump+0xb8>)
 800898e:	f001 fbf3 	bl	800a178 <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8008992:	4821      	ldr	r0, [pc, #132]	; (8008a18 <gos_queueDump+0xa8>)
 8008994:	f001 fbf0 	bl	800a178 <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8008998:	2300      	movs	r3, #0
 800899a:	71fb      	strb	r3, [r7, #7]
 800899c:	e02d      	b.n	80089fa <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	4a22      	ldr	r2, [pc, #136]	; (8008a2c <gos_queueDump+0xbc>)
 80089a2:	f641 7184 	movw	r1, #8068	; 0x1f84
 80089a6:	fb01 f303 	mul.w	r3, r1, r3
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089b2:	d026      	beq.n	8008a02 <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	4a1d      	ldr	r2, [pc, #116]	; (8008a2c <gos_queueDump+0xbc>)
 80089b8:	f641 7184 	movw	r1, #8068	; 0x1f84
 80089bc:	fb01 f303 	mul.w	r3, r1, r3
 80089c0:	4413      	add	r3, r2
 80089c2:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 80089c4:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	f641 7284 	movw	r2, #8068	; 0x1f84
 80089cc:	fb02 f303 	mul.w	r3, r2, r3
 80089d0:	4a16      	ldr	r2, [pc, #88]	; (8008a2c <gos_queueDump+0xbc>)
 80089d2:	4413      	add	r3, r2
 80089d4:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	4914      	ldr	r1, [pc, #80]	; (8008a2c <gos_queueDump+0xbc>)
 80089da:	f641 7084 	movw	r0, #8068	; 0x1f84
 80089de:	fb00 f303 	mul.w	r3, r0, r3
 80089e2:	440b      	add	r3, r1
 80089e4:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80089e8:	3302      	adds	r3, #2
 80089ea:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 80089ec:	4621      	mov	r1, r4
 80089ee:	4810      	ldr	r0, [pc, #64]	; (8008a30 <gos_queueDump+0xc0>)
 80089f0:	f001 fbc2 	bl	800a178 <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	3301      	adds	r3, #1
 80089f8:	71fb      	strb	r3, [r7, #7]
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d9ce      	bls.n	800899e <gos_queueDump+0x2e>
 8008a00:	e000      	b.n	8008a04 <gos_queueDump+0x94>
            break;
 8008a02:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 8008a04:	480b      	ldr	r0, [pc, #44]	; (8008a34 <gos_queueDump+0xc4>)
 8008a06:	f001 fbb7 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd90      	pop	{r4, r7, pc}
 8008a12:	bf00      	nop
 8008a14:	0800de38 	.word	0x0800de38
 8008a18:	0800de48 	.word	0x0800de48
 8008a1c:	0800de84 	.word	0x0800de84
 8008a20:	0800de90 	.word	0x0800de90
 8008a24:	0800de98 	.word	0x0800de98
 8008a28:	0800de9c 	.word	0x0800de9c
 8008a2c:	20001da4 	.word	0x20001da4
 8008a30:	0800deb4 	.word	0x0800deb4
 8008a34:	0800ded0 	.word	0x0800ded0

08008a38 <gos_shellInit>:

/*
 * Function: gos_shellInit
 */
gos_result_t gos_shellInit (void_t)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            shellInitResult = GOS_ERROR;
 8008a3e:	23ae      	movs	r3, #174	; 0xae
 8008a40:	71fb      	strb	r3, [r7, #7]
    gos_shellCommandIndex_t index           = 0u;
 8008a42:	2300      	movs	r3, #0
 8008a44:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 8008a46:	4b15      	ldr	r3, [pc, #84]	; (8008a9c <gos_shellInit+0x64>)
 8008a48:	2236      	movs	r2, #54	; 0x36
 8008a4a:	701a      	strb	r2, [r3, #0]

    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	71bb      	strb	r3, [r7, #6]
 8008a50:	e00c      	b.n	8008a6c <gos_shellInit+0x34>
    {
        shellCommands[index].commandHandler = NULL;
 8008a52:	79ba      	ldrb	r2, [r7, #6]
 8008a54:	4912      	ldr	r1, [pc, #72]	; (8008aa0 <gos_shellInit+0x68>)
 8008a56:	4613      	mov	r3, r2
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	440b      	add	r3, r1
 8008a60:	3314      	adds	r3, #20
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8008a66:	79bb      	ldrb	r3, [r7, #6]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	71bb      	strb	r3, [r7, #6]
 8008a6c:	79bb      	ldrb	r3, [r7, #6]
 8008a6e:	2b0f      	cmp	r3, #15
 8008a70:	d9ef      	bls.n	8008a52 <gos_shellInit+0x1a>
    }

    if (gos_kernelTaskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 8008a72:	490c      	ldr	r1, [pc, #48]	; (8008aa4 <gos_shellInit+0x6c>)
 8008a74:	480c      	ldr	r0, [pc, #48]	; (8008aa8 <gos_shellInit+0x70>)
 8008a76:	f7fc fcd9 	bl	800542c <gos_kernelTaskRegister>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b55      	cmp	r3, #85	; 0x55
 8008a7e:	d107      	bne.n	8008a90 <gos_shellInit+0x58>
        gos_shellRegisterCommand(&shellCommand) == GOS_SUCCESS)
 8008a80:	480a      	ldr	r0, [pc, #40]	; (8008aac <gos_shellInit+0x74>)
 8008a82:	f000 f815 	bl	8008ab0 <gos_shellRegisterCommand>
 8008a86:	4603      	mov	r3, r0
    if (gos_kernelTaskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 8008a88:	2b55      	cmp	r3, #85	; 0x55
 8008a8a:	d101      	bne.n	8008a90 <gos_shellInit+0x58>
    {
        shellInitResult = GOS_SUCCESS;
 8008a8c:	2355      	movs	r3, #85	; 0x55
 8008a8e:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellInitResult;
 8008a90:	79fb      	ldrb	r3, [r7, #7]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20009e56 	.word	0x20009e56
 8008aa0:	20009bc8 	.word	0x20009bc8
 8008aa4:	20009d88 	.word	0x20009d88
 8008aa8:	20001444 	.word	0x20001444
 8008aac:	200014b4 	.word	0x200014b4

08008ab0 <gos_shellRegisterCommand>:

/*
 * Function: gos_shellRegisterCommand
 */
gos_result_t gos_shellRegisterCommand (gos_shellCommand_t* command)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            shellRegisterCommandResult = GOS_ERROR;
 8008ab8:	23ae      	movs	r3, #174	; 0xae
 8008aba:	73fb      	strb	r3, [r7, #15]
    gos_shellCommandIndex_t index                      = 0u;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (command->commandHandler != NULL && command->command != NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d03c      	beq.n	8008b42 <gos_shellRegisterCommand+0x92>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d039      	beq.n	8008b42 <gos_shellRegisterCommand+0x92>
    {
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73bb      	strb	r3, [r7, #14]
 8008ad2:	e033      	b.n	8008b3c <gos_shellRegisterCommand+0x8c>
        {
            if (shellCommands[index].commandHandler == NULL)
 8008ad4:	7bba      	ldrb	r2, [r7, #14]
 8008ad6:	491d      	ldr	r1, [pc, #116]	; (8008b4c <gos_shellRegisterCommand+0x9c>)
 8008ad8:	4613      	mov	r3, r2
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	440b      	add	r3, r1
 8008ae2:	3314      	adds	r3, #20
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d125      	bne.n	8008b36 <gos_shellRegisterCommand+0x86>
            {
                shellCommands[index].commandHandler = command->commandHandler;
 8008aea:	7bba      	ldrb	r2, [r7, #14]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6959      	ldr	r1, [r3, #20]
 8008af0:	4816      	ldr	r0, [pc, #88]	; (8008b4c <gos_shellRegisterCommand+0x9c>)
 8008af2:	4613      	mov	r3, r2
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	1a9b      	subs	r3, r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4403      	add	r3, r0
 8008afc:	3314      	adds	r3, #20
 8008afe:	6019      	str	r1, [r3, #0]
                shellCommands[index].commandHandlerPrivileges = command->commandHandlerPrivileges;
 8008b00:	7bba      	ldrb	r2, [r7, #14]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8b18      	ldrh	r0, [r3, #24]
 8008b06:	4911      	ldr	r1, [pc, #68]	; (8008b4c <gos_shellRegisterCommand+0x9c>)
 8008b08:	4613      	mov	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	1a9b      	subs	r3, r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	3318      	adds	r3, #24
 8008b14:	4602      	mov	r2, r0
 8008b16:	801a      	strh	r2, [r3, #0]
                (void_t) strcpy(shellCommands[index].command, command->command);
 8008b18:	7bba      	ldrb	r2, [r7, #14]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a0a      	ldr	r2, [pc, #40]	; (8008b4c <gos_shellRegisterCommand+0x9c>)
 8008b24:	4413      	add	r3, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 fa34 	bl	800af98 <strcpy>
                shellRegisterCommandResult = GOS_SUCCESS;
 8008b30:	2355      	movs	r3, #85	; 0x55
 8008b32:	73fb      	strb	r3, [r7, #15]
                break;
 8008b34:	e005      	b.n	8008b42 <gos_shellRegisterCommand+0x92>
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	73bb      	strb	r3, [r7, #14]
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	2b0f      	cmp	r3, #15
 8008b40:	d9c8      	bls.n	8008ad4 <gos_shellRegisterCommand+0x24>
            {
                // Nothing to do.
            }
        }
    }
    return shellRegisterCommandResult;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20009bc8 	.word	0x20009bc8

08008b50 <gos_shellDaemonTask>:
 *          a string.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellDaemonTask (void_t)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_shellCommandIndex_t index              = 0u;
 8008b56:	2300      	movs	r3, #0
 8008b58:	71fb      	strb	r3, [r7, #7]
    u16_t                   actualCommandIndex = 0u;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	80bb      	strh	r3, [r7, #4]
    u16_t                   paramIndex         = 0u;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	807b      	strh	r3, [r7, #2]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 8008b62:	4b70      	ldr	r3, [pc, #448]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	4b6f      	ldr	r3, [pc, #444]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008b6a:	4413      	add	r3, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 faeb 	bl	800a148 <gos_shellDriverReceiveChar>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b55      	cmp	r3, #85	; 0x55
 8008b76:	f040 80d0 	bne.w	8008d1a <gos_shellDaemonTask+0x1ca>
        {
            if (useEcho == GOS_TRUE)
 8008b7a:	4b6c      	ldr	r3, [pc, #432]	; (8008d2c <gos_shellDaemonTask+0x1dc>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b36      	cmp	r3, #54	; 0x36
 8008b80:	d107      	bne.n	8008b92 <gos_shellDaemonTask+0x42>
            {
                (void_t) gos_shellDriverTransmitString(&commandBuffer[commandBufferIndex]);
 8008b82:	4b68      	ldr	r3, [pc, #416]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008b8a:	4413      	add	r3, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 faf3 	bl	800a178 <gos_shellDriverTransmitString>
            }

            /*
             * Backspace character check
             */
            if (commandBuffer[commandBufferIndex] == '\177')
 8008b92:	4b64      	ldr	r3, [pc, #400]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	4b63      	ldr	r3, [pc, #396]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008b9a:	5c9b      	ldrb	r3, [r3, r2]
 8008b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8008b9e:	d10c      	bne.n	8008bba <gos_shellDaemonTask+0x6a>
            {
                commandBuffer[commandBufferIndex] = '\0';
 8008ba0:	4b60      	ldr	r3, [pc, #384]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4b60      	ldr	r3, [pc, #384]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008ba8:	2100      	movs	r1, #0
 8008baa:	5499      	strb	r1, [r3, r2]
                commandBufferIndex--;
 8008bac:	4b5d      	ldr	r3, [pc, #372]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	4b5b      	ldr	r3, [pc, #364]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	e0af      	b.n	8008d1a <gos_shellDaemonTask+0x1ca>
            }
            /*
             * Enter character check
             */
            else if (commandBuffer[commandBufferIndex] == '\r')
 8008bba:	4b5a      	ldr	r3, [pc, #360]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008bc2:	5c9b      	ldrb	r3, [r3, r2]
 8008bc4:	2b0d      	cmp	r3, #13
 8008bc6:	f040 8096 	bne.w	8008cf6 <gos_shellDaemonTask+0x1a6>
            {
                if (useEcho == GOS_TRUE)
 8008bca:	4b58      	ldr	r3, [pc, #352]	; (8008d2c <gos_shellDaemonTask+0x1dc>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b36      	cmp	r3, #54	; 0x36
 8008bd0:	d102      	bne.n	8008bd8 <gos_shellDaemonTask+0x88>
                {
                    (void_t) gos_shellDriverTransmitString("\n");
 8008bd2:	4857      	ldr	r0, [pc, #348]	; (8008d30 <gos_shellDaemonTask+0x1e0>)
 8008bd4:	f001 fad0 	bl	800a178 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                commandBuffer[commandBufferIndex] = '\0';
 8008bd8:	4b52      	ldr	r3, [pc, #328]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4b52      	ldr	r3, [pc, #328]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008be0:	2100      	movs	r1, #0
 8008be2:	5499      	strb	r1, [r3, r2]
                actualCommandIndex = 0u;
 8008be4:	2300      	movs	r3, #0
 8008be6:	80bb      	strh	r3, [r7, #4]
                paramIndex = 0u;
 8008be8:	2300      	movs	r3, #0
 8008bea:	807b      	strh	r3, [r7, #2]

                // Get command.
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 8008bec:	e008      	b.n	8008c00 <gos_shellDaemonTask+0xb0>
                {
                    actualCommand[actualCommandIndex] = commandBuffer[actualCommandIndex];
 8008bee:	88ba      	ldrh	r2, [r7, #4]
 8008bf0:	88bb      	ldrh	r3, [r7, #4]
 8008bf2:	494d      	ldr	r1, [pc, #308]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008bf4:	5c89      	ldrb	r1, [r1, r2]
 8008bf6:	4a4f      	ldr	r2, [pc, #316]	; (8008d34 <gos_shellDaemonTask+0x1e4>)
 8008bf8:	54d1      	strb	r1, [r2, r3]
                    actualCommandIndex++;
 8008bfa:	88bb      	ldrh	r3, [r7, #4]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	80bb      	strh	r3, [r7, #4]
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 8008c00:	88bb      	ldrh	r3, [r7, #4]
 8008c02:	4a49      	ldr	r2, [pc, #292]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008c04:	5cd3      	ldrb	r3, [r2, r3]
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	d004      	beq.n	8008c14 <gos_shellDaemonTask+0xc4>
 8008c0a:	88bb      	ldrh	r3, [r7, #4]
 8008c0c:	4a46      	ldr	r2, [pc, #280]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008c0e:	5cd3      	ldrb	r3, [r2, r3]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ec      	bne.n	8008bee <gos_shellDaemonTask+0x9e>
                }
                actualCommand[actualCommandIndex] = '\0';
 8008c14:	88bb      	ldrh	r3, [r7, #4]
 8008c16:	4a47      	ldr	r2, [pc, #284]	; (8008d34 <gos_shellDaemonTask+0x1e4>)
 8008c18:	2100      	movs	r1, #0
 8008c1a:	54d1      	strb	r1, [r2, r3]
                actualCommandIndex++;
 8008c1c:	88bb      	ldrh	r3, [r7, #4]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	80bb      	strh	r3, [r7, #4]

                // Get parameters.
                while (commandBuffer[actualCommandIndex] != '\0')
 8008c22:	e00b      	b.n	8008c3c <gos_shellDaemonTask+0xec>
                {
                    commandParams[paramIndex++] = commandBuffer[actualCommandIndex++];
 8008c24:	88bb      	ldrh	r3, [r7, #4]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	80ba      	strh	r2, [r7, #4]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	887b      	ldrh	r3, [r7, #2]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	807a      	strh	r2, [r7, #2]
 8008c32:	461a      	mov	r2, r3
 8008c34:	4b3c      	ldr	r3, [pc, #240]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008c36:	5c59      	ldrb	r1, [r3, r1]
 8008c38:	4b3f      	ldr	r3, [pc, #252]	; (8008d38 <gos_shellDaemonTask+0x1e8>)
 8008c3a:	5499      	strb	r1, [r3, r2]
                while (commandBuffer[actualCommandIndex] != '\0')
 8008c3c:	88bb      	ldrh	r3, [r7, #4]
 8008c3e:	4a3a      	ldr	r2, [pc, #232]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008c40:	5cd3      	ldrb	r3, [r2, r3]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1ee      	bne.n	8008c24 <gos_shellDaemonTask+0xd4>
                }
                commandParams[paramIndex] = '\0';
 8008c46:	887b      	ldrh	r3, [r7, #2]
 8008c48:	4a3b      	ldr	r2, [pc, #236]	; (8008d38 <gos_shellDaemonTask+0x1e8>)
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	54d1      	strb	r1, [r2, r3]

                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8008c4e:	2300      	movs	r3, #0
 8008c50:	71fb      	strb	r3, [r7, #7]
 8008c52:	e03c      	b.n	8008cce <gos_shellDaemonTask+0x17e>
                {
                    if (strcmp(shellCommands[index].command, actualCommand) == 0)
 8008c54:	79fa      	ldrb	r2, [r7, #7]
 8008c56:	4613      	mov	r3, r2
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	1a9b      	subs	r3, r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a37      	ldr	r2, [pc, #220]	; (8008d3c <gos_shellDaemonTask+0x1ec>)
 8008c60:	4413      	add	r3, r2
 8008c62:	4934      	ldr	r1, [pc, #208]	; (8008d34 <gos_shellDaemonTask+0x1e4>)
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7f7 fad3 	bl	8000210 <strcmp>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d12b      	bne.n	8008cc8 <gos_shellDaemonTask+0x178>
                    {
                        if (shellCommands[index].commandHandler != NULL)
 8008c70:	79fa      	ldrb	r2, [r7, #7]
 8008c72:	4932      	ldr	r1, [pc, #200]	; (8008d3c <gos_shellDaemonTask+0x1ec>)
 8008c74:	4613      	mov	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	1a9b      	subs	r3, r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3314      	adds	r3, #20
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d027      	beq.n	8008cd6 <gos_shellDaemonTask+0x186>
                        {
                            (void_t) gos_kernelTaskSetPrivileges(shellDaemonTaskId, shellCommands[index].commandHandlerPrivileges);
 8008c86:	4b2e      	ldr	r3, [pc, #184]	; (8008d40 <gos_shellDaemonTask+0x1f0>)
 8008c88:	8818      	ldrh	r0, [r3, #0]
 8008c8a:	79fa      	ldrb	r2, [r7, #7]
 8008c8c:	492b      	ldr	r1, [pc, #172]	; (8008d3c <gos_shellDaemonTask+0x1ec>)
 8008c8e:	4613      	mov	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	3318      	adds	r3, #24
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	f7fd fc51 	bl	8006544 <gos_kernelTaskSetPrivileges>
                            shellCommands[index].commandHandler(commandParams);
 8008ca2:	79fa      	ldrb	r2, [r7, #7]
 8008ca4:	4925      	ldr	r1, [pc, #148]	; (8008d3c <gos_shellDaemonTask+0x1ec>)
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	3314      	adds	r3, #20
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4820      	ldr	r0, [pc, #128]	; (8008d38 <gos_shellDaemonTask+0x1e8>)
 8008cb6:	4798      	blx	r3
                            (void_t) gos_kernelTaskSetPrivileges(shellDaemonTaskId, GOS_TASK_PRIVILEGE_KERNEL);
 8008cb8:	4b21      	ldr	r3, [pc, #132]	; (8008d40 <gos_shellDaemonTask+0x1f0>)
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd fc3f 	bl	8006544 <gos_kernelTaskSetPrivileges>
                        }
                        else
                        {
                            // Nothing to do.
                        }
                        break;
 8008cc6:	e006      	b.n	8008cd6 <gos_shellDaemonTask+0x186>
                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	71fb      	strb	r3, [r7, #7]
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	2b0f      	cmp	r3, #15
 8008cd2:	d9bf      	bls.n	8008c54 <gos_shellDaemonTask+0x104>
 8008cd4:	e000      	b.n	8008cd8 <gos_shellDaemonTask+0x188>
                        break;
 8008cd6:	bf00      	nop
                        // Nothing to do.
                    }
                }

                // If command not found.
                if (index == CFG_SHELL_MAX_COMMAND_NUMBER)
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	2b10      	cmp	r3, #16
 8008cdc:	d102      	bne.n	8008ce4 <gos_shellDaemonTask+0x194>
                {
                    (void_t) gos_shellDriverTransmitString("Unrecognized command!\r\n");
 8008cde:	4819      	ldr	r0, [pc, #100]	; (8008d44 <gos_shellDaemonTask+0x1f4>)
 8008ce0:	f001 fa4a 	bl	800a178 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 8008ce4:	22c8      	movs	r2, #200	; 0xc8
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	480f      	ldr	r0, [pc, #60]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008cea:	f002 f8d7 	bl	800ae9c <memset>
                commandBufferIndex = 0u;
 8008cee:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	e011      	b.n	8008d1a <gos_shellDaemonTask+0x1ca>
            }
            else
            {
                commandBufferIndex++;
 8008cf6:	4b0b      	ldr	r3, [pc, #44]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008d00:	801a      	strh	r2, [r3, #0]

                if (commandBufferIndex >= CFG_SHELL_COMMAND_BUFFER_SIZE)
 8008d02:	4b08      	ldr	r3, [pc, #32]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	2bc7      	cmp	r3, #199	; 0xc7
 8008d08:	d907      	bls.n	8008d1a <gos_shellDaemonTask+0x1ca>
                {
                    (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 8008d0a:	22c8      	movs	r2, #200	; 0xc8
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4806      	ldr	r0, [pc, #24]	; (8008d28 <gos_shellDaemonTask+0x1d8>)
 8008d10:	f002 f8c4 	bl	800ae9c <memset>
                    commandBufferIndex = 0u;
 8008d14:	4b03      	ldr	r3, [pc, #12]	; (8008d24 <gos_shellDaemonTask+0x1d4>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	801a      	strh	r2, [r3, #0]
                {
                    // Nothing to do.
                }
            }
        }
        (void_t) gos_kernelTaskSleep(GOS_SHELL_DAEMON_POLL_TIME_MS);
 8008d1a:	2032      	movs	r0, #50	; 0x32
 8008d1c:	f7fc fd12 	bl	8005744 <gos_kernelTaskSleep>
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 8008d20:	e71f      	b.n	8008b62 <gos_shellDaemonTask+0x12>
 8008d22:	bf00      	nop
 8008d24:	20009e54 	.word	0x20009e54
 8008d28:	20009d8c 	.word	0x20009d8c
 8008d2c:	20009e56 	.word	0x20009e56
 8008d30:	0800df10 	.word	0x0800df10
 8008d34:	20009e58 	.word	0x20009e58
 8008d38:	20009e6c 	.word	0x20009e6c
 8008d3c:	20009bc8 	.word	0x20009bc8
 8008d40:	20009d88 	.word	0x20009d88
 8008d44:	0800df14 	.word	0x0800df14

08008d48 <gos_shellCommandHandler>:
 * @details Handles the built-in shell command.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellCommandHandler (char_t* params)
{
 8008d48:	b590      	push	{r4, r7, lr}
 8008d4a:	b089      	sub	sp, #36	; 0x24
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t                    index        = 0u;
 8008d50:	2300      	movs	r3, #0
 8008d52:	75fb      	strb	r3, [r7, #23]
    gos_shellCommandIndex_t commandIndex = 0u;
 8008d54:	2300      	movs	r3, #0
 8008d56:	75bb      	strb	r3, [r7, #22]
    gos_tid_t               taskId       = GOS_INVALID_TASK_ID;
 8008d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d5c:	82bb      	strh	r3, [r7, #20]
    gos_runtime_t           totalRunTime = {0};
 8008d5e:	f107 030c 	add.w	r3, r7, #12
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	605a      	str	r2, [r3, #4]

    /*
     * Function code.
     */
    if (strcmp(params, "dump") == 0)
 8008d68:	499e      	ldr	r1, [pc, #632]	; (8008fe4 <gos_shellCommandHandler+0x29c>)
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7f7 fa50 	bl	8000210 <strcmp>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <gos_shellCommandHandler+0x34>
    {
        gos_Dump();
 8008d76:	f7fe ff21 	bl	8007bbc <gos_Dump>
        else
        {
            // Nothing to do.
        }
    }
}
 8008d7a:	e1d1      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
    else if (strcmp(params, "reset") == 0)
 8008d7c:	499a      	ldr	r1, [pc, #616]	; (8008fe8 <gos_shellCommandHandler+0x2a0>)
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7f7 fa46 	bl	8000210 <strcmp>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d102      	bne.n	8008d90 <gos_shellCommandHandler+0x48>
        gos_kernelReset();
 8008d8a:	f7fd fd83 	bl	8006894 <gos_kernelReset>
}
 8008d8e:	e1c7      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
    else if (strcmp(params, "help") == 0)
 8008d90:	4996      	ldr	r1, [pc, #600]	; (8008fec <gos_shellCommandHandler+0x2a4>)
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7f7 fa3c 	bl	8000210 <strcmp>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d137      	bne.n	8008e0e <gos_shellCommandHandler+0xc6>
        (void_t) gos_shellDriverTransmitString("List of registered shell commands: \r\n");
 8008d9e:	4894      	ldr	r0, [pc, #592]	; (8008ff0 <gos_shellCommandHandler+0x2a8>)
 8008da0:	f001 f9ea 	bl	800a178 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 8008da4:	2300      	movs	r3, #0
 8008da6:	75bb      	strb	r3, [r7, #22]
 8008da8:	e02a      	b.n	8008e00 <gos_shellCommandHandler+0xb8>
            if (strcmp(shellCommands[commandIndex].command, "") == 0)
 8008daa:	7dba      	ldrb	r2, [r7, #22]
 8008dac:	4613      	mov	r3, r2
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4a8f      	ldr	r2, [pc, #572]	; (8008ff4 <gos_shellCommandHandler+0x2ac>)
 8008db6:	4413      	add	r3, r2
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 81af 	beq.w	800911e <gos_shellCommandHandler+0x3d6>
            else if (strcmp(shellCommands[commandIndex].command, "shell") == 0)
 8008dc0:	7dba      	ldrb	r2, [r7, #22]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	1a9b      	subs	r3, r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4a8a      	ldr	r2, [pc, #552]	; (8008ff4 <gos_shellCommandHandler+0x2ac>)
 8008dcc:	4413      	add	r3, r2
 8008dce:	498a      	ldr	r1, [pc, #552]	; (8008ff8 <gos_shellCommandHandler+0x2b0>)
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f7 fa1d 	bl	8000210 <strcmp>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d103      	bne.n	8008de4 <gos_shellCommandHandler+0x9c>
                (void_t) gos_shellDriverTransmitString("\t"
 8008ddc:	4887      	ldr	r0, [pc, #540]	; (8008ffc <gos_shellCommandHandler+0x2b4>)
 8008dde:	f001 f9cb 	bl	800a178 <gos_shellDriverTransmitString>
 8008de2:	e00a      	b.n	8008dfa <gos_shellCommandHandler+0xb2>
                (void_t) gos_shellDriverTransmitString("\t- %s\r\n", shellCommands[commandIndex].command);
 8008de4:	7dba      	ldrb	r2, [r7, #22]
 8008de6:	4613      	mov	r3, r2
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4a81      	ldr	r2, [pc, #516]	; (8008ff4 <gos_shellCommandHandler+0x2ac>)
 8008df0:	4413      	add	r3, r2
 8008df2:	4619      	mov	r1, r3
 8008df4:	4882      	ldr	r0, [pc, #520]	; (8009000 <gos_shellCommandHandler+0x2b8>)
 8008df6:	f001 f9bf 	bl	800a178 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 8008dfa:	7dbb      	ldrb	r3, [r7, #22]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	75bb      	strb	r3, [r7, #22]
 8008e00:	7dbb      	ldrb	r3, [r7, #22]
 8008e02:	2b0f      	cmp	r3, #15
 8008e04:	d9d1      	bls.n	8008daa <gos_shellCommandHandler+0x62>
}
 8008e06:	e18b      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
            index++;
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	75fb      	strb	r3, [r7, #23]
        while (params[index] != ' ' && params[index])
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	d005      	beq.n	8008e26 <gos_shellCommandHandler+0xde>
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4413      	add	r3, r2
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f0      	bne.n	8008e08 <gos_shellCommandHandler+0xc0>
        params[index] = '\0';
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
        if (strcmp(params, "delete_tid") == 0)
 8008e30:	4974      	ldr	r1, [pc, #464]	; (8009004 <gos_shellCommandHandler+0x2bc>)
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7f7 f9ec 	bl	8000210 <strcmp>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d120      	bne.n	8008e80 <gos_shellCommandHandler+0x138>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	3301      	adds	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	2210      	movs	r2, #16
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f001 fa80 	bl	800a354 <strtol>
 8008e54:	4603      	mov	r3, r0
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	82bb      	strh	r3, [r7, #20]
            if (gos_kernelTaskDelete(taskId) == GOS_SUCCESS)
 8008e5a:	8abb      	ldrh	r3, [r7, #20]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fd f83d 	bl	8005edc <gos_kernelTaskDelete>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b55      	cmp	r3, #85	; 0x55
 8008e66:	d105      	bne.n	8008e74 <gos_shellCommandHandler+0x12c>
                (void_t) gos_shellDriverTransmitString("0x%X task has been deleted.\r\n", taskId);
 8008e68:	8abb      	ldrh	r3, [r7, #20]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4866      	ldr	r0, [pc, #408]	; (8009008 <gos_shellCommandHandler+0x2c0>)
 8008e6e:	f001 f983 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008e72:	e155      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be deleted.\r\n", taskId);
 8008e74:	8abb      	ldrh	r3, [r7, #20]
 8008e76:	4619      	mov	r1, r3
 8008e78:	4864      	ldr	r0, [pc, #400]	; (800900c <gos_shellCommandHandler+0x2c4>)
 8008e7a:	f001 f97d 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008e7e:	e14f      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "delete") == 0)
 8008e80:	4963      	ldr	r1, [pc, #396]	; (8009010 <gos_shellCommandHandler+0x2c8>)
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7f7 f9c4 	bl	8000210 <strcmp>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d129      	bne.n	8008ee2 <gos_shellCommandHandler+0x19a>
            if (gos_kernelTaskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	3301      	adds	r3, #1
 8008e92:	75fb      	strb	r3, [r7, #23]
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f107 0214 	add.w	r2, r7, #20
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fd fbdd 	bl	8006660 <gos_kernelTaskGetId>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b55      	cmp	r3, #85	; 0x55
 8008eaa:	d116      	bne.n	8008eda <gos_shellCommandHandler+0x192>
                if (gos_kernelTaskDelete(taskId) == GOS_SUCCESS)
 8008eac:	8abb      	ldrh	r3, [r7, #20]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fd f814 	bl	8005edc <gos_kernelTaskDelete>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b55      	cmp	r3, #85	; 0x55
 8008eb8:	d107      	bne.n	8008eca <gos_shellCommandHandler+0x182>
                    (void_t) gos_shellDriverTransmitString("%s has been deleted.\r\n", &params[index]);
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4854      	ldr	r0, [pc, #336]	; (8009014 <gos_shellCommandHandler+0x2cc>)
 8008ec4:	f001 f958 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008ec8:	e12a      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                    (void_t) gos_shellDriverTransmitString("%s could not be deleted.\r\n", &params[index]);
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	4413      	add	r3, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4851      	ldr	r0, [pc, #324]	; (8009018 <gos_shellCommandHandler+0x2d0>)
 8008ed4:	f001 f950 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008ed8:	e122      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 8008eda:	4850      	ldr	r0, [pc, #320]	; (800901c <gos_shellCommandHandler+0x2d4>)
 8008edc:	f001 f94c 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008ee0:	e11e      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "suspend_tid") == 0)
 8008ee2:	494f      	ldr	r1, [pc, #316]	; (8009020 <gos_shellCommandHandler+0x2d8>)
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7f7 f993 	bl	8000210 <strcmp>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d120      	bne.n	8008f32 <gos_shellCommandHandler+0x1ea>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	4413      	add	r3, r2
 8008efc:	2210      	movs	r2, #16
 8008efe:	2100      	movs	r1, #0
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fa27 	bl	800a354 <strtol>
 8008f06:	4603      	mov	r3, r0
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	82bb      	strh	r3, [r7, #20]
            if (gos_kernelTaskSuspend(taskId) == GOS_SUCCESS)
 8008f0c:	8abb      	ldrh	r3, [r7, #20]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fc fd0e 	bl	8005930 <gos_kernelTaskSuspend>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b55      	cmp	r3, #85	; 0x55
 8008f18:	d105      	bne.n	8008f26 <gos_shellCommandHandler+0x1de>
                (void_t) gos_shellDriverTransmitString("0x%X task has been suspended.\r\n", taskId);
 8008f1a:	8abb      	ldrh	r3, [r7, #20]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4841      	ldr	r0, [pc, #260]	; (8009024 <gos_shellCommandHandler+0x2dc>)
 8008f20:	f001 f92a 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008f24:	e0fc      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be suspended.\r\n", taskId);
 8008f26:	8abb      	ldrh	r3, [r7, #20]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	483f      	ldr	r0, [pc, #252]	; (8009028 <gos_shellCommandHandler+0x2e0>)
 8008f2c:	f001 f924 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008f30:	e0f6      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "suspend") == 0)
 8008f32:	493e      	ldr	r1, [pc, #248]	; (800902c <gos_shellCommandHandler+0x2e4>)
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7f7 f96b 	bl	8000210 <strcmp>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d129      	bne.n	8008f94 <gos_shellCommandHandler+0x24c>
            if (gos_kernelTaskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	3301      	adds	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f107 0214 	add.w	r2, r7, #20
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fd fb84 	bl	8006660 <gos_kernelTaskGetId>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b55      	cmp	r3, #85	; 0x55
 8008f5c:	d116      	bne.n	8008f8c <gos_shellCommandHandler+0x244>
                if (gos_kernelTaskSuspend(taskId) == GOS_SUCCESS)
 8008f5e:	8abb      	ldrh	r3, [r7, #20]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fc fce5 	bl	8005930 <gos_kernelTaskSuspend>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b55      	cmp	r3, #85	; 0x55
 8008f6a:	d107      	bne.n	8008f7c <gos_shellCommandHandler+0x234>
                    (void_t) gos_shellDriverTransmitString("%s has been suspended.\r\n", &params[index]);
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	4413      	add	r3, r2
 8008f72:	4619      	mov	r1, r3
 8008f74:	482e      	ldr	r0, [pc, #184]	; (8009030 <gos_shellCommandHandler+0x2e8>)
 8008f76:	f001 f8ff 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008f7a:	e0d1      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                    (void_t) gos_shellDriverTransmitString("%s could not be suspended.\r\n", &params[index]);
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	4619      	mov	r1, r3
 8008f84:	482b      	ldr	r0, [pc, #172]	; (8009034 <gos_shellCommandHandler+0x2ec>)
 8008f86:	f001 f8f7 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008f8a:	e0c9      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 8008f8c:	4823      	ldr	r0, [pc, #140]	; (800901c <gos_shellCommandHandler+0x2d4>)
 8008f8e:	f001 f8f3 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008f92:	e0c5      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "resume_tid") == 0)
 8008f94:	4928      	ldr	r1, [pc, #160]	; (8009038 <gos_shellCommandHandler+0x2f0>)
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7f7 f93a 	bl	8000210 <strcmp>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d150      	bne.n	8009044 <gos_shellCommandHandler+0x2fc>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	4413      	add	r3, r2
 8008fae:	2210      	movs	r2, #16
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f9ce 	bl	800a354 <strtol>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	82bb      	strh	r3, [r7, #20]
            if (gos_kernelTaskResume(taskId) == GOS_SUCCESS)
 8008fbe:	8abb      	ldrh	r3, [r7, #20]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fc fd8f 	bl	8005ae4 <gos_kernelTaskResume>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b55      	cmp	r3, #85	; 0x55
 8008fca:	d105      	bne.n	8008fd8 <gos_shellCommandHandler+0x290>
                (void_t) gos_shellDriverTransmitString("0x%X task has been resumed.\r\n", taskId);
 8008fcc:	8abb      	ldrh	r3, [r7, #20]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	481a      	ldr	r0, [pc, #104]	; (800903c <gos_shellCommandHandler+0x2f4>)
 8008fd2:	f001 f8d1 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008fd6:	e0a3      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be resumed.\r\n", taskId);
 8008fd8:	8abb      	ldrh	r3, [r7, #20]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4818      	ldr	r0, [pc, #96]	; (8009040 <gos_shellCommandHandler+0x2f8>)
 8008fde:	f001 f8cb 	bl	800a178 <gos_shellDriverTransmitString>
}
 8008fe2:	e09d      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
 8008fe4:	0800df2c 	.word	0x0800df2c
 8008fe8:	0800df34 	.word	0x0800df34
 8008fec:	0800df3c 	.word	0x0800df3c
 8008ff0:	0800df44 	.word	0x0800df44
 8008ff4:	20009bc8 	.word	0x20009bc8
 8008ff8:	0800df6c 	.word	0x0800df6c
 8008ffc:	0800df74 	.word	0x0800df74
 8009000:	0800e000 	.word	0x0800e000
 8009004:	0800e008 	.word	0x0800e008
 8009008:	0800e014 	.word	0x0800e014
 800900c:	0800e034 	.word	0x0800e034
 8009010:	0800e058 	.word	0x0800e058
 8009014:	0800e060 	.word	0x0800e060
 8009018:	0800e078 	.word	0x0800e078
 800901c:	0800e094 	.word	0x0800e094
 8009020:	0800e0b0 	.word	0x0800e0b0
 8009024:	0800e0bc 	.word	0x0800e0bc
 8009028:	0800e0dc 	.word	0x0800e0dc
 800902c:	0800e100 	.word	0x0800e100
 8009030:	0800e108 	.word	0x0800e108
 8009034:	0800e124 	.word	0x0800e124
 8009038:	0800e144 	.word	0x0800e144
 800903c:	0800e150 	.word	0x0800e150
 8009040:	0800e170 	.word	0x0800e170
        else if (strcmp(params, "resume") == 0)
 8009044:	4938      	ldr	r1, [pc, #224]	; (8009128 <gos_shellCommandHandler+0x3e0>)
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7f7 f8e2 	bl	8000210 <strcmp>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d129      	bne.n	80090a6 <gos_shellCommandHandler+0x35e>
            if (gos_kernelTaskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	3301      	adds	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	f107 0214 	add.w	r2, r7, #20
 8009062:	4611      	mov	r1, r2
 8009064:	4618      	mov	r0, r3
 8009066:	f7fd fafb 	bl	8006660 <gos_kernelTaskGetId>
 800906a:	4603      	mov	r3, r0
 800906c:	2b55      	cmp	r3, #85	; 0x55
 800906e:	d116      	bne.n	800909e <gos_shellCommandHandler+0x356>
                if (gos_kernelTaskResume(taskId) == GOS_SUCCESS)
 8009070:	8abb      	ldrh	r3, [r7, #20]
 8009072:	4618      	mov	r0, r3
 8009074:	f7fc fd36 	bl	8005ae4 <gos_kernelTaskResume>
 8009078:	4603      	mov	r3, r0
 800907a:	2b55      	cmp	r3, #85	; 0x55
 800907c:	d107      	bne.n	800908e <gos_shellCommandHandler+0x346>
                    (void_t) gos_shellDriverTransmitString("%s has been resumed.\r\n", &params[index]);
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4413      	add	r3, r2
 8009084:	4619      	mov	r1, r3
 8009086:	4829      	ldr	r0, [pc, #164]	; (800912c <gos_shellCommandHandler+0x3e4>)
 8009088:	f001 f876 	bl	800a178 <gos_shellDriverTransmitString>
}
 800908c:	e048      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                    (void_t) gos_shellDriverTransmitString("%s could not be resumed.\r\n", &params[index]);
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4413      	add	r3, r2
 8009094:	4619      	mov	r1, r3
 8009096:	4826      	ldr	r0, [pc, #152]	; (8009130 <gos_shellCommandHandler+0x3e8>)
 8009098:	f001 f86e 	bl	800a178 <gos_shellDriverTransmitString>
}
 800909c:	e040      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800909e:	4825      	ldr	r0, [pc, #148]	; (8009134 <gos_shellCommandHandler+0x3ec>)
 80090a0:	f001 f86a 	bl	800a178 <gos_shellDriverTransmitString>
}
 80090a4:	e03c      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "cpu") == 0)
 80090a6:	4924      	ldr	r1, [pc, #144]	; (8009138 <gos_shellCommandHandler+0x3f0>)
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7f7 f8b1 	bl	8000210 <strcmp>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11b      	bne.n	80090ec <gos_shellCommandHandler+0x3a4>
            (void_t) gos_shellDriverTransmitString("CPU usage: %u.%02u%%\r\n", (gos_kernelGetCpuUsage() / 100), (gos_kernelGetCpuUsage() % 100));
 80090b4:	f7fd fbde 	bl	8006874 <gos_kernelGetCpuUsage>
 80090b8:	4603      	mov	r3, r0
 80090ba:	461a      	mov	r2, r3
 80090bc:	4b1f      	ldr	r3, [pc, #124]	; (800913c <gos_shellCommandHandler+0x3f4>)
 80090be:	fba3 2302 	umull	r2, r3, r3, r2
 80090c2:	095b      	lsrs	r3, r3, #5
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	461c      	mov	r4, r3
 80090c8:	f7fd fbd4 	bl	8006874 <gos_kernelGetCpuUsage>
 80090cc:	4603      	mov	r3, r0
 80090ce:	4a1b      	ldr	r2, [pc, #108]	; (800913c <gos_shellCommandHandler+0x3f4>)
 80090d0:	fba2 1203 	umull	r1, r2, r2, r3
 80090d4:	0952      	lsrs	r2, r2, #5
 80090d6:	2164      	movs	r1, #100	; 0x64
 80090d8:	fb01 f202 	mul.w	r2, r1, r2
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	b29b      	uxth	r3, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	4621      	mov	r1, r4
 80090e4:	4816      	ldr	r0, [pc, #88]	; (8009140 <gos_shellCommandHandler+0x3f8>)
 80090e6:	f001 f847 	bl	800a178 <gos_shellDriverTransmitString>
}
 80090ea:	e019      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "runtime") == 0)
 80090ec:	4915      	ldr	r1, [pc, #84]	; (8009144 <gos_shellCommandHandler+0x3fc>)
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7f7 f88e 	bl	8000210 <strcmp>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d112      	bne.n	8009120 <gos_shellCommandHandler+0x3d8>
            (void_t) gos_runTimeGet(&totalRunTime);
 80090fa:	f107 030c 	add.w	r3, r7, #12
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f9ca 	bl	8009498 <gos_runTimeGet>
                    totalRunTime.days,
 8009104:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) gos_shellDriverTransmitString(
 8009106:	4619      	mov	r1, r3
                    totalRunTime.hours,
 8009108:	7cbb      	ldrb	r3, [r7, #18]
            (void_t) gos_shellDriverTransmitString(
 800910a:	461a      	mov	r2, r3
                    totalRunTime.minutes,
 800910c:	7c7b      	ldrb	r3, [r7, #17]
            (void_t) gos_shellDriverTransmitString(
 800910e:	4618      	mov	r0, r3
                    totalRunTime.seconds
 8009110:	7c3b      	ldrb	r3, [r7, #16]
            (void_t) gos_shellDriverTransmitString(
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	4603      	mov	r3, r0
 8009116:	480c      	ldr	r0, [pc, #48]	; (8009148 <gos_shellCommandHandler+0x400>)
 8009118:	f001 f82e 	bl	800a178 <gos_shellDriverTransmitString>
}
 800911c:	e000      	b.n	8009120 <gos_shellCommandHandler+0x3d8>
                break;
 800911e:	bf00      	nop
}
 8009120:	bf00      	nop
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	bd90      	pop	{r4, r7, pc}
 8009128:	0800e194 	.word	0x0800e194
 800912c:	0800e19c 	.word	0x0800e19c
 8009130:	0800e1b4 	.word	0x0800e1b4
 8009134:	0800e094 	.word	0x0800e094
 8009138:	0800e1d0 	.word	0x0800e1d0
 800913c:	51eb851f 	.word	0x51eb851f
 8009140:	0800e1d4 	.word	0x0800e1d4
 8009144:	0800e1ec 	.word	0x0800e1ec
 8009148:	0800e1f4 	.word	0x0800e1f4

0800914c <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_SUCCESS;
 8009152:	2355      	movs	r3, #85	; 0x55
 8009154:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 8009156:	2300      	movs	r3, #0
 8009158:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800915a:	2300      	movs	r3, #0
 800915c:	71bb      	strb	r3, [r7, #6]
 800915e:	e00a      	b.n	8009176 <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 8009160:	79bb      	ldrb	r3, [r7, #6]
 8009162:	4a13      	ldr	r2, [pc, #76]	; (80091b0 <gos_signalInit+0x64>)
 8009164:	212c      	movs	r1, #44	; 0x2c
 8009166:	fb01 f303 	mul.w	r3, r1, r3
 800916a:	4413      	add	r3, r2
 800916c:	2249      	movs	r2, #73	; 0x49
 800916e:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8009170:	79bb      	ldrb	r3, [r7, #6]
 8009172:	3301      	adds	r3, #1
 8009174:	71bb      	strb	r3, [r7, #6]
 8009176:	79bb      	ldrb	r3, [r7, #6]
 8009178:	2b05      	cmp	r3, #5
 800917a:	d9f1      	bls.n	8009160 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_kernelTaskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 800917c:	2100      	movs	r1, #0
 800917e:	480d      	ldr	r0, [pc, #52]	; (80091b4 <gos_signalInit+0x68>)
 8009180:	f7fc f954 	bl	800542c <gos_kernelTaskRegister>
 8009184:	4603      	mov	r3, r0
 8009186:	2b55      	cmp	r3, #85	; 0x55
 8009188:	d10b      	bne.n	80091a2 <gos_signalInit+0x56>
        gos_signalCreate(&kernelTaskDeleteSignal)                 != GOS_SUCCESS ||
 800918a:	480b      	ldr	r0, [pc, #44]	; (80091b8 <gos_signalInit+0x6c>)
 800918c:	f000 f818 	bl	80091c0 <gos_signalCreate>
 8009190:	4603      	mov	r3, r0
    if (gos_kernelTaskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 8009192:	2b55      	cmp	r3, #85	; 0x55
 8009194:	d105      	bne.n	80091a2 <gos_signalInit+0x56>
        gos_signalCreate(&kernelDumpReadySignal)                  != GOS_SUCCESS
 8009196:	4809      	ldr	r0, [pc, #36]	; (80091bc <gos_signalInit+0x70>)
 8009198:	f000 f812 	bl	80091c0 <gos_signalCreate>
 800919c:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)                 != GOS_SUCCESS ||
 800919e:	2b55      	cmp	r3, #85	; 0x55
 80091a0:	d001      	beq.n	80091a6 <gos_signalInit+0x5a>
    )
    {
        signalInitResult = GOS_ERROR;
 80091a2:	23ae      	movs	r3, #174	; 0xae
 80091a4:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 80091a6:	79fb      	ldrb	r3, [r7, #7]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20009eec 	.word	0x20009eec
 80091b4:	200014d0 	.word	0x200014d0
 80091b8:	20001a79 	.word	0x20001a79
 80091bc:	20001a78 	.word	0x20001a78

080091c0 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 80091c8:	23ae      	movs	r3, #174	; 0xae
 80091ca:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80091d0:	2300      	movs	r3, #0
 80091d2:	73bb      	strb	r3, [r7, #14]
 80091d4:	e025      	b.n	8009222 <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	4a17      	ldr	r2, [pc, #92]	; (8009238 <gos_signalCreate+0x78>)
 80091da:	212c      	movs	r1, #44	; 0x2c
 80091dc:	fb01 f303 	mul.w	r3, r1, r3
 80091e0:	4413      	add	r3, r2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b49      	cmp	r3, #73	; 0x49
 80091e6:	d119      	bne.n	800921c <gos_signalCreate+0x5c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d016      	beq.n	800921c <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	7bba      	ldrb	r2, [r7, #14]
 80091f2:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	4a10      	ldr	r2, [pc, #64]	; (8009238 <gos_signalCreate+0x78>)
 80091f8:	212c      	movs	r1, #44	; 0x2c
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	4413      	add	r3, r2
 8009200:	2236      	movs	r2, #54	; 0x36
 8009202:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	4a0c      	ldr	r2, [pc, #48]	; (8009238 <gos_signalCreate+0x78>)
 8009208:	212c      	movs	r1, #44	; 0x2c
 800920a:	fb01 f303 	mul.w	r3, r1, r3
 800920e:	4413      	add	r3, r2
 8009210:	3328      	adds	r3, #40	; 0x28
 8009212:	2249      	movs	r2, #73	; 0x49
 8009214:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 8009216:	2355      	movs	r3, #85	; 0x55
 8009218:	73fb      	strb	r3, [r7, #15]
            break;
 800921a:	e005      	b.n	8009228 <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	3301      	adds	r3, #1
 8009220:	73bb      	strb	r3, [r7, #14]
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	2b05      	cmp	r3, #5
 8009226:	d9d6      	bls.n	80091d6 <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	20009eec 	.word	0x20009eec

0800923c <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b0a2      	sub	sp, #136	; 0x88
 8009240:	af02      	add	r7, sp, #8
 8009242:	4603      	mov	r3, r0
 8009244:	460a      	mov	r2, r1
 8009246:	71fb      	strb	r3, [r7, #7]
 8009248:	4613      	mov	r3, r2
 800924a:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 800924c:	23ae      	movs	r3, #174	; 0xae
 800924e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 8009252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009256:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    gos_taskDescriptor_t callerTaskDesc     = {0};
 800925a:	f107 030c 	add.w	r3, r7, #12
 800925e:	226e      	movs	r2, #110	; 0x6e
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f001 fe1a 	bl	800ae9c <memset>

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b05      	cmp	r3, #5
 800926c:	d846      	bhi.n	80092fc <gos_signalInvoke+0xc0>
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	4a25      	ldr	r2, [pc, #148]	; (8009308 <gos_signalInvoke+0xcc>)
 8009272:	212c      	movs	r1, #44	; 0x2c
 8009274:	fb01 f303 	mul.w	r3, r1, r3
 8009278:	4413      	add	r3, r2
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b36      	cmp	r3, #54	; 0x36
 800927e:	d13d      	bne.n	80092fc <gos_signalInvoke+0xc0>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 8009280:	f7fd ffb4 	bl	80071ec <gos_kernelIsCallerIsr>
 8009284:	4603      	mov	r3, r0
 8009286:	2b36      	cmp	r3, #54	; 0x36
 8009288:	d017      	beq.n	80092ba <gos_signalInvoke+0x7e>
            (gos_kernelTaskGetCurrentId(&callerTaskId)               == GOS_SUCCESS &&
 800928a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800928e:	4618      	mov	r0, r3
 8009290:	f7fd fa1e 	bl	80066d0 <gos_kernelTaskGetCurrentId>
 8009294:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 8009296:	2b55      	cmp	r3, #85	; 0x55
 8009298:	d125      	bne.n	80092e6 <gos_signalInvoke+0xaa>
            gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)     == GOS_SUCCESS &&
 800929a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800929e:	f107 020c 	add.w	r2, r7, #12
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fd fa47 	bl	8006738 <gos_kernelTaskGetData>
 80092aa:	4603      	mov	r3, r0
            (gos_kernelTaskGetCurrentId(&callerTaskId)               == GOS_SUCCESS &&
 80092ac:	2b55      	cmp	r3, #85	; 0x55
 80092ae:	d11a      	bne.n	80092e6 <gos_signalInvoke+0xaa>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 80092b0:	8abb      	ldrh	r3, [r7, #20]
 80092b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)     == GOS_SUCCESS &&
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d015      	beq.n	80092e6 <gos_signalInvoke+0xaa>
            )
        {
            signalArray[signalId].senderId       = senderId;
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	4a12      	ldr	r2, [pc, #72]	; (8009308 <gos_signalInvoke+0xcc>)
 80092be:	212c      	movs	r1, #44	; 0x2c
 80092c0:	fb01 f303 	mul.w	r3, r1, r3
 80092c4:	4413      	add	r3, r2
 80092c6:	332a      	adds	r3, #42	; 0x2a
 80092c8:	88ba      	ldrh	r2, [r7, #4]
 80092ca:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	4a0e      	ldr	r2, [pc, #56]	; (8009308 <gos_signalInvoke+0xcc>)
 80092d0:	212c      	movs	r1, #44	; 0x2c
 80092d2:	fb01 f303 	mul.w	r3, r1, r3
 80092d6:	4413      	add	r3, r2
 80092d8:	3328      	adds	r3, #40	; 0x28
 80092da:	2236      	movs	r2, #54	; 0x36
 80092dc:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 80092de:	2355      	movs	r3, #85	; 0x55
 80092e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80092e4:	e00a      	b.n	80092fc <gos_signalInvoke+0xc0>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 80092e6:	f107 030c 	add.w	r3, r7, #12
 80092ea:	330a      	adds	r3, #10
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	4b07      	ldr	r3, [pc, #28]	; (800930c <gos_signalInvoke+0xd0>)
 80092f0:	f240 120f 	movw	r2, #271	; 0x10f
 80092f4:	4906      	ldr	r1, [pc, #24]	; (8009310 <gos_signalInvoke+0xd4>)
 80092f6:	202e      	movs	r0, #46	; 0x2e
 80092f8:	f7fe fd5e 	bl	8007db8 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 80092fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009300:	4618      	mov	r0, r3
 8009302:	3780      	adds	r7, #128	; 0x80
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20009eec 	.word	0x20009eec
 800930c:	0800e230 	.word	0x0800e230
 8009310:	0800e438 	.word	0x0800e438

08009314 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 8009314:	b590      	push	{r4, r7, lr}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 800931a:	2300      	movs	r3, #0
 800931c:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 800931e:	2300      	movs	r3, #0
 8009320:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    for (;;)
    {
        for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8009322:	2300      	movs	r3, #0
 8009324:	71bb      	strb	r3, [r7, #6]
 8009326:	e05b      	b.n	80093e0 <gos_signalDaemonTask+0xcc>
        {
            if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 8009328:	79bb      	ldrb	r3, [r7, #6]
 800932a:	4a31      	ldr	r2, [pc, #196]	; (80093f0 <gos_signalDaemonTask+0xdc>)
 800932c:	212c      	movs	r1, #44	; 0x2c
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	4413      	add	r3, r2
 8009334:	3328      	adds	r3, #40	; 0x28
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b36      	cmp	r3, #54	; 0x36
 800933a:	d14e      	bne.n	80093da <gos_signalDaemonTask+0xc6>
            {
                for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800933c:	2300      	movs	r3, #0
 800933e:	71fb      	strb	r3, [r7, #7]
 8009340:	e03d      	b.n	80093be <gos_signalDaemonTask+0xaa>
                {
                    if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 8009342:	79ba      	ldrb	r2, [r7, #6]
 8009344:	79f9      	ldrb	r1, [r7, #7]
 8009346:	482a      	ldr	r0, [pc, #168]	; (80093f0 <gos_signalDaemonTask+0xdc>)
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	4413      	add	r3, r2
 8009352:	440b      	add	r3, r1
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4403      	add	r3, r0
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d033      	beq.n	80093c6 <gos_signalDaemonTask+0xb2>
                        break;
                    }
                    else
                    {
                        // Switch to signal handler privilege.
                        (void_t) gos_kernelTaskSetPrivileges(
 800935e:	4b25      	ldr	r3, [pc, #148]	; (80093f4 <gos_signalDaemonTask+0xe0>)
 8009360:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8009362:	79ba      	ldrb	r2, [r7, #6]
 8009364:	79fb      	ldrb	r3, [r7, #7]
 8009366:	4922      	ldr	r1, [pc, #136]	; (80093f0 <gos_signalDaemonTask+0xdc>)
 8009368:	2416      	movs	r4, #22
 800936a:	fb04 f202 	mul.w	r2, r4, r2
 800936e:	4413      	add	r3, r2
 8009370:	330c      	adds	r3, #12
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	440b      	add	r3, r1
 8009376:	889b      	ldrh	r3, [r3, #4]
 8009378:	4619      	mov	r1, r3
 800937a:	f7fd f8e3 	bl	8006544 <gos_kernelTaskSetPrivileges>
                                signalDaemonTaskDescriptor.taskId,
                                signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                );
                        // Call signal handler.
                        signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 800937e:	79ba      	ldrb	r2, [r7, #6]
 8009380:	79f9      	ldrb	r1, [r7, #7]
 8009382:	481b      	ldr	r0, [pc, #108]	; (80093f0 <gos_signalDaemonTask+0xdc>)
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	4413      	add	r3, r2
 800938e:	440b      	add	r3, r1
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4403      	add	r3, r0
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	79ba      	ldrb	r2, [r7, #6]
 8009398:	4915      	ldr	r1, [pc, #84]	; (80093f0 <gos_signalDaemonTask+0xdc>)
 800939a:	202c      	movs	r0, #44	; 0x2c
 800939c:	fb00 f202 	mul.w	r2, r0, r2
 80093a0:	440a      	add	r2, r1
 80093a2:	322a      	adds	r2, #42	; 0x2a
 80093a4:	8812      	ldrh	r2, [r2, #0]
 80093a6:	4610      	mov	r0, r2
 80093a8:	4798      	blx	r3

                        // Switch back to kernel privilege.
                        (void_t) gos_kernelTaskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 80093aa:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <gos_signalDaemonTask+0xe0>)
 80093ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ae:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fd f8c6 	bl	8006544 <gos_kernelTaskSetPrivileges>
                for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	3301      	adds	r3, #1
 80093bc:	71fb      	strb	r3, [r7, #7]
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	2b05      	cmp	r3, #5
 80093c2:	d9be      	bls.n	8009342 <gos_signalDaemonTask+0x2e>
 80093c4:	e000      	b.n	80093c8 <gos_signalDaemonTask+0xb4>
                        break;
 80093c6:	bf00      	nop
                    }
                }
                signalArray[signalIndex].invokeRequired = GOS_FALSE;
 80093c8:	79bb      	ldrb	r3, [r7, #6]
 80093ca:	4a09      	ldr	r2, [pc, #36]	; (80093f0 <gos_signalDaemonTask+0xdc>)
 80093cc:	212c      	movs	r1, #44	; 0x2c
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	3328      	adds	r3, #40	; 0x28
 80093d6:	2249      	movs	r2, #73	; 0x49
 80093d8:	701a      	strb	r2, [r3, #0]
        for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80093da:	79bb      	ldrb	r3, [r7, #6]
 80093dc:	3301      	adds	r3, #1
 80093de:	71bb      	strb	r3, [r7, #6]
 80093e0:	79bb      	ldrb	r3, [r7, #6]
 80093e2:	2b05      	cmp	r3, #5
 80093e4:	d9a0      	bls.n	8009328 <gos_signalDaemonTask+0x14>
            {
                // Nothing to do.
            }
        }

        (void_t) gos_kernelTaskSleep(GOS_SIGNAL_DAEMON_POLL_TIME_MS);
 80093e6:	2032      	movs	r0, #50	; 0x32
 80093e8:	f7fc f9ac 	bl	8005744 <gos_kernelTaskSleep>
        for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80093ec:	e799      	b.n	8009322 <gos_signalDaemonTask+0xe>
 80093ee:	bf00      	nop
 80093f0:	20009eec 	.word	0x20009eec
 80093f4:	200014d0 	.word	0x200014d0

080093f8 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_SUCCESS;
 80093fe:	2355      	movs	r3, #85	; 0x55
 8009400:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                                != GOS_SUCCESS ||
 8009402:	480a      	ldr	r0, [pc, #40]	; (800942c <gos_timeInit+0x34>)
 8009404:	f7ff fedc 	bl	80091c0 <gos_signalCreate>
 8009408:	4603      	mov	r3, r0
 800940a:	2b55      	cmp	r3, #85	; 0x55
 800940c:	d106      	bne.n	800941c <gos_timeInit+0x24>
        gos_kernelTaskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) != GOS_SUCCESS
 800940e:	4908      	ldr	r1, [pc, #32]	; (8009430 <gos_timeInit+0x38>)
 8009410:	4808      	ldr	r0, [pc, #32]	; (8009434 <gos_timeInit+0x3c>)
 8009412:	f7fc f80b 	bl	800542c <gos_kernelTaskRegister>
 8009416:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                                != GOS_SUCCESS ||
 8009418:	2b55      	cmp	r3, #85	; 0x55
 800941a:	d001      	beq.n	8009420 <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_ERROR;
 800941c:	23ae      	movs	r3, #174	; 0xae
 800941e:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 8009420:	79fb      	ldrb	r3, [r7, #7]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20009ffe 	.word	0x20009ffe
 8009430:	20009ffc 	.word	0x20009ffc
 8009434:	20001548 	.word	0x20001548

08009438 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 8009440:	23ae      	movs	r3, #174	; 0xae
 8009442:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d01c      	beq.n	8009484 <gos_timeGet+0x4c>
    {
        pTime->seconds  = systemTime.seconds;
 800944a:	4b12      	ldr	r3, [pc, #72]	; (8009494 <gos_timeGet+0x5c>)
 800944c:	781a      	ldrb	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	701a      	strb	r2, [r3, #0]
        pTime->minutes  = systemTime.minutes;
 8009452:	4b10      	ldr	r3, [pc, #64]	; (8009494 <gos_timeGet+0x5c>)
 8009454:	785a      	ldrb	r2, [r3, #1]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	705a      	strb	r2, [r3, #1]
        pTime->hours    = systemTime.hours;
 800945a:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <gos_timeGet+0x5c>)
 800945c:	789a      	ldrb	r2, [r3, #2]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	709a      	strb	r2, [r3, #2]
        pTime->days     = systemTime.days;
 8009462:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <gos_timeGet+0x5c>)
 8009464:	78da      	ldrb	r2, [r3, #3]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	70da      	strb	r2, [r3, #3]
        pTime->months   = systemTime.months;
 800946a:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <gos_timeGet+0x5c>)
 800946c:	791a      	ldrb	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	711a      	strb	r2, [r3, #4]
        pTime->years    = systemTime.years;
 8009472:	4b08      	ldr	r3, [pc, #32]	; (8009494 <gos_timeGet+0x5c>)
 8009474:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009478:	b29a      	uxth	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8a3 2005 	strh.w	r2, [r3, #5]

        timeGetResult = GOS_SUCCESS;
 8009480:	2355      	movs	r3, #85	; 0x55
 8009482:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 8009484:	7bfb      	ldrb	r3, [r7, #15]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20001540 	.word	0x20001540

08009498 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 80094a0:	23ae      	movs	r3, #174	; 0xae
 80094a2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <gos_runTimeGet+0x36>
    {
        pRunTime->seconds = systemRunTime.seconds;
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <gos_runTimeGet+0x44>)
 80094ac:	791a      	ldrb	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	711a      	strb	r2, [r3, #4]
        pRunTime->minutes = systemRunTime.minutes;
 80094b2:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <gos_runTimeGet+0x44>)
 80094b4:	795a      	ldrb	r2, [r3, #5]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	715a      	strb	r2, [r3, #5]
        pRunTime->hours   = systemRunTime.hours;
 80094ba:	4b08      	ldr	r3, [pc, #32]	; (80094dc <gos_runTimeGet+0x44>)
 80094bc:	799a      	ldrb	r2, [r3, #6]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	719a      	strb	r2, [r3, #6]
        pRunTime->days    = systemRunTime.days;
 80094c2:	4b06      	ldr	r3, [pc, #24]	; (80094dc <gos_runTimeGet+0x44>)
 80094c4:	79da      	ldrb	r2, [r3, #7]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	71da      	strb	r2, [r3, #7]

        runtimeGetResult = GOS_SUCCESS;
 80094ca:	2355      	movs	r3, #85	; 0x55
 80094cc:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20009ff4 	.word	0x20009ff4

080094e0 <gos_timeAddSeconds>:

/*
 * Function: gos_timeAddSeconds
 */
gos_result_t gos_timeAddSeconds (gos_time_t* pTime, u16_t seconds)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddSecondsResult = GOS_ERROR;
 80094ec:	23ae      	movs	r3, #174	; 0xae
 80094ee:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 80b3 	beq.w	800965e <gos_timeAddSeconds+0x17e>
    {
        // 1. Raw increment.
        pTime->seconds += seconds;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	781a      	ldrb	r2, [r3, #0]
 80094fc:	887b      	ldrh	r3, [r7, #2]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	4413      	add	r3, r2
 8009502:	b2da      	uxtb	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	701a      	strb	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->seconds >= 60u)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b3b      	cmp	r3, #59	; 0x3b
 800950e:	f240 80a4 	bls.w	800965a <gos_timeAddSeconds+0x17a>
        {
            pTime->minutes += pTime->seconds / 60;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	785a      	ldrb	r2, [r3, #1]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	4954      	ldr	r1, [pc, #336]	; (800966c <gos_timeAddSeconds+0x18c>)
 800951c:	fba1 1303 	umull	r1, r3, r1, r3
 8009520:	095b      	lsrs	r3, r3, #5
 8009522:	b2db      	uxtb	r3, r3
 8009524:	4413      	add	r3, r2
 8009526:	b2da      	uxtb	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	705a      	strb	r2, [r3, #1]
            pTime->seconds %= 60u;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	4b4e      	ldr	r3, [pc, #312]	; (800966c <gos_timeAddSeconds+0x18c>)
 8009532:	fba3 1302 	umull	r1, r3, r3, r2
 8009536:	0959      	lsrs	r1, r3, #5
 8009538:	460b      	mov	r3, r1
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	1a5b      	subs	r3, r3, r1
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	b2da      	uxtb	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	701a      	strb	r2, [r3, #0]

            if (pTime->minutes >= 60u)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	785b      	ldrb	r3, [r3, #1]
 800954c:	2b3b      	cmp	r3, #59	; 0x3b
 800954e:	f240 8084 	bls.w	800965a <gos_timeAddSeconds+0x17a>
            {
                pTime->hours += pTime->minutes / 60;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	789a      	ldrb	r2, [r3, #2]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	4944      	ldr	r1, [pc, #272]	; (800966c <gos_timeAddSeconds+0x18c>)
 800955c:	fba1 1303 	umull	r1, r3, r1, r3
 8009560:	095b      	lsrs	r3, r3, #5
 8009562:	b2db      	uxtb	r3, r3
 8009564:	4413      	add	r3, r2
 8009566:	b2da      	uxtb	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	709a      	strb	r2, [r3, #2]
                pTime->minutes %= 60u;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	785a      	ldrb	r2, [r3, #1]
 8009570:	4b3e      	ldr	r3, [pc, #248]	; (800966c <gos_timeAddSeconds+0x18c>)
 8009572:	fba3 1302 	umull	r1, r3, r3, r2
 8009576:	0959      	lsrs	r1, r3, #5
 8009578:	460b      	mov	r3, r1
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	1a5b      	subs	r3, r3, r1
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	b2da      	uxtb	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	705a      	strb	r2, [r3, #1]

                if (pTime->hours >= 24u)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	789b      	ldrb	r3, [r3, #2]
 800958c:	2b17      	cmp	r3, #23
 800958e:	d964      	bls.n	800965a <gos_timeAddSeconds+0x17a>
                {
                    pTime->days += pTime->hours / 24u;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	78da      	ldrb	r2, [r3, #3]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	789b      	ldrb	r3, [r3, #2]
 8009598:	4935      	ldr	r1, [pc, #212]	; (8009670 <gos_timeAddSeconds+0x190>)
 800959a:	fba1 1303 	umull	r1, r3, r1, r3
 800959e:	091b      	lsrs	r3, r3, #4
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	4413      	add	r3, r2
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	70da      	strb	r2, [r3, #3]
                    pTime->hours %= 24u;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	789a      	ldrb	r2, [r3, #2]
 80095ae:	4b30      	ldr	r3, [pc, #192]	; (8009670 <gos_timeAddSeconds+0x190>)
 80095b0:	fba3 1302 	umull	r1, r3, r3, r2
 80095b4:	0919      	lsrs	r1, r3, #4
 80095b6:	460b      	mov	r3, r1
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	440b      	add	r3, r1
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	709a      	strb	r2, [r3, #2]

                    // Check days.
                    if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d111      	bne.n	80095fc <gos_timeAddSeconds+0x11c>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	791b      	ldrb	r3, [r3, #4]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d10d      	bne.n	80095fc <gos_timeAddSeconds+0x11c>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	78db      	ldrb	r3, [r3, #3]
 80095e4:	2b1d      	cmp	r3, #29
 80095e6:	d909      	bls.n	80095fc <gos_timeAddSeconds+0x11c>
                    {
                        pTime->days = 1u;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	70da      	strb	r2, [r3, #3]
                        pTime->months++;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	791b      	ldrb	r3, [r3, #4]
 80095f2:	3301      	adds	r3, #1
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	711a      	strb	r2, [r3, #4]
 80095fa:	e01e      	b.n	800963a <gos_timeAddSeconds+0x15a>
                    }
                    else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009602:	b29b      	uxth	r3, r3
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	b29b      	uxth	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <gos_timeAddSeconds+0x136>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	791b      	ldrb	r3, [r3, #4]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d011      	beq.n	800963a <gos_timeAddSeconds+0x15a>
                    {
                        // Wait.
                    }
                    else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	791b      	ldrb	r3, [r3, #4]
 800961a:	3b01      	subs	r3, #1
 800961c:	4a15      	ldr	r2, [pc, #84]	; (8009674 <gos_timeAddSeconds+0x194>)
 800961e:	5cd2      	ldrb	r2, [r2, r3]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	78db      	ldrb	r3, [r3, #3]
 8009624:	429a      	cmp	r2, r3
 8009626:	d208      	bcs.n	800963a <gos_timeAddSeconds+0x15a>
                    {
                        pTime->days = 1u;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	70da      	strb	r2, [r3, #3]
                        pTime->months++;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	791b      	ldrb	r3, [r3, #4]
 8009632:	3301      	adds	r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	711a      	strb	r2, [r3, #4]
                    {
                        // Nothing to do.
                    }

                    // Check months.
                    if (pTime->months == 13)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	791b      	ldrb	r3, [r3, #4]
 800963e:	2b0d      	cmp	r3, #13
 8009640:	d10b      	bne.n	800965a <gos_timeAddSeconds+0x17a>
                    {
                        pTime->months = 1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	711a      	strb	r2, [r3, #4]
                        pTime->years++;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800964e:	b29b      	uxth	r3, r3
 8009650:	3301      	adds	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8a3 2005 	strh.w	r2, [r3, #5]
        else
        {
            // Nothing to do.
        }

        timeAddSecondsResult = GOS_SUCCESS;
 800965a:	2355      	movs	r3, #85	; 0x55
 800965c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddSecondsResult;
 800965e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	88888889 	.word	0x88888889
 8009670:	aaaaaaab 	.word	0xaaaaaaab
 8009674:	0800e44c 	.word	0x0800e44c

08009678 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 8009678:	b480      	push	{r7}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 8009686:	23ae      	movs	r3, #174	; 0xae
 8009688:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d060      	beq.n	8009752 <gos_runTimeAddMicroseconds+0xda>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29a      	uxth	r2, r3
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	4413      	add	r3, r2
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096aa:	d352      	bcc.n	8009752 <gos_runTimeAddMicroseconds+0xda>
        {
            pRunTime1->microseconds -= 1000u;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	885b      	ldrh	r3, [r3, #2]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3301      	adds	r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	885b      	ldrh	r3, [r3, #2]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096d4:	d33d      	bcc.n	8009752 <gos_runTimeAddMicroseconds+0xda>
            {
                pRunTime1->milliseconds -= 1000u;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	885b      	ldrh	r3, [r3, #2]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	791b      	ldrb	r3, [r3, #4]
 80096ea:	3301      	adds	r3, #1
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	791b      	ldrb	r3, [r3, #4]
 80096f6:	2b3b      	cmp	r3, #59	; 0x3b
 80096f8:	d92b      	bls.n	8009752 <gos_runTimeAddMicroseconds+0xda>
                {
                    pRunTime1->seconds -= 60u;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	791b      	ldrb	r3, [r3, #4]
 80096fe:	3b3c      	subs	r3, #60	; 0x3c
 8009700:	b2da      	uxtb	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	795b      	ldrb	r3, [r3, #5]
 800970a:	3301      	adds	r3, #1
 800970c:	b2da      	uxtb	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	795b      	ldrb	r3, [r3, #5]
 8009716:	2b3b      	cmp	r3, #59	; 0x3b
 8009718:	d91b      	bls.n	8009752 <gos_runTimeAddMicroseconds+0xda>
                    {
                        pRunTime1->minutes -= 60u;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	795b      	ldrb	r3, [r3, #5]
 800971e:	3b3c      	subs	r3, #60	; 0x3c
 8009720:	b2da      	uxtb	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	799b      	ldrb	r3, [r3, #6]
 800972a:	3301      	adds	r3, #1
 800972c:	b2da      	uxtb	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	799b      	ldrb	r3, [r3, #6]
 8009736:	2b17      	cmp	r3, #23
 8009738:	d90b      	bls.n	8009752 <gos_runTimeAddMicroseconds+0xda>
                        {
                            pRunTime1->hours -= 24u;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	799b      	ldrb	r3, [r3, #6]
 800973e:	3b18      	subs	r3, #24
 8009740:	b2da      	uxtb	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	79db      	ldrb	r3, [r3, #7]
 800974a:	3301      	adds	r3, #1
 800974c:	b2da      	uxtb	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	71da      	strb	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d060      	beq.n	800981a <gos_runTimeAddMicroseconds+0x1a2>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	b29a      	uxth	r2, r3
 800975e:	88fb      	ldrh	r3, [r7, #6]
 8009760:	4413      	add	r3, r2
 8009762:	b29a      	uxth	r2, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29b      	uxth	r3, r3
 800976e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009772:	d352      	bcc.n	800981a <gos_runTimeAddMicroseconds+0x1a2>
        {
            pRunTime2->microseconds -= 1000u;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	b29b      	uxth	r3, r3
 800977a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800977e:	b29a      	uxth	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	885b      	ldrh	r3, [r3, #2]
 8009788:	b29b      	uxth	r3, r3
 800978a:	3301      	adds	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	885b      	ldrh	r3, [r3, #2]
 8009796:	b29b      	uxth	r3, r3
 8009798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800979c:	d33d      	bcc.n	800981a <gos_runTimeAddMicroseconds+0x1a2>
            {
                pRunTime2->milliseconds -= 1000u;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	885b      	ldrh	r3, [r3, #2]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	791b      	ldrb	r3, [r3, #4]
 80097b2:	3301      	adds	r3, #1
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	791b      	ldrb	r3, [r3, #4]
 80097be:	2b3b      	cmp	r3, #59	; 0x3b
 80097c0:	d92b      	bls.n	800981a <gos_runTimeAddMicroseconds+0x1a2>
                {
                    pRunTime2->seconds -= 60u;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	791b      	ldrb	r3, [r3, #4]
 80097c6:	3b3c      	subs	r3, #60	; 0x3c
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	795b      	ldrb	r3, [r3, #5]
 80097d2:	3301      	adds	r3, #1
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	795b      	ldrb	r3, [r3, #5]
 80097de:	2b3b      	cmp	r3, #59	; 0x3b
 80097e0:	d91b      	bls.n	800981a <gos_runTimeAddMicroseconds+0x1a2>
                    {
                        pRunTime2->minutes -= 60u;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	795b      	ldrb	r3, [r3, #5]
 80097e6:	3b3c      	subs	r3, #60	; 0x3c
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	799b      	ldrb	r3, [r3, #6]
 80097f2:	3301      	adds	r3, #1
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	799b      	ldrb	r3, [r3, #6]
 80097fe:	2b17      	cmp	r3, #23
 8009800:	d90b      	bls.n	800981a <gos_runTimeAddMicroseconds+0x1a2>
                        {
                            pRunTime2->hours -= 24u;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	799b      	ldrb	r3, [r3, #6]
 8009806:	3b18      	subs	r3, #24
 8009808:	b2da      	uxtb	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	79db      	ldrb	r3, [r3, #7]
 8009812:	3301      	adds	r3, #1
 8009814:	b2da      	uxtb	r2, r3
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	71da      	strb	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 800981a:	2355      	movs	r3, #85	; 0x55
 800981c:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	371c      	adds	r7, #28
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 8009838:	23ae      	movs	r3, #174	; 0xae
 800983a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 808b 	beq.w	800995a <gos_runTimeAddMilliseconds+0x12e>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	885b      	ldrh	r3, [r3, #2]
 8009848:	b29a      	uxth	r2, r3
 800984a:	887b      	ldrh	r3, [r7, #2]
 800984c:	4413      	add	r3, r2
 800984e:	b29a      	uxth	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	885b      	ldrh	r3, [r3, #2]
 8009858:	b29b      	uxth	r3, r3
 800985a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800985e:	d37a      	bcc.n	8009956 <gos_runTimeAddMilliseconds+0x12a>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	791a      	ldrb	r2, [r3, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	885b      	ldrh	r3, [r3, #2]
 8009868:	b29b      	uxth	r3, r3
 800986a:	493f      	ldr	r1, [pc, #252]	; (8009968 <gos_runTimeAddMilliseconds+0x13c>)
 800986c:	fba1 1303 	umull	r1, r3, r1, r3
 8009870:	099b      	lsrs	r3, r3, #6
 8009872:	b29b      	uxth	r3, r3
 8009874:	b2db      	uxtb	r3, r3
 8009876:	4413      	add	r3, r2
 8009878:	b2da      	uxtb	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	b29b      	uxth	r3, r3
 8009884:	4a38      	ldr	r2, [pc, #224]	; (8009968 <gos_runTimeAddMilliseconds+0x13c>)
 8009886:	fba2 1203 	umull	r1, r2, r2, r3
 800988a:	0992      	lsrs	r2, r2, #6
 800988c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009890:	fb01 f202 	mul.w	r2, r1, r2
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	b29a      	uxth	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	791b      	ldrb	r3, [r3, #4]
 80098a0:	2b3b      	cmp	r3, #59	; 0x3b
 80098a2:	d958      	bls.n	8009956 <gos_runTimeAddMilliseconds+0x12a>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	795a      	ldrb	r2, [r3, #5]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	791b      	ldrb	r3, [r3, #4]
 80098ac:	492f      	ldr	r1, [pc, #188]	; (800996c <gos_runTimeAddMilliseconds+0x140>)
 80098ae:	fba1 1303 	umull	r1, r3, r1, r3
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	4413      	add	r3, r2
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	791a      	ldrb	r2, [r3, #4]
 80098c2:	4b2a      	ldr	r3, [pc, #168]	; (800996c <gos_runTimeAddMilliseconds+0x140>)
 80098c4:	fba3 1302 	umull	r1, r3, r3, r2
 80098c8:	0959      	lsrs	r1, r3, #5
 80098ca:	460b      	mov	r3, r1
 80098cc:	011b      	lsls	r3, r3, #4
 80098ce:	1a5b      	subs	r3, r3, r1
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	795b      	ldrb	r3, [r3, #5]
 80098de:	2b3b      	cmp	r3, #59	; 0x3b
 80098e0:	d939      	bls.n	8009956 <gos_runTimeAddMilliseconds+0x12a>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	799a      	ldrb	r2, [r3, #6]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	795b      	ldrb	r3, [r3, #5]
 80098ea:	4920      	ldr	r1, [pc, #128]	; (800996c <gos_runTimeAddMilliseconds+0x140>)
 80098ec:	fba1 1303 	umull	r1, r3, r1, r3
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	4413      	add	r3, r2
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	795a      	ldrb	r2, [r3, #5]
 8009900:	4b1a      	ldr	r3, [pc, #104]	; (800996c <gos_runTimeAddMilliseconds+0x140>)
 8009902:	fba3 1302 	umull	r1, r3, r3, r2
 8009906:	0959      	lsrs	r1, r3, #5
 8009908:	460b      	mov	r3, r1
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	1a5b      	subs	r3, r3, r1
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	b2da      	uxtb	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	799b      	ldrb	r3, [r3, #6]
 800991c:	2b17      	cmp	r3, #23
 800991e:	d91a      	bls.n	8009956 <gos_runTimeAddMilliseconds+0x12a>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	79da      	ldrb	r2, [r3, #7]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	799b      	ldrb	r3, [r3, #6]
 8009928:	4911      	ldr	r1, [pc, #68]	; (8009970 <gos_runTimeAddMilliseconds+0x144>)
 800992a:	fba1 1303 	umull	r1, r3, r1, r3
 800992e:	091b      	lsrs	r3, r3, #4
 8009930:	b2db      	uxtb	r3, r3
 8009932:	4413      	add	r3, r2
 8009934:	b2da      	uxtb	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	71da      	strb	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	799a      	ldrb	r2, [r3, #6]
 800993e:	4b0c      	ldr	r3, [pc, #48]	; (8009970 <gos_runTimeAddMilliseconds+0x144>)
 8009940:	fba3 1302 	umull	r1, r3, r3, r2
 8009944:	0919      	lsrs	r1, r3, #4
 8009946:	460b      	mov	r3, r1
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	440b      	add	r3, r1
 800994c:	00db      	lsls	r3, r3, #3
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	b2da      	uxtb	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 8009956:	2355      	movs	r3, #85	; 0x55
 8009958:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 800995a:	7bfb      	ldrb	r3, [r7, #15]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	10624dd3 	.word	0x10624dd3
 800996c:	88888889 	.word	0x88888889
 8009970:	aaaaaaab 	.word	0xaaaaaaab

08009974 <gos_runTimeAddSeconds>:

/*
 * Function: gos_runTimeAddSeconds
 */
gos_result_t gos_runTimeAddSeconds (gos_runtime_t* pRunTime, u32_t seconds)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddSecondsResult = GOS_ERROR;
 800997e:	23ae      	movs	r3, #174	; 0xae
 8009980:	73fb      	strb	r3, [r7, #15]
    u32_t        secondCounter           = 0u;
 8009982:	2300      	movs	r3, #0
 8009984:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d035      	beq.n	80099f8 <gos_runTimeAddSeconds+0x84>
    {
        while (secondCounter++ < seconds)
 800998c:	e02c      	b.n	80099e8 <gos_runTimeAddSeconds+0x74>
        {
            pRunTime->seconds++;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	791b      	ldrb	r3, [r3, #4]
 8009992:	3301      	adds	r3, #1
 8009994:	b2da      	uxtb	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	711a      	strb	r2, [r3, #4]
            if (pRunTime->seconds >= 60)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	791b      	ldrb	r3, [r3, #4]
 800999e:	2b3b      	cmp	r3, #59	; 0x3b
 80099a0:	d922      	bls.n	80099e8 <gos_runTimeAddSeconds+0x74>
            {
                pRunTime->seconds = 0U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	711a      	strb	r2, [r3, #4]
                pRunTime->minutes++;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	795b      	ldrb	r3, [r3, #5]
 80099ac:	3301      	adds	r3, #1
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	715a      	strb	r2, [r3, #5]

                // Check minutes.
                if (pRunTime->minutes >= 60)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	795b      	ldrb	r3, [r3, #5]
 80099b8:	2b3b      	cmp	r3, #59	; 0x3b
 80099ba:	d915      	bls.n	80099e8 <gos_runTimeAddSeconds+0x74>
                {
                    pRunTime->minutes = 0U;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	715a      	strb	r2, [r3, #5]
                    pRunTime->hours++;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	799b      	ldrb	r3, [r3, #6]
 80099c6:	3301      	adds	r3, #1
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	719a      	strb	r2, [r3, #6]

                    // Check hours.
                    if (pRunTime->hours >= 24)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	799b      	ldrb	r3, [r3, #6]
 80099d2:	2b17      	cmp	r3, #23
 80099d4:	d908      	bls.n	80099e8 <gos_runTimeAddSeconds+0x74>
                    {
                        pRunTime->hours = 0U;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	719a      	strb	r2, [r3, #6]
                        pRunTime->days++;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	79db      	ldrb	r3, [r3, #7]
 80099e0:	3301      	adds	r3, #1
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	71da      	strb	r2, [r3, #7]
        while (secondCounter++ < seconds)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	60ba      	str	r2, [r7, #8]
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d8cc      	bhi.n	800998e <gos_runTimeAddSeconds+0x1a>
            else
            {
                // Nothing to do.
            }
        }
        runtimeAddSecondsResult = GOS_SUCCESS;
 80099f4:	2355      	movs	r3, #85	; 0x55
 80099f6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddSecondsResult;
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
	...

08009a08 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 8009a0e:	463b      	mov	r3, r7
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	f8c3 2003 	str.w	r2, [r3, #3]
     * Function code.
     */
    for (;;)
    {
        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 8009a18:	463b      	mov	r3, r7
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff fd0c 	bl	8009438 <gos_timeGet>

        // Increase time by 1 second.
        (void_t) gos_timeAddSeconds(&systemTime, 1);
 8009a20:	2101      	movs	r1, #1
 8009a22:	4829      	ldr	r0, [pc, #164]	; (8009ac8 <gos_timeDaemonTask+0xc0>)
 8009a24:	f7ff fd5c 	bl	80094e0 <gos_timeAddSeconds>

        // Increase run-time by 1 second.
        (void_t) gos_runTimeAddSeconds(&systemRunTime, 1);
 8009a28:	2101      	movs	r1, #1
 8009a2a:	4828      	ldr	r0, [pc, #160]	; (8009acc <gos_timeDaemonTask+0xc4>)
 8009a2c:	f7ff ffa2 	bl	8009974 <gos_runTimeAddSeconds>

        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 8009a30:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <gos_timeDaemonTask+0xc0>)
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	783b      	ldrb	r3, [r7, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d905      	bls.n	8009a46 <gos_timeDaemonTask+0x3e>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 8009a3a:	4b25      	ldr	r3, [pc, #148]	; (8009ad0 <gos_timeDaemonTask+0xc8>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fbfb 	bl	800923c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 8009a46:	4b20      	ldr	r3, [pc, #128]	; (8009ac8 <gos_timeDaemonTask+0xc0>)
 8009a48:	785a      	ldrb	r2, [r3, #1]
 8009a4a:	787b      	ldrb	r3, [r7, #1]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d905      	bls.n	8009a5c <gos_timeDaemonTask+0x54>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 8009a50:	4b1f      	ldr	r3, [pc, #124]	; (8009ad0 <gos_timeDaemonTask+0xc8>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2101      	movs	r1, #1
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff fbf0 	bl	800923c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 8009a5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ac8 <gos_timeDaemonTask+0xc0>)
 8009a5e:	789a      	ldrb	r2, [r3, #2]
 8009a60:	78bb      	ldrb	r3, [r7, #2]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d905      	bls.n	8009a72 <gos_timeDaemonTask+0x6a>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 8009a66:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <gos_timeDaemonTask+0xc8>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7ff fbe5 	bl	800923c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 8009a72:	4b15      	ldr	r3, [pc, #84]	; (8009ac8 <gos_timeDaemonTask+0xc0>)
 8009a74:	78da      	ldrb	r2, [r3, #3]
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d905      	bls.n	8009a88 <gos_timeDaemonTask+0x80>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 8009a7c:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <gos_timeDaemonTask+0xc8>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	2103      	movs	r1, #3
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7ff fbda 	bl	800923c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <gos_timeDaemonTask+0xc0>)
 8009a8a:	791a      	ldrb	r2, [r3, #4]
 8009a8c:	793b      	ldrb	r3, [r7, #4]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d905      	bls.n	8009a9e <gos_timeDaemonTask+0x96>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 8009a92:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <gos_timeDaemonTask+0xc8>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	2104      	movs	r1, #4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff fbcf 	bl	800923c <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 8009a9e:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <gos_timeDaemonTask+0xc0>)
 8009aa0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d905      	bls.n	8009abc <gos_timeDaemonTask+0xb4>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 8009ab0:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <gos_timeDaemonTask+0xc8>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2105      	movs	r1, #5
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fbc0 	bl	800923c <gos_signalInvoke>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_kernelTaskSleep(TIME_SLEEP_TIME_MS);
 8009abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ac0:	f7fb fe40 	bl	8005744 <gos_kernelTaskSleep>
        (void_t) gos_timeGet(&previousTime);
 8009ac4:	e7a8      	b.n	8009a18 <gos_timeDaemonTask+0x10>
 8009ac6:	bf00      	nop
 8009ac8:	20001540 	.word	0x20001540
 8009acc:	20009ff4 	.word	0x20009ff4
 8009ad0:	20009ffe 	.word	0x20009ffe

08009ad4 <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_SUCCESS;
 8009ada:	2355      	movs	r3, #85	; 0x55
 8009adc:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                       != GOS_SUCCESS ||
 8009ade:	480d      	ldr	r0, [pc, #52]	; (8009b14 <gos_traceInit+0x40>)
 8009ae0:	f7fe fd3a 	bl	8008558 <gos_queueCreate>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b55      	cmp	r3, #85	; 0x55
 8009ae8:	d10c      	bne.n	8009b04 <gos_traceInit+0x30>
        gos_kernelTaskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 8009aea:	2100      	movs	r1, #0
 8009aec:	480a      	ldr	r0, [pc, #40]	; (8009b18 <gos_traceInit+0x44>)
 8009aee:	f7fb fc9d 	bl	800542c <gos_kernelTaskRegister>
 8009af2:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                       != GOS_SUCCESS ||
 8009af4:	2b55      	cmp	r3, #85	; 0x55
 8009af6:	d105      	bne.n	8009b04 <gos_traceInit+0x30>
        gos_mutexInit(&traceMutex) != GOS_SUCCESS
 8009af8:	4808      	ldr	r0, [pc, #32]	; (8009b1c <gos_traceInit+0x48>)
 8009afa:	f7fe fb9b 	bl	8008234 <gos_mutexInit>
 8009afe:	4603      	mov	r3, r0
        gos_kernelTaskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 8009b00:	2b55      	cmp	r3, #85	; 0x55
 8009b02:	d001      	beq.n	8009b08 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_ERROR;
 8009b04:	23ae      	movs	r3, #174	; 0xae
 8009b06:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 8009b08:	79fb      	ldrb	r3, [r7, #7]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	200015b8 	.word	0x200015b8
 8009b18:	200015d4 	.word	0x200015d4
 8009b1c:	2000a1bc 	.word	0x2000a1bc

08009b20 <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 8009b20:	b5b0      	push	{r4, r5, r7, lr}
 8009b22:	b0a6      	sub	sp, #152	; 0x98
 8009b24:	af04      	add	r7, sp, #16
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 8009b2c:	2355      	movs	r3, #85	; 0x55
 8009b2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 8009b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b36:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8009b3a:	f107 0314 	add.w	r3, r7, #20
 8009b3e:	226e      	movs	r2, #110	; 0x6e
 8009b40:	2100      	movs	r1, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 f9aa 	bl	800ae9c <memset>
    gos_time_t               sysTime        = {0};
 8009b48:	f107 030c 	add.w	r3, r7, #12
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	f8c3 2003 	str.w	r2, [r3, #3]
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8009b54:	2300      	movs	r3, #0
 8009b56:	817b      	strh	r3, [r7, #10]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 80bd 	beq.w	8009cda <gos_traceTrace+0x1ba>
        (gos_kernelTaskGetCurrentId(&callerTaskId)             == GOS_SUCCESS    ) &&
 8009b60:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fc fdb3 	bl	80066d0 <gos_kernelTaskGetCurrentId>
 8009b6a:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 8009b6c:	2b55      	cmp	r3, #85	; 0x55
 8009b6e:	f040 80b4 	bne.w	8009cda <gos_traceTrace+0x1ba>
        (gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)  == GOS_SUCCESS    ) &&
 8009b72:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009b76:	f107 0214 	add.w	r2, r7, #20
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fc fddb 	bl	8006738 <gos_kernelTaskGetData>
 8009b82:	4603      	mov	r3, r0
        (gos_kernelTaskGetCurrentId(&callerTaskId)             == GOS_SUCCESS    ) &&
 8009b84:	2b55      	cmp	r3, #85	; 0x55
 8009b86:	f040 80a8 	bne.w	8009cda <gos_traceTrace+0x1ba>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8009b8a:	8bbb      	ldrh	r3, [r7, #28]
 8009b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)  == GOS_SUCCESS    ) &&
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d105      	bne.n	8009ba0 <gos_traceTrace+0x80>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8009b94:	f7fd fb2a 	bl	80071ec <gos_kernelIsCallerIsr>
 8009b98:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8009b9a:	2b36      	cmp	r3, #54	; 0x36
 8009b9c:	f040 809d 	bne.w	8009cda <gos_traceTrace+0x1ba>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8009ba0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009ba4:	4850      	ldr	r0, [pc, #320]	; (8009ce8 <gos_traceTrace+0x1c8>)
 8009ba6:	f7fe fb5f 	bl	8008268 <gos_mutexLock>
 8009baa:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8009bac:	2b55      	cmp	r3, #85	; 0x55
 8009bae:	f040 8094 	bne.w	8009cda <gos_traceTrace+0x1ba>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	2b36      	cmp	r3, #54	; 0x36
 8009bb6:	d135      	bne.n	8009c24 <gos_traceTrace+0x104>
        {
            traceResult &= gos_timeGet(&sysTime);
 8009bb8:	f107 030c 	add.w	r3, r7, #12
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff fc3b 	bl	8009438 <gos_timeGet>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009bca:	4013      	ands	r3, r2
 8009bcc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8009bd0:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8009bd4:	b29b      	uxth	r3, r3
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8009bd6:	461c      	mov	r4, r3
                    sysTime.months,
 8009bd8:	7c3b      	ldrb	r3, [r7, #16]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8009bda:	461d      	mov	r5, r3
                    sysTime.days,
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
                    sysTime.hours,
 8009bde:	7bba      	ldrb	r2, [r7, #14]
                    sysTime.minutes,
 8009be0:	7b79      	ldrb	r1, [r7, #13]
                    sysTime.seconds
 8009be2:	7b38      	ldrb	r0, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8009be4:	9003      	str	r0, [sp, #12]
 8009be6:	9102      	str	r1, [sp, #8]
 8009be8:	9201      	str	r2, [sp, #4]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	462b      	mov	r3, r5
 8009bee:	4622      	mov	r2, r4
 8009bf0:	493e      	ldr	r1, [pc, #248]	; (8009cec <gos_traceTrace+0x1cc>)
 8009bf2:	483f      	ldr	r0, [pc, #252]	; (8009cf0 <gos_traceTrace+0x1d0>)
 8009bf4:	f001 f8ce 	bl	800ad94 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 8009bf8:	4b3e      	ldr	r3, [pc, #248]	; (8009cf4 <gos_traceTrace+0x1d4>)
 8009bfa:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 8009bfc:	483c      	ldr	r0, [pc, #240]	; (8009cf0 <gos_traceTrace+0x1d0>)
 8009bfe:	f7f6 fb67 	bl	80002d0 <strlen>
 8009c02:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	3301      	adds	r3, #1
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009c0e:	4938      	ldr	r1, [pc, #224]	; (8009cf0 <gos_traceTrace+0x1d0>)
 8009c10:	4620      	mov	r0, r4
 8009c12:	f7fe fcfd 	bl	8008610 <gos_queuePut>
 8009c16:	4603      	mov	r3, r0
 8009c18:	461a      	mov	r2, r3
 8009c1a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009c1e:	4013      	ands	r3, r2
 8009c20:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        traceResult &= gos_queuePut(
 8009c24:	4b33      	ldr	r3, [pc, #204]	; (8009cf4 <gos_traceTrace+0x1d4>)
 8009c26:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
 8009c28:	6838      	ldr	r0, [r7, #0]
 8009c2a:	f7f6 fb51 	bl	80002d0 <strlen>
 8009c2e:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	3301      	adds	r3, #1
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7fe fce7 	bl	8008610 <gos_queuePut>
 8009c42:	4603      	mov	r3, r0
 8009c44:	461a      	mov	r2, r3
 8009c46:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 8009c50:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009c54:	2b55      	cmp	r3, #85	; 0x55
 8009c56:	d002      	beq.n	8009c5e <gos_traceTrace+0x13e>
        {
            traceResult = GOS_ERROR;
 8009c58:	23ae      	movs	r3, #174	; 0xae
 8009c5a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 8009c5e:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <gos_traceTrace+0x1d8>)
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <gos_traceTrace+0x1d8>)
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	b672      	cpsid	i
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	f3bf 8f6f 	isb	sy

        // Get task privileges.
        (void_t) gos_kernelTaskGetPrivileges(callerTaskId, &privileges);
 8009c74:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009c78:	f107 020a 	add.w	r2, r7, #10
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fc fca6 	bl	80065d0 <gos_kernelTaskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8009c84:	897b      	ldrh	r3, [r7, #10]
 8009c86:	b21b      	sxth	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	db13      	blt.n	8009cb4 <gos_traceTrace+0x194>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_kernelTaskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8009c8c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fc fbaf 	bl	80063f8 <gos_kernelTaskAddPrivilege>
            (void_t) gos_kernelTaskResume(traceDaemonTaskDesc.taskId);
 8009c9a:	4b18      	ldr	r3, [pc, #96]	; (8009cfc <gos_traceTrace+0x1dc>)
 8009c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fb ff20 	bl	8005ae4 <gos_kernelTaskResume>
            (void_t) gos_kernelTaskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8009ca4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fc fbf3 	bl	8006498 <gos_kernelTaskRemovePrivilege>
 8009cb2:	e004      	b.n	8009cbe <gos_traceTrace+0x19e>
        }
        else
        {
            (void_t) gos_kernelTaskResume(traceDaemonTaskDesc.taskId);
 8009cb4:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <gos_traceTrace+0x1dc>)
 8009cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fb ff13 	bl	8005ae4 <gos_kernelTaskResume>
        }
        GOS_ATOMIC_EXIT
 8009cbe:	b662      	cpsie	i
 8009cc0:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <gos_traceTrace+0x1d8>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d005      	beq.n	8009cd4 <gos_traceTrace+0x1b4>
 8009cc8:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <gos_traceTrace+0x1d8>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <gos_traceTrace+0x1d8>)
 8009cd2:	701a      	strb	r2, [r3, #0]

        gos_mutexUnlock(&traceMutex);
 8009cd4:	4804      	ldr	r0, [pc, #16]	; (8009ce8 <gos_traceTrace+0x1c8>)
 8009cd6:	f7fe fb6f 	bl	80083b8 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8009cda:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3788      	adds	r7, #136	; 0x88
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	2000a1bc 	.word	0x2000a1bc
 8009cec:	0800e25c 	.word	0x0800e25c
 8009cf0:	2000a190 	.word	0x2000a190
 8009cf4:	200015b8 	.word	0x200015b8
 8009cf8:	20001a7a 	.word	0x20001a7a
 8009cfc:	200015d4 	.word	0x200015d4

08009d00 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 8009d00:	b40e      	push	{r1, r2, r3}
 8009d02:	b5b0      	push	{r4, r5, r7, lr}
 8009d04:	b0a9      	sub	sp, #164	; 0xa4
 8009d06:	af04      	add	r7, sp, #16
 8009d08:	4603      	mov	r3, r0
 8009d0a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 8009d0c:	2355      	movs	r3, #85	; 0x55
 8009d0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 8009d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d16:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8009d1a:	f107 031c 	add.w	r3, r7, #28
 8009d1e:	226e      	movs	r2, #110	; 0x6e
 8009d20:	2100      	movs	r1, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 f8ba 	bl	800ae9c <memset>
    gos_time_t               sysTime        = {0};
 8009d28:	f107 0314 	add.w	r3, r7, #20
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	f8c3 2003 	str.w	r2, [r3, #3]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8009d34:	2300      	movs	r3, #0
 8009d36:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 8009d38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80c7 	beq.w	8009ed0 <gos_traceTraceFormatted+0x1d0>
        (gos_kernelTaskGetCurrentId(&callerTaskId)             == GOS_SUCCESS    ) &&
 8009d42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fc fcc2 	bl	80066d0 <gos_kernelTaskGetCurrentId>
 8009d4c:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 8009d4e:	2b55      	cmp	r3, #85	; 0x55
 8009d50:	f040 80be 	bne.w	8009ed0 <gos_traceTraceFormatted+0x1d0>
        (gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)  == GOS_SUCCESS    ) &&
 8009d54:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8009d58:	f107 021c 	add.w	r2, r7, #28
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fc fcea 	bl	8006738 <gos_kernelTaskGetData>
 8009d64:	4603      	mov	r3, r0
        (gos_kernelTaskGetCurrentId(&callerTaskId)             == GOS_SUCCESS    ) &&
 8009d66:	2b55      	cmp	r3, #85	; 0x55
 8009d68:	f040 80b2 	bne.w	8009ed0 <gos_traceTraceFormatted+0x1d0>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8009d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)  == GOS_SUCCESS    ) &&
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d105      	bne.n	8009d82 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8009d76:	f7fd fa39 	bl	80071ec <gos_kernelIsCallerIsr>
 8009d7a:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8009d7c:	2b36      	cmp	r3, #54	; 0x36
 8009d7e:	f040 80a7 	bne.w	8009ed0 <gos_traceTraceFormatted+0x1d0>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8009d82:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009d86:	4858      	ldr	r0, [pc, #352]	; (8009ee8 <gos_traceTraceFormatted+0x1e8>)
 8009d88:	f7fe fa6e 	bl	8008268 <gos_mutexLock>
 8009d8c:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8009d8e:	2b55      	cmp	r3, #85	; 0x55
 8009d90:	f040 809e 	bne.w	8009ed0 <gos_traceTraceFormatted+0x1d0>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	2b36      	cmp	r3, #54	; 0x36
 8009d98:	d135      	bne.n	8009e06 <gos_traceTraceFormatted+0x106>
        {
            traceResult &= gos_timeGet(&sysTime);
 8009d9a:	f107 0314 	add.w	r3, r7, #20
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fb4a 	bl	8009438 <gos_timeGet>
 8009da4:	4603      	mov	r3, r0
 8009da6:	461a      	mov	r2, r3
 8009da8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009dac:	4013      	ands	r3, r2
 8009dae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8009db2:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009db6:	b29b      	uxth	r3, r3
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8009db8:	461c      	mov	r4, r3
                    sysTime.months,
 8009dba:	7e3b      	ldrb	r3, [r7, #24]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8009dbc:	461d      	mov	r5, r3
                    sysTime.days,
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
                    sysTime.hours,
 8009dc0:	7dba      	ldrb	r2, [r7, #22]
                    sysTime.minutes,
 8009dc2:	7d79      	ldrb	r1, [r7, #21]
                    sysTime.seconds
 8009dc4:	7d38      	ldrb	r0, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8009dc6:	9003      	str	r0, [sp, #12]
 8009dc8:	9102      	str	r1, [sp, #8]
 8009dca:	9201      	str	r2, [sp, #4]
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	462b      	mov	r3, r5
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	4946      	ldr	r1, [pc, #280]	; (8009eec <gos_traceTraceFormatted+0x1ec>)
 8009dd4:	4846      	ldr	r0, [pc, #280]	; (8009ef0 <gos_traceTraceFormatted+0x1f0>)
 8009dd6:	f000 ffdd 	bl	800ad94 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 8009dda:	4b46      	ldr	r3, [pc, #280]	; (8009ef4 <gos_traceTraceFormatted+0x1f4>)
 8009ddc:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 8009dde:	4844      	ldr	r0, [pc, #272]	; (8009ef0 <gos_traceTraceFormatted+0x1f0>)
 8009de0:	f7f6 fa76 	bl	80002d0 <strlen>
 8009de4:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	3301      	adds	r3, #1
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009df0:	493f      	ldr	r1, [pc, #252]	; (8009ef0 <gos_traceTraceFormatted+0x1f0>)
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7fe fc0c 	bl	8008610 <gos_queuePut>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009e00:	4013      	ands	r3, r2
 8009e02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 8009e06:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009e0a:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e12:	4839      	ldr	r0, [pc, #228]	; (8009ef8 <gos_traceTraceFormatted+0x1f8>)
 8009e14:	f001 f838 	bl	800ae88 <vsiprintf>
        va_end(args);
        traceResult &= gos_queuePut(
 8009e18:	4b36      	ldr	r3, [pc, #216]	; (8009ef4 <gos_traceTraceFormatted+0x1f4>)
 8009e1a:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
 8009e1c:	4836      	ldr	r0, [pc, #216]	; (8009ef8 <gos_traceTraceFormatted+0x1f8>)
 8009e1e:	f7f6 fa57 	bl	80002d0 <strlen>
 8009e22:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	3301      	adds	r3, #1
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009e2e:	4932      	ldr	r1, [pc, #200]	; (8009ef8 <gos_traceTraceFormatted+0x1f8>)
 8009e30:	4620      	mov	r0, r4
 8009e32:	f7fe fbed 	bl	8008610 <gos_queuePut>
 8009e36:	4603      	mov	r3, r0
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009e3e:	4013      	ands	r3, r2
 8009e40:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 8009e44:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009e48:	2b55      	cmp	r3, #85	; 0x55
 8009e4a:	d002      	beq.n	8009e52 <gos_traceTraceFormatted+0x152>
        {
            traceResult = GOS_ERROR;
 8009e4c:	23ae      	movs	r3, #174	; 0xae
 8009e4e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 8009e52:	4b2a      	ldr	r3, [pc, #168]	; (8009efc <gos_traceTraceFormatted+0x1fc>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	3301      	adds	r3, #1
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	4b28      	ldr	r3, [pc, #160]	; (8009efc <gos_traceTraceFormatted+0x1fc>)
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	b672      	cpsid	i
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	f3bf 8f6f 	isb	sy

        // Get task privileges.
        (void_t) gos_kernelTaskGetPrivileges(callerTaskId, &privileges);
 8009e68:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8009e6c:	f107 020e 	add.w	r2, r7, #14
 8009e70:	4611      	mov	r1, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fc fbac 	bl	80065d0 <gos_kernelTaskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8009e78:	89fb      	ldrh	r3, [r7, #14]
 8009e7a:	b21b      	sxth	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	db13      	blt.n	8009ea8 <gos_traceTraceFormatted+0x1a8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_kernelTaskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8009e80:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8009e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fc fab5 	bl	80063f8 <gos_kernelTaskAddPrivilege>
            (void_t) gos_kernelTaskResume(traceDaemonTaskDesc.taskId);
 8009e8e:	4b1c      	ldr	r3, [pc, #112]	; (8009f00 <gos_traceTraceFormatted+0x200>)
 8009e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fb fe26 	bl	8005ae4 <gos_kernelTaskResume>
            (void_t) gos_kernelTaskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8009e98:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8009e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fc faf9 	bl	8006498 <gos_kernelTaskRemovePrivilege>
 8009ea6:	e004      	b.n	8009eb2 <gos_traceTraceFormatted+0x1b2>
        }
        else
        {
            (void_t) gos_kernelTaskResume(traceDaemonTaskDesc.taskId);
 8009ea8:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <gos_traceTraceFormatted+0x200>)
 8009eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fb fe19 	bl	8005ae4 <gos_kernelTaskResume>
        }
        GOS_ATOMIC_EXIT
 8009eb2:	b662      	cpsie	i
 8009eb4:	4b11      	ldr	r3, [pc, #68]	; (8009efc <gos_traceTraceFormatted+0x1fc>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d005      	beq.n	8009ec8 <gos_traceTraceFormatted+0x1c8>
 8009ebc:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <gos_traceTraceFormatted+0x1fc>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <gos_traceTraceFormatted+0x1fc>)
 8009ec6:	701a      	strb	r2, [r3, #0]

        gos_mutexUnlock(&traceMutex);
 8009ec8:	4807      	ldr	r0, [pc, #28]	; (8009ee8 <gos_traceTraceFormatted+0x1e8>)
 8009eca:	f7fe fa75 	bl	80083b8 <gos_mutexUnlock>
 8009ece:	e002      	b.n	8009ed6 <gos_traceTraceFormatted+0x1d6>
    }
    else
    {
        traceResult = GOS_ERROR;
 8009ed0:	23ae      	movs	r3, #174	; 0xae
 8009ed2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return traceResult;
 8009ed6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3794      	adds	r7, #148	; 0x94
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009ee4:	b003      	add	sp, #12
 8009ee6:	4770      	bx	lr
 8009ee8:	2000a1bc 	.word	0x2000a1bc
 8009eec:	0800e25c 	.word	0x0800e25c
 8009ef0:	2000a190 	.word	0x2000a190
 8009ef4:	200015b8 	.word	0x200015b8
 8009ef8:	2000a0c8 	.word	0x2000a0c8
 8009efc:	20001a7a 	.word	0x20001a7a
 8009f00:	200015d4 	.word	0x200015d4

08009f04 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 8009f04:	b40f      	push	{r0, r1, r2, r3}
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 8009f0c:	23ae      	movs	r3, #174	; 0xae
 8009f0e:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d01c      	beq.n	8009f50 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 8009f16:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <gos_traceTraceFormattedUnsafe+0x5c>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4b10      	ldr	r3, [pc, #64]	; (8009f60 <gos_traceTraceFormattedUnsafe+0x5c>)
 8009f20:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 8009f22:	f107 0314 	add.w	r3, r7, #20
 8009f26:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	6939      	ldr	r1, [r7, #16]
 8009f2c:	480d      	ldr	r0, [pc, #52]	; (8009f64 <gos_traceTraceFormattedUnsafe+0x60>)
 8009f2e:	f000 ffab 	bl	800ae88 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 8009f32:	480c      	ldr	r0, [pc, #48]	; (8009f64 <gos_traceTraceFormattedUnsafe+0x60>)
 8009f34:	f000 f974 	bl	800a220 <gos_traceDriverTransmitString_Unsafe>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 8009f3c:	4b08      	ldr	r3, [pc, #32]	; (8009f60 <gos_traceTraceFormattedUnsafe+0x5c>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <gos_traceTraceFormattedUnsafe+0x4c>
 8009f44:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <gos_traceTraceFormattedUnsafe+0x5c>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <gos_traceTraceFormattedUnsafe+0x5c>)
 8009f4e:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8009f50:	79fb      	ldrb	r3, [r7, #7]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f5c:	b004      	add	sp, #16
 8009f5e:	4770      	bx	lr
 8009f60:	20001a7a 	.word	0x20001a7a
 8009f64:	2000a0c8 	.word	0x2000a0c8

08009f68 <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8009f6c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009f70:	480e      	ldr	r0, [pc, #56]	; (8009fac <gos_traceDaemonTask+0x44>)
 8009f72:	f7fe f979 	bl	8008268 <gos_mutexLock>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b55      	cmp	r3, #85	; 0x55
 8009f7a:	d10e      	bne.n	8009f9a <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 8009f7c:	e002      	b.n	8009f84 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 8009f7e:	480c      	ldr	r0, [pc, #48]	; (8009fb0 <gos_traceDaemonTask+0x48>)
 8009f80:	f000 f936 	bl	800a1f0 <gos_traceDriverTransmitString>
            while (gos_queueGet(
 8009f84:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <gos_traceDaemonTask+0x4c>)
 8009f86:	8818      	ldrh	r0, [r3, #0]
 8009f88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009f8c:	22c8      	movs	r2, #200	; 0xc8
 8009f8e:	4908      	ldr	r1, [pc, #32]	; (8009fb0 <gos_traceDaemonTask+0x48>)
 8009f90:	f7fe fc0c 	bl	80087ac <gos_queueGet>
 8009f94:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 8009f96:	2b55      	cmp	r3, #85	; 0x55
 8009f98:	d0f1      	beq.n	8009f7e <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        gos_mutexUnlock(&traceMutex);
 8009f9a:	4804      	ldr	r0, [pc, #16]	; (8009fac <gos_traceDaemonTask+0x44>)
 8009f9c:	f7fe fa0c 	bl	80083b8 <gos_mutexUnlock>
        (void_t) gos_kernelTaskSuspend(traceDaemonTaskDesc.taskId);
 8009fa0:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <gos_traceDaemonTask+0x50>)
 8009fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fb fcc3 	bl	8005930 <gos_kernelTaskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8009faa:	e7df      	b.n	8009f6c <gos_traceDaemonTask+0x4>
 8009fac:	2000a1bc 	.word	0x2000a1bc
 8009fb0:	2000a000 	.word	0x2000a000
 8009fb4:	200015b8 	.word	0x200015b8
 8009fb8:	200015d4 	.word	0x200015d4

08009fbc <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 8009fc4:	23ae      	movs	r3, #174	; 0xae
 8009fc6:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */

    // Null pointer check.
    if (pTrigger != NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <gos_triggerInit+0x20>
    {
        triggerInitResult = gos_mutexInit(&pTrigger->triggerMutex);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	330a      	adds	r3, #10
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe f92e 	bl	8008234 <gos_mutexInit>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE void_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */

    // Null pointer check.
    if (pTrigger != NULL &&
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d014      	beq.n	800a01e <gos_triggerReset+0x38>
        gos_mutexLock(&pTrigger->triggerMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	330a      	adds	r3, #10
 8009ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fe f933 	bl	8008268 <gos_mutexLock>
 800a002:	4603      	mov	r3, r0
    if (pTrigger != NULL &&
 800a004:	2b55      	cmp	r3, #85	; 0x55
 800a006:	d10a      	bne.n	800a01e <gos_triggerReset+0x38>
    {
        pTrigger->valueCounter = 0u;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	605a      	str	r2, [r3, #4]

        gos_mutexUnlock(&pTrigger->triggerMutex);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	330a      	adds	r3, #10
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe f9cd 	bl	80083b8 <gos_mutexUnlock>
    }
    else
    {
        // Nothing to do.
    }
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 800a032:	23ae      	movs	r3, #174	; 0xae
 800a034:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 800a036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a03a:	82bb      	strh	r3, [r7, #20]
    /*
     * Function code.
     */

    // Null pointer check.
    if (pTrigger != NULL)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d039      	beq.n	800a0b6 <gos_triggerWait+0x90>
    {
        // Set owner task ID.
        (void_t) gos_mutexLock(&pTrigger->triggerMutex, GOS_MUTEX_ENDLESS_TMO);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	330a      	adds	r3, #10
 800a046:	f04f 31ff 	mov.w	r1, #4294967295
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe f90c 	bl	8008268 <gos_mutexLock>
        (void_t) gos_kernelTaskGetCurrentId(&currentId);
 800a050:	f107 0314 	add.w	r3, r7, #20
 800a054:	4618      	mov	r0, r3
 800a056:	f7fc fb3b 	bl	80066d0 <gos_kernelTaskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 800a05a:	8aba      	ldrh	r2, [r7, #20]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	605a      	str	r2, [r3, #4]
        gos_mutexUnlock(&pTrigger->triggerMutex);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	330a      	adds	r3, #10
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe f9a4 	bl	80083b8 <gos_mutexUnlock>

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d204      	bcs.n	800a086 <gos_triggerWait+0x60>
        {
            (void_t) gos_kernelTaskBlock(currentId, timeout);
 800a07c:	8abb      	ldrh	r3, [r7, #20]
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	4618      	mov	r0, r3
 800a082:	f7fb fdb5 	bl	8005bf0 <gos_kernelTaskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        (void_t) gos_mutexLock(&pTrigger->triggerMutex, GOS_MUTEX_ENDLESS_TMO);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	330a      	adds	r3, #10
 800a08a:	f04f 31ff 	mov.w	r1, #4294967295
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe f8ea 	bl	8008268 <gos_mutexLock>
        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d305      	bcc.n	800a0ac <gos_triggerWait+0x86>
        {
            triggerWaitResult      = GOS_SUCCESS;
 800a0a0:	2355      	movs	r3, #85	; 0x55
 800a0a2:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0aa:	811a      	strh	r2, [r3, #8]
        }
        else
        {
            // Nothing to do.
        }
        gos_mutexUnlock(&pTrigger->triggerMutex);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	330a      	adds	r3, #10
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fe f981 	bl	80083b8 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE void_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_taskPrivilegeLevel_t originalPrivileges = GOS_TASK_PRIVILEGE_USER;
 800a0c8:	23ff      	movs	r3, #255	; 0xff
 800a0ca:	81fb      	strh	r3, [r7, #14]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 800a0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0d0:	81bb      	strh	r3, [r7, #12]
    /*
     * Function code.
     */

    // Null pointer check.
    if (pTrigger != NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d033      	beq.n	800a140 <gos_triggerIncrement+0x80>
    {
        (void_t) gos_mutexLock(&pTrigger->triggerMutex, GOS_MUTEX_ENDLESS_TMO);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	330a      	adds	r3, #10
 800a0dc:	f04f 31ff 	mov.w	r1, #4294967295
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe f8c1 	bl	8008268 <gos_mutexLock>

        // Increment trigger value.
        pTrigger->valueCounter++;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	601a      	str	r2, [r3, #0]

        // If desired value is reached, unblock waiter.
        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d31c      	bcc.n	800a136 <gos_triggerIncrement+0x76>
        {
            // Get current task ID.
            (void_t) gos_kernelTaskGetCurrentId(&currentTaskId);
 800a0fc:	f107 030c 	add.w	r3, r7, #12
 800a100:	4618      	mov	r0, r3
 800a102:	f7fc fae5 	bl	80066d0 <gos_kernelTaskGetCurrentId>

            // Get original privileges.
            (void_t) gos_kernelTaskGetPrivileges(currentTaskId, &originalPrivileges);
 800a106:	89bb      	ldrh	r3, [r7, #12]
 800a108:	f107 020e 	add.w	r2, r7, #14
 800a10c:	4611      	mov	r1, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fc fa5e 	bl	80065d0 <gos_kernelTaskGetPrivileges>

            // Add necessary privilege.
            (void_t) gos_kernelTaskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 800a114:	89bb      	ldrh	r3, [r7, #12]
 800a116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fc f96c 	bl	80063f8 <gos_kernelTaskAddPrivilege>

            // Unblock owner task.
            (void_t) gos_kernelTaskUnblock(pTrigger->waiterTaskId);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	891b      	ldrh	r3, [r3, #8]
 800a124:	4618      	mov	r0, r3
 800a126:	f7fb fe2f 	bl	8005d88 <gos_kernelTaskUnblock>

            // Restore privileges.
            (void_t) gos_kernelTaskSetPrivileges(currentTaskId, originalPrivileges);
 800a12a:	89bb      	ldrh	r3, [r7, #12]
 800a12c:	89fa      	ldrh	r2, [r7, #14]
 800a12e:	4611      	mov	r1, r2
 800a130:	4618      	mov	r0, r3
 800a132:	f7fc fa07 	bl	8006544 <gos_kernelTaskSetPrivileges>
        else
        {
            // Trigger value not reached yet.
        }

        gos_mutexUnlock(&pTrigger->triggerMutex);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	330a      	adds	r3, #10
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe f93c 	bl	80083b8 <gos_mutexUnlock>
    }
    else
    {
        // Nothing to do.
    }
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <gos_shellDriverReceiveChar>:

/*
 * Function: gos_shellDriverReceiveChar
 */
gos_result_t gos_shellDriverReceiveChar (char_t* pChar)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t shellDriverReceiveResult = GOS_ERROR;
 800a150:	23ae      	movs	r3, #174	; 0xae
 800a152:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.shellDriverReceiveChar != NULL)
 800a154:	4b07      	ldr	r3, [pc, #28]	; (800a174 <gos_shellDriverReceiveChar+0x2c>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <gos_shellDriverReceiveChar+0x20>
    {
        shellDriverReceiveResult = driverFunctions.shellDriverReceiveChar(pChar);
 800a15c:	4b05      	ldr	r3, [pc, #20]	; (800a174 <gos_shellDriverReceiveChar+0x2c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4798      	blx	r3
 800a164:	4603      	mov	r3, r0
 800a166:	73fb      	strb	r3, [r7, #15]
    }

    return shellDriverReceiveResult;
 800a168:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20001a5c 	.word	0x20001a5c

0800a178 <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 800a178:	b40f      	push	{r0, r1, r2, r3}
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 800a180:	23ae      	movs	r3, #174	; 0xae
 800a182:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 800a184:	f107 0314 	add.w	r3, r7, #20
 800a188:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	6939      	ldr	r1, [r7, #16]
 800a18e:	480a      	ldr	r0, [pc, #40]	; (800a1b8 <gos_shellDriverTransmitString+0x40>)
 800a190:	f000 fe7a 	bl	800ae88 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 800a194:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <gos_shellDriverTransmitString+0x44>)
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 800a19c:	4b07      	ldr	r3, [pc, #28]	; (800a1bc <gos_shellDriverTransmitString+0x44>)
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4805      	ldr	r0, [pc, #20]	; (800a1b8 <gos_shellDriverTransmitString+0x40>)
 800a1a2:	4798      	blx	r3
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	71fb      	strb	r3, [r7, #7]
    }

    return shellDriverTransmitResult;
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1b4:	b004      	add	sp, #16
 800a1b6:	4770      	bx	lr
 800a1b8:	2000a1c0 	.word	0x2000a1c0
 800a1bc:	20001a5c 	.word	0x20001a5c

0800a1c0 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 800a1c8:	23ae      	movs	r3, #174	; 0xae
 800a1ca:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 800a1cc:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <gos_timerDriverSysTimerGet+0x2c>)
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d005      	beq.n	800a1e0 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 800a1d4:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <gos_timerDriverSysTimerGet+0x2c>)
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	4798      	blx	r3
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]
    }

    return timerDriverSysTimerGetResult;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20001a5c 	.word	0x20001a5c

0800a1f0 <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800a1f8:	23ae      	movs	r3, #174	; 0xae
 800a1fa:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 800a1fc:	4b07      	ldr	r3, [pc, #28]	; (800a21c <gos_traceDriverTransmitString+0x2c>)
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 800a204:	4b05      	ldr	r3, [pc, #20]	; (800a21c <gos_traceDriverTransmitString+0x2c>)
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	4798      	blx	r3
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]
    }

    return traceDriverTransmitResult;
 800a210:	7bfb      	ldrb	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	20001a5c 	.word	0x20001a5c

0800a220 <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800a228:	23ae      	movs	r3, #174	; 0xae
 800a22a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 800a22c:	4b07      	ldr	r3, [pc, #28]	; (800a24c <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d005      	beq.n	800a240 <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 800a234:	4b05      	ldr	r3, [pc, #20]	; (800a24c <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	4798      	blx	r3
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]
    }

    return traceDriverTransmitResult;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20001a5c 	.word	0x20001a5c

0800a250 <_strtol_l.constprop.0>:
 800a250:	2b01      	cmp	r3, #1
 800a252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a256:	d001      	beq.n	800a25c <_strtol_l.constprop.0+0xc>
 800a258:	2b24      	cmp	r3, #36	; 0x24
 800a25a:	d906      	bls.n	800a26a <_strtol_l.constprop.0+0x1a>
 800a25c:	f000 fe70 	bl	800af40 <__errno>
 800a260:	2316      	movs	r3, #22
 800a262:	6003      	str	r3, [r0, #0]
 800a264:	2000      	movs	r0, #0
 800a266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a26a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a350 <_strtol_l.constprop.0+0x100>
 800a26e:	460d      	mov	r5, r1
 800a270:	462e      	mov	r6, r5
 800a272:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a276:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a27a:	f017 0708 	ands.w	r7, r7, #8
 800a27e:	d1f7      	bne.n	800a270 <_strtol_l.constprop.0+0x20>
 800a280:	2c2d      	cmp	r4, #45	; 0x2d
 800a282:	d132      	bne.n	800a2ea <_strtol_l.constprop.0+0x9a>
 800a284:	782c      	ldrb	r4, [r5, #0]
 800a286:	2701      	movs	r7, #1
 800a288:	1cb5      	adds	r5, r6, #2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d05b      	beq.n	800a346 <_strtol_l.constprop.0+0xf6>
 800a28e:	2b10      	cmp	r3, #16
 800a290:	d109      	bne.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a292:	2c30      	cmp	r4, #48	; 0x30
 800a294:	d107      	bne.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a296:	782c      	ldrb	r4, [r5, #0]
 800a298:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a29c:	2c58      	cmp	r4, #88	; 0x58
 800a29e:	d14d      	bne.n	800a33c <_strtol_l.constprop.0+0xec>
 800a2a0:	786c      	ldrb	r4, [r5, #1]
 800a2a2:	2310      	movs	r3, #16
 800a2a4:	3502      	adds	r5, #2
 800a2a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a2aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2ae:	f04f 0e00 	mov.w	lr, #0
 800a2b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a2b6:	4676      	mov	r6, lr
 800a2b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a2bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a2c0:	f1bc 0f09 	cmp.w	ip, #9
 800a2c4:	d816      	bhi.n	800a2f4 <_strtol_l.constprop.0+0xa4>
 800a2c6:	4664      	mov	r4, ip
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	dd24      	ble.n	800a316 <_strtol_l.constprop.0+0xc6>
 800a2cc:	f1be 3fff 	cmp.w	lr, #4294967295
 800a2d0:	d008      	beq.n	800a2e4 <_strtol_l.constprop.0+0x94>
 800a2d2:	45b1      	cmp	r9, r6
 800a2d4:	d31c      	bcc.n	800a310 <_strtol_l.constprop.0+0xc0>
 800a2d6:	d101      	bne.n	800a2dc <_strtol_l.constprop.0+0x8c>
 800a2d8:	45a2      	cmp	sl, r4
 800a2da:	db19      	blt.n	800a310 <_strtol_l.constprop.0+0xc0>
 800a2dc:	fb06 4603 	mla	r6, r6, r3, r4
 800a2e0:	f04f 0e01 	mov.w	lr, #1
 800a2e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2e8:	e7e8      	b.n	800a2bc <_strtol_l.constprop.0+0x6c>
 800a2ea:	2c2b      	cmp	r4, #43	; 0x2b
 800a2ec:	bf04      	itt	eq
 800a2ee:	782c      	ldrbeq	r4, [r5, #0]
 800a2f0:	1cb5      	addeq	r5, r6, #2
 800a2f2:	e7ca      	b.n	800a28a <_strtol_l.constprop.0+0x3a>
 800a2f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a2f8:	f1bc 0f19 	cmp.w	ip, #25
 800a2fc:	d801      	bhi.n	800a302 <_strtol_l.constprop.0+0xb2>
 800a2fe:	3c37      	subs	r4, #55	; 0x37
 800a300:	e7e2      	b.n	800a2c8 <_strtol_l.constprop.0+0x78>
 800a302:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a306:	f1bc 0f19 	cmp.w	ip, #25
 800a30a:	d804      	bhi.n	800a316 <_strtol_l.constprop.0+0xc6>
 800a30c:	3c57      	subs	r4, #87	; 0x57
 800a30e:	e7db      	b.n	800a2c8 <_strtol_l.constprop.0+0x78>
 800a310:	f04f 3eff 	mov.w	lr, #4294967295
 800a314:	e7e6      	b.n	800a2e4 <_strtol_l.constprop.0+0x94>
 800a316:	f1be 3fff 	cmp.w	lr, #4294967295
 800a31a:	d105      	bne.n	800a328 <_strtol_l.constprop.0+0xd8>
 800a31c:	2322      	movs	r3, #34	; 0x22
 800a31e:	6003      	str	r3, [r0, #0]
 800a320:	4646      	mov	r6, r8
 800a322:	b942      	cbnz	r2, 800a336 <_strtol_l.constprop.0+0xe6>
 800a324:	4630      	mov	r0, r6
 800a326:	e79e      	b.n	800a266 <_strtol_l.constprop.0+0x16>
 800a328:	b107      	cbz	r7, 800a32c <_strtol_l.constprop.0+0xdc>
 800a32a:	4276      	negs	r6, r6
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	d0f9      	beq.n	800a324 <_strtol_l.constprop.0+0xd4>
 800a330:	f1be 0f00 	cmp.w	lr, #0
 800a334:	d000      	beq.n	800a338 <_strtol_l.constprop.0+0xe8>
 800a336:	1e69      	subs	r1, r5, #1
 800a338:	6011      	str	r1, [r2, #0]
 800a33a:	e7f3      	b.n	800a324 <_strtol_l.constprop.0+0xd4>
 800a33c:	2430      	movs	r4, #48	; 0x30
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1b1      	bne.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a342:	2308      	movs	r3, #8
 800a344:	e7af      	b.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a346:	2c30      	cmp	r4, #48	; 0x30
 800a348:	d0a5      	beq.n	800a296 <_strtol_l.constprop.0+0x46>
 800a34a:	230a      	movs	r3, #10
 800a34c:	e7ab      	b.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a34e:	bf00      	nop
 800a350:	0800e459 	.word	0x0800e459

0800a354 <strtol>:
 800a354:	4613      	mov	r3, r2
 800a356:	460a      	mov	r2, r1
 800a358:	4601      	mov	r1, r0
 800a35a:	4802      	ldr	r0, [pc, #8]	; (800a364 <strtol+0x10>)
 800a35c:	6800      	ldr	r0, [r0, #0]
 800a35e:	f7ff bf77 	b.w	800a250 <_strtol_l.constprop.0>
 800a362:	bf00      	nop
 800a364:	2000169c 	.word	0x2000169c

0800a368 <__cvt>:
 800a368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a36c:	ec55 4b10 	vmov	r4, r5, d0
 800a370:	2d00      	cmp	r5, #0
 800a372:	460e      	mov	r6, r1
 800a374:	4619      	mov	r1, r3
 800a376:	462b      	mov	r3, r5
 800a378:	bfbb      	ittet	lt
 800a37a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a37e:	461d      	movlt	r5, r3
 800a380:	2300      	movge	r3, #0
 800a382:	232d      	movlt	r3, #45	; 0x2d
 800a384:	700b      	strb	r3, [r1, #0]
 800a386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a388:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a38c:	4691      	mov	r9, r2
 800a38e:	f023 0820 	bic.w	r8, r3, #32
 800a392:	bfbc      	itt	lt
 800a394:	4622      	movlt	r2, r4
 800a396:	4614      	movlt	r4, r2
 800a398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a39c:	d005      	beq.n	800a3aa <__cvt+0x42>
 800a39e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a3a2:	d100      	bne.n	800a3a6 <__cvt+0x3e>
 800a3a4:	3601      	adds	r6, #1
 800a3a6:	2102      	movs	r1, #2
 800a3a8:	e000      	b.n	800a3ac <__cvt+0x44>
 800a3aa:	2103      	movs	r1, #3
 800a3ac:	ab03      	add	r3, sp, #12
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	ab02      	add	r3, sp, #8
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	ec45 4b10 	vmov	d0, r4, r5
 800a3b8:	4653      	mov	r3, sl
 800a3ba:	4632      	mov	r2, r6
 800a3bc:	f000 fe8c 	bl	800b0d8 <_dtoa_r>
 800a3c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	d102      	bne.n	800a3ce <__cvt+0x66>
 800a3c8:	f019 0f01 	tst.w	r9, #1
 800a3cc:	d022      	beq.n	800a414 <__cvt+0xac>
 800a3ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3d2:	eb07 0906 	add.w	r9, r7, r6
 800a3d6:	d110      	bne.n	800a3fa <__cvt+0x92>
 800a3d8:	783b      	ldrb	r3, [r7, #0]
 800a3da:	2b30      	cmp	r3, #48	; 0x30
 800a3dc:	d10a      	bne.n	800a3f4 <__cvt+0x8c>
 800a3de:	2200      	movs	r2, #0
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	f7f6 fb9f 	bl	8000b28 <__aeabi_dcmpeq>
 800a3ea:	b918      	cbnz	r0, 800a3f4 <__cvt+0x8c>
 800a3ec:	f1c6 0601 	rsb	r6, r6, #1
 800a3f0:	f8ca 6000 	str.w	r6, [sl]
 800a3f4:	f8da 3000 	ldr.w	r3, [sl]
 800a3f8:	4499      	add	r9, r3
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	f7f6 fb91 	bl	8000b28 <__aeabi_dcmpeq>
 800a406:	b108      	cbz	r0, 800a40c <__cvt+0xa4>
 800a408:	f8cd 900c 	str.w	r9, [sp, #12]
 800a40c:	2230      	movs	r2, #48	; 0x30
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	454b      	cmp	r3, r9
 800a412:	d307      	bcc.n	800a424 <__cvt+0xbc>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a418:	1bdb      	subs	r3, r3, r7
 800a41a:	4638      	mov	r0, r7
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	b004      	add	sp, #16
 800a420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a424:	1c59      	adds	r1, r3, #1
 800a426:	9103      	str	r1, [sp, #12]
 800a428:	701a      	strb	r2, [r3, #0]
 800a42a:	e7f0      	b.n	800a40e <__cvt+0xa6>

0800a42c <__exponent>:
 800a42c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a42e:	4603      	mov	r3, r0
 800a430:	2900      	cmp	r1, #0
 800a432:	bfb8      	it	lt
 800a434:	4249      	neglt	r1, r1
 800a436:	f803 2b02 	strb.w	r2, [r3], #2
 800a43a:	bfb4      	ite	lt
 800a43c:	222d      	movlt	r2, #45	; 0x2d
 800a43e:	222b      	movge	r2, #43	; 0x2b
 800a440:	2909      	cmp	r1, #9
 800a442:	7042      	strb	r2, [r0, #1]
 800a444:	dd2a      	ble.n	800a49c <__exponent+0x70>
 800a446:	f10d 0207 	add.w	r2, sp, #7
 800a44a:	4617      	mov	r7, r2
 800a44c:	260a      	movs	r6, #10
 800a44e:	4694      	mov	ip, r2
 800a450:	fb91 f5f6 	sdiv	r5, r1, r6
 800a454:	fb06 1415 	mls	r4, r6, r5, r1
 800a458:	3430      	adds	r4, #48	; 0x30
 800a45a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a45e:	460c      	mov	r4, r1
 800a460:	2c63      	cmp	r4, #99	; 0x63
 800a462:	f102 32ff 	add.w	r2, r2, #4294967295
 800a466:	4629      	mov	r1, r5
 800a468:	dcf1      	bgt.n	800a44e <__exponent+0x22>
 800a46a:	3130      	adds	r1, #48	; 0x30
 800a46c:	f1ac 0402 	sub.w	r4, ip, #2
 800a470:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a474:	1c41      	adds	r1, r0, #1
 800a476:	4622      	mov	r2, r4
 800a478:	42ba      	cmp	r2, r7
 800a47a:	d30a      	bcc.n	800a492 <__exponent+0x66>
 800a47c:	f10d 0209 	add.w	r2, sp, #9
 800a480:	eba2 020c 	sub.w	r2, r2, ip
 800a484:	42bc      	cmp	r4, r7
 800a486:	bf88      	it	hi
 800a488:	2200      	movhi	r2, #0
 800a48a:	4413      	add	r3, r2
 800a48c:	1a18      	subs	r0, r3, r0
 800a48e:	b003      	add	sp, #12
 800a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a492:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a496:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a49a:	e7ed      	b.n	800a478 <__exponent+0x4c>
 800a49c:	2330      	movs	r3, #48	; 0x30
 800a49e:	3130      	adds	r1, #48	; 0x30
 800a4a0:	7083      	strb	r3, [r0, #2]
 800a4a2:	70c1      	strb	r1, [r0, #3]
 800a4a4:	1d03      	adds	r3, r0, #4
 800a4a6:	e7f1      	b.n	800a48c <__exponent+0x60>

0800a4a8 <_printf_float>:
 800a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	ed2d 8b02 	vpush	{d8}
 800a4b0:	b08d      	sub	sp, #52	; 0x34
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a4b8:	4616      	mov	r6, r2
 800a4ba:	461f      	mov	r7, r3
 800a4bc:	4605      	mov	r5, r0
 800a4be:	f000 fcf5 	bl	800aeac <_localeconv_r>
 800a4c2:	f8d0 a000 	ldr.w	sl, [r0]
 800a4c6:	4650      	mov	r0, sl
 800a4c8:	f7f5 ff02 	bl	80002d0 <strlen>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	9305      	str	r3, [sp, #20]
 800a4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a4d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a4dc:	3307      	adds	r3, #7
 800a4de:	f023 0307 	bic.w	r3, r3, #7
 800a4e2:	f103 0208 	add.w	r2, r3, #8
 800a4e6:	f8c8 2000 	str.w	r2, [r8]
 800a4ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4f8:	ee08 0a10 	vmov	s16, r0
 800a4fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a500:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a504:	4b9e      	ldr	r3, [pc, #632]	; (800a780 <_printf_float+0x2d8>)
 800a506:	f04f 32ff 	mov.w	r2, #4294967295
 800a50a:	f7f6 fb3f 	bl	8000b8c <__aeabi_dcmpun>
 800a50e:	bb88      	cbnz	r0, 800a574 <_printf_float+0xcc>
 800a510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a514:	4b9a      	ldr	r3, [pc, #616]	; (800a780 <_printf_float+0x2d8>)
 800a516:	f04f 32ff 	mov.w	r2, #4294967295
 800a51a:	f7f6 fb19 	bl	8000b50 <__aeabi_dcmple>
 800a51e:	bb48      	cbnz	r0, 800a574 <_printf_float+0xcc>
 800a520:	2200      	movs	r2, #0
 800a522:	2300      	movs	r3, #0
 800a524:	4640      	mov	r0, r8
 800a526:	4649      	mov	r1, r9
 800a528:	f7f6 fb08 	bl	8000b3c <__aeabi_dcmplt>
 800a52c:	b110      	cbz	r0, 800a534 <_printf_float+0x8c>
 800a52e:	232d      	movs	r3, #45	; 0x2d
 800a530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a534:	4a93      	ldr	r2, [pc, #588]	; (800a784 <_printf_float+0x2dc>)
 800a536:	4b94      	ldr	r3, [pc, #592]	; (800a788 <_printf_float+0x2e0>)
 800a538:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a53c:	bf94      	ite	ls
 800a53e:	4690      	movls	r8, r2
 800a540:	4698      	movhi	r8, r3
 800a542:	2303      	movs	r3, #3
 800a544:	6123      	str	r3, [r4, #16]
 800a546:	9b05      	ldr	r3, [sp, #20]
 800a548:	f023 0304 	bic.w	r3, r3, #4
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	f04f 0900 	mov.w	r9, #0
 800a552:	9700      	str	r7, [sp, #0]
 800a554:	4633      	mov	r3, r6
 800a556:	aa0b      	add	r2, sp, #44	; 0x2c
 800a558:	4621      	mov	r1, r4
 800a55a:	4628      	mov	r0, r5
 800a55c:	f000 f9da 	bl	800a914 <_printf_common>
 800a560:	3001      	adds	r0, #1
 800a562:	f040 8090 	bne.w	800a686 <_printf_float+0x1de>
 800a566:	f04f 30ff 	mov.w	r0, #4294967295
 800a56a:	b00d      	add	sp, #52	; 0x34
 800a56c:	ecbd 8b02 	vpop	{d8}
 800a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a574:	4642      	mov	r2, r8
 800a576:	464b      	mov	r3, r9
 800a578:	4640      	mov	r0, r8
 800a57a:	4649      	mov	r1, r9
 800a57c:	f7f6 fb06 	bl	8000b8c <__aeabi_dcmpun>
 800a580:	b140      	cbz	r0, 800a594 <_printf_float+0xec>
 800a582:	464b      	mov	r3, r9
 800a584:	2b00      	cmp	r3, #0
 800a586:	bfbc      	itt	lt
 800a588:	232d      	movlt	r3, #45	; 0x2d
 800a58a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a58e:	4a7f      	ldr	r2, [pc, #508]	; (800a78c <_printf_float+0x2e4>)
 800a590:	4b7f      	ldr	r3, [pc, #508]	; (800a790 <_printf_float+0x2e8>)
 800a592:	e7d1      	b.n	800a538 <_printf_float+0x90>
 800a594:	6863      	ldr	r3, [r4, #4]
 800a596:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a59a:	9206      	str	r2, [sp, #24]
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	d13f      	bne.n	800a620 <_printf_float+0x178>
 800a5a0:	2306      	movs	r3, #6
 800a5a2:	6063      	str	r3, [r4, #4]
 800a5a4:	9b05      	ldr	r3, [sp, #20]
 800a5a6:	6861      	ldr	r1, [r4, #4]
 800a5a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9303      	str	r3, [sp, #12]
 800a5b0:	ab0a      	add	r3, sp, #40	; 0x28
 800a5b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a5b6:	ab09      	add	r3, sp, #36	; 0x24
 800a5b8:	ec49 8b10 	vmov	d0, r8, r9
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	6022      	str	r2, [r4, #0]
 800a5c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f7ff fecf 	bl	800a368 <__cvt>
 800a5ca:	9b06      	ldr	r3, [sp, #24]
 800a5cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5ce:	2b47      	cmp	r3, #71	; 0x47
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	d108      	bne.n	800a5e6 <_printf_float+0x13e>
 800a5d4:	1cc8      	adds	r0, r1, #3
 800a5d6:	db02      	blt.n	800a5de <_printf_float+0x136>
 800a5d8:	6863      	ldr	r3, [r4, #4]
 800a5da:	4299      	cmp	r1, r3
 800a5dc:	dd41      	ble.n	800a662 <_printf_float+0x1ba>
 800a5de:	f1ab 0302 	sub.w	r3, fp, #2
 800a5e2:	fa5f fb83 	uxtb.w	fp, r3
 800a5e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5ea:	d820      	bhi.n	800a62e <_printf_float+0x186>
 800a5ec:	3901      	subs	r1, #1
 800a5ee:	465a      	mov	r2, fp
 800a5f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a5f4:	9109      	str	r1, [sp, #36]	; 0x24
 800a5f6:	f7ff ff19 	bl	800a42c <__exponent>
 800a5fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5fc:	1813      	adds	r3, r2, r0
 800a5fe:	2a01      	cmp	r2, #1
 800a600:	4681      	mov	r9, r0
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	dc02      	bgt.n	800a60c <_printf_float+0x164>
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	07d2      	lsls	r2, r2, #31
 800a60a:	d501      	bpl.n	800a610 <_printf_float+0x168>
 800a60c:	3301      	adds	r3, #1
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a614:	2b00      	cmp	r3, #0
 800a616:	d09c      	beq.n	800a552 <_printf_float+0xaa>
 800a618:	232d      	movs	r3, #45	; 0x2d
 800a61a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61e:	e798      	b.n	800a552 <_printf_float+0xaa>
 800a620:	9a06      	ldr	r2, [sp, #24]
 800a622:	2a47      	cmp	r2, #71	; 0x47
 800a624:	d1be      	bne.n	800a5a4 <_printf_float+0xfc>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1bc      	bne.n	800a5a4 <_printf_float+0xfc>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e7b9      	b.n	800a5a2 <_printf_float+0xfa>
 800a62e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a632:	d118      	bne.n	800a666 <_printf_float+0x1be>
 800a634:	2900      	cmp	r1, #0
 800a636:	6863      	ldr	r3, [r4, #4]
 800a638:	dd0b      	ble.n	800a652 <_printf_float+0x1aa>
 800a63a:	6121      	str	r1, [r4, #16]
 800a63c:	b913      	cbnz	r3, 800a644 <_printf_float+0x19c>
 800a63e:	6822      	ldr	r2, [r4, #0]
 800a640:	07d0      	lsls	r0, r2, #31
 800a642:	d502      	bpl.n	800a64a <_printf_float+0x1a2>
 800a644:	3301      	adds	r3, #1
 800a646:	440b      	add	r3, r1
 800a648:	6123      	str	r3, [r4, #16]
 800a64a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a64c:	f04f 0900 	mov.w	r9, #0
 800a650:	e7de      	b.n	800a610 <_printf_float+0x168>
 800a652:	b913      	cbnz	r3, 800a65a <_printf_float+0x1b2>
 800a654:	6822      	ldr	r2, [r4, #0]
 800a656:	07d2      	lsls	r2, r2, #31
 800a658:	d501      	bpl.n	800a65e <_printf_float+0x1b6>
 800a65a:	3302      	adds	r3, #2
 800a65c:	e7f4      	b.n	800a648 <_printf_float+0x1a0>
 800a65e:	2301      	movs	r3, #1
 800a660:	e7f2      	b.n	800a648 <_printf_float+0x1a0>
 800a662:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a668:	4299      	cmp	r1, r3
 800a66a:	db05      	blt.n	800a678 <_printf_float+0x1d0>
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	6121      	str	r1, [r4, #16]
 800a670:	07d8      	lsls	r0, r3, #31
 800a672:	d5ea      	bpl.n	800a64a <_printf_float+0x1a2>
 800a674:	1c4b      	adds	r3, r1, #1
 800a676:	e7e7      	b.n	800a648 <_printf_float+0x1a0>
 800a678:	2900      	cmp	r1, #0
 800a67a:	bfd4      	ite	le
 800a67c:	f1c1 0202 	rsble	r2, r1, #2
 800a680:	2201      	movgt	r2, #1
 800a682:	4413      	add	r3, r2
 800a684:	e7e0      	b.n	800a648 <_printf_float+0x1a0>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	055a      	lsls	r2, r3, #21
 800a68a:	d407      	bmi.n	800a69c <_printf_float+0x1f4>
 800a68c:	6923      	ldr	r3, [r4, #16]
 800a68e:	4642      	mov	r2, r8
 800a690:	4631      	mov	r1, r6
 800a692:	4628      	mov	r0, r5
 800a694:	47b8      	blx	r7
 800a696:	3001      	adds	r0, #1
 800a698:	d12c      	bne.n	800a6f4 <_printf_float+0x24c>
 800a69a:	e764      	b.n	800a566 <_printf_float+0xbe>
 800a69c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6a0:	f240 80e0 	bls.w	800a864 <_printf_float+0x3bc>
 800a6a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f7f6 fa3c 	bl	8000b28 <__aeabi_dcmpeq>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d034      	beq.n	800a71e <_printf_float+0x276>
 800a6b4:	4a37      	ldr	r2, [pc, #220]	; (800a794 <_printf_float+0x2ec>)
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b8      	blx	r7
 800a6be:	3001      	adds	r0, #1
 800a6c0:	f43f af51 	beq.w	800a566 <_printf_float+0xbe>
 800a6c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	db02      	blt.n	800a6d2 <_printf_float+0x22a>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	07d8      	lsls	r0, r3, #31
 800a6d0:	d510      	bpl.n	800a6f4 <_printf_float+0x24c>
 800a6d2:	ee18 3a10 	vmov	r3, s16
 800a6d6:	4652      	mov	r2, sl
 800a6d8:	4631      	mov	r1, r6
 800a6da:	4628      	mov	r0, r5
 800a6dc:	47b8      	blx	r7
 800a6de:	3001      	adds	r0, #1
 800a6e0:	f43f af41 	beq.w	800a566 <_printf_float+0xbe>
 800a6e4:	f04f 0800 	mov.w	r8, #0
 800a6e8:	f104 091a 	add.w	r9, r4, #26
 800a6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	4543      	cmp	r3, r8
 800a6f2:	dc09      	bgt.n	800a708 <_printf_float+0x260>
 800a6f4:	6823      	ldr	r3, [r4, #0]
 800a6f6:	079b      	lsls	r3, r3, #30
 800a6f8:	f100 8107 	bmi.w	800a90a <_printf_float+0x462>
 800a6fc:	68e0      	ldr	r0, [r4, #12]
 800a6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a700:	4298      	cmp	r0, r3
 800a702:	bfb8      	it	lt
 800a704:	4618      	movlt	r0, r3
 800a706:	e730      	b.n	800a56a <_printf_float+0xc2>
 800a708:	2301      	movs	r3, #1
 800a70a:	464a      	mov	r2, r9
 800a70c:	4631      	mov	r1, r6
 800a70e:	4628      	mov	r0, r5
 800a710:	47b8      	blx	r7
 800a712:	3001      	adds	r0, #1
 800a714:	f43f af27 	beq.w	800a566 <_printf_float+0xbe>
 800a718:	f108 0801 	add.w	r8, r8, #1
 800a71c:	e7e6      	b.n	800a6ec <_printf_float+0x244>
 800a71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc39      	bgt.n	800a798 <_printf_float+0x2f0>
 800a724:	4a1b      	ldr	r2, [pc, #108]	; (800a794 <_printf_float+0x2ec>)
 800a726:	2301      	movs	r3, #1
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	f43f af19 	beq.w	800a566 <_printf_float+0xbe>
 800a734:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a738:	4313      	orrs	r3, r2
 800a73a:	d102      	bne.n	800a742 <_printf_float+0x29a>
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	07d9      	lsls	r1, r3, #31
 800a740:	d5d8      	bpl.n	800a6f4 <_printf_float+0x24c>
 800a742:	ee18 3a10 	vmov	r3, s16
 800a746:	4652      	mov	r2, sl
 800a748:	4631      	mov	r1, r6
 800a74a:	4628      	mov	r0, r5
 800a74c:	47b8      	blx	r7
 800a74e:	3001      	adds	r0, #1
 800a750:	f43f af09 	beq.w	800a566 <_printf_float+0xbe>
 800a754:	f04f 0900 	mov.w	r9, #0
 800a758:	f104 0a1a 	add.w	sl, r4, #26
 800a75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75e:	425b      	negs	r3, r3
 800a760:	454b      	cmp	r3, r9
 800a762:	dc01      	bgt.n	800a768 <_printf_float+0x2c0>
 800a764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a766:	e792      	b.n	800a68e <_printf_float+0x1e6>
 800a768:	2301      	movs	r3, #1
 800a76a:	4652      	mov	r2, sl
 800a76c:	4631      	mov	r1, r6
 800a76e:	4628      	mov	r0, r5
 800a770:	47b8      	blx	r7
 800a772:	3001      	adds	r0, #1
 800a774:	f43f aef7 	beq.w	800a566 <_printf_float+0xbe>
 800a778:	f109 0901 	add.w	r9, r9, #1
 800a77c:	e7ee      	b.n	800a75c <_printf_float+0x2b4>
 800a77e:	bf00      	nop
 800a780:	7fefffff 	.word	0x7fefffff
 800a784:	0800e559 	.word	0x0800e559
 800a788:	0800e55d 	.word	0x0800e55d
 800a78c:	0800e561 	.word	0x0800e561
 800a790:	0800e565 	.word	0x0800e565
 800a794:	0800e569 	.word	0x0800e569
 800a798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a79a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a79c:	429a      	cmp	r2, r3
 800a79e:	bfa8      	it	ge
 800a7a0:	461a      	movge	r2, r3
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	4691      	mov	r9, r2
 800a7a6:	dc37      	bgt.n	800a818 <_printf_float+0x370>
 800a7a8:	f04f 0b00 	mov.w	fp, #0
 800a7ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7b0:	f104 021a 	add.w	r2, r4, #26
 800a7b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7b6:	9305      	str	r3, [sp, #20]
 800a7b8:	eba3 0309 	sub.w	r3, r3, r9
 800a7bc:	455b      	cmp	r3, fp
 800a7be:	dc33      	bgt.n	800a828 <_printf_float+0x380>
 800a7c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	db3b      	blt.n	800a840 <_printf_float+0x398>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	07da      	lsls	r2, r3, #31
 800a7cc:	d438      	bmi.n	800a840 <_printf_float+0x398>
 800a7ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a7d2:	eba2 0903 	sub.w	r9, r2, r3
 800a7d6:	9b05      	ldr	r3, [sp, #20]
 800a7d8:	1ad2      	subs	r2, r2, r3
 800a7da:	4591      	cmp	r9, r2
 800a7dc:	bfa8      	it	ge
 800a7de:	4691      	movge	r9, r2
 800a7e0:	f1b9 0f00 	cmp.w	r9, #0
 800a7e4:	dc35      	bgt.n	800a852 <_printf_float+0x3aa>
 800a7e6:	f04f 0800 	mov.w	r8, #0
 800a7ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7ee:	f104 0a1a 	add.w	sl, r4, #26
 800a7f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7f6:	1a9b      	subs	r3, r3, r2
 800a7f8:	eba3 0309 	sub.w	r3, r3, r9
 800a7fc:	4543      	cmp	r3, r8
 800a7fe:	f77f af79 	ble.w	800a6f4 <_printf_float+0x24c>
 800a802:	2301      	movs	r3, #1
 800a804:	4652      	mov	r2, sl
 800a806:	4631      	mov	r1, r6
 800a808:	4628      	mov	r0, r5
 800a80a:	47b8      	blx	r7
 800a80c:	3001      	adds	r0, #1
 800a80e:	f43f aeaa 	beq.w	800a566 <_printf_float+0xbe>
 800a812:	f108 0801 	add.w	r8, r8, #1
 800a816:	e7ec      	b.n	800a7f2 <_printf_float+0x34a>
 800a818:	4613      	mov	r3, r2
 800a81a:	4631      	mov	r1, r6
 800a81c:	4642      	mov	r2, r8
 800a81e:	4628      	mov	r0, r5
 800a820:	47b8      	blx	r7
 800a822:	3001      	adds	r0, #1
 800a824:	d1c0      	bne.n	800a7a8 <_printf_float+0x300>
 800a826:	e69e      	b.n	800a566 <_printf_float+0xbe>
 800a828:	2301      	movs	r3, #1
 800a82a:	4631      	mov	r1, r6
 800a82c:	4628      	mov	r0, r5
 800a82e:	9205      	str	r2, [sp, #20]
 800a830:	47b8      	blx	r7
 800a832:	3001      	adds	r0, #1
 800a834:	f43f ae97 	beq.w	800a566 <_printf_float+0xbe>
 800a838:	9a05      	ldr	r2, [sp, #20]
 800a83a:	f10b 0b01 	add.w	fp, fp, #1
 800a83e:	e7b9      	b.n	800a7b4 <_printf_float+0x30c>
 800a840:	ee18 3a10 	vmov	r3, s16
 800a844:	4652      	mov	r2, sl
 800a846:	4631      	mov	r1, r6
 800a848:	4628      	mov	r0, r5
 800a84a:	47b8      	blx	r7
 800a84c:	3001      	adds	r0, #1
 800a84e:	d1be      	bne.n	800a7ce <_printf_float+0x326>
 800a850:	e689      	b.n	800a566 <_printf_float+0xbe>
 800a852:	9a05      	ldr	r2, [sp, #20]
 800a854:	464b      	mov	r3, r9
 800a856:	4442      	add	r2, r8
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	d1c1      	bne.n	800a7e6 <_printf_float+0x33e>
 800a862:	e680      	b.n	800a566 <_printf_float+0xbe>
 800a864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a866:	2a01      	cmp	r2, #1
 800a868:	dc01      	bgt.n	800a86e <_printf_float+0x3c6>
 800a86a:	07db      	lsls	r3, r3, #31
 800a86c:	d53a      	bpl.n	800a8e4 <_printf_float+0x43c>
 800a86e:	2301      	movs	r3, #1
 800a870:	4642      	mov	r2, r8
 800a872:	4631      	mov	r1, r6
 800a874:	4628      	mov	r0, r5
 800a876:	47b8      	blx	r7
 800a878:	3001      	adds	r0, #1
 800a87a:	f43f ae74 	beq.w	800a566 <_printf_float+0xbe>
 800a87e:	ee18 3a10 	vmov	r3, s16
 800a882:	4652      	mov	r2, sl
 800a884:	4631      	mov	r1, r6
 800a886:	4628      	mov	r0, r5
 800a888:	47b8      	blx	r7
 800a88a:	3001      	adds	r0, #1
 800a88c:	f43f ae6b 	beq.w	800a566 <_printf_float+0xbe>
 800a890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a894:	2200      	movs	r2, #0
 800a896:	2300      	movs	r3, #0
 800a898:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a89c:	f7f6 f944 	bl	8000b28 <__aeabi_dcmpeq>
 800a8a0:	b9d8      	cbnz	r0, 800a8da <_printf_float+0x432>
 800a8a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a8a6:	f108 0201 	add.w	r2, r8, #1
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	47b8      	blx	r7
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	d10e      	bne.n	800a8d2 <_printf_float+0x42a>
 800a8b4:	e657      	b.n	800a566 <_printf_float+0xbe>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f43f ae50 	beq.w	800a566 <_printf_float+0xbe>
 800a8c6:	f108 0801 	add.w	r8, r8, #1
 800a8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	4543      	cmp	r3, r8
 800a8d0:	dcf1      	bgt.n	800a8b6 <_printf_float+0x40e>
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a8d8:	e6da      	b.n	800a690 <_printf_float+0x1e8>
 800a8da:	f04f 0800 	mov.w	r8, #0
 800a8de:	f104 0a1a 	add.w	sl, r4, #26
 800a8e2:	e7f2      	b.n	800a8ca <_printf_float+0x422>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	4642      	mov	r2, r8
 800a8e8:	e7df      	b.n	800a8aa <_printf_float+0x402>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	464a      	mov	r2, r9
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	47b8      	blx	r7
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	f43f ae36 	beq.w	800a566 <_printf_float+0xbe>
 800a8fa:	f108 0801 	add.w	r8, r8, #1
 800a8fe:	68e3      	ldr	r3, [r4, #12]
 800a900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a902:	1a5b      	subs	r3, r3, r1
 800a904:	4543      	cmp	r3, r8
 800a906:	dcf0      	bgt.n	800a8ea <_printf_float+0x442>
 800a908:	e6f8      	b.n	800a6fc <_printf_float+0x254>
 800a90a:	f04f 0800 	mov.w	r8, #0
 800a90e:	f104 0919 	add.w	r9, r4, #25
 800a912:	e7f4      	b.n	800a8fe <_printf_float+0x456>

0800a914 <_printf_common>:
 800a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	4616      	mov	r6, r2
 800a91a:	4699      	mov	r9, r3
 800a91c:	688a      	ldr	r2, [r1, #8]
 800a91e:	690b      	ldr	r3, [r1, #16]
 800a920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a924:	4293      	cmp	r3, r2
 800a926:	bfb8      	it	lt
 800a928:	4613      	movlt	r3, r2
 800a92a:	6033      	str	r3, [r6, #0]
 800a92c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a930:	4607      	mov	r7, r0
 800a932:	460c      	mov	r4, r1
 800a934:	b10a      	cbz	r2, 800a93a <_printf_common+0x26>
 800a936:	3301      	adds	r3, #1
 800a938:	6033      	str	r3, [r6, #0]
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	0699      	lsls	r1, r3, #26
 800a93e:	bf42      	ittt	mi
 800a940:	6833      	ldrmi	r3, [r6, #0]
 800a942:	3302      	addmi	r3, #2
 800a944:	6033      	strmi	r3, [r6, #0]
 800a946:	6825      	ldr	r5, [r4, #0]
 800a948:	f015 0506 	ands.w	r5, r5, #6
 800a94c:	d106      	bne.n	800a95c <_printf_common+0x48>
 800a94e:	f104 0a19 	add.w	sl, r4, #25
 800a952:	68e3      	ldr	r3, [r4, #12]
 800a954:	6832      	ldr	r2, [r6, #0]
 800a956:	1a9b      	subs	r3, r3, r2
 800a958:	42ab      	cmp	r3, r5
 800a95a:	dc26      	bgt.n	800a9aa <_printf_common+0x96>
 800a95c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a960:	1e13      	subs	r3, r2, #0
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	bf18      	it	ne
 800a966:	2301      	movne	r3, #1
 800a968:	0692      	lsls	r2, r2, #26
 800a96a:	d42b      	bmi.n	800a9c4 <_printf_common+0xb0>
 800a96c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a970:	4649      	mov	r1, r9
 800a972:	4638      	mov	r0, r7
 800a974:	47c0      	blx	r8
 800a976:	3001      	adds	r0, #1
 800a978:	d01e      	beq.n	800a9b8 <_printf_common+0xa4>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	6922      	ldr	r2, [r4, #16]
 800a97e:	f003 0306 	and.w	r3, r3, #6
 800a982:	2b04      	cmp	r3, #4
 800a984:	bf02      	ittt	eq
 800a986:	68e5      	ldreq	r5, [r4, #12]
 800a988:	6833      	ldreq	r3, [r6, #0]
 800a98a:	1aed      	subeq	r5, r5, r3
 800a98c:	68a3      	ldr	r3, [r4, #8]
 800a98e:	bf0c      	ite	eq
 800a990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a994:	2500      	movne	r5, #0
 800a996:	4293      	cmp	r3, r2
 800a998:	bfc4      	itt	gt
 800a99a:	1a9b      	subgt	r3, r3, r2
 800a99c:	18ed      	addgt	r5, r5, r3
 800a99e:	2600      	movs	r6, #0
 800a9a0:	341a      	adds	r4, #26
 800a9a2:	42b5      	cmp	r5, r6
 800a9a4:	d11a      	bne.n	800a9dc <_printf_common+0xc8>
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	e008      	b.n	800a9bc <_printf_common+0xa8>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	4652      	mov	r2, sl
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	47c0      	blx	r8
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d103      	bne.n	800a9c0 <_printf_common+0xac>
 800a9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	e7c6      	b.n	800a952 <_printf_common+0x3e>
 800a9c4:	18e1      	adds	r1, r4, r3
 800a9c6:	1c5a      	adds	r2, r3, #1
 800a9c8:	2030      	movs	r0, #48	; 0x30
 800a9ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9ce:	4422      	add	r2, r4
 800a9d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9d8:	3302      	adds	r3, #2
 800a9da:	e7c7      	b.n	800a96c <_printf_common+0x58>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	4622      	mov	r2, r4
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	47c0      	blx	r8
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d0e6      	beq.n	800a9b8 <_printf_common+0xa4>
 800a9ea:	3601      	adds	r6, #1
 800a9ec:	e7d9      	b.n	800a9a2 <_printf_common+0x8e>
	...

0800a9f0 <_printf_i>:
 800a9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f4:	7e0f      	ldrb	r7, [r1, #24]
 800a9f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9f8:	2f78      	cmp	r7, #120	; 0x78
 800a9fa:	4691      	mov	r9, r2
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	469a      	mov	sl, r3
 800aa02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa06:	d807      	bhi.n	800aa18 <_printf_i+0x28>
 800aa08:	2f62      	cmp	r7, #98	; 0x62
 800aa0a:	d80a      	bhi.n	800aa22 <_printf_i+0x32>
 800aa0c:	2f00      	cmp	r7, #0
 800aa0e:	f000 80d4 	beq.w	800abba <_printf_i+0x1ca>
 800aa12:	2f58      	cmp	r7, #88	; 0x58
 800aa14:	f000 80c0 	beq.w	800ab98 <_printf_i+0x1a8>
 800aa18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa20:	e03a      	b.n	800aa98 <_printf_i+0xa8>
 800aa22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa26:	2b15      	cmp	r3, #21
 800aa28:	d8f6      	bhi.n	800aa18 <_printf_i+0x28>
 800aa2a:	a101      	add	r1, pc, #4	; (adr r1, 800aa30 <_printf_i+0x40>)
 800aa2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa30:	0800aa89 	.word	0x0800aa89
 800aa34:	0800aa9d 	.word	0x0800aa9d
 800aa38:	0800aa19 	.word	0x0800aa19
 800aa3c:	0800aa19 	.word	0x0800aa19
 800aa40:	0800aa19 	.word	0x0800aa19
 800aa44:	0800aa19 	.word	0x0800aa19
 800aa48:	0800aa9d 	.word	0x0800aa9d
 800aa4c:	0800aa19 	.word	0x0800aa19
 800aa50:	0800aa19 	.word	0x0800aa19
 800aa54:	0800aa19 	.word	0x0800aa19
 800aa58:	0800aa19 	.word	0x0800aa19
 800aa5c:	0800aba1 	.word	0x0800aba1
 800aa60:	0800aac9 	.word	0x0800aac9
 800aa64:	0800ab5b 	.word	0x0800ab5b
 800aa68:	0800aa19 	.word	0x0800aa19
 800aa6c:	0800aa19 	.word	0x0800aa19
 800aa70:	0800abc3 	.word	0x0800abc3
 800aa74:	0800aa19 	.word	0x0800aa19
 800aa78:	0800aac9 	.word	0x0800aac9
 800aa7c:	0800aa19 	.word	0x0800aa19
 800aa80:	0800aa19 	.word	0x0800aa19
 800aa84:	0800ab63 	.word	0x0800ab63
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	1d1a      	adds	r2, r3, #4
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	602a      	str	r2, [r5, #0]
 800aa90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e09f      	b.n	800abdc <_printf_i+0x1ec>
 800aa9c:	6820      	ldr	r0, [r4, #0]
 800aa9e:	682b      	ldr	r3, [r5, #0]
 800aaa0:	0607      	lsls	r7, r0, #24
 800aaa2:	f103 0104 	add.w	r1, r3, #4
 800aaa6:	6029      	str	r1, [r5, #0]
 800aaa8:	d501      	bpl.n	800aaae <_printf_i+0xbe>
 800aaaa:	681e      	ldr	r6, [r3, #0]
 800aaac:	e003      	b.n	800aab6 <_printf_i+0xc6>
 800aaae:	0646      	lsls	r6, r0, #25
 800aab0:	d5fb      	bpl.n	800aaaa <_printf_i+0xba>
 800aab2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	da03      	bge.n	800aac2 <_printf_i+0xd2>
 800aaba:	232d      	movs	r3, #45	; 0x2d
 800aabc:	4276      	negs	r6, r6
 800aabe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aac2:	485a      	ldr	r0, [pc, #360]	; (800ac2c <_printf_i+0x23c>)
 800aac4:	230a      	movs	r3, #10
 800aac6:	e012      	b.n	800aaee <_printf_i+0xfe>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	6820      	ldr	r0, [r4, #0]
 800aacc:	1d19      	adds	r1, r3, #4
 800aace:	6029      	str	r1, [r5, #0]
 800aad0:	0605      	lsls	r5, r0, #24
 800aad2:	d501      	bpl.n	800aad8 <_printf_i+0xe8>
 800aad4:	681e      	ldr	r6, [r3, #0]
 800aad6:	e002      	b.n	800aade <_printf_i+0xee>
 800aad8:	0641      	lsls	r1, r0, #25
 800aada:	d5fb      	bpl.n	800aad4 <_printf_i+0xe4>
 800aadc:	881e      	ldrh	r6, [r3, #0]
 800aade:	4853      	ldr	r0, [pc, #332]	; (800ac2c <_printf_i+0x23c>)
 800aae0:	2f6f      	cmp	r7, #111	; 0x6f
 800aae2:	bf0c      	ite	eq
 800aae4:	2308      	moveq	r3, #8
 800aae6:	230a      	movne	r3, #10
 800aae8:	2100      	movs	r1, #0
 800aaea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaee:	6865      	ldr	r5, [r4, #4]
 800aaf0:	60a5      	str	r5, [r4, #8]
 800aaf2:	2d00      	cmp	r5, #0
 800aaf4:	bfa2      	ittt	ge
 800aaf6:	6821      	ldrge	r1, [r4, #0]
 800aaf8:	f021 0104 	bicge.w	r1, r1, #4
 800aafc:	6021      	strge	r1, [r4, #0]
 800aafe:	b90e      	cbnz	r6, 800ab04 <_printf_i+0x114>
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	d04b      	beq.n	800ab9c <_printf_i+0x1ac>
 800ab04:	4615      	mov	r5, r2
 800ab06:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab0a:	fb03 6711 	mls	r7, r3, r1, r6
 800ab0e:	5dc7      	ldrb	r7, [r0, r7]
 800ab10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab14:	4637      	mov	r7, r6
 800ab16:	42bb      	cmp	r3, r7
 800ab18:	460e      	mov	r6, r1
 800ab1a:	d9f4      	bls.n	800ab06 <_printf_i+0x116>
 800ab1c:	2b08      	cmp	r3, #8
 800ab1e:	d10b      	bne.n	800ab38 <_printf_i+0x148>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	07de      	lsls	r6, r3, #31
 800ab24:	d508      	bpl.n	800ab38 <_printf_i+0x148>
 800ab26:	6923      	ldr	r3, [r4, #16]
 800ab28:	6861      	ldr	r1, [r4, #4]
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	bfde      	ittt	le
 800ab2e:	2330      	movle	r3, #48	; 0x30
 800ab30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab38:	1b52      	subs	r2, r2, r5
 800ab3a:	6122      	str	r2, [r4, #16]
 800ab3c:	f8cd a000 	str.w	sl, [sp]
 800ab40:	464b      	mov	r3, r9
 800ab42:	aa03      	add	r2, sp, #12
 800ab44:	4621      	mov	r1, r4
 800ab46:	4640      	mov	r0, r8
 800ab48:	f7ff fee4 	bl	800a914 <_printf_common>
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d14a      	bne.n	800abe6 <_printf_i+0x1f6>
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	b004      	add	sp, #16
 800ab56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	f043 0320 	orr.w	r3, r3, #32
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	4833      	ldr	r0, [pc, #204]	; (800ac30 <_printf_i+0x240>)
 800ab64:	2778      	movs	r7, #120	; 0x78
 800ab66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	6829      	ldr	r1, [r5, #0]
 800ab6e:	061f      	lsls	r7, r3, #24
 800ab70:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab74:	d402      	bmi.n	800ab7c <_printf_i+0x18c>
 800ab76:	065f      	lsls	r7, r3, #25
 800ab78:	bf48      	it	mi
 800ab7a:	b2b6      	uxthmi	r6, r6
 800ab7c:	07df      	lsls	r7, r3, #31
 800ab7e:	bf48      	it	mi
 800ab80:	f043 0320 	orrmi.w	r3, r3, #32
 800ab84:	6029      	str	r1, [r5, #0]
 800ab86:	bf48      	it	mi
 800ab88:	6023      	strmi	r3, [r4, #0]
 800ab8a:	b91e      	cbnz	r6, 800ab94 <_printf_i+0x1a4>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	f023 0320 	bic.w	r3, r3, #32
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	2310      	movs	r3, #16
 800ab96:	e7a7      	b.n	800aae8 <_printf_i+0xf8>
 800ab98:	4824      	ldr	r0, [pc, #144]	; (800ac2c <_printf_i+0x23c>)
 800ab9a:	e7e4      	b.n	800ab66 <_printf_i+0x176>
 800ab9c:	4615      	mov	r5, r2
 800ab9e:	e7bd      	b.n	800ab1c <_printf_i+0x12c>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	6826      	ldr	r6, [r4, #0]
 800aba4:	6961      	ldr	r1, [r4, #20]
 800aba6:	1d18      	adds	r0, r3, #4
 800aba8:	6028      	str	r0, [r5, #0]
 800abaa:	0635      	lsls	r5, r6, #24
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	d501      	bpl.n	800abb4 <_printf_i+0x1c4>
 800abb0:	6019      	str	r1, [r3, #0]
 800abb2:	e002      	b.n	800abba <_printf_i+0x1ca>
 800abb4:	0670      	lsls	r0, r6, #25
 800abb6:	d5fb      	bpl.n	800abb0 <_printf_i+0x1c0>
 800abb8:	8019      	strh	r1, [r3, #0]
 800abba:	2300      	movs	r3, #0
 800abbc:	6123      	str	r3, [r4, #16]
 800abbe:	4615      	mov	r5, r2
 800abc0:	e7bc      	b.n	800ab3c <_printf_i+0x14c>
 800abc2:	682b      	ldr	r3, [r5, #0]
 800abc4:	1d1a      	adds	r2, r3, #4
 800abc6:	602a      	str	r2, [r5, #0]
 800abc8:	681d      	ldr	r5, [r3, #0]
 800abca:	6862      	ldr	r2, [r4, #4]
 800abcc:	2100      	movs	r1, #0
 800abce:	4628      	mov	r0, r5
 800abd0:	f7f5 fb2e 	bl	8000230 <memchr>
 800abd4:	b108      	cbz	r0, 800abda <_printf_i+0x1ea>
 800abd6:	1b40      	subs	r0, r0, r5
 800abd8:	6060      	str	r0, [r4, #4]
 800abda:	6863      	ldr	r3, [r4, #4]
 800abdc:	6123      	str	r3, [r4, #16]
 800abde:	2300      	movs	r3, #0
 800abe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abe4:	e7aa      	b.n	800ab3c <_printf_i+0x14c>
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	462a      	mov	r2, r5
 800abea:	4649      	mov	r1, r9
 800abec:	4640      	mov	r0, r8
 800abee:	47d0      	blx	sl
 800abf0:	3001      	adds	r0, #1
 800abf2:	d0ad      	beq.n	800ab50 <_printf_i+0x160>
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	079b      	lsls	r3, r3, #30
 800abf8:	d413      	bmi.n	800ac22 <_printf_i+0x232>
 800abfa:	68e0      	ldr	r0, [r4, #12]
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	4298      	cmp	r0, r3
 800ac00:	bfb8      	it	lt
 800ac02:	4618      	movlt	r0, r3
 800ac04:	e7a6      	b.n	800ab54 <_printf_i+0x164>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4632      	mov	r2, r6
 800ac0a:	4649      	mov	r1, r9
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	47d0      	blx	sl
 800ac10:	3001      	adds	r0, #1
 800ac12:	d09d      	beq.n	800ab50 <_printf_i+0x160>
 800ac14:	3501      	adds	r5, #1
 800ac16:	68e3      	ldr	r3, [r4, #12]
 800ac18:	9903      	ldr	r1, [sp, #12]
 800ac1a:	1a5b      	subs	r3, r3, r1
 800ac1c:	42ab      	cmp	r3, r5
 800ac1e:	dcf2      	bgt.n	800ac06 <_printf_i+0x216>
 800ac20:	e7eb      	b.n	800abfa <_printf_i+0x20a>
 800ac22:	2500      	movs	r5, #0
 800ac24:	f104 0619 	add.w	r6, r4, #25
 800ac28:	e7f5      	b.n	800ac16 <_printf_i+0x226>
 800ac2a:	bf00      	nop
 800ac2c:	0800e56b 	.word	0x0800e56b
 800ac30:	0800e57c 	.word	0x0800e57c

0800ac34 <std>:
 800ac34:	2300      	movs	r3, #0
 800ac36:	b510      	push	{r4, lr}
 800ac38:	4604      	mov	r4, r0
 800ac3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac42:	6083      	str	r3, [r0, #8]
 800ac44:	8181      	strh	r1, [r0, #12]
 800ac46:	6643      	str	r3, [r0, #100]	; 0x64
 800ac48:	81c2      	strh	r2, [r0, #14]
 800ac4a:	6183      	str	r3, [r0, #24]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	2208      	movs	r2, #8
 800ac50:	305c      	adds	r0, #92	; 0x5c
 800ac52:	f000 f923 	bl	800ae9c <memset>
 800ac56:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <std+0x38>)
 800ac58:	6263      	str	r3, [r4, #36]	; 0x24
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <std+0x3c>)
 800ac5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac5e:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <std+0x40>)
 800ac60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac62:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <std+0x44>)
 800ac64:	6224      	str	r4, [r4, #32]
 800ac66:	6323      	str	r3, [r4, #48]	; 0x30
 800ac68:	bd10      	pop	{r4, pc}
 800ac6a:	bf00      	nop
 800ac6c:	0800add5 	.word	0x0800add5
 800ac70:	0800adf7 	.word	0x0800adf7
 800ac74:	0800ae2f 	.word	0x0800ae2f
 800ac78:	0800ae53 	.word	0x0800ae53

0800ac7c <stdio_exit_handler>:
 800ac7c:	4a02      	ldr	r2, [pc, #8]	; (800ac88 <stdio_exit_handler+0xc>)
 800ac7e:	4903      	ldr	r1, [pc, #12]	; (800ac8c <stdio_exit_handler+0x10>)
 800ac80:	4803      	ldr	r0, [pc, #12]	; (800ac90 <stdio_exit_handler+0x14>)
 800ac82:	f000 b869 	b.w	800ad58 <_fwalk_sglue>
 800ac86:	bf00      	nop
 800ac88:	20001644 	.word	0x20001644
 800ac8c:	0800c971 	.word	0x0800c971
 800ac90:	20001650 	.word	0x20001650

0800ac94 <cleanup_stdio>:
 800ac94:	6841      	ldr	r1, [r0, #4]
 800ac96:	4b0c      	ldr	r3, [pc, #48]	; (800acc8 <cleanup_stdio+0x34>)
 800ac98:	4299      	cmp	r1, r3
 800ac9a:	b510      	push	{r4, lr}
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	d001      	beq.n	800aca4 <cleanup_stdio+0x10>
 800aca0:	f001 fe66 	bl	800c970 <_fflush_r>
 800aca4:	68a1      	ldr	r1, [r4, #8]
 800aca6:	4b09      	ldr	r3, [pc, #36]	; (800accc <cleanup_stdio+0x38>)
 800aca8:	4299      	cmp	r1, r3
 800acaa:	d002      	beq.n	800acb2 <cleanup_stdio+0x1e>
 800acac:	4620      	mov	r0, r4
 800acae:	f001 fe5f 	bl	800c970 <_fflush_r>
 800acb2:	68e1      	ldr	r1, [r4, #12]
 800acb4:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <cleanup_stdio+0x3c>)
 800acb6:	4299      	cmp	r1, r3
 800acb8:	d004      	beq.n	800acc4 <cleanup_stdio+0x30>
 800acba:	4620      	mov	r0, r4
 800acbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acc0:	f001 be56 	b.w	800c970 <_fflush_r>
 800acc4:	bd10      	pop	{r4, pc}
 800acc6:	bf00      	nop
 800acc8:	2000a288 	.word	0x2000a288
 800accc:	2000a2f0 	.word	0x2000a2f0
 800acd0:	2000a358 	.word	0x2000a358

0800acd4 <global_stdio_init.part.0>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <global_stdio_init.part.0+0x30>)
 800acd8:	4c0b      	ldr	r4, [pc, #44]	; (800ad08 <global_stdio_init.part.0+0x34>)
 800acda:	4a0c      	ldr	r2, [pc, #48]	; (800ad0c <global_stdio_init.part.0+0x38>)
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	4620      	mov	r0, r4
 800ace0:	2200      	movs	r2, #0
 800ace2:	2104      	movs	r1, #4
 800ace4:	f7ff ffa6 	bl	800ac34 <std>
 800ace8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800acec:	2201      	movs	r2, #1
 800acee:	2109      	movs	r1, #9
 800acf0:	f7ff ffa0 	bl	800ac34 <std>
 800acf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800acf8:	2202      	movs	r2, #2
 800acfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acfe:	2112      	movs	r1, #18
 800ad00:	f7ff bf98 	b.w	800ac34 <std>
 800ad04:	2000a3c0 	.word	0x2000a3c0
 800ad08:	2000a288 	.word	0x2000a288
 800ad0c:	0800ac7d 	.word	0x0800ac7d

0800ad10 <__sfp_lock_acquire>:
 800ad10:	4801      	ldr	r0, [pc, #4]	; (800ad18 <__sfp_lock_acquire+0x8>)
 800ad12:	f000 b93f 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800ad16:	bf00      	nop
 800ad18:	2000a3c9 	.word	0x2000a3c9

0800ad1c <__sfp_lock_release>:
 800ad1c:	4801      	ldr	r0, [pc, #4]	; (800ad24 <__sfp_lock_release+0x8>)
 800ad1e:	f000 b93a 	b.w	800af96 <__retarget_lock_release_recursive>
 800ad22:	bf00      	nop
 800ad24:	2000a3c9 	.word	0x2000a3c9

0800ad28 <__sinit>:
 800ad28:	b510      	push	{r4, lr}
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	f7ff fff0 	bl	800ad10 <__sfp_lock_acquire>
 800ad30:	6a23      	ldr	r3, [r4, #32]
 800ad32:	b11b      	cbz	r3, 800ad3c <__sinit+0x14>
 800ad34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad38:	f7ff bff0 	b.w	800ad1c <__sfp_lock_release>
 800ad3c:	4b04      	ldr	r3, [pc, #16]	; (800ad50 <__sinit+0x28>)
 800ad3e:	6223      	str	r3, [r4, #32]
 800ad40:	4b04      	ldr	r3, [pc, #16]	; (800ad54 <__sinit+0x2c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1f5      	bne.n	800ad34 <__sinit+0xc>
 800ad48:	f7ff ffc4 	bl	800acd4 <global_stdio_init.part.0>
 800ad4c:	e7f2      	b.n	800ad34 <__sinit+0xc>
 800ad4e:	bf00      	nop
 800ad50:	0800ac95 	.word	0x0800ac95
 800ad54:	2000a3c0 	.word	0x2000a3c0

0800ad58 <_fwalk_sglue>:
 800ad58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad5c:	4607      	mov	r7, r0
 800ad5e:	4688      	mov	r8, r1
 800ad60:	4614      	mov	r4, r2
 800ad62:	2600      	movs	r6, #0
 800ad64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad68:	f1b9 0901 	subs.w	r9, r9, #1
 800ad6c:	d505      	bpl.n	800ad7a <_fwalk_sglue+0x22>
 800ad6e:	6824      	ldr	r4, [r4, #0]
 800ad70:	2c00      	cmp	r4, #0
 800ad72:	d1f7      	bne.n	800ad64 <_fwalk_sglue+0xc>
 800ad74:	4630      	mov	r0, r6
 800ad76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad7a:	89ab      	ldrh	r3, [r5, #12]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d907      	bls.n	800ad90 <_fwalk_sglue+0x38>
 800ad80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad84:	3301      	adds	r3, #1
 800ad86:	d003      	beq.n	800ad90 <_fwalk_sglue+0x38>
 800ad88:	4629      	mov	r1, r5
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	47c0      	blx	r8
 800ad8e:	4306      	orrs	r6, r0
 800ad90:	3568      	adds	r5, #104	; 0x68
 800ad92:	e7e9      	b.n	800ad68 <_fwalk_sglue+0x10>

0800ad94 <siprintf>:
 800ad94:	b40e      	push	{r1, r2, r3}
 800ad96:	b500      	push	{lr}
 800ad98:	b09c      	sub	sp, #112	; 0x70
 800ad9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ad9c:	9002      	str	r0, [sp, #8]
 800ad9e:	9006      	str	r0, [sp, #24]
 800ada0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ada4:	4809      	ldr	r0, [pc, #36]	; (800adcc <siprintf+0x38>)
 800ada6:	9107      	str	r1, [sp, #28]
 800ada8:	9104      	str	r1, [sp, #16]
 800adaa:	4909      	ldr	r1, [pc, #36]	; (800add0 <siprintf+0x3c>)
 800adac:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb0:	9105      	str	r1, [sp, #20]
 800adb2:	6800      	ldr	r0, [r0, #0]
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	a902      	add	r1, sp, #8
 800adb8:	f001 fc56 	bl	800c668 <_svfiprintf_r>
 800adbc:	9b02      	ldr	r3, [sp, #8]
 800adbe:	2200      	movs	r2, #0
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	b01c      	add	sp, #112	; 0x70
 800adc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adc8:	b003      	add	sp, #12
 800adca:	4770      	bx	lr
 800adcc:	2000169c 	.word	0x2000169c
 800add0:	ffff0208 	.word	0xffff0208

0800add4 <__sread>:
 800add4:	b510      	push	{r4, lr}
 800add6:	460c      	mov	r4, r1
 800add8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800addc:	f000 f88c 	bl	800aef8 <_read_r>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	bfab      	itete	ge
 800ade4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ade6:	89a3      	ldrhlt	r3, [r4, #12]
 800ade8:	181b      	addge	r3, r3, r0
 800adea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adee:	bfac      	ite	ge
 800adf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800adf2:	81a3      	strhlt	r3, [r4, #12]
 800adf4:	bd10      	pop	{r4, pc}

0800adf6 <__swrite>:
 800adf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adfa:	461f      	mov	r7, r3
 800adfc:	898b      	ldrh	r3, [r1, #12]
 800adfe:	05db      	lsls	r3, r3, #23
 800ae00:	4605      	mov	r5, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	4616      	mov	r6, r2
 800ae06:	d505      	bpl.n	800ae14 <__swrite+0x1e>
 800ae08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f000 f860 	bl	800aed4 <_lseek_r>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	4632      	mov	r2, r6
 800ae22:	463b      	mov	r3, r7
 800ae24:	4628      	mov	r0, r5
 800ae26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae2a:	f000 b877 	b.w	800af1c <_write_r>

0800ae2e <__sseek>:
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	460c      	mov	r4, r1
 800ae32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae36:	f000 f84d 	bl	800aed4 <_lseek_r>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	bf15      	itete	ne
 800ae40:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae4a:	81a3      	strheq	r3, [r4, #12]
 800ae4c:	bf18      	it	ne
 800ae4e:	81a3      	strhne	r3, [r4, #12]
 800ae50:	bd10      	pop	{r4, pc}

0800ae52 <__sclose>:
 800ae52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae56:	f000 b82d 	b.w	800aeb4 <_close_r>
	...

0800ae5c <_vsiprintf_r>:
 800ae5c:	b500      	push	{lr}
 800ae5e:	b09b      	sub	sp, #108	; 0x6c
 800ae60:	9100      	str	r1, [sp, #0]
 800ae62:	9104      	str	r1, [sp, #16]
 800ae64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae68:	9105      	str	r1, [sp, #20]
 800ae6a:	9102      	str	r1, [sp, #8]
 800ae6c:	4905      	ldr	r1, [pc, #20]	; (800ae84 <_vsiprintf_r+0x28>)
 800ae6e:	9103      	str	r1, [sp, #12]
 800ae70:	4669      	mov	r1, sp
 800ae72:	f001 fbf9 	bl	800c668 <_svfiprintf_r>
 800ae76:	9b00      	ldr	r3, [sp, #0]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]
 800ae7c:	b01b      	add	sp, #108	; 0x6c
 800ae7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae82:	bf00      	nop
 800ae84:	ffff0208 	.word	0xffff0208

0800ae88 <vsiprintf>:
 800ae88:	4613      	mov	r3, r2
 800ae8a:	460a      	mov	r2, r1
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	4802      	ldr	r0, [pc, #8]	; (800ae98 <vsiprintf+0x10>)
 800ae90:	6800      	ldr	r0, [r0, #0]
 800ae92:	f7ff bfe3 	b.w	800ae5c <_vsiprintf_r>
 800ae96:	bf00      	nop
 800ae98:	2000169c 	.word	0x2000169c

0800ae9c <memset>:
 800ae9c:	4402      	add	r2, r0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d100      	bne.n	800aea6 <memset+0xa>
 800aea4:	4770      	bx	lr
 800aea6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeaa:	e7f9      	b.n	800aea0 <memset+0x4>

0800aeac <_localeconv_r>:
 800aeac:	4800      	ldr	r0, [pc, #0]	; (800aeb0 <_localeconv_r+0x4>)
 800aeae:	4770      	bx	lr
 800aeb0:	20001790 	.word	0x20001790

0800aeb4 <_close_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d06      	ldr	r5, [pc, #24]	; (800aed0 <_close_r+0x1c>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	f7f6 fa4b 	bl	800135a <_close>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_close_r+0x1a>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_close_r+0x1a>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	2000a3c4 	.word	0x2000a3c4

0800aed4 <_lseek_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d07      	ldr	r5, [pc, #28]	; (800aef4 <_lseek_r+0x20>)
 800aed8:	4604      	mov	r4, r0
 800aeda:	4608      	mov	r0, r1
 800aedc:	4611      	mov	r1, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	602a      	str	r2, [r5, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7f6 fa60 	bl	80013a8 <_lseek>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_lseek_r+0x1e>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_lseek_r+0x1e>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	2000a3c4 	.word	0x2000a3c4

0800aef8 <_read_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d07      	ldr	r5, [pc, #28]	; (800af18 <_read_r+0x20>)
 800aefc:	4604      	mov	r4, r0
 800aefe:	4608      	mov	r0, r1
 800af00:	4611      	mov	r1, r2
 800af02:	2200      	movs	r2, #0
 800af04:	602a      	str	r2, [r5, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f7f6 f9ee 	bl	80012e8 <_read>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_read_r+0x1e>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_read_r+0x1e>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	2000a3c4 	.word	0x2000a3c4

0800af1c <_write_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4d07      	ldr	r5, [pc, #28]	; (800af3c <_write_r+0x20>)
 800af20:	4604      	mov	r4, r0
 800af22:	4608      	mov	r0, r1
 800af24:	4611      	mov	r1, r2
 800af26:	2200      	movs	r2, #0
 800af28:	602a      	str	r2, [r5, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	f7f6 f9f9 	bl	8001322 <_write>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_write_r+0x1e>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_write_r+0x1e>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	2000a3c4 	.word	0x2000a3c4

0800af40 <__errno>:
 800af40:	4b01      	ldr	r3, [pc, #4]	; (800af48 <__errno+0x8>)
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	2000169c 	.word	0x2000169c

0800af4c <__libc_init_array>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	4d0d      	ldr	r5, [pc, #52]	; (800af84 <__libc_init_array+0x38>)
 800af50:	4c0d      	ldr	r4, [pc, #52]	; (800af88 <__libc_init_array+0x3c>)
 800af52:	1b64      	subs	r4, r4, r5
 800af54:	10a4      	asrs	r4, r4, #2
 800af56:	2600      	movs	r6, #0
 800af58:	42a6      	cmp	r6, r4
 800af5a:	d109      	bne.n	800af70 <__libc_init_array+0x24>
 800af5c:	4d0b      	ldr	r5, [pc, #44]	; (800af8c <__libc_init_array+0x40>)
 800af5e:	4c0c      	ldr	r4, [pc, #48]	; (800af90 <__libc_init_array+0x44>)
 800af60:	f002 f89c 	bl	800d09c <_init>
 800af64:	1b64      	subs	r4, r4, r5
 800af66:	10a4      	asrs	r4, r4, #2
 800af68:	2600      	movs	r6, #0
 800af6a:	42a6      	cmp	r6, r4
 800af6c:	d105      	bne.n	800af7a <__libc_init_array+0x2e>
 800af6e:	bd70      	pop	{r4, r5, r6, pc}
 800af70:	f855 3b04 	ldr.w	r3, [r5], #4
 800af74:	4798      	blx	r3
 800af76:	3601      	adds	r6, #1
 800af78:	e7ee      	b.n	800af58 <__libc_init_array+0xc>
 800af7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af7e:	4798      	blx	r3
 800af80:	3601      	adds	r6, #1
 800af82:	e7f2      	b.n	800af6a <__libc_init_array+0x1e>
 800af84:	0800e7d4 	.word	0x0800e7d4
 800af88:	0800e7d4 	.word	0x0800e7d4
 800af8c:	0800e7d4 	.word	0x0800e7d4
 800af90:	0800e7d8 	.word	0x0800e7d8

0800af94 <__retarget_lock_acquire_recursive>:
 800af94:	4770      	bx	lr

0800af96 <__retarget_lock_release_recursive>:
 800af96:	4770      	bx	lr

0800af98 <strcpy>:
 800af98:	4603      	mov	r3, r0
 800af9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af9e:	f803 2b01 	strb.w	r2, [r3], #1
 800afa2:	2a00      	cmp	r2, #0
 800afa4:	d1f9      	bne.n	800af9a <strcpy+0x2>
 800afa6:	4770      	bx	lr

0800afa8 <memcpy>:
 800afa8:	440a      	add	r2, r1
 800afaa:	4291      	cmp	r1, r2
 800afac:	f100 33ff 	add.w	r3, r0, #4294967295
 800afb0:	d100      	bne.n	800afb4 <memcpy+0xc>
 800afb2:	4770      	bx	lr
 800afb4:	b510      	push	{r4, lr}
 800afb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afbe:	4291      	cmp	r1, r2
 800afc0:	d1f9      	bne.n	800afb6 <memcpy+0xe>
 800afc2:	bd10      	pop	{r4, pc}

0800afc4 <quorem>:
 800afc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	6903      	ldr	r3, [r0, #16]
 800afca:	690c      	ldr	r4, [r1, #16]
 800afcc:	42a3      	cmp	r3, r4
 800afce:	4607      	mov	r7, r0
 800afd0:	db7e      	blt.n	800b0d0 <quorem+0x10c>
 800afd2:	3c01      	subs	r4, #1
 800afd4:	f101 0814 	add.w	r8, r1, #20
 800afd8:	f100 0514 	add.w	r5, r0, #20
 800afdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afea:	3301      	adds	r3, #1
 800afec:	429a      	cmp	r2, r3
 800afee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aff2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aff6:	fbb2 f6f3 	udiv	r6, r2, r3
 800affa:	d331      	bcc.n	800b060 <quorem+0x9c>
 800affc:	f04f 0e00 	mov.w	lr, #0
 800b000:	4640      	mov	r0, r8
 800b002:	46ac      	mov	ip, r5
 800b004:	46f2      	mov	sl, lr
 800b006:	f850 2b04 	ldr.w	r2, [r0], #4
 800b00a:	b293      	uxth	r3, r2
 800b00c:	fb06 e303 	mla	r3, r6, r3, lr
 800b010:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b014:	0c1a      	lsrs	r2, r3, #16
 800b016:	b29b      	uxth	r3, r3
 800b018:	ebaa 0303 	sub.w	r3, sl, r3
 800b01c:	f8dc a000 	ldr.w	sl, [ip]
 800b020:	fa13 f38a 	uxtah	r3, r3, sl
 800b024:	fb06 220e 	mla	r2, r6, lr, r2
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	9b00      	ldr	r3, [sp, #0]
 800b02c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b030:	b292      	uxth	r2, r2
 800b032:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b036:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b03a:	f8bd 3000 	ldrh.w	r3, [sp]
 800b03e:	4581      	cmp	r9, r0
 800b040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b044:	f84c 3b04 	str.w	r3, [ip], #4
 800b048:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b04c:	d2db      	bcs.n	800b006 <quorem+0x42>
 800b04e:	f855 300b 	ldr.w	r3, [r5, fp]
 800b052:	b92b      	cbnz	r3, 800b060 <quorem+0x9c>
 800b054:	9b01      	ldr	r3, [sp, #4]
 800b056:	3b04      	subs	r3, #4
 800b058:	429d      	cmp	r5, r3
 800b05a:	461a      	mov	r2, r3
 800b05c:	d32c      	bcc.n	800b0b8 <quorem+0xf4>
 800b05e:	613c      	str	r4, [r7, #16]
 800b060:	4638      	mov	r0, r7
 800b062:	f001 f9a7 	bl	800c3b4 <__mcmp>
 800b066:	2800      	cmp	r0, #0
 800b068:	db22      	blt.n	800b0b0 <quorem+0xec>
 800b06a:	3601      	adds	r6, #1
 800b06c:	4629      	mov	r1, r5
 800b06e:	2000      	movs	r0, #0
 800b070:	f858 2b04 	ldr.w	r2, [r8], #4
 800b074:	f8d1 c000 	ldr.w	ip, [r1]
 800b078:	b293      	uxth	r3, r2
 800b07a:	1ac3      	subs	r3, r0, r3
 800b07c:	0c12      	lsrs	r2, r2, #16
 800b07e:	fa13 f38c 	uxtah	r3, r3, ip
 800b082:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b086:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b090:	45c1      	cmp	r9, r8
 800b092:	f841 3b04 	str.w	r3, [r1], #4
 800b096:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b09a:	d2e9      	bcs.n	800b070 <quorem+0xac>
 800b09c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0a4:	b922      	cbnz	r2, 800b0b0 <quorem+0xec>
 800b0a6:	3b04      	subs	r3, #4
 800b0a8:	429d      	cmp	r5, r3
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	d30a      	bcc.n	800b0c4 <quorem+0x100>
 800b0ae:	613c      	str	r4, [r7, #16]
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	b003      	add	sp, #12
 800b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b8:	6812      	ldr	r2, [r2, #0]
 800b0ba:	3b04      	subs	r3, #4
 800b0bc:	2a00      	cmp	r2, #0
 800b0be:	d1ce      	bne.n	800b05e <quorem+0x9a>
 800b0c0:	3c01      	subs	r4, #1
 800b0c2:	e7c9      	b.n	800b058 <quorem+0x94>
 800b0c4:	6812      	ldr	r2, [r2, #0]
 800b0c6:	3b04      	subs	r3, #4
 800b0c8:	2a00      	cmp	r2, #0
 800b0ca:	d1f0      	bne.n	800b0ae <quorem+0xea>
 800b0cc:	3c01      	subs	r4, #1
 800b0ce:	e7eb      	b.n	800b0a8 <quorem+0xe4>
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	e7ee      	b.n	800b0b2 <quorem+0xee>
 800b0d4:	0000      	movs	r0, r0
	...

0800b0d8 <_dtoa_r>:
 800b0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0dc:	ed2d 8b04 	vpush	{d8-d9}
 800b0e0:	69c5      	ldr	r5, [r0, #28]
 800b0e2:	b093      	sub	sp, #76	; 0x4c
 800b0e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b0e8:	ec57 6b10 	vmov	r6, r7, d0
 800b0ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b0f0:	9107      	str	r1, [sp, #28]
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	920a      	str	r2, [sp, #40]	; 0x28
 800b0f6:	930d      	str	r3, [sp, #52]	; 0x34
 800b0f8:	b975      	cbnz	r5, 800b118 <_dtoa_r+0x40>
 800b0fa:	2010      	movs	r0, #16
 800b0fc:	f000 fe2a 	bl	800bd54 <malloc>
 800b100:	4602      	mov	r2, r0
 800b102:	61e0      	str	r0, [r4, #28]
 800b104:	b920      	cbnz	r0, 800b110 <_dtoa_r+0x38>
 800b106:	4bae      	ldr	r3, [pc, #696]	; (800b3c0 <_dtoa_r+0x2e8>)
 800b108:	21ef      	movs	r1, #239	; 0xef
 800b10a:	48ae      	ldr	r0, [pc, #696]	; (800b3c4 <_dtoa_r+0x2ec>)
 800b10c:	f001 fc82 	bl	800ca14 <__assert_func>
 800b110:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b114:	6005      	str	r5, [r0, #0]
 800b116:	60c5      	str	r5, [r0, #12]
 800b118:	69e3      	ldr	r3, [r4, #28]
 800b11a:	6819      	ldr	r1, [r3, #0]
 800b11c:	b151      	cbz	r1, 800b134 <_dtoa_r+0x5c>
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	604a      	str	r2, [r1, #4]
 800b122:	2301      	movs	r3, #1
 800b124:	4093      	lsls	r3, r2
 800b126:	608b      	str	r3, [r1, #8]
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 ff07 	bl	800bf3c <_Bfree>
 800b12e:	69e3      	ldr	r3, [r4, #28]
 800b130:	2200      	movs	r2, #0
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	1e3b      	subs	r3, r7, #0
 800b136:	bfbb      	ittet	lt
 800b138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b13c:	9303      	strlt	r3, [sp, #12]
 800b13e:	2300      	movge	r3, #0
 800b140:	2201      	movlt	r2, #1
 800b142:	bfac      	ite	ge
 800b144:	f8c8 3000 	strge.w	r3, [r8]
 800b148:	f8c8 2000 	strlt.w	r2, [r8]
 800b14c:	4b9e      	ldr	r3, [pc, #632]	; (800b3c8 <_dtoa_r+0x2f0>)
 800b14e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b152:	ea33 0308 	bics.w	r3, r3, r8
 800b156:	d11b      	bne.n	800b190 <_dtoa_r+0xb8>
 800b158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b15a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b164:	4333      	orrs	r3, r6
 800b166:	f000 8593 	beq.w	800bc90 <_dtoa_r+0xbb8>
 800b16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b16c:	b963      	cbnz	r3, 800b188 <_dtoa_r+0xb0>
 800b16e:	4b97      	ldr	r3, [pc, #604]	; (800b3cc <_dtoa_r+0x2f4>)
 800b170:	e027      	b.n	800b1c2 <_dtoa_r+0xea>
 800b172:	4b97      	ldr	r3, [pc, #604]	; (800b3d0 <_dtoa_r+0x2f8>)
 800b174:	9300      	str	r3, [sp, #0]
 800b176:	3308      	adds	r3, #8
 800b178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	9800      	ldr	r0, [sp, #0]
 800b17e:	b013      	add	sp, #76	; 0x4c
 800b180:	ecbd 8b04 	vpop	{d8-d9}
 800b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b188:	4b90      	ldr	r3, [pc, #576]	; (800b3cc <_dtoa_r+0x2f4>)
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	3303      	adds	r3, #3
 800b18e:	e7f3      	b.n	800b178 <_dtoa_r+0xa0>
 800b190:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b194:	2200      	movs	r2, #0
 800b196:	ec51 0b17 	vmov	r0, r1, d7
 800b19a:	eeb0 8a47 	vmov.f32	s16, s14
 800b19e:	eef0 8a67 	vmov.f32	s17, s15
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f7f5 fcc0 	bl	8000b28 <__aeabi_dcmpeq>
 800b1a8:	4681      	mov	r9, r0
 800b1aa:	b160      	cbz	r0, 800b1c6 <_dtoa_r+0xee>
 800b1ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8568 	beq.w	800bc8a <_dtoa_r+0xbb2>
 800b1ba:	4b86      	ldr	r3, [pc, #536]	; (800b3d4 <_dtoa_r+0x2fc>)
 800b1bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1be:	6013      	str	r3, [r2, #0]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	e7da      	b.n	800b17c <_dtoa_r+0xa4>
 800b1c6:	aa10      	add	r2, sp, #64	; 0x40
 800b1c8:	a911      	add	r1, sp, #68	; 0x44
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b1d0:	eef0 0a68 	vmov.f32	s1, s17
 800b1d4:	f001 f994 	bl	800c500 <__d2b>
 800b1d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b1dc:	4682      	mov	sl, r0
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	d07f      	beq.n	800b2e2 <_dtoa_r+0x20a>
 800b1e2:	ee18 3a90 	vmov	r3, s17
 800b1e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b1ee:	ec51 0b18 	vmov	r0, r1, d8
 800b1f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b1f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b1fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b1fe:	4619      	mov	r1, r3
 800b200:	2200      	movs	r2, #0
 800b202:	4b75      	ldr	r3, [pc, #468]	; (800b3d8 <_dtoa_r+0x300>)
 800b204:	f7f5 f870 	bl	80002e8 <__aeabi_dsub>
 800b208:	a367      	add	r3, pc, #412	; (adr r3, 800b3a8 <_dtoa_r+0x2d0>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	f7f5 fa23 	bl	8000658 <__aeabi_dmul>
 800b212:	a367      	add	r3, pc, #412	; (adr r3, 800b3b0 <_dtoa_r+0x2d8>)
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	f7f5 f868 	bl	80002ec <__adddf3>
 800b21c:	4606      	mov	r6, r0
 800b21e:	4628      	mov	r0, r5
 800b220:	460f      	mov	r7, r1
 800b222:	f7f5 f9af 	bl	8000584 <__aeabi_i2d>
 800b226:	a364      	add	r3, pc, #400	; (adr r3, 800b3b8 <_dtoa_r+0x2e0>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f7f5 fa14 	bl	8000658 <__aeabi_dmul>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4630      	mov	r0, r6
 800b236:	4639      	mov	r1, r7
 800b238:	f7f5 f858 	bl	80002ec <__adddf3>
 800b23c:	4606      	mov	r6, r0
 800b23e:	460f      	mov	r7, r1
 800b240:	f7f5 fcba 	bl	8000bb8 <__aeabi_d2iz>
 800b244:	2200      	movs	r2, #0
 800b246:	4683      	mov	fp, r0
 800b248:	2300      	movs	r3, #0
 800b24a:	4630      	mov	r0, r6
 800b24c:	4639      	mov	r1, r7
 800b24e:	f7f5 fc75 	bl	8000b3c <__aeabi_dcmplt>
 800b252:	b148      	cbz	r0, 800b268 <_dtoa_r+0x190>
 800b254:	4658      	mov	r0, fp
 800b256:	f7f5 f995 	bl	8000584 <__aeabi_i2d>
 800b25a:	4632      	mov	r2, r6
 800b25c:	463b      	mov	r3, r7
 800b25e:	f7f5 fc63 	bl	8000b28 <__aeabi_dcmpeq>
 800b262:	b908      	cbnz	r0, 800b268 <_dtoa_r+0x190>
 800b264:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b268:	f1bb 0f16 	cmp.w	fp, #22
 800b26c:	d857      	bhi.n	800b31e <_dtoa_r+0x246>
 800b26e:	4b5b      	ldr	r3, [pc, #364]	; (800b3dc <_dtoa_r+0x304>)
 800b270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	ec51 0b18 	vmov	r0, r1, d8
 800b27c:	f7f5 fc5e 	bl	8000b3c <__aeabi_dcmplt>
 800b280:	2800      	cmp	r0, #0
 800b282:	d04e      	beq.n	800b322 <_dtoa_r+0x24a>
 800b284:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b288:	2300      	movs	r3, #0
 800b28a:	930c      	str	r3, [sp, #48]	; 0x30
 800b28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b28e:	1b5b      	subs	r3, r3, r5
 800b290:	1e5a      	subs	r2, r3, #1
 800b292:	bf45      	ittet	mi
 800b294:	f1c3 0301 	rsbmi	r3, r3, #1
 800b298:	9305      	strmi	r3, [sp, #20]
 800b29a:	2300      	movpl	r3, #0
 800b29c:	2300      	movmi	r3, #0
 800b29e:	9206      	str	r2, [sp, #24]
 800b2a0:	bf54      	ite	pl
 800b2a2:	9305      	strpl	r3, [sp, #20]
 800b2a4:	9306      	strmi	r3, [sp, #24]
 800b2a6:	f1bb 0f00 	cmp.w	fp, #0
 800b2aa:	db3c      	blt.n	800b326 <_dtoa_r+0x24e>
 800b2ac:	9b06      	ldr	r3, [sp, #24]
 800b2ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b2b2:	445b      	add	r3, fp
 800b2b4:	9306      	str	r3, [sp, #24]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	9308      	str	r3, [sp, #32]
 800b2ba:	9b07      	ldr	r3, [sp, #28]
 800b2bc:	2b09      	cmp	r3, #9
 800b2be:	d868      	bhi.n	800b392 <_dtoa_r+0x2ba>
 800b2c0:	2b05      	cmp	r3, #5
 800b2c2:	bfc4      	itt	gt
 800b2c4:	3b04      	subgt	r3, #4
 800b2c6:	9307      	strgt	r3, [sp, #28]
 800b2c8:	9b07      	ldr	r3, [sp, #28]
 800b2ca:	f1a3 0302 	sub.w	r3, r3, #2
 800b2ce:	bfcc      	ite	gt
 800b2d0:	2500      	movgt	r5, #0
 800b2d2:	2501      	movle	r5, #1
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	f200 8085 	bhi.w	800b3e4 <_dtoa_r+0x30c>
 800b2da:	e8df f003 	tbb	[pc, r3]
 800b2de:	3b2e      	.short	0x3b2e
 800b2e0:	5839      	.short	0x5839
 800b2e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b2e6:	441d      	add	r5, r3
 800b2e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b2ec:	2b20      	cmp	r3, #32
 800b2ee:	bfc1      	itttt	gt
 800b2f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b2f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b2f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b2fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b300:	bfd6      	itet	le
 800b302:	f1c3 0320 	rsble	r3, r3, #32
 800b306:	ea48 0003 	orrgt.w	r0, r8, r3
 800b30a:	fa06 f003 	lslle.w	r0, r6, r3
 800b30e:	f7f5 f929 	bl	8000564 <__aeabi_ui2d>
 800b312:	2201      	movs	r2, #1
 800b314:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b318:	3d01      	subs	r5, #1
 800b31a:	920e      	str	r2, [sp, #56]	; 0x38
 800b31c:	e76f      	b.n	800b1fe <_dtoa_r+0x126>
 800b31e:	2301      	movs	r3, #1
 800b320:	e7b3      	b.n	800b28a <_dtoa_r+0x1b2>
 800b322:	900c      	str	r0, [sp, #48]	; 0x30
 800b324:	e7b2      	b.n	800b28c <_dtoa_r+0x1b4>
 800b326:	9b05      	ldr	r3, [sp, #20]
 800b328:	eba3 030b 	sub.w	r3, r3, fp
 800b32c:	9305      	str	r3, [sp, #20]
 800b32e:	f1cb 0300 	rsb	r3, fp, #0
 800b332:	9308      	str	r3, [sp, #32]
 800b334:	2300      	movs	r3, #0
 800b336:	930b      	str	r3, [sp, #44]	; 0x2c
 800b338:	e7bf      	b.n	800b2ba <_dtoa_r+0x1e2>
 800b33a:	2300      	movs	r3, #0
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b340:	2b00      	cmp	r3, #0
 800b342:	dc52      	bgt.n	800b3ea <_dtoa_r+0x312>
 800b344:	2301      	movs	r3, #1
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	9304      	str	r3, [sp, #16]
 800b34a:	461a      	mov	r2, r3
 800b34c:	920a      	str	r2, [sp, #40]	; 0x28
 800b34e:	e00b      	b.n	800b368 <_dtoa_r+0x290>
 800b350:	2301      	movs	r3, #1
 800b352:	e7f3      	b.n	800b33c <_dtoa_r+0x264>
 800b354:	2300      	movs	r3, #0
 800b356:	9309      	str	r3, [sp, #36]	; 0x24
 800b358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b35a:	445b      	add	r3, fp
 800b35c:	9301      	str	r3, [sp, #4]
 800b35e:	3301      	adds	r3, #1
 800b360:	2b01      	cmp	r3, #1
 800b362:	9304      	str	r3, [sp, #16]
 800b364:	bfb8      	it	lt
 800b366:	2301      	movlt	r3, #1
 800b368:	69e0      	ldr	r0, [r4, #28]
 800b36a:	2100      	movs	r1, #0
 800b36c:	2204      	movs	r2, #4
 800b36e:	f102 0614 	add.w	r6, r2, #20
 800b372:	429e      	cmp	r6, r3
 800b374:	d93d      	bls.n	800b3f2 <_dtoa_r+0x31a>
 800b376:	6041      	str	r1, [r0, #4]
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fd9f 	bl	800bebc <_Balloc>
 800b37e:	9000      	str	r0, [sp, #0]
 800b380:	2800      	cmp	r0, #0
 800b382:	d139      	bne.n	800b3f8 <_dtoa_r+0x320>
 800b384:	4b16      	ldr	r3, [pc, #88]	; (800b3e0 <_dtoa_r+0x308>)
 800b386:	4602      	mov	r2, r0
 800b388:	f240 11af 	movw	r1, #431	; 0x1af
 800b38c:	e6bd      	b.n	800b10a <_dtoa_r+0x32>
 800b38e:	2301      	movs	r3, #1
 800b390:	e7e1      	b.n	800b356 <_dtoa_r+0x27e>
 800b392:	2501      	movs	r5, #1
 800b394:	2300      	movs	r3, #0
 800b396:	9307      	str	r3, [sp, #28]
 800b398:	9509      	str	r5, [sp, #36]	; 0x24
 800b39a:	f04f 33ff 	mov.w	r3, #4294967295
 800b39e:	9301      	str	r3, [sp, #4]
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2312      	movs	r3, #18
 800b3a6:	e7d1      	b.n	800b34c <_dtoa_r+0x274>
 800b3a8:	636f4361 	.word	0x636f4361
 800b3ac:	3fd287a7 	.word	0x3fd287a7
 800b3b0:	8b60c8b3 	.word	0x8b60c8b3
 800b3b4:	3fc68a28 	.word	0x3fc68a28
 800b3b8:	509f79fb 	.word	0x509f79fb
 800b3bc:	3fd34413 	.word	0x3fd34413
 800b3c0:	0800e59a 	.word	0x0800e59a
 800b3c4:	0800e5b1 	.word	0x0800e5b1
 800b3c8:	7ff00000 	.word	0x7ff00000
 800b3cc:	0800e596 	.word	0x0800e596
 800b3d0:	0800e58d 	.word	0x0800e58d
 800b3d4:	0800e56a 	.word	0x0800e56a
 800b3d8:	3ff80000 	.word	0x3ff80000
 800b3dc:	0800e6a0 	.word	0x0800e6a0
 800b3e0:	0800e609 	.word	0x0800e609
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e8:	e7d7      	b.n	800b39a <_dtoa_r+0x2c2>
 800b3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ec:	9301      	str	r3, [sp, #4]
 800b3ee:	9304      	str	r3, [sp, #16]
 800b3f0:	e7ba      	b.n	800b368 <_dtoa_r+0x290>
 800b3f2:	3101      	adds	r1, #1
 800b3f4:	0052      	lsls	r2, r2, #1
 800b3f6:	e7ba      	b.n	800b36e <_dtoa_r+0x296>
 800b3f8:	69e3      	ldr	r3, [r4, #28]
 800b3fa:	9a00      	ldr	r2, [sp, #0]
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	9b04      	ldr	r3, [sp, #16]
 800b400:	2b0e      	cmp	r3, #14
 800b402:	f200 80a8 	bhi.w	800b556 <_dtoa_r+0x47e>
 800b406:	2d00      	cmp	r5, #0
 800b408:	f000 80a5 	beq.w	800b556 <_dtoa_r+0x47e>
 800b40c:	f1bb 0f00 	cmp.w	fp, #0
 800b410:	dd38      	ble.n	800b484 <_dtoa_r+0x3ac>
 800b412:	4bc0      	ldr	r3, [pc, #768]	; (800b714 <_dtoa_r+0x63c>)
 800b414:	f00b 020f 	and.w	r2, fp, #15
 800b418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b41c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b420:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b424:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b428:	d019      	beq.n	800b45e <_dtoa_r+0x386>
 800b42a:	4bbb      	ldr	r3, [pc, #748]	; (800b718 <_dtoa_r+0x640>)
 800b42c:	ec51 0b18 	vmov	r0, r1, d8
 800b430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b434:	f7f5 fa3a 	bl	80008ac <__aeabi_ddiv>
 800b438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b43c:	f008 080f 	and.w	r8, r8, #15
 800b440:	2503      	movs	r5, #3
 800b442:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b718 <_dtoa_r+0x640>
 800b446:	f1b8 0f00 	cmp.w	r8, #0
 800b44a:	d10a      	bne.n	800b462 <_dtoa_r+0x38a>
 800b44c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b450:	4632      	mov	r2, r6
 800b452:	463b      	mov	r3, r7
 800b454:	f7f5 fa2a 	bl	80008ac <__aeabi_ddiv>
 800b458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b45c:	e02b      	b.n	800b4b6 <_dtoa_r+0x3de>
 800b45e:	2502      	movs	r5, #2
 800b460:	e7ef      	b.n	800b442 <_dtoa_r+0x36a>
 800b462:	f018 0f01 	tst.w	r8, #1
 800b466:	d008      	beq.n	800b47a <_dtoa_r+0x3a2>
 800b468:	4630      	mov	r0, r6
 800b46a:	4639      	mov	r1, r7
 800b46c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b470:	f7f5 f8f2 	bl	8000658 <__aeabi_dmul>
 800b474:	3501      	adds	r5, #1
 800b476:	4606      	mov	r6, r0
 800b478:	460f      	mov	r7, r1
 800b47a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b47e:	f109 0908 	add.w	r9, r9, #8
 800b482:	e7e0      	b.n	800b446 <_dtoa_r+0x36e>
 800b484:	f000 809f 	beq.w	800b5c6 <_dtoa_r+0x4ee>
 800b488:	f1cb 0600 	rsb	r6, fp, #0
 800b48c:	4ba1      	ldr	r3, [pc, #644]	; (800b714 <_dtoa_r+0x63c>)
 800b48e:	4fa2      	ldr	r7, [pc, #648]	; (800b718 <_dtoa_r+0x640>)
 800b490:	f006 020f 	and.w	r2, r6, #15
 800b494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	ec51 0b18 	vmov	r0, r1, d8
 800b4a0:	f7f5 f8da 	bl	8000658 <__aeabi_dmul>
 800b4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4a8:	1136      	asrs	r6, r6, #4
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	2502      	movs	r5, #2
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	d17e      	bne.n	800b5b0 <_dtoa_r+0x4d8>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1d0      	bne.n	800b458 <_dtoa_r+0x380>
 800b4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 8084 	beq.w	800b5ca <_dtoa_r+0x4f2>
 800b4c2:	4b96      	ldr	r3, [pc, #600]	; (800b71c <_dtoa_r+0x644>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	f7f5 fb37 	bl	8000b3c <__aeabi_dcmplt>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d07b      	beq.n	800b5ca <_dtoa_r+0x4f2>
 800b4d2:	9b04      	ldr	r3, [sp, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d078      	beq.n	800b5ca <_dtoa_r+0x4f2>
 800b4d8:	9b01      	ldr	r3, [sp, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	dd39      	ble.n	800b552 <_dtoa_r+0x47a>
 800b4de:	4b90      	ldr	r3, [pc, #576]	; (800b720 <_dtoa_r+0x648>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	f7f5 f8b7 	bl	8000658 <__aeabi_dmul>
 800b4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4ee:	9e01      	ldr	r6, [sp, #4]
 800b4f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b4f4:	3501      	adds	r5, #1
 800b4f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f7f5 f842 	bl	8000584 <__aeabi_i2d>
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	f7f5 f8a8 	bl	8000658 <__aeabi_dmul>
 800b508:	4b86      	ldr	r3, [pc, #536]	; (800b724 <_dtoa_r+0x64c>)
 800b50a:	2200      	movs	r2, #0
 800b50c:	f7f4 feee 	bl	80002ec <__adddf3>
 800b510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b518:	9303      	str	r3, [sp, #12]
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	d158      	bne.n	800b5d0 <_dtoa_r+0x4f8>
 800b51e:	4b82      	ldr	r3, [pc, #520]	; (800b728 <_dtoa_r+0x650>)
 800b520:	2200      	movs	r2, #0
 800b522:	4640      	mov	r0, r8
 800b524:	4649      	mov	r1, r9
 800b526:	f7f4 fedf 	bl	80002e8 <__aeabi_dsub>
 800b52a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b52e:	4680      	mov	r8, r0
 800b530:	4689      	mov	r9, r1
 800b532:	f7f5 fb21 	bl	8000b78 <__aeabi_dcmpgt>
 800b536:	2800      	cmp	r0, #0
 800b538:	f040 8296 	bne.w	800ba68 <_dtoa_r+0x990>
 800b53c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b540:	4640      	mov	r0, r8
 800b542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b546:	4649      	mov	r1, r9
 800b548:	f7f5 faf8 	bl	8000b3c <__aeabi_dcmplt>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f040 8289 	bne.w	800ba64 <_dtoa_r+0x98c>
 800b552:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f2c0 814e 	blt.w	800b7fa <_dtoa_r+0x722>
 800b55e:	f1bb 0f0e 	cmp.w	fp, #14
 800b562:	f300 814a 	bgt.w	800b7fa <_dtoa_r+0x722>
 800b566:	4b6b      	ldr	r3, [pc, #428]	; (800b714 <_dtoa_r+0x63c>)
 800b568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b56c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b572:	2b00      	cmp	r3, #0
 800b574:	f280 80dc 	bge.w	800b730 <_dtoa_r+0x658>
 800b578:	9b04      	ldr	r3, [sp, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f300 80d8 	bgt.w	800b730 <_dtoa_r+0x658>
 800b580:	f040 826f 	bne.w	800ba62 <_dtoa_r+0x98a>
 800b584:	4b68      	ldr	r3, [pc, #416]	; (800b728 <_dtoa_r+0x650>)
 800b586:	2200      	movs	r2, #0
 800b588:	4640      	mov	r0, r8
 800b58a:	4649      	mov	r1, r9
 800b58c:	f7f5 f864 	bl	8000658 <__aeabi_dmul>
 800b590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b594:	f7f5 fae6 	bl	8000b64 <__aeabi_dcmpge>
 800b598:	9e04      	ldr	r6, [sp, #16]
 800b59a:	4637      	mov	r7, r6
 800b59c:	2800      	cmp	r0, #0
 800b59e:	f040 8245 	bne.w	800ba2c <_dtoa_r+0x954>
 800b5a2:	9d00      	ldr	r5, [sp, #0]
 800b5a4:	2331      	movs	r3, #49	; 0x31
 800b5a6:	f805 3b01 	strb.w	r3, [r5], #1
 800b5aa:	f10b 0b01 	add.w	fp, fp, #1
 800b5ae:	e241      	b.n	800ba34 <_dtoa_r+0x95c>
 800b5b0:	07f2      	lsls	r2, r6, #31
 800b5b2:	d505      	bpl.n	800b5c0 <_dtoa_r+0x4e8>
 800b5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5b8:	f7f5 f84e 	bl	8000658 <__aeabi_dmul>
 800b5bc:	3501      	adds	r5, #1
 800b5be:	2301      	movs	r3, #1
 800b5c0:	1076      	asrs	r6, r6, #1
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	e773      	b.n	800b4ae <_dtoa_r+0x3d6>
 800b5c6:	2502      	movs	r5, #2
 800b5c8:	e775      	b.n	800b4b6 <_dtoa_r+0x3de>
 800b5ca:	9e04      	ldr	r6, [sp, #16]
 800b5cc:	465f      	mov	r7, fp
 800b5ce:	e792      	b.n	800b4f6 <_dtoa_r+0x41e>
 800b5d0:	9900      	ldr	r1, [sp, #0]
 800b5d2:	4b50      	ldr	r3, [pc, #320]	; (800b714 <_dtoa_r+0x63c>)
 800b5d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5d8:	4431      	add	r1, r6
 800b5da:	9102      	str	r1, [sp, #8]
 800b5dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5de:	eeb0 9a47 	vmov.f32	s18, s14
 800b5e2:	eef0 9a67 	vmov.f32	s19, s15
 800b5e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b5ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5ee:	2900      	cmp	r1, #0
 800b5f0:	d044      	beq.n	800b67c <_dtoa_r+0x5a4>
 800b5f2:	494e      	ldr	r1, [pc, #312]	; (800b72c <_dtoa_r+0x654>)
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	f7f5 f959 	bl	80008ac <__aeabi_ddiv>
 800b5fa:	ec53 2b19 	vmov	r2, r3, d9
 800b5fe:	f7f4 fe73 	bl	80002e8 <__aeabi_dsub>
 800b602:	9d00      	ldr	r5, [sp, #0]
 800b604:	ec41 0b19 	vmov	d9, r0, r1
 800b608:	4649      	mov	r1, r9
 800b60a:	4640      	mov	r0, r8
 800b60c:	f7f5 fad4 	bl	8000bb8 <__aeabi_d2iz>
 800b610:	4606      	mov	r6, r0
 800b612:	f7f4 ffb7 	bl	8000584 <__aeabi_i2d>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	4640      	mov	r0, r8
 800b61c:	4649      	mov	r1, r9
 800b61e:	f7f4 fe63 	bl	80002e8 <__aeabi_dsub>
 800b622:	3630      	adds	r6, #48	; 0x30
 800b624:	f805 6b01 	strb.w	r6, [r5], #1
 800b628:	ec53 2b19 	vmov	r2, r3, d9
 800b62c:	4680      	mov	r8, r0
 800b62e:	4689      	mov	r9, r1
 800b630:	f7f5 fa84 	bl	8000b3c <__aeabi_dcmplt>
 800b634:	2800      	cmp	r0, #0
 800b636:	d164      	bne.n	800b702 <_dtoa_r+0x62a>
 800b638:	4642      	mov	r2, r8
 800b63a:	464b      	mov	r3, r9
 800b63c:	4937      	ldr	r1, [pc, #220]	; (800b71c <_dtoa_r+0x644>)
 800b63e:	2000      	movs	r0, #0
 800b640:	f7f4 fe52 	bl	80002e8 <__aeabi_dsub>
 800b644:	ec53 2b19 	vmov	r2, r3, d9
 800b648:	f7f5 fa78 	bl	8000b3c <__aeabi_dcmplt>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	f040 80b6 	bne.w	800b7be <_dtoa_r+0x6e6>
 800b652:	9b02      	ldr	r3, [sp, #8]
 800b654:	429d      	cmp	r5, r3
 800b656:	f43f af7c 	beq.w	800b552 <_dtoa_r+0x47a>
 800b65a:	4b31      	ldr	r3, [pc, #196]	; (800b720 <_dtoa_r+0x648>)
 800b65c:	ec51 0b19 	vmov	r0, r1, d9
 800b660:	2200      	movs	r2, #0
 800b662:	f7f4 fff9 	bl	8000658 <__aeabi_dmul>
 800b666:	4b2e      	ldr	r3, [pc, #184]	; (800b720 <_dtoa_r+0x648>)
 800b668:	ec41 0b19 	vmov	d9, r0, r1
 800b66c:	2200      	movs	r2, #0
 800b66e:	4640      	mov	r0, r8
 800b670:	4649      	mov	r1, r9
 800b672:	f7f4 fff1 	bl	8000658 <__aeabi_dmul>
 800b676:	4680      	mov	r8, r0
 800b678:	4689      	mov	r9, r1
 800b67a:	e7c5      	b.n	800b608 <_dtoa_r+0x530>
 800b67c:	ec51 0b17 	vmov	r0, r1, d7
 800b680:	f7f4 ffea 	bl	8000658 <__aeabi_dmul>
 800b684:	9b02      	ldr	r3, [sp, #8]
 800b686:	9d00      	ldr	r5, [sp, #0]
 800b688:	930f      	str	r3, [sp, #60]	; 0x3c
 800b68a:	ec41 0b19 	vmov	d9, r0, r1
 800b68e:	4649      	mov	r1, r9
 800b690:	4640      	mov	r0, r8
 800b692:	f7f5 fa91 	bl	8000bb8 <__aeabi_d2iz>
 800b696:	4606      	mov	r6, r0
 800b698:	f7f4 ff74 	bl	8000584 <__aeabi_i2d>
 800b69c:	3630      	adds	r6, #48	; 0x30
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4640      	mov	r0, r8
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	f7f4 fe1f 	bl	80002e8 <__aeabi_dsub>
 800b6aa:	f805 6b01 	strb.w	r6, [r5], #1
 800b6ae:	9b02      	ldr	r3, [sp, #8]
 800b6b0:	429d      	cmp	r5, r3
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	4689      	mov	r9, r1
 800b6b6:	f04f 0200 	mov.w	r2, #0
 800b6ba:	d124      	bne.n	800b706 <_dtoa_r+0x62e>
 800b6bc:	4b1b      	ldr	r3, [pc, #108]	; (800b72c <_dtoa_r+0x654>)
 800b6be:	ec51 0b19 	vmov	r0, r1, d9
 800b6c2:	f7f4 fe13 	bl	80002ec <__adddf3>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	f7f5 fa53 	bl	8000b78 <__aeabi_dcmpgt>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d173      	bne.n	800b7be <_dtoa_r+0x6e6>
 800b6d6:	ec53 2b19 	vmov	r2, r3, d9
 800b6da:	4914      	ldr	r1, [pc, #80]	; (800b72c <_dtoa_r+0x654>)
 800b6dc:	2000      	movs	r0, #0
 800b6de:	f7f4 fe03 	bl	80002e8 <__aeabi_dsub>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	4649      	mov	r1, r9
 800b6ea:	f7f5 fa27 	bl	8000b3c <__aeabi_dcmplt>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	f43f af2f 	beq.w	800b552 <_dtoa_r+0x47a>
 800b6f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b6f6:	1e6b      	subs	r3, r5, #1
 800b6f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6fe:	2b30      	cmp	r3, #48	; 0x30
 800b700:	d0f8      	beq.n	800b6f4 <_dtoa_r+0x61c>
 800b702:	46bb      	mov	fp, r7
 800b704:	e04a      	b.n	800b79c <_dtoa_r+0x6c4>
 800b706:	4b06      	ldr	r3, [pc, #24]	; (800b720 <_dtoa_r+0x648>)
 800b708:	f7f4 ffa6 	bl	8000658 <__aeabi_dmul>
 800b70c:	4680      	mov	r8, r0
 800b70e:	4689      	mov	r9, r1
 800b710:	e7bd      	b.n	800b68e <_dtoa_r+0x5b6>
 800b712:	bf00      	nop
 800b714:	0800e6a0 	.word	0x0800e6a0
 800b718:	0800e678 	.word	0x0800e678
 800b71c:	3ff00000 	.word	0x3ff00000
 800b720:	40240000 	.word	0x40240000
 800b724:	401c0000 	.word	0x401c0000
 800b728:	40140000 	.word	0x40140000
 800b72c:	3fe00000 	.word	0x3fe00000
 800b730:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b734:	9d00      	ldr	r5, [sp, #0]
 800b736:	4642      	mov	r2, r8
 800b738:	464b      	mov	r3, r9
 800b73a:	4630      	mov	r0, r6
 800b73c:	4639      	mov	r1, r7
 800b73e:	f7f5 f8b5 	bl	80008ac <__aeabi_ddiv>
 800b742:	f7f5 fa39 	bl	8000bb8 <__aeabi_d2iz>
 800b746:	9001      	str	r0, [sp, #4]
 800b748:	f7f4 ff1c 	bl	8000584 <__aeabi_i2d>
 800b74c:	4642      	mov	r2, r8
 800b74e:	464b      	mov	r3, r9
 800b750:	f7f4 ff82 	bl	8000658 <__aeabi_dmul>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f4 fdc4 	bl	80002e8 <__aeabi_dsub>
 800b760:	9e01      	ldr	r6, [sp, #4]
 800b762:	9f04      	ldr	r7, [sp, #16]
 800b764:	3630      	adds	r6, #48	; 0x30
 800b766:	f805 6b01 	strb.w	r6, [r5], #1
 800b76a:	9e00      	ldr	r6, [sp, #0]
 800b76c:	1bae      	subs	r6, r5, r6
 800b76e:	42b7      	cmp	r7, r6
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	d134      	bne.n	800b7e0 <_dtoa_r+0x708>
 800b776:	f7f4 fdb9 	bl	80002ec <__adddf3>
 800b77a:	4642      	mov	r2, r8
 800b77c:	464b      	mov	r3, r9
 800b77e:	4606      	mov	r6, r0
 800b780:	460f      	mov	r7, r1
 800b782:	f7f5 f9f9 	bl	8000b78 <__aeabi_dcmpgt>
 800b786:	b9c8      	cbnz	r0, 800b7bc <_dtoa_r+0x6e4>
 800b788:	4642      	mov	r2, r8
 800b78a:	464b      	mov	r3, r9
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	f7f5 f9ca 	bl	8000b28 <__aeabi_dcmpeq>
 800b794:	b110      	cbz	r0, 800b79c <_dtoa_r+0x6c4>
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	07db      	lsls	r3, r3, #31
 800b79a:	d40f      	bmi.n	800b7bc <_dtoa_r+0x6e4>
 800b79c:	4651      	mov	r1, sl
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f000 fbcc 	bl	800bf3c <_Bfree>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7a8:	702b      	strb	r3, [r5, #0]
 800b7aa:	f10b 0301 	add.w	r3, fp, #1
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f43f ace2 	beq.w	800b17c <_dtoa_r+0xa4>
 800b7b8:	601d      	str	r5, [r3, #0]
 800b7ba:	e4df      	b.n	800b17c <_dtoa_r+0xa4>
 800b7bc:	465f      	mov	r7, fp
 800b7be:	462b      	mov	r3, r5
 800b7c0:	461d      	mov	r5, r3
 800b7c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7c6:	2a39      	cmp	r2, #57	; 0x39
 800b7c8:	d106      	bne.n	800b7d8 <_dtoa_r+0x700>
 800b7ca:	9a00      	ldr	r2, [sp, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d1f7      	bne.n	800b7c0 <_dtoa_r+0x6e8>
 800b7d0:	9900      	ldr	r1, [sp, #0]
 800b7d2:	2230      	movs	r2, #48	; 0x30
 800b7d4:	3701      	adds	r7, #1
 800b7d6:	700a      	strb	r2, [r1, #0]
 800b7d8:	781a      	ldrb	r2, [r3, #0]
 800b7da:	3201      	adds	r2, #1
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	e790      	b.n	800b702 <_dtoa_r+0x62a>
 800b7e0:	4ba3      	ldr	r3, [pc, #652]	; (800ba70 <_dtoa_r+0x998>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f7f4 ff38 	bl	8000658 <__aeabi_dmul>
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	f7f5 f99a 	bl	8000b28 <__aeabi_dcmpeq>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d09e      	beq.n	800b736 <_dtoa_r+0x65e>
 800b7f8:	e7d0      	b.n	800b79c <_dtoa_r+0x6c4>
 800b7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7fc:	2a00      	cmp	r2, #0
 800b7fe:	f000 80ca 	beq.w	800b996 <_dtoa_r+0x8be>
 800b802:	9a07      	ldr	r2, [sp, #28]
 800b804:	2a01      	cmp	r2, #1
 800b806:	f300 80ad 	bgt.w	800b964 <_dtoa_r+0x88c>
 800b80a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b80c:	2a00      	cmp	r2, #0
 800b80e:	f000 80a5 	beq.w	800b95c <_dtoa_r+0x884>
 800b812:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b816:	9e08      	ldr	r6, [sp, #32]
 800b818:	9d05      	ldr	r5, [sp, #20]
 800b81a:	9a05      	ldr	r2, [sp, #20]
 800b81c:	441a      	add	r2, r3
 800b81e:	9205      	str	r2, [sp, #20]
 800b820:	9a06      	ldr	r2, [sp, #24]
 800b822:	2101      	movs	r1, #1
 800b824:	441a      	add	r2, r3
 800b826:	4620      	mov	r0, r4
 800b828:	9206      	str	r2, [sp, #24]
 800b82a:	f000 fc3d 	bl	800c0a8 <__i2b>
 800b82e:	4607      	mov	r7, r0
 800b830:	b165      	cbz	r5, 800b84c <_dtoa_r+0x774>
 800b832:	9b06      	ldr	r3, [sp, #24]
 800b834:	2b00      	cmp	r3, #0
 800b836:	dd09      	ble.n	800b84c <_dtoa_r+0x774>
 800b838:	42ab      	cmp	r3, r5
 800b83a:	9a05      	ldr	r2, [sp, #20]
 800b83c:	bfa8      	it	ge
 800b83e:	462b      	movge	r3, r5
 800b840:	1ad2      	subs	r2, r2, r3
 800b842:	9205      	str	r2, [sp, #20]
 800b844:	9a06      	ldr	r2, [sp, #24]
 800b846:	1aed      	subs	r5, r5, r3
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	9306      	str	r3, [sp, #24]
 800b84c:	9b08      	ldr	r3, [sp, #32]
 800b84e:	b1f3      	cbz	r3, 800b88e <_dtoa_r+0x7b6>
 800b850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80a3 	beq.w	800b99e <_dtoa_r+0x8c6>
 800b858:	2e00      	cmp	r6, #0
 800b85a:	dd10      	ble.n	800b87e <_dtoa_r+0x7a6>
 800b85c:	4639      	mov	r1, r7
 800b85e:	4632      	mov	r2, r6
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fce1 	bl	800c228 <__pow5mult>
 800b866:	4652      	mov	r2, sl
 800b868:	4601      	mov	r1, r0
 800b86a:	4607      	mov	r7, r0
 800b86c:	4620      	mov	r0, r4
 800b86e:	f000 fc31 	bl	800c0d4 <__multiply>
 800b872:	4651      	mov	r1, sl
 800b874:	4680      	mov	r8, r0
 800b876:	4620      	mov	r0, r4
 800b878:	f000 fb60 	bl	800bf3c <_Bfree>
 800b87c:	46c2      	mov	sl, r8
 800b87e:	9b08      	ldr	r3, [sp, #32]
 800b880:	1b9a      	subs	r2, r3, r6
 800b882:	d004      	beq.n	800b88e <_dtoa_r+0x7b6>
 800b884:	4651      	mov	r1, sl
 800b886:	4620      	mov	r0, r4
 800b888:	f000 fcce 	bl	800c228 <__pow5mult>
 800b88c:	4682      	mov	sl, r0
 800b88e:	2101      	movs	r1, #1
 800b890:	4620      	mov	r0, r4
 800b892:	f000 fc09 	bl	800c0a8 <__i2b>
 800b896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b898:	2b00      	cmp	r3, #0
 800b89a:	4606      	mov	r6, r0
 800b89c:	f340 8081 	ble.w	800b9a2 <_dtoa_r+0x8ca>
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	4601      	mov	r1, r0
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f000 fcbf 	bl	800c228 <__pow5mult>
 800b8aa:	9b07      	ldr	r3, [sp, #28]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	dd7a      	ble.n	800b9a8 <_dtoa_r+0x8d0>
 800b8b2:	f04f 0800 	mov.w	r8, #0
 800b8b6:	6933      	ldr	r3, [r6, #16]
 800b8b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b8bc:	6918      	ldr	r0, [r3, #16]
 800b8be:	f000 fba5 	bl	800c00c <__hi0bits>
 800b8c2:	f1c0 0020 	rsb	r0, r0, #32
 800b8c6:	9b06      	ldr	r3, [sp, #24]
 800b8c8:	4418      	add	r0, r3
 800b8ca:	f010 001f 	ands.w	r0, r0, #31
 800b8ce:	f000 8094 	beq.w	800b9fa <_dtoa_r+0x922>
 800b8d2:	f1c0 0320 	rsb	r3, r0, #32
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	f340 8085 	ble.w	800b9e6 <_dtoa_r+0x90e>
 800b8dc:	9b05      	ldr	r3, [sp, #20]
 800b8de:	f1c0 001c 	rsb	r0, r0, #28
 800b8e2:	4403      	add	r3, r0
 800b8e4:	9305      	str	r3, [sp, #20]
 800b8e6:	9b06      	ldr	r3, [sp, #24]
 800b8e8:	4403      	add	r3, r0
 800b8ea:	4405      	add	r5, r0
 800b8ec:	9306      	str	r3, [sp, #24]
 800b8ee:	9b05      	ldr	r3, [sp, #20]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dd05      	ble.n	800b900 <_dtoa_r+0x828>
 800b8f4:	4651      	mov	r1, sl
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 fcef 	bl	800c2dc <__lshift>
 800b8fe:	4682      	mov	sl, r0
 800b900:	9b06      	ldr	r3, [sp, #24]
 800b902:	2b00      	cmp	r3, #0
 800b904:	dd05      	ble.n	800b912 <_dtoa_r+0x83a>
 800b906:	4631      	mov	r1, r6
 800b908:	461a      	mov	r2, r3
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fce6 	bl	800c2dc <__lshift>
 800b910:	4606      	mov	r6, r0
 800b912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b914:	2b00      	cmp	r3, #0
 800b916:	d072      	beq.n	800b9fe <_dtoa_r+0x926>
 800b918:	4631      	mov	r1, r6
 800b91a:	4650      	mov	r0, sl
 800b91c:	f000 fd4a 	bl	800c3b4 <__mcmp>
 800b920:	2800      	cmp	r0, #0
 800b922:	da6c      	bge.n	800b9fe <_dtoa_r+0x926>
 800b924:	2300      	movs	r3, #0
 800b926:	4651      	mov	r1, sl
 800b928:	220a      	movs	r2, #10
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 fb28 	bl	800bf80 <__multadd>
 800b930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b932:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b936:	4682      	mov	sl, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 81b0 	beq.w	800bc9e <_dtoa_r+0xbc6>
 800b93e:	2300      	movs	r3, #0
 800b940:	4639      	mov	r1, r7
 800b942:	220a      	movs	r2, #10
 800b944:	4620      	mov	r0, r4
 800b946:	f000 fb1b 	bl	800bf80 <__multadd>
 800b94a:	9b01      	ldr	r3, [sp, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	4607      	mov	r7, r0
 800b950:	f300 8096 	bgt.w	800ba80 <_dtoa_r+0x9a8>
 800b954:	9b07      	ldr	r3, [sp, #28]
 800b956:	2b02      	cmp	r3, #2
 800b958:	dc59      	bgt.n	800ba0e <_dtoa_r+0x936>
 800b95a:	e091      	b.n	800ba80 <_dtoa_r+0x9a8>
 800b95c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b95e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b962:	e758      	b.n	800b816 <_dtoa_r+0x73e>
 800b964:	9b04      	ldr	r3, [sp, #16]
 800b966:	1e5e      	subs	r6, r3, #1
 800b968:	9b08      	ldr	r3, [sp, #32]
 800b96a:	42b3      	cmp	r3, r6
 800b96c:	bfbf      	itttt	lt
 800b96e:	9b08      	ldrlt	r3, [sp, #32]
 800b970:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b972:	9608      	strlt	r6, [sp, #32]
 800b974:	1af3      	sublt	r3, r6, r3
 800b976:	bfb4      	ite	lt
 800b978:	18d2      	addlt	r2, r2, r3
 800b97a:	1b9e      	subge	r6, r3, r6
 800b97c:	9b04      	ldr	r3, [sp, #16]
 800b97e:	bfbc      	itt	lt
 800b980:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b982:	2600      	movlt	r6, #0
 800b984:	2b00      	cmp	r3, #0
 800b986:	bfb7      	itett	lt
 800b988:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b98c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b990:	1a9d      	sublt	r5, r3, r2
 800b992:	2300      	movlt	r3, #0
 800b994:	e741      	b.n	800b81a <_dtoa_r+0x742>
 800b996:	9e08      	ldr	r6, [sp, #32]
 800b998:	9d05      	ldr	r5, [sp, #20]
 800b99a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b99c:	e748      	b.n	800b830 <_dtoa_r+0x758>
 800b99e:	9a08      	ldr	r2, [sp, #32]
 800b9a0:	e770      	b.n	800b884 <_dtoa_r+0x7ac>
 800b9a2:	9b07      	ldr	r3, [sp, #28]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	dc19      	bgt.n	800b9dc <_dtoa_r+0x904>
 800b9a8:	9b02      	ldr	r3, [sp, #8]
 800b9aa:	b9bb      	cbnz	r3, 800b9dc <_dtoa_r+0x904>
 800b9ac:	9b03      	ldr	r3, [sp, #12]
 800b9ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9b2:	b99b      	cbnz	r3, 800b9dc <_dtoa_r+0x904>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9ba:	0d1b      	lsrs	r3, r3, #20
 800b9bc:	051b      	lsls	r3, r3, #20
 800b9be:	b183      	cbz	r3, 800b9e2 <_dtoa_r+0x90a>
 800b9c0:	9b05      	ldr	r3, [sp, #20]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	9305      	str	r3, [sp, #20]
 800b9c6:	9b06      	ldr	r3, [sp, #24]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	9306      	str	r3, [sp, #24]
 800b9cc:	f04f 0801 	mov.w	r8, #1
 800b9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f47f af6f 	bne.w	800b8b6 <_dtoa_r+0x7de>
 800b9d8:	2001      	movs	r0, #1
 800b9da:	e774      	b.n	800b8c6 <_dtoa_r+0x7ee>
 800b9dc:	f04f 0800 	mov.w	r8, #0
 800b9e0:	e7f6      	b.n	800b9d0 <_dtoa_r+0x8f8>
 800b9e2:	4698      	mov	r8, r3
 800b9e4:	e7f4      	b.n	800b9d0 <_dtoa_r+0x8f8>
 800b9e6:	d082      	beq.n	800b8ee <_dtoa_r+0x816>
 800b9e8:	9a05      	ldr	r2, [sp, #20]
 800b9ea:	331c      	adds	r3, #28
 800b9ec:	441a      	add	r2, r3
 800b9ee:	9205      	str	r2, [sp, #20]
 800b9f0:	9a06      	ldr	r2, [sp, #24]
 800b9f2:	441a      	add	r2, r3
 800b9f4:	441d      	add	r5, r3
 800b9f6:	9206      	str	r2, [sp, #24]
 800b9f8:	e779      	b.n	800b8ee <_dtoa_r+0x816>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	e7f4      	b.n	800b9e8 <_dtoa_r+0x910>
 800b9fe:	9b04      	ldr	r3, [sp, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	dc37      	bgt.n	800ba74 <_dtoa_r+0x99c>
 800ba04:	9b07      	ldr	r3, [sp, #28]
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	dd34      	ble.n	800ba74 <_dtoa_r+0x99c>
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	9b01      	ldr	r3, [sp, #4]
 800ba10:	b963      	cbnz	r3, 800ba2c <_dtoa_r+0x954>
 800ba12:	4631      	mov	r1, r6
 800ba14:	2205      	movs	r2, #5
 800ba16:	4620      	mov	r0, r4
 800ba18:	f000 fab2 	bl	800bf80 <__multadd>
 800ba1c:	4601      	mov	r1, r0
 800ba1e:	4606      	mov	r6, r0
 800ba20:	4650      	mov	r0, sl
 800ba22:	f000 fcc7 	bl	800c3b4 <__mcmp>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f73f adbb 	bgt.w	800b5a2 <_dtoa_r+0x4ca>
 800ba2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba2e:	9d00      	ldr	r5, [sp, #0]
 800ba30:	ea6f 0b03 	mvn.w	fp, r3
 800ba34:	f04f 0800 	mov.w	r8, #0
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 fa7e 	bl	800bf3c <_Bfree>
 800ba40:	2f00      	cmp	r7, #0
 800ba42:	f43f aeab 	beq.w	800b79c <_dtoa_r+0x6c4>
 800ba46:	f1b8 0f00 	cmp.w	r8, #0
 800ba4a:	d005      	beq.n	800ba58 <_dtoa_r+0x980>
 800ba4c:	45b8      	cmp	r8, r7
 800ba4e:	d003      	beq.n	800ba58 <_dtoa_r+0x980>
 800ba50:	4641      	mov	r1, r8
 800ba52:	4620      	mov	r0, r4
 800ba54:	f000 fa72 	bl	800bf3c <_Bfree>
 800ba58:	4639      	mov	r1, r7
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 fa6e 	bl	800bf3c <_Bfree>
 800ba60:	e69c      	b.n	800b79c <_dtoa_r+0x6c4>
 800ba62:	2600      	movs	r6, #0
 800ba64:	4637      	mov	r7, r6
 800ba66:	e7e1      	b.n	800ba2c <_dtoa_r+0x954>
 800ba68:	46bb      	mov	fp, r7
 800ba6a:	4637      	mov	r7, r6
 800ba6c:	e599      	b.n	800b5a2 <_dtoa_r+0x4ca>
 800ba6e:	bf00      	nop
 800ba70:	40240000 	.word	0x40240000
 800ba74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 80c8 	beq.w	800bc0c <_dtoa_r+0xb34>
 800ba7c:	9b04      	ldr	r3, [sp, #16]
 800ba7e:	9301      	str	r3, [sp, #4]
 800ba80:	2d00      	cmp	r5, #0
 800ba82:	dd05      	ble.n	800ba90 <_dtoa_r+0x9b8>
 800ba84:	4639      	mov	r1, r7
 800ba86:	462a      	mov	r2, r5
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f000 fc27 	bl	800c2dc <__lshift>
 800ba8e:	4607      	mov	r7, r0
 800ba90:	f1b8 0f00 	cmp.w	r8, #0
 800ba94:	d05b      	beq.n	800bb4e <_dtoa_r+0xa76>
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fa0f 	bl	800bebc <_Balloc>
 800ba9e:	4605      	mov	r5, r0
 800baa0:	b928      	cbnz	r0, 800baae <_dtoa_r+0x9d6>
 800baa2:	4b83      	ldr	r3, [pc, #524]	; (800bcb0 <_dtoa_r+0xbd8>)
 800baa4:	4602      	mov	r2, r0
 800baa6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800baaa:	f7ff bb2e 	b.w	800b10a <_dtoa_r+0x32>
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	3202      	adds	r2, #2
 800bab2:	0092      	lsls	r2, r2, #2
 800bab4:	f107 010c 	add.w	r1, r7, #12
 800bab8:	300c      	adds	r0, #12
 800baba:	f7ff fa75 	bl	800afa8 <memcpy>
 800babe:	2201      	movs	r2, #1
 800bac0:	4629      	mov	r1, r5
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 fc0a 	bl	800c2dc <__lshift>
 800bac8:	9b00      	ldr	r3, [sp, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	9304      	str	r3, [sp, #16]
 800bace:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bad2:	4413      	add	r3, r2
 800bad4:	9308      	str	r3, [sp, #32]
 800bad6:	9b02      	ldr	r3, [sp, #8]
 800bad8:	f003 0301 	and.w	r3, r3, #1
 800badc:	46b8      	mov	r8, r7
 800bade:	9306      	str	r3, [sp, #24]
 800bae0:	4607      	mov	r7, r0
 800bae2:	9b04      	ldr	r3, [sp, #16]
 800bae4:	4631      	mov	r1, r6
 800bae6:	3b01      	subs	r3, #1
 800bae8:	4650      	mov	r0, sl
 800baea:	9301      	str	r3, [sp, #4]
 800baec:	f7ff fa6a 	bl	800afc4 <quorem>
 800baf0:	4641      	mov	r1, r8
 800baf2:	9002      	str	r0, [sp, #8]
 800baf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800baf8:	4650      	mov	r0, sl
 800bafa:	f000 fc5b 	bl	800c3b4 <__mcmp>
 800bafe:	463a      	mov	r2, r7
 800bb00:	9005      	str	r0, [sp, #20]
 800bb02:	4631      	mov	r1, r6
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 fc71 	bl	800c3ec <__mdiff>
 800bb0a:	68c2      	ldr	r2, [r0, #12]
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	bb02      	cbnz	r2, 800bb52 <_dtoa_r+0xa7a>
 800bb10:	4601      	mov	r1, r0
 800bb12:	4650      	mov	r0, sl
 800bb14:	f000 fc4e 	bl	800c3b4 <__mcmp>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	9209      	str	r2, [sp, #36]	; 0x24
 800bb20:	f000 fa0c 	bl	800bf3c <_Bfree>
 800bb24:	9b07      	ldr	r3, [sp, #28]
 800bb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb28:	9d04      	ldr	r5, [sp, #16]
 800bb2a:	ea43 0102 	orr.w	r1, r3, r2
 800bb2e:	9b06      	ldr	r3, [sp, #24]
 800bb30:	4319      	orrs	r1, r3
 800bb32:	d110      	bne.n	800bb56 <_dtoa_r+0xa7e>
 800bb34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb38:	d029      	beq.n	800bb8e <_dtoa_r+0xab6>
 800bb3a:	9b05      	ldr	r3, [sp, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dd02      	ble.n	800bb46 <_dtoa_r+0xa6e>
 800bb40:	9b02      	ldr	r3, [sp, #8]
 800bb42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bb46:	9b01      	ldr	r3, [sp, #4]
 800bb48:	f883 9000 	strb.w	r9, [r3]
 800bb4c:	e774      	b.n	800ba38 <_dtoa_r+0x960>
 800bb4e:	4638      	mov	r0, r7
 800bb50:	e7ba      	b.n	800bac8 <_dtoa_r+0x9f0>
 800bb52:	2201      	movs	r2, #1
 800bb54:	e7e1      	b.n	800bb1a <_dtoa_r+0xa42>
 800bb56:	9b05      	ldr	r3, [sp, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	db04      	blt.n	800bb66 <_dtoa_r+0xa8e>
 800bb5c:	9907      	ldr	r1, [sp, #28]
 800bb5e:	430b      	orrs	r3, r1
 800bb60:	9906      	ldr	r1, [sp, #24]
 800bb62:	430b      	orrs	r3, r1
 800bb64:	d120      	bne.n	800bba8 <_dtoa_r+0xad0>
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	dded      	ble.n	800bb46 <_dtoa_r+0xa6e>
 800bb6a:	4651      	mov	r1, sl
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fbb4 	bl	800c2dc <__lshift>
 800bb74:	4631      	mov	r1, r6
 800bb76:	4682      	mov	sl, r0
 800bb78:	f000 fc1c 	bl	800c3b4 <__mcmp>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	dc03      	bgt.n	800bb88 <_dtoa_r+0xab0>
 800bb80:	d1e1      	bne.n	800bb46 <_dtoa_r+0xa6e>
 800bb82:	f019 0f01 	tst.w	r9, #1
 800bb86:	d0de      	beq.n	800bb46 <_dtoa_r+0xa6e>
 800bb88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb8c:	d1d8      	bne.n	800bb40 <_dtoa_r+0xa68>
 800bb8e:	9a01      	ldr	r2, [sp, #4]
 800bb90:	2339      	movs	r3, #57	; 0x39
 800bb92:	7013      	strb	r3, [r2, #0]
 800bb94:	462b      	mov	r3, r5
 800bb96:	461d      	mov	r5, r3
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb9e:	2a39      	cmp	r2, #57	; 0x39
 800bba0:	d06c      	beq.n	800bc7c <_dtoa_r+0xba4>
 800bba2:	3201      	adds	r2, #1
 800bba4:	701a      	strb	r2, [r3, #0]
 800bba6:	e747      	b.n	800ba38 <_dtoa_r+0x960>
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	dd07      	ble.n	800bbbc <_dtoa_r+0xae4>
 800bbac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bbb0:	d0ed      	beq.n	800bb8e <_dtoa_r+0xab6>
 800bbb2:	9a01      	ldr	r2, [sp, #4]
 800bbb4:	f109 0301 	add.w	r3, r9, #1
 800bbb8:	7013      	strb	r3, [r2, #0]
 800bbba:	e73d      	b.n	800ba38 <_dtoa_r+0x960>
 800bbbc:	9b04      	ldr	r3, [sp, #16]
 800bbbe:	9a08      	ldr	r2, [sp, #32]
 800bbc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d043      	beq.n	800bc50 <_dtoa_r+0xb78>
 800bbc8:	4651      	mov	r1, sl
 800bbca:	2300      	movs	r3, #0
 800bbcc:	220a      	movs	r2, #10
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f000 f9d6 	bl	800bf80 <__multadd>
 800bbd4:	45b8      	cmp	r8, r7
 800bbd6:	4682      	mov	sl, r0
 800bbd8:	f04f 0300 	mov.w	r3, #0
 800bbdc:	f04f 020a 	mov.w	r2, #10
 800bbe0:	4641      	mov	r1, r8
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	d107      	bne.n	800bbf6 <_dtoa_r+0xb1e>
 800bbe6:	f000 f9cb 	bl	800bf80 <__multadd>
 800bbea:	4680      	mov	r8, r0
 800bbec:	4607      	mov	r7, r0
 800bbee:	9b04      	ldr	r3, [sp, #16]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	9304      	str	r3, [sp, #16]
 800bbf4:	e775      	b.n	800bae2 <_dtoa_r+0xa0a>
 800bbf6:	f000 f9c3 	bl	800bf80 <__multadd>
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	2300      	movs	r3, #0
 800bc00:	220a      	movs	r2, #10
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 f9bc 	bl	800bf80 <__multadd>
 800bc08:	4607      	mov	r7, r0
 800bc0a:	e7f0      	b.n	800bbee <_dtoa_r+0xb16>
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	9301      	str	r3, [sp, #4]
 800bc10:	9d00      	ldr	r5, [sp, #0]
 800bc12:	4631      	mov	r1, r6
 800bc14:	4650      	mov	r0, sl
 800bc16:	f7ff f9d5 	bl	800afc4 <quorem>
 800bc1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bc1e:	9b00      	ldr	r3, [sp, #0]
 800bc20:	f805 9b01 	strb.w	r9, [r5], #1
 800bc24:	1aea      	subs	r2, r5, r3
 800bc26:	9b01      	ldr	r3, [sp, #4]
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	dd07      	ble.n	800bc3c <_dtoa_r+0xb64>
 800bc2c:	4651      	mov	r1, sl
 800bc2e:	2300      	movs	r3, #0
 800bc30:	220a      	movs	r2, #10
 800bc32:	4620      	mov	r0, r4
 800bc34:	f000 f9a4 	bl	800bf80 <__multadd>
 800bc38:	4682      	mov	sl, r0
 800bc3a:	e7ea      	b.n	800bc12 <_dtoa_r+0xb3a>
 800bc3c:	9b01      	ldr	r3, [sp, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	bfc8      	it	gt
 800bc42:	461d      	movgt	r5, r3
 800bc44:	9b00      	ldr	r3, [sp, #0]
 800bc46:	bfd8      	it	le
 800bc48:	2501      	movle	r5, #1
 800bc4a:	441d      	add	r5, r3
 800bc4c:	f04f 0800 	mov.w	r8, #0
 800bc50:	4651      	mov	r1, sl
 800bc52:	2201      	movs	r2, #1
 800bc54:	4620      	mov	r0, r4
 800bc56:	f000 fb41 	bl	800c2dc <__lshift>
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4682      	mov	sl, r0
 800bc5e:	f000 fba9 	bl	800c3b4 <__mcmp>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	dc96      	bgt.n	800bb94 <_dtoa_r+0xabc>
 800bc66:	d102      	bne.n	800bc6e <_dtoa_r+0xb96>
 800bc68:	f019 0f01 	tst.w	r9, #1
 800bc6c:	d192      	bne.n	800bb94 <_dtoa_r+0xabc>
 800bc6e:	462b      	mov	r3, r5
 800bc70:	461d      	mov	r5, r3
 800bc72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc76:	2a30      	cmp	r2, #48	; 0x30
 800bc78:	d0fa      	beq.n	800bc70 <_dtoa_r+0xb98>
 800bc7a:	e6dd      	b.n	800ba38 <_dtoa_r+0x960>
 800bc7c:	9a00      	ldr	r2, [sp, #0]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d189      	bne.n	800bb96 <_dtoa_r+0xabe>
 800bc82:	f10b 0b01 	add.w	fp, fp, #1
 800bc86:	2331      	movs	r3, #49	; 0x31
 800bc88:	e796      	b.n	800bbb8 <_dtoa_r+0xae0>
 800bc8a:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <_dtoa_r+0xbdc>)
 800bc8c:	f7ff ba99 	b.w	800b1c2 <_dtoa_r+0xea>
 800bc90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f47f aa6d 	bne.w	800b172 <_dtoa_r+0x9a>
 800bc98:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <_dtoa_r+0xbe0>)
 800bc9a:	f7ff ba92 	b.w	800b1c2 <_dtoa_r+0xea>
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dcb5      	bgt.n	800bc10 <_dtoa_r+0xb38>
 800bca4:	9b07      	ldr	r3, [sp, #28]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	f73f aeb1 	bgt.w	800ba0e <_dtoa_r+0x936>
 800bcac:	e7b0      	b.n	800bc10 <_dtoa_r+0xb38>
 800bcae:	bf00      	nop
 800bcb0:	0800e609 	.word	0x0800e609
 800bcb4:	0800e569 	.word	0x0800e569
 800bcb8:	0800e58d 	.word	0x0800e58d

0800bcbc <_free_r>:
 800bcbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcbe:	2900      	cmp	r1, #0
 800bcc0:	d044      	beq.n	800bd4c <_free_r+0x90>
 800bcc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcc6:	9001      	str	r0, [sp, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f1a1 0404 	sub.w	r4, r1, #4
 800bcce:	bfb8      	it	lt
 800bcd0:	18e4      	addlt	r4, r4, r3
 800bcd2:	f000 f8e7 	bl	800bea4 <__malloc_lock>
 800bcd6:	4a1e      	ldr	r2, [pc, #120]	; (800bd50 <_free_r+0x94>)
 800bcd8:	9801      	ldr	r0, [sp, #4]
 800bcda:	6813      	ldr	r3, [r2, #0]
 800bcdc:	b933      	cbnz	r3, 800bcec <_free_r+0x30>
 800bcde:	6063      	str	r3, [r4, #4]
 800bce0:	6014      	str	r4, [r2, #0]
 800bce2:	b003      	add	sp, #12
 800bce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bce8:	f000 b8e2 	b.w	800beb0 <__malloc_unlock>
 800bcec:	42a3      	cmp	r3, r4
 800bcee:	d908      	bls.n	800bd02 <_free_r+0x46>
 800bcf0:	6825      	ldr	r5, [r4, #0]
 800bcf2:	1961      	adds	r1, r4, r5
 800bcf4:	428b      	cmp	r3, r1
 800bcf6:	bf01      	itttt	eq
 800bcf8:	6819      	ldreq	r1, [r3, #0]
 800bcfa:	685b      	ldreq	r3, [r3, #4]
 800bcfc:	1949      	addeq	r1, r1, r5
 800bcfe:	6021      	streq	r1, [r4, #0]
 800bd00:	e7ed      	b.n	800bcde <_free_r+0x22>
 800bd02:	461a      	mov	r2, r3
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	b10b      	cbz	r3, 800bd0c <_free_r+0x50>
 800bd08:	42a3      	cmp	r3, r4
 800bd0a:	d9fa      	bls.n	800bd02 <_free_r+0x46>
 800bd0c:	6811      	ldr	r1, [r2, #0]
 800bd0e:	1855      	adds	r5, r2, r1
 800bd10:	42a5      	cmp	r5, r4
 800bd12:	d10b      	bne.n	800bd2c <_free_r+0x70>
 800bd14:	6824      	ldr	r4, [r4, #0]
 800bd16:	4421      	add	r1, r4
 800bd18:	1854      	adds	r4, r2, r1
 800bd1a:	42a3      	cmp	r3, r4
 800bd1c:	6011      	str	r1, [r2, #0]
 800bd1e:	d1e0      	bne.n	800bce2 <_free_r+0x26>
 800bd20:	681c      	ldr	r4, [r3, #0]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	6053      	str	r3, [r2, #4]
 800bd26:	440c      	add	r4, r1
 800bd28:	6014      	str	r4, [r2, #0]
 800bd2a:	e7da      	b.n	800bce2 <_free_r+0x26>
 800bd2c:	d902      	bls.n	800bd34 <_free_r+0x78>
 800bd2e:	230c      	movs	r3, #12
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	e7d6      	b.n	800bce2 <_free_r+0x26>
 800bd34:	6825      	ldr	r5, [r4, #0]
 800bd36:	1961      	adds	r1, r4, r5
 800bd38:	428b      	cmp	r3, r1
 800bd3a:	bf04      	itt	eq
 800bd3c:	6819      	ldreq	r1, [r3, #0]
 800bd3e:	685b      	ldreq	r3, [r3, #4]
 800bd40:	6063      	str	r3, [r4, #4]
 800bd42:	bf04      	itt	eq
 800bd44:	1949      	addeq	r1, r1, r5
 800bd46:	6021      	streq	r1, [r4, #0]
 800bd48:	6054      	str	r4, [r2, #4]
 800bd4a:	e7ca      	b.n	800bce2 <_free_r+0x26>
 800bd4c:	b003      	add	sp, #12
 800bd4e:	bd30      	pop	{r4, r5, pc}
 800bd50:	2000a3cc 	.word	0x2000a3cc

0800bd54 <malloc>:
 800bd54:	4b02      	ldr	r3, [pc, #8]	; (800bd60 <malloc+0xc>)
 800bd56:	4601      	mov	r1, r0
 800bd58:	6818      	ldr	r0, [r3, #0]
 800bd5a:	f000 b823 	b.w	800bda4 <_malloc_r>
 800bd5e:	bf00      	nop
 800bd60:	2000169c 	.word	0x2000169c

0800bd64 <sbrk_aligned>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	4e0e      	ldr	r6, [pc, #56]	; (800bda0 <sbrk_aligned+0x3c>)
 800bd68:	460c      	mov	r4, r1
 800bd6a:	6831      	ldr	r1, [r6, #0]
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	b911      	cbnz	r1, 800bd76 <sbrk_aligned+0x12>
 800bd70:	f000 fe40 	bl	800c9f4 <_sbrk_r>
 800bd74:	6030      	str	r0, [r6, #0]
 800bd76:	4621      	mov	r1, r4
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f000 fe3b 	bl	800c9f4 <_sbrk_r>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	d00a      	beq.n	800bd98 <sbrk_aligned+0x34>
 800bd82:	1cc4      	adds	r4, r0, #3
 800bd84:	f024 0403 	bic.w	r4, r4, #3
 800bd88:	42a0      	cmp	r0, r4
 800bd8a:	d007      	beq.n	800bd9c <sbrk_aligned+0x38>
 800bd8c:	1a21      	subs	r1, r4, r0
 800bd8e:	4628      	mov	r0, r5
 800bd90:	f000 fe30 	bl	800c9f4 <_sbrk_r>
 800bd94:	3001      	adds	r0, #1
 800bd96:	d101      	bne.n	800bd9c <sbrk_aligned+0x38>
 800bd98:	f04f 34ff 	mov.w	r4, #4294967295
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}
 800bda0:	2000a3d0 	.word	0x2000a3d0

0800bda4 <_malloc_r>:
 800bda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda8:	1ccd      	adds	r5, r1, #3
 800bdaa:	f025 0503 	bic.w	r5, r5, #3
 800bdae:	3508      	adds	r5, #8
 800bdb0:	2d0c      	cmp	r5, #12
 800bdb2:	bf38      	it	cc
 800bdb4:	250c      	movcc	r5, #12
 800bdb6:	2d00      	cmp	r5, #0
 800bdb8:	4607      	mov	r7, r0
 800bdba:	db01      	blt.n	800bdc0 <_malloc_r+0x1c>
 800bdbc:	42a9      	cmp	r1, r5
 800bdbe:	d905      	bls.n	800bdcc <_malloc_r+0x28>
 800bdc0:	230c      	movs	r3, #12
 800bdc2:	603b      	str	r3, [r7, #0]
 800bdc4:	2600      	movs	r6, #0
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bea0 <_malloc_r+0xfc>
 800bdd0:	f000 f868 	bl	800bea4 <__malloc_lock>
 800bdd4:	f8d8 3000 	ldr.w	r3, [r8]
 800bdd8:	461c      	mov	r4, r3
 800bdda:	bb5c      	cbnz	r4, 800be34 <_malloc_r+0x90>
 800bddc:	4629      	mov	r1, r5
 800bdde:	4638      	mov	r0, r7
 800bde0:	f7ff ffc0 	bl	800bd64 <sbrk_aligned>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	4604      	mov	r4, r0
 800bde8:	d155      	bne.n	800be96 <_malloc_r+0xf2>
 800bdea:	f8d8 4000 	ldr.w	r4, [r8]
 800bdee:	4626      	mov	r6, r4
 800bdf0:	2e00      	cmp	r6, #0
 800bdf2:	d145      	bne.n	800be80 <_malloc_r+0xdc>
 800bdf4:	2c00      	cmp	r4, #0
 800bdf6:	d048      	beq.n	800be8a <_malloc_r+0xe6>
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	eb04 0903 	add.w	r9, r4, r3
 800be02:	f000 fdf7 	bl	800c9f4 <_sbrk_r>
 800be06:	4581      	cmp	r9, r0
 800be08:	d13f      	bne.n	800be8a <_malloc_r+0xe6>
 800be0a:	6821      	ldr	r1, [r4, #0]
 800be0c:	1a6d      	subs	r5, r5, r1
 800be0e:	4629      	mov	r1, r5
 800be10:	4638      	mov	r0, r7
 800be12:	f7ff ffa7 	bl	800bd64 <sbrk_aligned>
 800be16:	3001      	adds	r0, #1
 800be18:	d037      	beq.n	800be8a <_malloc_r+0xe6>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	442b      	add	r3, r5
 800be1e:	6023      	str	r3, [r4, #0]
 800be20:	f8d8 3000 	ldr.w	r3, [r8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d038      	beq.n	800be9a <_malloc_r+0xf6>
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	42a2      	cmp	r2, r4
 800be2c:	d12b      	bne.n	800be86 <_malloc_r+0xe2>
 800be2e:	2200      	movs	r2, #0
 800be30:	605a      	str	r2, [r3, #4]
 800be32:	e00f      	b.n	800be54 <_malloc_r+0xb0>
 800be34:	6822      	ldr	r2, [r4, #0]
 800be36:	1b52      	subs	r2, r2, r5
 800be38:	d41f      	bmi.n	800be7a <_malloc_r+0xd6>
 800be3a:	2a0b      	cmp	r2, #11
 800be3c:	d917      	bls.n	800be6e <_malloc_r+0xca>
 800be3e:	1961      	adds	r1, r4, r5
 800be40:	42a3      	cmp	r3, r4
 800be42:	6025      	str	r5, [r4, #0]
 800be44:	bf18      	it	ne
 800be46:	6059      	strne	r1, [r3, #4]
 800be48:	6863      	ldr	r3, [r4, #4]
 800be4a:	bf08      	it	eq
 800be4c:	f8c8 1000 	streq.w	r1, [r8]
 800be50:	5162      	str	r2, [r4, r5]
 800be52:	604b      	str	r3, [r1, #4]
 800be54:	4638      	mov	r0, r7
 800be56:	f104 060b 	add.w	r6, r4, #11
 800be5a:	f000 f829 	bl	800beb0 <__malloc_unlock>
 800be5e:	f026 0607 	bic.w	r6, r6, #7
 800be62:	1d23      	adds	r3, r4, #4
 800be64:	1af2      	subs	r2, r6, r3
 800be66:	d0ae      	beq.n	800bdc6 <_malloc_r+0x22>
 800be68:	1b9b      	subs	r3, r3, r6
 800be6a:	50a3      	str	r3, [r4, r2]
 800be6c:	e7ab      	b.n	800bdc6 <_malloc_r+0x22>
 800be6e:	42a3      	cmp	r3, r4
 800be70:	6862      	ldr	r2, [r4, #4]
 800be72:	d1dd      	bne.n	800be30 <_malloc_r+0x8c>
 800be74:	f8c8 2000 	str.w	r2, [r8]
 800be78:	e7ec      	b.n	800be54 <_malloc_r+0xb0>
 800be7a:	4623      	mov	r3, r4
 800be7c:	6864      	ldr	r4, [r4, #4]
 800be7e:	e7ac      	b.n	800bdda <_malloc_r+0x36>
 800be80:	4634      	mov	r4, r6
 800be82:	6876      	ldr	r6, [r6, #4]
 800be84:	e7b4      	b.n	800bdf0 <_malloc_r+0x4c>
 800be86:	4613      	mov	r3, r2
 800be88:	e7cc      	b.n	800be24 <_malloc_r+0x80>
 800be8a:	230c      	movs	r3, #12
 800be8c:	603b      	str	r3, [r7, #0]
 800be8e:	4638      	mov	r0, r7
 800be90:	f000 f80e 	bl	800beb0 <__malloc_unlock>
 800be94:	e797      	b.n	800bdc6 <_malloc_r+0x22>
 800be96:	6025      	str	r5, [r4, #0]
 800be98:	e7dc      	b.n	800be54 <_malloc_r+0xb0>
 800be9a:	605b      	str	r3, [r3, #4]
 800be9c:	deff      	udf	#255	; 0xff
 800be9e:	bf00      	nop
 800bea0:	2000a3cc 	.word	0x2000a3cc

0800bea4 <__malloc_lock>:
 800bea4:	4801      	ldr	r0, [pc, #4]	; (800beac <__malloc_lock+0x8>)
 800bea6:	f7ff b875 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800beaa:	bf00      	nop
 800beac:	2000a3c8 	.word	0x2000a3c8

0800beb0 <__malloc_unlock>:
 800beb0:	4801      	ldr	r0, [pc, #4]	; (800beb8 <__malloc_unlock+0x8>)
 800beb2:	f7ff b870 	b.w	800af96 <__retarget_lock_release_recursive>
 800beb6:	bf00      	nop
 800beb8:	2000a3c8 	.word	0x2000a3c8

0800bebc <_Balloc>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	69c6      	ldr	r6, [r0, #28]
 800bec0:	4604      	mov	r4, r0
 800bec2:	460d      	mov	r5, r1
 800bec4:	b976      	cbnz	r6, 800bee4 <_Balloc+0x28>
 800bec6:	2010      	movs	r0, #16
 800bec8:	f7ff ff44 	bl	800bd54 <malloc>
 800becc:	4602      	mov	r2, r0
 800bece:	61e0      	str	r0, [r4, #28]
 800bed0:	b920      	cbnz	r0, 800bedc <_Balloc+0x20>
 800bed2:	4b18      	ldr	r3, [pc, #96]	; (800bf34 <_Balloc+0x78>)
 800bed4:	4818      	ldr	r0, [pc, #96]	; (800bf38 <_Balloc+0x7c>)
 800bed6:	216b      	movs	r1, #107	; 0x6b
 800bed8:	f000 fd9c 	bl	800ca14 <__assert_func>
 800bedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bee0:	6006      	str	r6, [r0, #0]
 800bee2:	60c6      	str	r6, [r0, #12]
 800bee4:	69e6      	ldr	r6, [r4, #28]
 800bee6:	68f3      	ldr	r3, [r6, #12]
 800bee8:	b183      	cbz	r3, 800bf0c <_Balloc+0x50>
 800beea:	69e3      	ldr	r3, [r4, #28]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bef2:	b9b8      	cbnz	r0, 800bf24 <_Balloc+0x68>
 800bef4:	2101      	movs	r1, #1
 800bef6:	fa01 f605 	lsl.w	r6, r1, r5
 800befa:	1d72      	adds	r2, r6, #5
 800befc:	0092      	lsls	r2, r2, #2
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 fda6 	bl	800ca50 <_calloc_r>
 800bf04:	b160      	cbz	r0, 800bf20 <_Balloc+0x64>
 800bf06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf0a:	e00e      	b.n	800bf2a <_Balloc+0x6e>
 800bf0c:	2221      	movs	r2, #33	; 0x21
 800bf0e:	2104      	movs	r1, #4
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 fd9d 	bl	800ca50 <_calloc_r>
 800bf16:	69e3      	ldr	r3, [r4, #28]
 800bf18:	60f0      	str	r0, [r6, #12]
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1e4      	bne.n	800beea <_Balloc+0x2e>
 800bf20:	2000      	movs	r0, #0
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	6802      	ldr	r2, [r0, #0]
 800bf26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf30:	e7f7      	b.n	800bf22 <_Balloc+0x66>
 800bf32:	bf00      	nop
 800bf34:	0800e59a 	.word	0x0800e59a
 800bf38:	0800e61a 	.word	0x0800e61a

0800bf3c <_Bfree>:
 800bf3c:	b570      	push	{r4, r5, r6, lr}
 800bf3e:	69c6      	ldr	r6, [r0, #28]
 800bf40:	4605      	mov	r5, r0
 800bf42:	460c      	mov	r4, r1
 800bf44:	b976      	cbnz	r6, 800bf64 <_Bfree+0x28>
 800bf46:	2010      	movs	r0, #16
 800bf48:	f7ff ff04 	bl	800bd54 <malloc>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	61e8      	str	r0, [r5, #28]
 800bf50:	b920      	cbnz	r0, 800bf5c <_Bfree+0x20>
 800bf52:	4b09      	ldr	r3, [pc, #36]	; (800bf78 <_Bfree+0x3c>)
 800bf54:	4809      	ldr	r0, [pc, #36]	; (800bf7c <_Bfree+0x40>)
 800bf56:	218f      	movs	r1, #143	; 0x8f
 800bf58:	f000 fd5c 	bl	800ca14 <__assert_func>
 800bf5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf60:	6006      	str	r6, [r0, #0]
 800bf62:	60c6      	str	r6, [r0, #12]
 800bf64:	b13c      	cbz	r4, 800bf76 <_Bfree+0x3a>
 800bf66:	69eb      	ldr	r3, [r5, #28]
 800bf68:	6862      	ldr	r2, [r4, #4]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf70:	6021      	str	r1, [r4, #0]
 800bf72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	0800e59a 	.word	0x0800e59a
 800bf7c:	0800e61a 	.word	0x0800e61a

0800bf80 <__multadd>:
 800bf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf84:	690d      	ldr	r5, [r1, #16]
 800bf86:	4607      	mov	r7, r0
 800bf88:	460c      	mov	r4, r1
 800bf8a:	461e      	mov	r6, r3
 800bf8c:	f101 0c14 	add.w	ip, r1, #20
 800bf90:	2000      	movs	r0, #0
 800bf92:	f8dc 3000 	ldr.w	r3, [ip]
 800bf96:	b299      	uxth	r1, r3
 800bf98:	fb02 6101 	mla	r1, r2, r1, r6
 800bf9c:	0c1e      	lsrs	r6, r3, #16
 800bf9e:	0c0b      	lsrs	r3, r1, #16
 800bfa0:	fb02 3306 	mla	r3, r2, r6, r3
 800bfa4:	b289      	uxth	r1, r1
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfac:	4285      	cmp	r5, r0
 800bfae:	f84c 1b04 	str.w	r1, [ip], #4
 800bfb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfb6:	dcec      	bgt.n	800bf92 <__multadd+0x12>
 800bfb8:	b30e      	cbz	r6, 800bffe <__multadd+0x7e>
 800bfba:	68a3      	ldr	r3, [r4, #8]
 800bfbc:	42ab      	cmp	r3, r5
 800bfbe:	dc19      	bgt.n	800bff4 <__multadd+0x74>
 800bfc0:	6861      	ldr	r1, [r4, #4]
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	3101      	adds	r1, #1
 800bfc6:	f7ff ff79 	bl	800bebc <_Balloc>
 800bfca:	4680      	mov	r8, r0
 800bfcc:	b928      	cbnz	r0, 800bfda <__multadd+0x5a>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <__multadd+0x84>)
 800bfd2:	480d      	ldr	r0, [pc, #52]	; (800c008 <__multadd+0x88>)
 800bfd4:	21ba      	movs	r1, #186	; 0xba
 800bfd6:	f000 fd1d 	bl	800ca14 <__assert_func>
 800bfda:	6922      	ldr	r2, [r4, #16]
 800bfdc:	3202      	adds	r2, #2
 800bfde:	f104 010c 	add.w	r1, r4, #12
 800bfe2:	0092      	lsls	r2, r2, #2
 800bfe4:	300c      	adds	r0, #12
 800bfe6:	f7fe ffdf 	bl	800afa8 <memcpy>
 800bfea:	4621      	mov	r1, r4
 800bfec:	4638      	mov	r0, r7
 800bfee:	f7ff ffa5 	bl	800bf3c <_Bfree>
 800bff2:	4644      	mov	r4, r8
 800bff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bff8:	3501      	adds	r5, #1
 800bffa:	615e      	str	r6, [r3, #20]
 800bffc:	6125      	str	r5, [r4, #16]
 800bffe:	4620      	mov	r0, r4
 800c000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c004:	0800e609 	.word	0x0800e609
 800c008:	0800e61a 	.word	0x0800e61a

0800c00c <__hi0bits>:
 800c00c:	0c03      	lsrs	r3, r0, #16
 800c00e:	041b      	lsls	r3, r3, #16
 800c010:	b9d3      	cbnz	r3, 800c048 <__hi0bits+0x3c>
 800c012:	0400      	lsls	r0, r0, #16
 800c014:	2310      	movs	r3, #16
 800c016:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c01a:	bf04      	itt	eq
 800c01c:	0200      	lsleq	r0, r0, #8
 800c01e:	3308      	addeq	r3, #8
 800c020:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c024:	bf04      	itt	eq
 800c026:	0100      	lsleq	r0, r0, #4
 800c028:	3304      	addeq	r3, #4
 800c02a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c02e:	bf04      	itt	eq
 800c030:	0080      	lsleq	r0, r0, #2
 800c032:	3302      	addeq	r3, #2
 800c034:	2800      	cmp	r0, #0
 800c036:	db05      	blt.n	800c044 <__hi0bits+0x38>
 800c038:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c03c:	f103 0301 	add.w	r3, r3, #1
 800c040:	bf08      	it	eq
 800c042:	2320      	moveq	r3, #32
 800c044:	4618      	mov	r0, r3
 800c046:	4770      	bx	lr
 800c048:	2300      	movs	r3, #0
 800c04a:	e7e4      	b.n	800c016 <__hi0bits+0xa>

0800c04c <__lo0bits>:
 800c04c:	6803      	ldr	r3, [r0, #0]
 800c04e:	f013 0207 	ands.w	r2, r3, #7
 800c052:	d00c      	beq.n	800c06e <__lo0bits+0x22>
 800c054:	07d9      	lsls	r1, r3, #31
 800c056:	d422      	bmi.n	800c09e <__lo0bits+0x52>
 800c058:	079a      	lsls	r2, r3, #30
 800c05a:	bf49      	itett	mi
 800c05c:	085b      	lsrmi	r3, r3, #1
 800c05e:	089b      	lsrpl	r3, r3, #2
 800c060:	6003      	strmi	r3, [r0, #0]
 800c062:	2201      	movmi	r2, #1
 800c064:	bf5c      	itt	pl
 800c066:	6003      	strpl	r3, [r0, #0]
 800c068:	2202      	movpl	r2, #2
 800c06a:	4610      	mov	r0, r2
 800c06c:	4770      	bx	lr
 800c06e:	b299      	uxth	r1, r3
 800c070:	b909      	cbnz	r1, 800c076 <__lo0bits+0x2a>
 800c072:	0c1b      	lsrs	r3, r3, #16
 800c074:	2210      	movs	r2, #16
 800c076:	b2d9      	uxtb	r1, r3
 800c078:	b909      	cbnz	r1, 800c07e <__lo0bits+0x32>
 800c07a:	3208      	adds	r2, #8
 800c07c:	0a1b      	lsrs	r3, r3, #8
 800c07e:	0719      	lsls	r1, r3, #28
 800c080:	bf04      	itt	eq
 800c082:	091b      	lsreq	r3, r3, #4
 800c084:	3204      	addeq	r2, #4
 800c086:	0799      	lsls	r1, r3, #30
 800c088:	bf04      	itt	eq
 800c08a:	089b      	lsreq	r3, r3, #2
 800c08c:	3202      	addeq	r2, #2
 800c08e:	07d9      	lsls	r1, r3, #31
 800c090:	d403      	bmi.n	800c09a <__lo0bits+0x4e>
 800c092:	085b      	lsrs	r3, r3, #1
 800c094:	f102 0201 	add.w	r2, r2, #1
 800c098:	d003      	beq.n	800c0a2 <__lo0bits+0x56>
 800c09a:	6003      	str	r3, [r0, #0]
 800c09c:	e7e5      	b.n	800c06a <__lo0bits+0x1e>
 800c09e:	2200      	movs	r2, #0
 800c0a0:	e7e3      	b.n	800c06a <__lo0bits+0x1e>
 800c0a2:	2220      	movs	r2, #32
 800c0a4:	e7e1      	b.n	800c06a <__lo0bits+0x1e>
	...

0800c0a8 <__i2b>:
 800c0a8:	b510      	push	{r4, lr}
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	2101      	movs	r1, #1
 800c0ae:	f7ff ff05 	bl	800bebc <_Balloc>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	b928      	cbnz	r0, 800c0c2 <__i2b+0x1a>
 800c0b6:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <__i2b+0x24>)
 800c0b8:	4805      	ldr	r0, [pc, #20]	; (800c0d0 <__i2b+0x28>)
 800c0ba:	f240 1145 	movw	r1, #325	; 0x145
 800c0be:	f000 fca9 	bl	800ca14 <__assert_func>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	6144      	str	r4, [r0, #20]
 800c0c6:	6103      	str	r3, [r0, #16]
 800c0c8:	bd10      	pop	{r4, pc}
 800c0ca:	bf00      	nop
 800c0cc:	0800e609 	.word	0x0800e609
 800c0d0:	0800e61a 	.word	0x0800e61a

0800c0d4 <__multiply>:
 800c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	4691      	mov	r9, r2
 800c0da:	690a      	ldr	r2, [r1, #16]
 800c0dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	bfb8      	it	lt
 800c0e4:	460b      	movlt	r3, r1
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	bfbc      	itt	lt
 800c0ea:	464c      	movlt	r4, r9
 800c0ec:	4699      	movlt	r9, r3
 800c0ee:	6927      	ldr	r7, [r4, #16]
 800c0f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0f4:	68a3      	ldr	r3, [r4, #8]
 800c0f6:	6861      	ldr	r1, [r4, #4]
 800c0f8:	eb07 060a 	add.w	r6, r7, sl
 800c0fc:	42b3      	cmp	r3, r6
 800c0fe:	b085      	sub	sp, #20
 800c100:	bfb8      	it	lt
 800c102:	3101      	addlt	r1, #1
 800c104:	f7ff feda 	bl	800bebc <_Balloc>
 800c108:	b930      	cbnz	r0, 800c118 <__multiply+0x44>
 800c10a:	4602      	mov	r2, r0
 800c10c:	4b44      	ldr	r3, [pc, #272]	; (800c220 <__multiply+0x14c>)
 800c10e:	4845      	ldr	r0, [pc, #276]	; (800c224 <__multiply+0x150>)
 800c110:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c114:	f000 fc7e 	bl	800ca14 <__assert_func>
 800c118:	f100 0514 	add.w	r5, r0, #20
 800c11c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c120:	462b      	mov	r3, r5
 800c122:	2200      	movs	r2, #0
 800c124:	4543      	cmp	r3, r8
 800c126:	d321      	bcc.n	800c16c <__multiply+0x98>
 800c128:	f104 0314 	add.w	r3, r4, #20
 800c12c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c130:	f109 0314 	add.w	r3, r9, #20
 800c134:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c138:	9202      	str	r2, [sp, #8]
 800c13a:	1b3a      	subs	r2, r7, r4
 800c13c:	3a15      	subs	r2, #21
 800c13e:	f022 0203 	bic.w	r2, r2, #3
 800c142:	3204      	adds	r2, #4
 800c144:	f104 0115 	add.w	r1, r4, #21
 800c148:	428f      	cmp	r7, r1
 800c14a:	bf38      	it	cc
 800c14c:	2204      	movcc	r2, #4
 800c14e:	9201      	str	r2, [sp, #4]
 800c150:	9a02      	ldr	r2, [sp, #8]
 800c152:	9303      	str	r3, [sp, #12]
 800c154:	429a      	cmp	r2, r3
 800c156:	d80c      	bhi.n	800c172 <__multiply+0x9e>
 800c158:	2e00      	cmp	r6, #0
 800c15a:	dd03      	ble.n	800c164 <__multiply+0x90>
 800c15c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c160:	2b00      	cmp	r3, #0
 800c162:	d05b      	beq.n	800c21c <__multiply+0x148>
 800c164:	6106      	str	r6, [r0, #16]
 800c166:	b005      	add	sp, #20
 800c168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16c:	f843 2b04 	str.w	r2, [r3], #4
 800c170:	e7d8      	b.n	800c124 <__multiply+0x50>
 800c172:	f8b3 a000 	ldrh.w	sl, [r3]
 800c176:	f1ba 0f00 	cmp.w	sl, #0
 800c17a:	d024      	beq.n	800c1c6 <__multiply+0xf2>
 800c17c:	f104 0e14 	add.w	lr, r4, #20
 800c180:	46a9      	mov	r9, r5
 800c182:	f04f 0c00 	mov.w	ip, #0
 800c186:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c18a:	f8d9 1000 	ldr.w	r1, [r9]
 800c18e:	fa1f fb82 	uxth.w	fp, r2
 800c192:	b289      	uxth	r1, r1
 800c194:	fb0a 110b 	mla	r1, sl, fp, r1
 800c198:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c19c:	f8d9 2000 	ldr.w	r2, [r9]
 800c1a0:	4461      	add	r1, ip
 800c1a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1ae:	b289      	uxth	r1, r1
 800c1b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1b4:	4577      	cmp	r7, lr
 800c1b6:	f849 1b04 	str.w	r1, [r9], #4
 800c1ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1be:	d8e2      	bhi.n	800c186 <__multiply+0xb2>
 800c1c0:	9a01      	ldr	r2, [sp, #4]
 800c1c2:	f845 c002 	str.w	ip, [r5, r2]
 800c1c6:	9a03      	ldr	r2, [sp, #12]
 800c1c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	f1b9 0f00 	cmp.w	r9, #0
 800c1d2:	d021      	beq.n	800c218 <__multiply+0x144>
 800c1d4:	6829      	ldr	r1, [r5, #0]
 800c1d6:	f104 0c14 	add.w	ip, r4, #20
 800c1da:	46ae      	mov	lr, r5
 800c1dc:	f04f 0a00 	mov.w	sl, #0
 800c1e0:	f8bc b000 	ldrh.w	fp, [ip]
 800c1e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c1e8:	fb09 220b 	mla	r2, r9, fp, r2
 800c1ec:	4452      	add	r2, sl
 800c1ee:	b289      	uxth	r1, r1
 800c1f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1f4:	f84e 1b04 	str.w	r1, [lr], #4
 800c1f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c1fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c200:	f8be 1000 	ldrh.w	r1, [lr]
 800c204:	fb09 110a 	mla	r1, r9, sl, r1
 800c208:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c20c:	4567      	cmp	r7, ip
 800c20e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c212:	d8e5      	bhi.n	800c1e0 <__multiply+0x10c>
 800c214:	9a01      	ldr	r2, [sp, #4]
 800c216:	50a9      	str	r1, [r5, r2]
 800c218:	3504      	adds	r5, #4
 800c21a:	e799      	b.n	800c150 <__multiply+0x7c>
 800c21c:	3e01      	subs	r6, #1
 800c21e:	e79b      	b.n	800c158 <__multiply+0x84>
 800c220:	0800e609 	.word	0x0800e609
 800c224:	0800e61a 	.word	0x0800e61a

0800c228 <__pow5mult>:
 800c228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c22c:	4615      	mov	r5, r2
 800c22e:	f012 0203 	ands.w	r2, r2, #3
 800c232:	4606      	mov	r6, r0
 800c234:	460f      	mov	r7, r1
 800c236:	d007      	beq.n	800c248 <__pow5mult+0x20>
 800c238:	4c25      	ldr	r4, [pc, #148]	; (800c2d0 <__pow5mult+0xa8>)
 800c23a:	3a01      	subs	r2, #1
 800c23c:	2300      	movs	r3, #0
 800c23e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c242:	f7ff fe9d 	bl	800bf80 <__multadd>
 800c246:	4607      	mov	r7, r0
 800c248:	10ad      	asrs	r5, r5, #2
 800c24a:	d03d      	beq.n	800c2c8 <__pow5mult+0xa0>
 800c24c:	69f4      	ldr	r4, [r6, #28]
 800c24e:	b97c      	cbnz	r4, 800c270 <__pow5mult+0x48>
 800c250:	2010      	movs	r0, #16
 800c252:	f7ff fd7f 	bl	800bd54 <malloc>
 800c256:	4602      	mov	r2, r0
 800c258:	61f0      	str	r0, [r6, #28]
 800c25a:	b928      	cbnz	r0, 800c268 <__pow5mult+0x40>
 800c25c:	4b1d      	ldr	r3, [pc, #116]	; (800c2d4 <__pow5mult+0xac>)
 800c25e:	481e      	ldr	r0, [pc, #120]	; (800c2d8 <__pow5mult+0xb0>)
 800c260:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c264:	f000 fbd6 	bl	800ca14 <__assert_func>
 800c268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c26c:	6004      	str	r4, [r0, #0]
 800c26e:	60c4      	str	r4, [r0, #12]
 800c270:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c278:	b94c      	cbnz	r4, 800c28e <__pow5mult+0x66>
 800c27a:	f240 2171 	movw	r1, #625	; 0x271
 800c27e:	4630      	mov	r0, r6
 800c280:	f7ff ff12 	bl	800c0a8 <__i2b>
 800c284:	2300      	movs	r3, #0
 800c286:	f8c8 0008 	str.w	r0, [r8, #8]
 800c28a:	4604      	mov	r4, r0
 800c28c:	6003      	str	r3, [r0, #0]
 800c28e:	f04f 0900 	mov.w	r9, #0
 800c292:	07eb      	lsls	r3, r5, #31
 800c294:	d50a      	bpl.n	800c2ac <__pow5mult+0x84>
 800c296:	4639      	mov	r1, r7
 800c298:	4622      	mov	r2, r4
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7ff ff1a 	bl	800c0d4 <__multiply>
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	4680      	mov	r8, r0
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f7ff fe49 	bl	800bf3c <_Bfree>
 800c2aa:	4647      	mov	r7, r8
 800c2ac:	106d      	asrs	r5, r5, #1
 800c2ae:	d00b      	beq.n	800c2c8 <__pow5mult+0xa0>
 800c2b0:	6820      	ldr	r0, [r4, #0]
 800c2b2:	b938      	cbnz	r0, 800c2c4 <__pow5mult+0x9c>
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f7ff ff0b 	bl	800c0d4 <__multiply>
 800c2be:	6020      	str	r0, [r4, #0]
 800c2c0:	f8c0 9000 	str.w	r9, [r0]
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	e7e4      	b.n	800c292 <__pow5mult+0x6a>
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ce:	bf00      	nop
 800c2d0:	0800e768 	.word	0x0800e768
 800c2d4:	0800e59a 	.word	0x0800e59a
 800c2d8:	0800e61a 	.word	0x0800e61a

0800c2dc <__lshift>:
 800c2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	6849      	ldr	r1, [r1, #4]
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2ea:	68a3      	ldr	r3, [r4, #8]
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	4691      	mov	r9, r2
 800c2f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2f4:	f108 0601 	add.w	r6, r8, #1
 800c2f8:	42b3      	cmp	r3, r6
 800c2fa:	db0b      	blt.n	800c314 <__lshift+0x38>
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f7ff fddd 	bl	800bebc <_Balloc>
 800c302:	4605      	mov	r5, r0
 800c304:	b948      	cbnz	r0, 800c31a <__lshift+0x3e>
 800c306:	4602      	mov	r2, r0
 800c308:	4b28      	ldr	r3, [pc, #160]	; (800c3ac <__lshift+0xd0>)
 800c30a:	4829      	ldr	r0, [pc, #164]	; (800c3b0 <__lshift+0xd4>)
 800c30c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c310:	f000 fb80 	bl	800ca14 <__assert_func>
 800c314:	3101      	adds	r1, #1
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	e7ee      	b.n	800c2f8 <__lshift+0x1c>
 800c31a:	2300      	movs	r3, #0
 800c31c:	f100 0114 	add.w	r1, r0, #20
 800c320:	f100 0210 	add.w	r2, r0, #16
 800c324:	4618      	mov	r0, r3
 800c326:	4553      	cmp	r3, sl
 800c328:	db33      	blt.n	800c392 <__lshift+0xb6>
 800c32a:	6920      	ldr	r0, [r4, #16]
 800c32c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c330:	f104 0314 	add.w	r3, r4, #20
 800c334:	f019 091f 	ands.w	r9, r9, #31
 800c338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c33c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c340:	d02b      	beq.n	800c39a <__lshift+0xbe>
 800c342:	f1c9 0e20 	rsb	lr, r9, #32
 800c346:	468a      	mov	sl, r1
 800c348:	2200      	movs	r2, #0
 800c34a:	6818      	ldr	r0, [r3, #0]
 800c34c:	fa00 f009 	lsl.w	r0, r0, r9
 800c350:	4310      	orrs	r0, r2
 800c352:	f84a 0b04 	str.w	r0, [sl], #4
 800c356:	f853 2b04 	ldr.w	r2, [r3], #4
 800c35a:	459c      	cmp	ip, r3
 800c35c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c360:	d8f3      	bhi.n	800c34a <__lshift+0x6e>
 800c362:	ebac 0304 	sub.w	r3, ip, r4
 800c366:	3b15      	subs	r3, #21
 800c368:	f023 0303 	bic.w	r3, r3, #3
 800c36c:	3304      	adds	r3, #4
 800c36e:	f104 0015 	add.w	r0, r4, #21
 800c372:	4584      	cmp	ip, r0
 800c374:	bf38      	it	cc
 800c376:	2304      	movcc	r3, #4
 800c378:	50ca      	str	r2, [r1, r3]
 800c37a:	b10a      	cbz	r2, 800c380 <__lshift+0xa4>
 800c37c:	f108 0602 	add.w	r6, r8, #2
 800c380:	3e01      	subs	r6, #1
 800c382:	4638      	mov	r0, r7
 800c384:	612e      	str	r6, [r5, #16]
 800c386:	4621      	mov	r1, r4
 800c388:	f7ff fdd8 	bl	800bf3c <_Bfree>
 800c38c:	4628      	mov	r0, r5
 800c38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c392:	f842 0f04 	str.w	r0, [r2, #4]!
 800c396:	3301      	adds	r3, #1
 800c398:	e7c5      	b.n	800c326 <__lshift+0x4a>
 800c39a:	3904      	subs	r1, #4
 800c39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3a4:	459c      	cmp	ip, r3
 800c3a6:	d8f9      	bhi.n	800c39c <__lshift+0xc0>
 800c3a8:	e7ea      	b.n	800c380 <__lshift+0xa4>
 800c3aa:	bf00      	nop
 800c3ac:	0800e609 	.word	0x0800e609
 800c3b0:	0800e61a 	.word	0x0800e61a

0800c3b4 <__mcmp>:
 800c3b4:	b530      	push	{r4, r5, lr}
 800c3b6:	6902      	ldr	r2, [r0, #16]
 800c3b8:	690c      	ldr	r4, [r1, #16]
 800c3ba:	1b12      	subs	r2, r2, r4
 800c3bc:	d10e      	bne.n	800c3dc <__mcmp+0x28>
 800c3be:	f100 0314 	add.w	r3, r0, #20
 800c3c2:	3114      	adds	r1, #20
 800c3c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c3c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c3cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c3d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c3d4:	42a5      	cmp	r5, r4
 800c3d6:	d003      	beq.n	800c3e0 <__mcmp+0x2c>
 800c3d8:	d305      	bcc.n	800c3e6 <__mcmp+0x32>
 800c3da:	2201      	movs	r2, #1
 800c3dc:	4610      	mov	r0, r2
 800c3de:	bd30      	pop	{r4, r5, pc}
 800c3e0:	4283      	cmp	r3, r0
 800c3e2:	d3f3      	bcc.n	800c3cc <__mcmp+0x18>
 800c3e4:	e7fa      	b.n	800c3dc <__mcmp+0x28>
 800c3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ea:	e7f7      	b.n	800c3dc <__mcmp+0x28>

0800c3ec <__mdiff>:
 800c3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	4690      	mov	r8, r2
 800c3fa:	f7ff ffdb 	bl	800c3b4 <__mcmp>
 800c3fe:	1e05      	subs	r5, r0, #0
 800c400:	d110      	bne.n	800c424 <__mdiff+0x38>
 800c402:	4629      	mov	r1, r5
 800c404:	4630      	mov	r0, r6
 800c406:	f7ff fd59 	bl	800bebc <_Balloc>
 800c40a:	b930      	cbnz	r0, 800c41a <__mdiff+0x2e>
 800c40c:	4b3a      	ldr	r3, [pc, #232]	; (800c4f8 <__mdiff+0x10c>)
 800c40e:	4602      	mov	r2, r0
 800c410:	f240 2137 	movw	r1, #567	; 0x237
 800c414:	4839      	ldr	r0, [pc, #228]	; (800c4fc <__mdiff+0x110>)
 800c416:	f000 fafd 	bl	800ca14 <__assert_func>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c424:	bfa4      	itt	ge
 800c426:	4643      	movge	r3, r8
 800c428:	46a0      	movge	r8, r4
 800c42a:	4630      	mov	r0, r6
 800c42c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c430:	bfa6      	itte	ge
 800c432:	461c      	movge	r4, r3
 800c434:	2500      	movge	r5, #0
 800c436:	2501      	movlt	r5, #1
 800c438:	f7ff fd40 	bl	800bebc <_Balloc>
 800c43c:	b920      	cbnz	r0, 800c448 <__mdiff+0x5c>
 800c43e:	4b2e      	ldr	r3, [pc, #184]	; (800c4f8 <__mdiff+0x10c>)
 800c440:	4602      	mov	r2, r0
 800c442:	f240 2145 	movw	r1, #581	; 0x245
 800c446:	e7e5      	b.n	800c414 <__mdiff+0x28>
 800c448:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c44c:	6926      	ldr	r6, [r4, #16]
 800c44e:	60c5      	str	r5, [r0, #12]
 800c450:	f104 0914 	add.w	r9, r4, #20
 800c454:	f108 0514 	add.w	r5, r8, #20
 800c458:	f100 0e14 	add.w	lr, r0, #20
 800c45c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c460:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c464:	f108 0210 	add.w	r2, r8, #16
 800c468:	46f2      	mov	sl, lr
 800c46a:	2100      	movs	r1, #0
 800c46c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c470:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c474:	fa11 f88b 	uxtah	r8, r1, fp
 800c478:	b299      	uxth	r1, r3
 800c47a:	0c1b      	lsrs	r3, r3, #16
 800c47c:	eba8 0801 	sub.w	r8, r8, r1
 800c480:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c484:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c488:	fa1f f888 	uxth.w	r8, r8
 800c48c:	1419      	asrs	r1, r3, #16
 800c48e:	454e      	cmp	r6, r9
 800c490:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c494:	f84a 3b04 	str.w	r3, [sl], #4
 800c498:	d8e8      	bhi.n	800c46c <__mdiff+0x80>
 800c49a:	1b33      	subs	r3, r6, r4
 800c49c:	3b15      	subs	r3, #21
 800c49e:	f023 0303 	bic.w	r3, r3, #3
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	3415      	adds	r4, #21
 800c4a6:	42a6      	cmp	r6, r4
 800c4a8:	bf38      	it	cc
 800c4aa:	2304      	movcc	r3, #4
 800c4ac:	441d      	add	r5, r3
 800c4ae:	4473      	add	r3, lr
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	462e      	mov	r6, r5
 800c4b4:	4566      	cmp	r6, ip
 800c4b6:	d30e      	bcc.n	800c4d6 <__mdiff+0xea>
 800c4b8:	f10c 0203 	add.w	r2, ip, #3
 800c4bc:	1b52      	subs	r2, r2, r5
 800c4be:	f022 0203 	bic.w	r2, r2, #3
 800c4c2:	3d03      	subs	r5, #3
 800c4c4:	45ac      	cmp	ip, r5
 800c4c6:	bf38      	it	cc
 800c4c8:	2200      	movcc	r2, #0
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c4d0:	b17a      	cbz	r2, 800c4f2 <__mdiff+0x106>
 800c4d2:	6107      	str	r7, [r0, #16]
 800c4d4:	e7a4      	b.n	800c420 <__mdiff+0x34>
 800c4d6:	f856 8b04 	ldr.w	r8, [r6], #4
 800c4da:	fa11 f288 	uxtah	r2, r1, r8
 800c4de:	1414      	asrs	r4, r2, #16
 800c4e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c4e4:	b292      	uxth	r2, r2
 800c4e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c4ea:	f84e 2b04 	str.w	r2, [lr], #4
 800c4ee:	1421      	asrs	r1, r4, #16
 800c4f0:	e7e0      	b.n	800c4b4 <__mdiff+0xc8>
 800c4f2:	3f01      	subs	r7, #1
 800c4f4:	e7ea      	b.n	800c4cc <__mdiff+0xe0>
 800c4f6:	bf00      	nop
 800c4f8:	0800e609 	.word	0x0800e609
 800c4fc:	0800e61a 	.word	0x0800e61a

0800c500 <__d2b>:
 800c500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c504:	460f      	mov	r7, r1
 800c506:	2101      	movs	r1, #1
 800c508:	ec59 8b10 	vmov	r8, r9, d0
 800c50c:	4616      	mov	r6, r2
 800c50e:	f7ff fcd5 	bl	800bebc <_Balloc>
 800c512:	4604      	mov	r4, r0
 800c514:	b930      	cbnz	r0, 800c524 <__d2b+0x24>
 800c516:	4602      	mov	r2, r0
 800c518:	4b24      	ldr	r3, [pc, #144]	; (800c5ac <__d2b+0xac>)
 800c51a:	4825      	ldr	r0, [pc, #148]	; (800c5b0 <__d2b+0xb0>)
 800c51c:	f240 310f 	movw	r1, #783	; 0x30f
 800c520:	f000 fa78 	bl	800ca14 <__assert_func>
 800c524:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c52c:	bb2d      	cbnz	r5, 800c57a <__d2b+0x7a>
 800c52e:	9301      	str	r3, [sp, #4]
 800c530:	f1b8 0300 	subs.w	r3, r8, #0
 800c534:	d026      	beq.n	800c584 <__d2b+0x84>
 800c536:	4668      	mov	r0, sp
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	f7ff fd87 	bl	800c04c <__lo0bits>
 800c53e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c542:	b1e8      	cbz	r0, 800c580 <__d2b+0x80>
 800c544:	f1c0 0320 	rsb	r3, r0, #32
 800c548:	fa02 f303 	lsl.w	r3, r2, r3
 800c54c:	430b      	orrs	r3, r1
 800c54e:	40c2      	lsrs	r2, r0
 800c550:	6163      	str	r3, [r4, #20]
 800c552:	9201      	str	r2, [sp, #4]
 800c554:	9b01      	ldr	r3, [sp, #4]
 800c556:	61a3      	str	r3, [r4, #24]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	bf14      	ite	ne
 800c55c:	2202      	movne	r2, #2
 800c55e:	2201      	moveq	r2, #1
 800c560:	6122      	str	r2, [r4, #16]
 800c562:	b1bd      	cbz	r5, 800c594 <__d2b+0x94>
 800c564:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c568:	4405      	add	r5, r0
 800c56a:	603d      	str	r5, [r7, #0]
 800c56c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c570:	6030      	str	r0, [r6, #0]
 800c572:	4620      	mov	r0, r4
 800c574:	b003      	add	sp, #12
 800c576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c57a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c57e:	e7d6      	b.n	800c52e <__d2b+0x2e>
 800c580:	6161      	str	r1, [r4, #20]
 800c582:	e7e7      	b.n	800c554 <__d2b+0x54>
 800c584:	a801      	add	r0, sp, #4
 800c586:	f7ff fd61 	bl	800c04c <__lo0bits>
 800c58a:	9b01      	ldr	r3, [sp, #4]
 800c58c:	6163      	str	r3, [r4, #20]
 800c58e:	3020      	adds	r0, #32
 800c590:	2201      	movs	r2, #1
 800c592:	e7e5      	b.n	800c560 <__d2b+0x60>
 800c594:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c598:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c59c:	6038      	str	r0, [r7, #0]
 800c59e:	6918      	ldr	r0, [r3, #16]
 800c5a0:	f7ff fd34 	bl	800c00c <__hi0bits>
 800c5a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5a8:	e7e2      	b.n	800c570 <__d2b+0x70>
 800c5aa:	bf00      	nop
 800c5ac:	0800e609 	.word	0x0800e609
 800c5b0:	0800e61a 	.word	0x0800e61a

0800c5b4 <__ssputs_r>:
 800c5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b8:	688e      	ldr	r6, [r1, #8]
 800c5ba:	461f      	mov	r7, r3
 800c5bc:	42be      	cmp	r6, r7
 800c5be:	680b      	ldr	r3, [r1, #0]
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	4690      	mov	r8, r2
 800c5c6:	d82c      	bhi.n	800c622 <__ssputs_r+0x6e>
 800c5c8:	898a      	ldrh	r2, [r1, #12]
 800c5ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5ce:	d026      	beq.n	800c61e <__ssputs_r+0x6a>
 800c5d0:	6965      	ldr	r5, [r4, #20]
 800c5d2:	6909      	ldr	r1, [r1, #16]
 800c5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5d8:	eba3 0901 	sub.w	r9, r3, r1
 800c5dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5e0:	1c7b      	adds	r3, r7, #1
 800c5e2:	444b      	add	r3, r9
 800c5e4:	106d      	asrs	r5, r5, #1
 800c5e6:	429d      	cmp	r5, r3
 800c5e8:	bf38      	it	cc
 800c5ea:	461d      	movcc	r5, r3
 800c5ec:	0553      	lsls	r3, r2, #21
 800c5ee:	d527      	bpl.n	800c640 <__ssputs_r+0x8c>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f7ff fbd7 	bl	800bda4 <_malloc_r>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	b360      	cbz	r0, 800c654 <__ssputs_r+0xa0>
 800c5fa:	6921      	ldr	r1, [r4, #16]
 800c5fc:	464a      	mov	r2, r9
 800c5fe:	f7fe fcd3 	bl	800afa8 <memcpy>
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c60c:	81a3      	strh	r3, [r4, #12]
 800c60e:	6126      	str	r6, [r4, #16]
 800c610:	6165      	str	r5, [r4, #20]
 800c612:	444e      	add	r6, r9
 800c614:	eba5 0509 	sub.w	r5, r5, r9
 800c618:	6026      	str	r6, [r4, #0]
 800c61a:	60a5      	str	r5, [r4, #8]
 800c61c:	463e      	mov	r6, r7
 800c61e:	42be      	cmp	r6, r7
 800c620:	d900      	bls.n	800c624 <__ssputs_r+0x70>
 800c622:	463e      	mov	r6, r7
 800c624:	6820      	ldr	r0, [r4, #0]
 800c626:	4632      	mov	r2, r6
 800c628:	4641      	mov	r1, r8
 800c62a:	f000 f9c9 	bl	800c9c0 <memmove>
 800c62e:	68a3      	ldr	r3, [r4, #8]
 800c630:	1b9b      	subs	r3, r3, r6
 800c632:	60a3      	str	r3, [r4, #8]
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	4433      	add	r3, r6
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	2000      	movs	r0, #0
 800c63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c640:	462a      	mov	r2, r5
 800c642:	f000 fa2d 	bl	800caa0 <_realloc_r>
 800c646:	4606      	mov	r6, r0
 800c648:	2800      	cmp	r0, #0
 800c64a:	d1e0      	bne.n	800c60e <__ssputs_r+0x5a>
 800c64c:	6921      	ldr	r1, [r4, #16]
 800c64e:	4650      	mov	r0, sl
 800c650:	f7ff fb34 	bl	800bcbc <_free_r>
 800c654:	230c      	movs	r3, #12
 800c656:	f8ca 3000 	str.w	r3, [sl]
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c660:	81a3      	strh	r3, [r4, #12]
 800c662:	f04f 30ff 	mov.w	r0, #4294967295
 800c666:	e7e9      	b.n	800c63c <__ssputs_r+0x88>

0800c668 <_svfiprintf_r>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	4698      	mov	r8, r3
 800c66e:	898b      	ldrh	r3, [r1, #12]
 800c670:	061b      	lsls	r3, r3, #24
 800c672:	b09d      	sub	sp, #116	; 0x74
 800c674:	4607      	mov	r7, r0
 800c676:	460d      	mov	r5, r1
 800c678:	4614      	mov	r4, r2
 800c67a:	d50e      	bpl.n	800c69a <_svfiprintf_r+0x32>
 800c67c:	690b      	ldr	r3, [r1, #16]
 800c67e:	b963      	cbnz	r3, 800c69a <_svfiprintf_r+0x32>
 800c680:	2140      	movs	r1, #64	; 0x40
 800c682:	f7ff fb8f 	bl	800bda4 <_malloc_r>
 800c686:	6028      	str	r0, [r5, #0]
 800c688:	6128      	str	r0, [r5, #16]
 800c68a:	b920      	cbnz	r0, 800c696 <_svfiprintf_r+0x2e>
 800c68c:	230c      	movs	r3, #12
 800c68e:	603b      	str	r3, [r7, #0]
 800c690:	f04f 30ff 	mov.w	r0, #4294967295
 800c694:	e0d0      	b.n	800c838 <_svfiprintf_r+0x1d0>
 800c696:	2340      	movs	r3, #64	; 0x40
 800c698:	616b      	str	r3, [r5, #20]
 800c69a:	2300      	movs	r3, #0
 800c69c:	9309      	str	r3, [sp, #36]	; 0x24
 800c69e:	2320      	movs	r3, #32
 800c6a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a8:	2330      	movs	r3, #48	; 0x30
 800c6aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c850 <_svfiprintf_r+0x1e8>
 800c6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6b2:	f04f 0901 	mov.w	r9, #1
 800c6b6:	4623      	mov	r3, r4
 800c6b8:	469a      	mov	sl, r3
 800c6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6be:	b10a      	cbz	r2, 800c6c4 <_svfiprintf_r+0x5c>
 800c6c0:	2a25      	cmp	r2, #37	; 0x25
 800c6c2:	d1f9      	bne.n	800c6b8 <_svfiprintf_r+0x50>
 800c6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6c8:	d00b      	beq.n	800c6e2 <_svfiprintf_r+0x7a>
 800c6ca:	465b      	mov	r3, fp
 800c6cc:	4622      	mov	r2, r4
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7ff ff6f 	bl	800c5b4 <__ssputs_r>
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	f000 80a9 	beq.w	800c82e <_svfiprintf_r+0x1c6>
 800c6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6de:	445a      	add	r2, fp
 800c6e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 80a1 	beq.w	800c82e <_svfiprintf_r+0x1c6>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6f6:	f10a 0a01 	add.w	sl, sl, #1
 800c6fa:	9304      	str	r3, [sp, #16]
 800c6fc:	9307      	str	r3, [sp, #28]
 800c6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c702:	931a      	str	r3, [sp, #104]	; 0x68
 800c704:	4654      	mov	r4, sl
 800c706:	2205      	movs	r2, #5
 800c708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70c:	4850      	ldr	r0, [pc, #320]	; (800c850 <_svfiprintf_r+0x1e8>)
 800c70e:	f7f3 fd8f 	bl	8000230 <memchr>
 800c712:	9a04      	ldr	r2, [sp, #16]
 800c714:	b9d8      	cbnz	r0, 800c74e <_svfiprintf_r+0xe6>
 800c716:	06d0      	lsls	r0, r2, #27
 800c718:	bf44      	itt	mi
 800c71a:	2320      	movmi	r3, #32
 800c71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c720:	0711      	lsls	r1, r2, #28
 800c722:	bf44      	itt	mi
 800c724:	232b      	movmi	r3, #43	; 0x2b
 800c726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c72a:	f89a 3000 	ldrb.w	r3, [sl]
 800c72e:	2b2a      	cmp	r3, #42	; 0x2a
 800c730:	d015      	beq.n	800c75e <_svfiprintf_r+0xf6>
 800c732:	9a07      	ldr	r2, [sp, #28]
 800c734:	4654      	mov	r4, sl
 800c736:	2000      	movs	r0, #0
 800c738:	f04f 0c0a 	mov.w	ip, #10
 800c73c:	4621      	mov	r1, r4
 800c73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c742:	3b30      	subs	r3, #48	; 0x30
 800c744:	2b09      	cmp	r3, #9
 800c746:	d94d      	bls.n	800c7e4 <_svfiprintf_r+0x17c>
 800c748:	b1b0      	cbz	r0, 800c778 <_svfiprintf_r+0x110>
 800c74a:	9207      	str	r2, [sp, #28]
 800c74c:	e014      	b.n	800c778 <_svfiprintf_r+0x110>
 800c74e:	eba0 0308 	sub.w	r3, r0, r8
 800c752:	fa09 f303 	lsl.w	r3, r9, r3
 800c756:	4313      	orrs	r3, r2
 800c758:	9304      	str	r3, [sp, #16]
 800c75a:	46a2      	mov	sl, r4
 800c75c:	e7d2      	b.n	800c704 <_svfiprintf_r+0x9c>
 800c75e:	9b03      	ldr	r3, [sp, #12]
 800c760:	1d19      	adds	r1, r3, #4
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	9103      	str	r1, [sp, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	bfbb      	ittet	lt
 800c76a:	425b      	neglt	r3, r3
 800c76c:	f042 0202 	orrlt.w	r2, r2, #2
 800c770:	9307      	strge	r3, [sp, #28]
 800c772:	9307      	strlt	r3, [sp, #28]
 800c774:	bfb8      	it	lt
 800c776:	9204      	strlt	r2, [sp, #16]
 800c778:	7823      	ldrb	r3, [r4, #0]
 800c77a:	2b2e      	cmp	r3, #46	; 0x2e
 800c77c:	d10c      	bne.n	800c798 <_svfiprintf_r+0x130>
 800c77e:	7863      	ldrb	r3, [r4, #1]
 800c780:	2b2a      	cmp	r3, #42	; 0x2a
 800c782:	d134      	bne.n	800c7ee <_svfiprintf_r+0x186>
 800c784:	9b03      	ldr	r3, [sp, #12]
 800c786:	1d1a      	adds	r2, r3, #4
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	9203      	str	r2, [sp, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	bfb8      	it	lt
 800c790:	f04f 33ff 	movlt.w	r3, #4294967295
 800c794:	3402      	adds	r4, #2
 800c796:	9305      	str	r3, [sp, #20]
 800c798:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c860 <_svfiprintf_r+0x1f8>
 800c79c:	7821      	ldrb	r1, [r4, #0]
 800c79e:	2203      	movs	r2, #3
 800c7a0:	4650      	mov	r0, sl
 800c7a2:	f7f3 fd45 	bl	8000230 <memchr>
 800c7a6:	b138      	cbz	r0, 800c7b8 <_svfiprintf_r+0x150>
 800c7a8:	9b04      	ldr	r3, [sp, #16]
 800c7aa:	eba0 000a 	sub.w	r0, r0, sl
 800c7ae:	2240      	movs	r2, #64	; 0x40
 800c7b0:	4082      	lsls	r2, r0
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	3401      	adds	r4, #1
 800c7b6:	9304      	str	r3, [sp, #16]
 800c7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7bc:	4825      	ldr	r0, [pc, #148]	; (800c854 <_svfiprintf_r+0x1ec>)
 800c7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7c2:	2206      	movs	r2, #6
 800c7c4:	f7f3 fd34 	bl	8000230 <memchr>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d038      	beq.n	800c83e <_svfiprintf_r+0x1d6>
 800c7cc:	4b22      	ldr	r3, [pc, #136]	; (800c858 <_svfiprintf_r+0x1f0>)
 800c7ce:	bb1b      	cbnz	r3, 800c818 <_svfiprintf_r+0x1b0>
 800c7d0:	9b03      	ldr	r3, [sp, #12]
 800c7d2:	3307      	adds	r3, #7
 800c7d4:	f023 0307 	bic.w	r3, r3, #7
 800c7d8:	3308      	adds	r3, #8
 800c7da:	9303      	str	r3, [sp, #12]
 800c7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7de:	4433      	add	r3, r6
 800c7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e2:	e768      	b.n	800c6b6 <_svfiprintf_r+0x4e>
 800c7e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7e8:	460c      	mov	r4, r1
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	e7a6      	b.n	800c73c <_svfiprintf_r+0xd4>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	3401      	adds	r4, #1
 800c7f2:	9305      	str	r3, [sp, #20]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	f04f 0c0a 	mov.w	ip, #10
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c800:	3a30      	subs	r2, #48	; 0x30
 800c802:	2a09      	cmp	r2, #9
 800c804:	d903      	bls.n	800c80e <_svfiprintf_r+0x1a6>
 800c806:	2b00      	cmp	r3, #0
 800c808:	d0c6      	beq.n	800c798 <_svfiprintf_r+0x130>
 800c80a:	9105      	str	r1, [sp, #20]
 800c80c:	e7c4      	b.n	800c798 <_svfiprintf_r+0x130>
 800c80e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c812:	4604      	mov	r4, r0
 800c814:	2301      	movs	r3, #1
 800c816:	e7f0      	b.n	800c7fa <_svfiprintf_r+0x192>
 800c818:	ab03      	add	r3, sp, #12
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	462a      	mov	r2, r5
 800c81e:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <_svfiprintf_r+0x1f4>)
 800c820:	a904      	add	r1, sp, #16
 800c822:	4638      	mov	r0, r7
 800c824:	f7fd fe40 	bl	800a4a8 <_printf_float>
 800c828:	1c42      	adds	r2, r0, #1
 800c82a:	4606      	mov	r6, r0
 800c82c:	d1d6      	bne.n	800c7dc <_svfiprintf_r+0x174>
 800c82e:	89ab      	ldrh	r3, [r5, #12]
 800c830:	065b      	lsls	r3, r3, #25
 800c832:	f53f af2d 	bmi.w	800c690 <_svfiprintf_r+0x28>
 800c836:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c838:	b01d      	add	sp, #116	; 0x74
 800c83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83e:	ab03      	add	r3, sp, #12
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	462a      	mov	r2, r5
 800c844:	4b05      	ldr	r3, [pc, #20]	; (800c85c <_svfiprintf_r+0x1f4>)
 800c846:	a904      	add	r1, sp, #16
 800c848:	4638      	mov	r0, r7
 800c84a:	f7fe f8d1 	bl	800a9f0 <_printf_i>
 800c84e:	e7eb      	b.n	800c828 <_svfiprintf_r+0x1c0>
 800c850:	0800e774 	.word	0x0800e774
 800c854:	0800e77e 	.word	0x0800e77e
 800c858:	0800a4a9 	.word	0x0800a4a9
 800c85c:	0800c5b5 	.word	0x0800c5b5
 800c860:	0800e77a 	.word	0x0800e77a

0800c864 <__sflush_r>:
 800c864:	898a      	ldrh	r2, [r1, #12]
 800c866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86a:	4605      	mov	r5, r0
 800c86c:	0710      	lsls	r0, r2, #28
 800c86e:	460c      	mov	r4, r1
 800c870:	d458      	bmi.n	800c924 <__sflush_r+0xc0>
 800c872:	684b      	ldr	r3, [r1, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	dc05      	bgt.n	800c884 <__sflush_r+0x20>
 800c878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dc02      	bgt.n	800c884 <__sflush_r+0x20>
 800c87e:	2000      	movs	r0, #0
 800c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c886:	2e00      	cmp	r6, #0
 800c888:	d0f9      	beq.n	800c87e <__sflush_r+0x1a>
 800c88a:	2300      	movs	r3, #0
 800c88c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c890:	682f      	ldr	r7, [r5, #0]
 800c892:	6a21      	ldr	r1, [r4, #32]
 800c894:	602b      	str	r3, [r5, #0]
 800c896:	d032      	beq.n	800c8fe <__sflush_r+0x9a>
 800c898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	075a      	lsls	r2, r3, #29
 800c89e:	d505      	bpl.n	800c8ac <__sflush_r+0x48>
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	1ac0      	subs	r0, r0, r3
 800c8a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8a6:	b10b      	cbz	r3, 800c8ac <__sflush_r+0x48>
 800c8a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8aa:	1ac0      	subs	r0, r0, r3
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8b2:	6a21      	ldr	r1, [r4, #32]
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	47b0      	blx	r6
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	d106      	bne.n	800c8cc <__sflush_r+0x68>
 800c8be:	6829      	ldr	r1, [r5, #0]
 800c8c0:	291d      	cmp	r1, #29
 800c8c2:	d82b      	bhi.n	800c91c <__sflush_r+0xb8>
 800c8c4:	4a29      	ldr	r2, [pc, #164]	; (800c96c <__sflush_r+0x108>)
 800c8c6:	410a      	asrs	r2, r1
 800c8c8:	07d6      	lsls	r6, r2, #31
 800c8ca:	d427      	bmi.n	800c91c <__sflush_r+0xb8>
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	6062      	str	r2, [r4, #4]
 800c8d0:	04d9      	lsls	r1, r3, #19
 800c8d2:	6922      	ldr	r2, [r4, #16]
 800c8d4:	6022      	str	r2, [r4, #0]
 800c8d6:	d504      	bpl.n	800c8e2 <__sflush_r+0x7e>
 800c8d8:	1c42      	adds	r2, r0, #1
 800c8da:	d101      	bne.n	800c8e0 <__sflush_r+0x7c>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b903      	cbnz	r3, 800c8e2 <__sflush_r+0x7e>
 800c8e0:	6560      	str	r0, [r4, #84]	; 0x54
 800c8e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8e4:	602f      	str	r7, [r5, #0]
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d0c9      	beq.n	800c87e <__sflush_r+0x1a>
 800c8ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8ee:	4299      	cmp	r1, r3
 800c8f0:	d002      	beq.n	800c8f8 <__sflush_r+0x94>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f7ff f9e2 	bl	800bcbc <_free_r>
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	6360      	str	r0, [r4, #52]	; 0x34
 800c8fc:	e7c0      	b.n	800c880 <__sflush_r+0x1c>
 800c8fe:	2301      	movs	r3, #1
 800c900:	4628      	mov	r0, r5
 800c902:	47b0      	blx	r6
 800c904:	1c41      	adds	r1, r0, #1
 800c906:	d1c8      	bne.n	800c89a <__sflush_r+0x36>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0c5      	beq.n	800c89a <__sflush_r+0x36>
 800c90e:	2b1d      	cmp	r3, #29
 800c910:	d001      	beq.n	800c916 <__sflush_r+0xb2>
 800c912:	2b16      	cmp	r3, #22
 800c914:	d101      	bne.n	800c91a <__sflush_r+0xb6>
 800c916:	602f      	str	r7, [r5, #0]
 800c918:	e7b1      	b.n	800c87e <__sflush_r+0x1a>
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	e7ad      	b.n	800c880 <__sflush_r+0x1c>
 800c924:	690f      	ldr	r7, [r1, #16]
 800c926:	2f00      	cmp	r7, #0
 800c928:	d0a9      	beq.n	800c87e <__sflush_r+0x1a>
 800c92a:	0793      	lsls	r3, r2, #30
 800c92c:	680e      	ldr	r6, [r1, #0]
 800c92e:	bf08      	it	eq
 800c930:	694b      	ldreq	r3, [r1, #20]
 800c932:	600f      	str	r7, [r1, #0]
 800c934:	bf18      	it	ne
 800c936:	2300      	movne	r3, #0
 800c938:	eba6 0807 	sub.w	r8, r6, r7
 800c93c:	608b      	str	r3, [r1, #8]
 800c93e:	f1b8 0f00 	cmp.w	r8, #0
 800c942:	dd9c      	ble.n	800c87e <__sflush_r+0x1a>
 800c944:	6a21      	ldr	r1, [r4, #32]
 800c946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c948:	4643      	mov	r3, r8
 800c94a:	463a      	mov	r2, r7
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b0      	blx	r6
 800c950:	2800      	cmp	r0, #0
 800c952:	dc06      	bgt.n	800c962 <__sflush_r+0xfe>
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c95a:	81a3      	strh	r3, [r4, #12]
 800c95c:	f04f 30ff 	mov.w	r0, #4294967295
 800c960:	e78e      	b.n	800c880 <__sflush_r+0x1c>
 800c962:	4407      	add	r7, r0
 800c964:	eba8 0800 	sub.w	r8, r8, r0
 800c968:	e7e9      	b.n	800c93e <__sflush_r+0xda>
 800c96a:	bf00      	nop
 800c96c:	dfbffffe 	.word	0xdfbffffe

0800c970 <_fflush_r>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	690b      	ldr	r3, [r1, #16]
 800c974:	4605      	mov	r5, r0
 800c976:	460c      	mov	r4, r1
 800c978:	b913      	cbnz	r3, 800c980 <_fflush_r+0x10>
 800c97a:	2500      	movs	r5, #0
 800c97c:	4628      	mov	r0, r5
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	b118      	cbz	r0, 800c98a <_fflush_r+0x1a>
 800c982:	6a03      	ldr	r3, [r0, #32]
 800c984:	b90b      	cbnz	r3, 800c98a <_fflush_r+0x1a>
 800c986:	f7fe f9cf 	bl	800ad28 <__sinit>
 800c98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d0f3      	beq.n	800c97a <_fflush_r+0xa>
 800c992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c994:	07d0      	lsls	r0, r2, #31
 800c996:	d404      	bmi.n	800c9a2 <_fflush_r+0x32>
 800c998:	0599      	lsls	r1, r3, #22
 800c99a:	d402      	bmi.n	800c9a2 <_fflush_r+0x32>
 800c99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c99e:	f7fe faf9 	bl	800af94 <__retarget_lock_acquire_recursive>
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	f7ff ff5d 	bl	800c864 <__sflush_r>
 800c9aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9ac:	07da      	lsls	r2, r3, #31
 800c9ae:	4605      	mov	r5, r0
 800c9b0:	d4e4      	bmi.n	800c97c <_fflush_r+0xc>
 800c9b2:	89a3      	ldrh	r3, [r4, #12]
 800c9b4:	059b      	lsls	r3, r3, #22
 800c9b6:	d4e1      	bmi.n	800c97c <_fflush_r+0xc>
 800c9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9ba:	f7fe faec 	bl	800af96 <__retarget_lock_release_recursive>
 800c9be:	e7dd      	b.n	800c97c <_fflush_r+0xc>

0800c9c0 <memmove>:
 800c9c0:	4288      	cmp	r0, r1
 800c9c2:	b510      	push	{r4, lr}
 800c9c4:	eb01 0402 	add.w	r4, r1, r2
 800c9c8:	d902      	bls.n	800c9d0 <memmove+0x10>
 800c9ca:	4284      	cmp	r4, r0
 800c9cc:	4623      	mov	r3, r4
 800c9ce:	d807      	bhi.n	800c9e0 <memmove+0x20>
 800c9d0:	1e43      	subs	r3, r0, #1
 800c9d2:	42a1      	cmp	r1, r4
 800c9d4:	d008      	beq.n	800c9e8 <memmove+0x28>
 800c9d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9de:	e7f8      	b.n	800c9d2 <memmove+0x12>
 800c9e0:	4402      	add	r2, r0
 800c9e2:	4601      	mov	r1, r0
 800c9e4:	428a      	cmp	r2, r1
 800c9e6:	d100      	bne.n	800c9ea <memmove+0x2a>
 800c9e8:	bd10      	pop	{r4, pc}
 800c9ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9f2:	e7f7      	b.n	800c9e4 <memmove+0x24>

0800c9f4 <_sbrk_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d06      	ldr	r5, [pc, #24]	; (800ca10 <_sbrk_r+0x1c>)
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	602b      	str	r3, [r5, #0]
 800ca00:	f7f4 fce0 	bl	80013c4 <_sbrk>
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	d102      	bne.n	800ca0e <_sbrk_r+0x1a>
 800ca08:	682b      	ldr	r3, [r5, #0]
 800ca0a:	b103      	cbz	r3, 800ca0e <_sbrk_r+0x1a>
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	2000a3c4 	.word	0x2000a3c4

0800ca14 <__assert_func>:
 800ca14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca16:	4614      	mov	r4, r2
 800ca18:	461a      	mov	r2, r3
 800ca1a:	4b09      	ldr	r3, [pc, #36]	; (800ca40 <__assert_func+0x2c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4605      	mov	r5, r0
 800ca20:	68d8      	ldr	r0, [r3, #12]
 800ca22:	b14c      	cbz	r4, 800ca38 <__assert_func+0x24>
 800ca24:	4b07      	ldr	r3, [pc, #28]	; (800ca44 <__assert_func+0x30>)
 800ca26:	9100      	str	r1, [sp, #0]
 800ca28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca2c:	4906      	ldr	r1, [pc, #24]	; (800ca48 <__assert_func+0x34>)
 800ca2e:	462b      	mov	r3, r5
 800ca30:	f000 f872 	bl	800cb18 <fiprintf>
 800ca34:	f000 f882 	bl	800cb3c <abort>
 800ca38:	4b04      	ldr	r3, [pc, #16]	; (800ca4c <__assert_func+0x38>)
 800ca3a:	461c      	mov	r4, r3
 800ca3c:	e7f3      	b.n	800ca26 <__assert_func+0x12>
 800ca3e:	bf00      	nop
 800ca40:	2000169c 	.word	0x2000169c
 800ca44:	0800e78f 	.word	0x0800e78f
 800ca48:	0800e79c 	.word	0x0800e79c
 800ca4c:	0800e7ca 	.word	0x0800e7ca

0800ca50 <_calloc_r>:
 800ca50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca52:	fba1 2402 	umull	r2, r4, r1, r2
 800ca56:	b94c      	cbnz	r4, 800ca6c <_calloc_r+0x1c>
 800ca58:	4611      	mov	r1, r2
 800ca5a:	9201      	str	r2, [sp, #4]
 800ca5c:	f7ff f9a2 	bl	800bda4 <_malloc_r>
 800ca60:	9a01      	ldr	r2, [sp, #4]
 800ca62:	4605      	mov	r5, r0
 800ca64:	b930      	cbnz	r0, 800ca74 <_calloc_r+0x24>
 800ca66:	4628      	mov	r0, r5
 800ca68:	b003      	add	sp, #12
 800ca6a:	bd30      	pop	{r4, r5, pc}
 800ca6c:	220c      	movs	r2, #12
 800ca6e:	6002      	str	r2, [r0, #0]
 800ca70:	2500      	movs	r5, #0
 800ca72:	e7f8      	b.n	800ca66 <_calloc_r+0x16>
 800ca74:	4621      	mov	r1, r4
 800ca76:	f7fe fa11 	bl	800ae9c <memset>
 800ca7a:	e7f4      	b.n	800ca66 <_calloc_r+0x16>

0800ca7c <__ascii_mbtowc>:
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	b901      	cbnz	r1, 800ca82 <__ascii_mbtowc+0x6>
 800ca80:	a901      	add	r1, sp, #4
 800ca82:	b142      	cbz	r2, 800ca96 <__ascii_mbtowc+0x1a>
 800ca84:	b14b      	cbz	r3, 800ca9a <__ascii_mbtowc+0x1e>
 800ca86:	7813      	ldrb	r3, [r2, #0]
 800ca88:	600b      	str	r3, [r1, #0]
 800ca8a:	7812      	ldrb	r2, [r2, #0]
 800ca8c:	1e10      	subs	r0, r2, #0
 800ca8e:	bf18      	it	ne
 800ca90:	2001      	movne	r0, #1
 800ca92:	b002      	add	sp, #8
 800ca94:	4770      	bx	lr
 800ca96:	4610      	mov	r0, r2
 800ca98:	e7fb      	b.n	800ca92 <__ascii_mbtowc+0x16>
 800ca9a:	f06f 0001 	mvn.w	r0, #1
 800ca9e:	e7f8      	b.n	800ca92 <__ascii_mbtowc+0x16>

0800caa0 <_realloc_r>:
 800caa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa4:	4680      	mov	r8, r0
 800caa6:	4614      	mov	r4, r2
 800caa8:	460e      	mov	r6, r1
 800caaa:	b921      	cbnz	r1, 800cab6 <_realloc_r+0x16>
 800caac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cab0:	4611      	mov	r1, r2
 800cab2:	f7ff b977 	b.w	800bda4 <_malloc_r>
 800cab6:	b92a      	cbnz	r2, 800cac4 <_realloc_r+0x24>
 800cab8:	f7ff f900 	bl	800bcbc <_free_r>
 800cabc:	4625      	mov	r5, r4
 800cabe:	4628      	mov	r0, r5
 800cac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac4:	f000 f841 	bl	800cb4a <_malloc_usable_size_r>
 800cac8:	4284      	cmp	r4, r0
 800caca:	4607      	mov	r7, r0
 800cacc:	d802      	bhi.n	800cad4 <_realloc_r+0x34>
 800cace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cad2:	d812      	bhi.n	800cafa <_realloc_r+0x5a>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4640      	mov	r0, r8
 800cad8:	f7ff f964 	bl	800bda4 <_malloc_r>
 800cadc:	4605      	mov	r5, r0
 800cade:	2800      	cmp	r0, #0
 800cae0:	d0ed      	beq.n	800cabe <_realloc_r+0x1e>
 800cae2:	42bc      	cmp	r4, r7
 800cae4:	4622      	mov	r2, r4
 800cae6:	4631      	mov	r1, r6
 800cae8:	bf28      	it	cs
 800caea:	463a      	movcs	r2, r7
 800caec:	f7fe fa5c 	bl	800afa8 <memcpy>
 800caf0:	4631      	mov	r1, r6
 800caf2:	4640      	mov	r0, r8
 800caf4:	f7ff f8e2 	bl	800bcbc <_free_r>
 800caf8:	e7e1      	b.n	800cabe <_realloc_r+0x1e>
 800cafa:	4635      	mov	r5, r6
 800cafc:	e7df      	b.n	800cabe <_realloc_r+0x1e>

0800cafe <__ascii_wctomb>:
 800cafe:	b149      	cbz	r1, 800cb14 <__ascii_wctomb+0x16>
 800cb00:	2aff      	cmp	r2, #255	; 0xff
 800cb02:	bf85      	ittet	hi
 800cb04:	238a      	movhi	r3, #138	; 0x8a
 800cb06:	6003      	strhi	r3, [r0, #0]
 800cb08:	700a      	strbls	r2, [r1, #0]
 800cb0a:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb0e:	bf98      	it	ls
 800cb10:	2001      	movls	r0, #1
 800cb12:	4770      	bx	lr
 800cb14:	4608      	mov	r0, r1
 800cb16:	4770      	bx	lr

0800cb18 <fiprintf>:
 800cb18:	b40e      	push	{r1, r2, r3}
 800cb1a:	b503      	push	{r0, r1, lr}
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	ab03      	add	r3, sp, #12
 800cb20:	4805      	ldr	r0, [pc, #20]	; (800cb38 <fiprintf+0x20>)
 800cb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb26:	6800      	ldr	r0, [r0, #0]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	f000 f83f 	bl	800cbac <_vfiprintf_r>
 800cb2e:	b002      	add	sp, #8
 800cb30:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb34:	b003      	add	sp, #12
 800cb36:	4770      	bx	lr
 800cb38:	2000169c 	.word	0x2000169c

0800cb3c <abort>:
 800cb3c:	b508      	push	{r3, lr}
 800cb3e:	2006      	movs	r0, #6
 800cb40:	f000 fa0c 	bl	800cf5c <raise>
 800cb44:	2001      	movs	r0, #1
 800cb46:	f7f4 fbc5 	bl	80012d4 <_exit>

0800cb4a <_malloc_usable_size_r>:
 800cb4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb4e:	1f18      	subs	r0, r3, #4
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bfbc      	itt	lt
 800cb54:	580b      	ldrlt	r3, [r1, r0]
 800cb56:	18c0      	addlt	r0, r0, r3
 800cb58:	4770      	bx	lr

0800cb5a <__sfputc_r>:
 800cb5a:	6893      	ldr	r3, [r2, #8]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	b410      	push	{r4}
 800cb62:	6093      	str	r3, [r2, #8]
 800cb64:	da08      	bge.n	800cb78 <__sfputc_r+0x1e>
 800cb66:	6994      	ldr	r4, [r2, #24]
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	db01      	blt.n	800cb70 <__sfputc_r+0x16>
 800cb6c:	290a      	cmp	r1, #10
 800cb6e:	d103      	bne.n	800cb78 <__sfputc_r+0x1e>
 800cb70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb74:	f000 b934 	b.w	800cde0 <__swbuf_r>
 800cb78:	6813      	ldr	r3, [r2, #0]
 800cb7a:	1c58      	adds	r0, r3, #1
 800cb7c:	6010      	str	r0, [r2, #0]
 800cb7e:	7019      	strb	r1, [r3, #0]
 800cb80:	4608      	mov	r0, r1
 800cb82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <__sfputs_r>:
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	460f      	mov	r7, r1
 800cb8e:	4614      	mov	r4, r2
 800cb90:	18d5      	adds	r5, r2, r3
 800cb92:	42ac      	cmp	r4, r5
 800cb94:	d101      	bne.n	800cb9a <__sfputs_r+0x12>
 800cb96:	2000      	movs	r0, #0
 800cb98:	e007      	b.n	800cbaa <__sfputs_r+0x22>
 800cb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9e:	463a      	mov	r2, r7
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ffda 	bl	800cb5a <__sfputc_r>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d1f3      	bne.n	800cb92 <__sfputs_r+0xa>
 800cbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbac <_vfiprintf_r>:
 800cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	b09d      	sub	sp, #116	; 0x74
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	4698      	mov	r8, r3
 800cbb8:	4606      	mov	r6, r0
 800cbba:	b118      	cbz	r0, 800cbc4 <_vfiprintf_r+0x18>
 800cbbc:	6a03      	ldr	r3, [r0, #32]
 800cbbe:	b90b      	cbnz	r3, 800cbc4 <_vfiprintf_r+0x18>
 800cbc0:	f7fe f8b2 	bl	800ad28 <__sinit>
 800cbc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbc6:	07d9      	lsls	r1, r3, #31
 800cbc8:	d405      	bmi.n	800cbd6 <_vfiprintf_r+0x2a>
 800cbca:	89ab      	ldrh	r3, [r5, #12]
 800cbcc:	059a      	lsls	r2, r3, #22
 800cbce:	d402      	bmi.n	800cbd6 <_vfiprintf_r+0x2a>
 800cbd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbd2:	f7fe f9df 	bl	800af94 <__retarget_lock_acquire_recursive>
 800cbd6:	89ab      	ldrh	r3, [r5, #12]
 800cbd8:	071b      	lsls	r3, r3, #28
 800cbda:	d501      	bpl.n	800cbe0 <_vfiprintf_r+0x34>
 800cbdc:	692b      	ldr	r3, [r5, #16]
 800cbde:	b99b      	cbnz	r3, 800cc08 <_vfiprintf_r+0x5c>
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f000 f93a 	bl	800ce5c <__swsetup_r>
 800cbe8:	b170      	cbz	r0, 800cc08 <_vfiprintf_r+0x5c>
 800cbea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbec:	07dc      	lsls	r4, r3, #31
 800cbee:	d504      	bpl.n	800cbfa <_vfiprintf_r+0x4e>
 800cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf4:	b01d      	add	sp, #116	; 0x74
 800cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfa:	89ab      	ldrh	r3, [r5, #12]
 800cbfc:	0598      	lsls	r0, r3, #22
 800cbfe:	d4f7      	bmi.n	800cbf0 <_vfiprintf_r+0x44>
 800cc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc02:	f7fe f9c8 	bl	800af96 <__retarget_lock_release_recursive>
 800cc06:	e7f3      	b.n	800cbf0 <_vfiprintf_r+0x44>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc0c:	2320      	movs	r3, #32
 800cc0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc12:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc16:	2330      	movs	r3, #48	; 0x30
 800cc18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cdcc <_vfiprintf_r+0x220>
 800cc1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc20:	f04f 0901 	mov.w	r9, #1
 800cc24:	4623      	mov	r3, r4
 800cc26:	469a      	mov	sl, r3
 800cc28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc2c:	b10a      	cbz	r2, 800cc32 <_vfiprintf_r+0x86>
 800cc2e:	2a25      	cmp	r2, #37	; 0x25
 800cc30:	d1f9      	bne.n	800cc26 <_vfiprintf_r+0x7a>
 800cc32:	ebba 0b04 	subs.w	fp, sl, r4
 800cc36:	d00b      	beq.n	800cc50 <_vfiprintf_r+0xa4>
 800cc38:	465b      	mov	r3, fp
 800cc3a:	4622      	mov	r2, r4
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f7ff ffa2 	bl	800cb88 <__sfputs_r>
 800cc44:	3001      	adds	r0, #1
 800cc46:	f000 80a9 	beq.w	800cd9c <_vfiprintf_r+0x1f0>
 800cc4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc4c:	445a      	add	r2, fp
 800cc4e:	9209      	str	r2, [sp, #36]	; 0x24
 800cc50:	f89a 3000 	ldrb.w	r3, [sl]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 80a1 	beq.w	800cd9c <_vfiprintf_r+0x1f0>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc64:	f10a 0a01 	add.w	sl, sl, #1
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	9307      	str	r3, [sp, #28]
 800cc6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc70:	931a      	str	r3, [sp, #104]	; 0x68
 800cc72:	4654      	mov	r4, sl
 800cc74:	2205      	movs	r2, #5
 800cc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7a:	4854      	ldr	r0, [pc, #336]	; (800cdcc <_vfiprintf_r+0x220>)
 800cc7c:	f7f3 fad8 	bl	8000230 <memchr>
 800cc80:	9a04      	ldr	r2, [sp, #16]
 800cc82:	b9d8      	cbnz	r0, 800ccbc <_vfiprintf_r+0x110>
 800cc84:	06d1      	lsls	r1, r2, #27
 800cc86:	bf44      	itt	mi
 800cc88:	2320      	movmi	r3, #32
 800cc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc8e:	0713      	lsls	r3, r2, #28
 800cc90:	bf44      	itt	mi
 800cc92:	232b      	movmi	r3, #43	; 0x2b
 800cc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc98:	f89a 3000 	ldrb.w	r3, [sl]
 800cc9c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc9e:	d015      	beq.n	800cccc <_vfiprintf_r+0x120>
 800cca0:	9a07      	ldr	r2, [sp, #28]
 800cca2:	4654      	mov	r4, sl
 800cca4:	2000      	movs	r0, #0
 800cca6:	f04f 0c0a 	mov.w	ip, #10
 800ccaa:	4621      	mov	r1, r4
 800ccac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccb0:	3b30      	subs	r3, #48	; 0x30
 800ccb2:	2b09      	cmp	r3, #9
 800ccb4:	d94d      	bls.n	800cd52 <_vfiprintf_r+0x1a6>
 800ccb6:	b1b0      	cbz	r0, 800cce6 <_vfiprintf_r+0x13a>
 800ccb8:	9207      	str	r2, [sp, #28]
 800ccba:	e014      	b.n	800cce6 <_vfiprintf_r+0x13a>
 800ccbc:	eba0 0308 	sub.w	r3, r0, r8
 800ccc0:	fa09 f303 	lsl.w	r3, r9, r3
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	9304      	str	r3, [sp, #16]
 800ccc8:	46a2      	mov	sl, r4
 800ccca:	e7d2      	b.n	800cc72 <_vfiprintf_r+0xc6>
 800cccc:	9b03      	ldr	r3, [sp, #12]
 800ccce:	1d19      	adds	r1, r3, #4
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	9103      	str	r1, [sp, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bfbb      	ittet	lt
 800ccd8:	425b      	neglt	r3, r3
 800ccda:	f042 0202 	orrlt.w	r2, r2, #2
 800ccde:	9307      	strge	r3, [sp, #28]
 800cce0:	9307      	strlt	r3, [sp, #28]
 800cce2:	bfb8      	it	lt
 800cce4:	9204      	strlt	r2, [sp, #16]
 800cce6:	7823      	ldrb	r3, [r4, #0]
 800cce8:	2b2e      	cmp	r3, #46	; 0x2e
 800ccea:	d10c      	bne.n	800cd06 <_vfiprintf_r+0x15a>
 800ccec:	7863      	ldrb	r3, [r4, #1]
 800ccee:	2b2a      	cmp	r3, #42	; 0x2a
 800ccf0:	d134      	bne.n	800cd5c <_vfiprintf_r+0x1b0>
 800ccf2:	9b03      	ldr	r3, [sp, #12]
 800ccf4:	1d1a      	adds	r2, r3, #4
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	9203      	str	r2, [sp, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	bfb8      	it	lt
 800ccfe:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd02:	3402      	adds	r4, #2
 800cd04:	9305      	str	r3, [sp, #20]
 800cd06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cddc <_vfiprintf_r+0x230>
 800cd0a:	7821      	ldrb	r1, [r4, #0]
 800cd0c:	2203      	movs	r2, #3
 800cd0e:	4650      	mov	r0, sl
 800cd10:	f7f3 fa8e 	bl	8000230 <memchr>
 800cd14:	b138      	cbz	r0, 800cd26 <_vfiprintf_r+0x17a>
 800cd16:	9b04      	ldr	r3, [sp, #16]
 800cd18:	eba0 000a 	sub.w	r0, r0, sl
 800cd1c:	2240      	movs	r2, #64	; 0x40
 800cd1e:	4082      	lsls	r2, r0
 800cd20:	4313      	orrs	r3, r2
 800cd22:	3401      	adds	r4, #1
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd2a:	4829      	ldr	r0, [pc, #164]	; (800cdd0 <_vfiprintf_r+0x224>)
 800cd2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd30:	2206      	movs	r2, #6
 800cd32:	f7f3 fa7d 	bl	8000230 <memchr>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d03f      	beq.n	800cdba <_vfiprintf_r+0x20e>
 800cd3a:	4b26      	ldr	r3, [pc, #152]	; (800cdd4 <_vfiprintf_r+0x228>)
 800cd3c:	bb1b      	cbnz	r3, 800cd86 <_vfiprintf_r+0x1da>
 800cd3e:	9b03      	ldr	r3, [sp, #12]
 800cd40:	3307      	adds	r3, #7
 800cd42:	f023 0307 	bic.w	r3, r3, #7
 800cd46:	3308      	adds	r3, #8
 800cd48:	9303      	str	r3, [sp, #12]
 800cd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd4c:	443b      	add	r3, r7
 800cd4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd50:	e768      	b.n	800cc24 <_vfiprintf_r+0x78>
 800cd52:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd56:	460c      	mov	r4, r1
 800cd58:	2001      	movs	r0, #1
 800cd5a:	e7a6      	b.n	800ccaa <_vfiprintf_r+0xfe>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	3401      	adds	r4, #1
 800cd60:	9305      	str	r3, [sp, #20]
 800cd62:	4619      	mov	r1, r3
 800cd64:	f04f 0c0a 	mov.w	ip, #10
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd6e:	3a30      	subs	r2, #48	; 0x30
 800cd70:	2a09      	cmp	r2, #9
 800cd72:	d903      	bls.n	800cd7c <_vfiprintf_r+0x1d0>
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0c6      	beq.n	800cd06 <_vfiprintf_r+0x15a>
 800cd78:	9105      	str	r1, [sp, #20]
 800cd7a:	e7c4      	b.n	800cd06 <_vfiprintf_r+0x15a>
 800cd7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd80:	4604      	mov	r4, r0
 800cd82:	2301      	movs	r3, #1
 800cd84:	e7f0      	b.n	800cd68 <_vfiprintf_r+0x1bc>
 800cd86:	ab03      	add	r3, sp, #12
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	462a      	mov	r2, r5
 800cd8c:	4b12      	ldr	r3, [pc, #72]	; (800cdd8 <_vfiprintf_r+0x22c>)
 800cd8e:	a904      	add	r1, sp, #16
 800cd90:	4630      	mov	r0, r6
 800cd92:	f7fd fb89 	bl	800a4a8 <_printf_float>
 800cd96:	4607      	mov	r7, r0
 800cd98:	1c78      	adds	r0, r7, #1
 800cd9a:	d1d6      	bne.n	800cd4a <_vfiprintf_r+0x19e>
 800cd9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd9e:	07d9      	lsls	r1, r3, #31
 800cda0:	d405      	bmi.n	800cdae <_vfiprintf_r+0x202>
 800cda2:	89ab      	ldrh	r3, [r5, #12]
 800cda4:	059a      	lsls	r2, r3, #22
 800cda6:	d402      	bmi.n	800cdae <_vfiprintf_r+0x202>
 800cda8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdaa:	f7fe f8f4 	bl	800af96 <__retarget_lock_release_recursive>
 800cdae:	89ab      	ldrh	r3, [r5, #12]
 800cdb0:	065b      	lsls	r3, r3, #25
 800cdb2:	f53f af1d 	bmi.w	800cbf0 <_vfiprintf_r+0x44>
 800cdb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdb8:	e71c      	b.n	800cbf4 <_vfiprintf_r+0x48>
 800cdba:	ab03      	add	r3, sp, #12
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	462a      	mov	r2, r5
 800cdc0:	4b05      	ldr	r3, [pc, #20]	; (800cdd8 <_vfiprintf_r+0x22c>)
 800cdc2:	a904      	add	r1, sp, #16
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f7fd fe13 	bl	800a9f0 <_printf_i>
 800cdca:	e7e4      	b.n	800cd96 <_vfiprintf_r+0x1ea>
 800cdcc:	0800e774 	.word	0x0800e774
 800cdd0:	0800e77e 	.word	0x0800e77e
 800cdd4:	0800a4a9 	.word	0x0800a4a9
 800cdd8:	0800cb89 	.word	0x0800cb89
 800cddc:	0800e77a 	.word	0x0800e77a

0800cde0 <__swbuf_r>:
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	460e      	mov	r6, r1
 800cde4:	4614      	mov	r4, r2
 800cde6:	4605      	mov	r5, r0
 800cde8:	b118      	cbz	r0, 800cdf2 <__swbuf_r+0x12>
 800cdea:	6a03      	ldr	r3, [r0, #32]
 800cdec:	b90b      	cbnz	r3, 800cdf2 <__swbuf_r+0x12>
 800cdee:	f7fd ff9b 	bl	800ad28 <__sinit>
 800cdf2:	69a3      	ldr	r3, [r4, #24]
 800cdf4:	60a3      	str	r3, [r4, #8]
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	071a      	lsls	r2, r3, #28
 800cdfa:	d525      	bpl.n	800ce48 <__swbuf_r+0x68>
 800cdfc:	6923      	ldr	r3, [r4, #16]
 800cdfe:	b31b      	cbz	r3, 800ce48 <__swbuf_r+0x68>
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	6922      	ldr	r2, [r4, #16]
 800ce04:	1a98      	subs	r0, r3, r2
 800ce06:	6963      	ldr	r3, [r4, #20]
 800ce08:	b2f6      	uxtb	r6, r6
 800ce0a:	4283      	cmp	r3, r0
 800ce0c:	4637      	mov	r7, r6
 800ce0e:	dc04      	bgt.n	800ce1a <__swbuf_r+0x3a>
 800ce10:	4621      	mov	r1, r4
 800ce12:	4628      	mov	r0, r5
 800ce14:	f7ff fdac 	bl	800c970 <_fflush_r>
 800ce18:	b9e0      	cbnz	r0, 800ce54 <__swbuf_r+0x74>
 800ce1a:	68a3      	ldr	r3, [r4, #8]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	60a3      	str	r3, [r4, #8]
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	1c5a      	adds	r2, r3, #1
 800ce24:	6022      	str	r2, [r4, #0]
 800ce26:	701e      	strb	r6, [r3, #0]
 800ce28:	6962      	ldr	r2, [r4, #20]
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d004      	beq.n	800ce3a <__swbuf_r+0x5a>
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	07db      	lsls	r3, r3, #31
 800ce34:	d506      	bpl.n	800ce44 <__swbuf_r+0x64>
 800ce36:	2e0a      	cmp	r6, #10
 800ce38:	d104      	bne.n	800ce44 <__swbuf_r+0x64>
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	f7ff fd97 	bl	800c970 <_fflush_r>
 800ce42:	b938      	cbnz	r0, 800ce54 <__swbuf_r+0x74>
 800ce44:	4638      	mov	r0, r7
 800ce46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce48:	4621      	mov	r1, r4
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f000 f806 	bl	800ce5c <__swsetup_r>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d0d5      	beq.n	800ce00 <__swbuf_r+0x20>
 800ce54:	f04f 37ff 	mov.w	r7, #4294967295
 800ce58:	e7f4      	b.n	800ce44 <__swbuf_r+0x64>
	...

0800ce5c <__swsetup_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4b2a      	ldr	r3, [pc, #168]	; (800cf08 <__swsetup_r+0xac>)
 800ce60:	4605      	mov	r5, r0
 800ce62:	6818      	ldr	r0, [r3, #0]
 800ce64:	460c      	mov	r4, r1
 800ce66:	b118      	cbz	r0, 800ce70 <__swsetup_r+0x14>
 800ce68:	6a03      	ldr	r3, [r0, #32]
 800ce6a:	b90b      	cbnz	r3, 800ce70 <__swsetup_r+0x14>
 800ce6c:	f7fd ff5c 	bl	800ad28 <__sinit>
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce76:	0718      	lsls	r0, r3, #28
 800ce78:	d422      	bmi.n	800cec0 <__swsetup_r+0x64>
 800ce7a:	06d9      	lsls	r1, r3, #27
 800ce7c:	d407      	bmi.n	800ce8e <__swsetup_r+0x32>
 800ce7e:	2309      	movs	r3, #9
 800ce80:	602b      	str	r3, [r5, #0]
 800ce82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce86:	81a3      	strh	r3, [r4, #12]
 800ce88:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8c:	e034      	b.n	800cef8 <__swsetup_r+0x9c>
 800ce8e:	0758      	lsls	r0, r3, #29
 800ce90:	d512      	bpl.n	800ceb8 <__swsetup_r+0x5c>
 800ce92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce94:	b141      	cbz	r1, 800cea8 <__swsetup_r+0x4c>
 800ce96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce9a:	4299      	cmp	r1, r3
 800ce9c:	d002      	beq.n	800cea4 <__swsetup_r+0x48>
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f7fe ff0c 	bl	800bcbc <_free_r>
 800cea4:	2300      	movs	r3, #0
 800cea6:	6363      	str	r3, [r4, #52]	; 0x34
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ceae:	81a3      	strh	r3, [r4, #12]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	6063      	str	r3, [r4, #4]
 800ceb4:	6923      	ldr	r3, [r4, #16]
 800ceb6:	6023      	str	r3, [r4, #0]
 800ceb8:	89a3      	ldrh	r3, [r4, #12]
 800ceba:	f043 0308 	orr.w	r3, r3, #8
 800cebe:	81a3      	strh	r3, [r4, #12]
 800cec0:	6923      	ldr	r3, [r4, #16]
 800cec2:	b94b      	cbnz	r3, 800ced8 <__swsetup_r+0x7c>
 800cec4:	89a3      	ldrh	r3, [r4, #12]
 800cec6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ceca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cece:	d003      	beq.n	800ced8 <__swsetup_r+0x7c>
 800ced0:	4621      	mov	r1, r4
 800ced2:	4628      	mov	r0, r5
 800ced4:	f000 f884 	bl	800cfe0 <__smakebuf_r>
 800ced8:	89a0      	ldrh	r0, [r4, #12]
 800ceda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cede:	f010 0301 	ands.w	r3, r0, #1
 800cee2:	d00a      	beq.n	800cefa <__swsetup_r+0x9e>
 800cee4:	2300      	movs	r3, #0
 800cee6:	60a3      	str	r3, [r4, #8]
 800cee8:	6963      	ldr	r3, [r4, #20]
 800ceea:	425b      	negs	r3, r3
 800ceec:	61a3      	str	r3, [r4, #24]
 800ceee:	6923      	ldr	r3, [r4, #16]
 800cef0:	b943      	cbnz	r3, 800cf04 <__swsetup_r+0xa8>
 800cef2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cef6:	d1c4      	bne.n	800ce82 <__swsetup_r+0x26>
 800cef8:	bd38      	pop	{r3, r4, r5, pc}
 800cefa:	0781      	lsls	r1, r0, #30
 800cefc:	bf58      	it	pl
 800cefe:	6963      	ldrpl	r3, [r4, #20]
 800cf00:	60a3      	str	r3, [r4, #8]
 800cf02:	e7f4      	b.n	800ceee <__swsetup_r+0x92>
 800cf04:	2000      	movs	r0, #0
 800cf06:	e7f7      	b.n	800cef8 <__swsetup_r+0x9c>
 800cf08:	2000169c 	.word	0x2000169c

0800cf0c <_raise_r>:
 800cf0c:	291f      	cmp	r1, #31
 800cf0e:	b538      	push	{r3, r4, r5, lr}
 800cf10:	4604      	mov	r4, r0
 800cf12:	460d      	mov	r5, r1
 800cf14:	d904      	bls.n	800cf20 <_raise_r+0x14>
 800cf16:	2316      	movs	r3, #22
 800cf18:	6003      	str	r3, [r0, #0]
 800cf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cf22:	b112      	cbz	r2, 800cf2a <_raise_r+0x1e>
 800cf24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf28:	b94b      	cbnz	r3, 800cf3e <_raise_r+0x32>
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 f830 	bl	800cf90 <_getpid_r>
 800cf30:	462a      	mov	r2, r5
 800cf32:	4601      	mov	r1, r0
 800cf34:	4620      	mov	r0, r4
 800cf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf3a:	f000 b817 	b.w	800cf6c <_kill_r>
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d00a      	beq.n	800cf58 <_raise_r+0x4c>
 800cf42:	1c59      	adds	r1, r3, #1
 800cf44:	d103      	bne.n	800cf4e <_raise_r+0x42>
 800cf46:	2316      	movs	r3, #22
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	2001      	movs	r0, #1
 800cf4c:	e7e7      	b.n	800cf1e <_raise_r+0x12>
 800cf4e:	2400      	movs	r4, #0
 800cf50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf54:	4628      	mov	r0, r5
 800cf56:	4798      	blx	r3
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e7e0      	b.n	800cf1e <_raise_r+0x12>

0800cf5c <raise>:
 800cf5c:	4b02      	ldr	r3, [pc, #8]	; (800cf68 <raise+0xc>)
 800cf5e:	4601      	mov	r1, r0
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f7ff bfd3 	b.w	800cf0c <_raise_r>
 800cf66:	bf00      	nop
 800cf68:	2000169c 	.word	0x2000169c

0800cf6c <_kill_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4d07      	ldr	r5, [pc, #28]	; (800cf8c <_kill_r+0x20>)
 800cf70:	2300      	movs	r3, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	4611      	mov	r1, r2
 800cf78:	602b      	str	r3, [r5, #0]
 800cf7a:	f7f4 f99b 	bl	80012b4 <_kill>
 800cf7e:	1c43      	adds	r3, r0, #1
 800cf80:	d102      	bne.n	800cf88 <_kill_r+0x1c>
 800cf82:	682b      	ldr	r3, [r5, #0]
 800cf84:	b103      	cbz	r3, 800cf88 <_kill_r+0x1c>
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	bd38      	pop	{r3, r4, r5, pc}
 800cf8a:	bf00      	nop
 800cf8c:	2000a3c4 	.word	0x2000a3c4

0800cf90 <_getpid_r>:
 800cf90:	f7f4 b988 	b.w	80012a4 <_getpid>

0800cf94 <__swhatbuf_r>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	460c      	mov	r4, r1
 800cf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9c:	2900      	cmp	r1, #0
 800cf9e:	b096      	sub	sp, #88	; 0x58
 800cfa0:	4615      	mov	r5, r2
 800cfa2:	461e      	mov	r6, r3
 800cfa4:	da0d      	bge.n	800cfc2 <__swhatbuf_r+0x2e>
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cfac:	f04f 0100 	mov.w	r1, #0
 800cfb0:	bf0c      	ite	eq
 800cfb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cfb6:	2340      	movne	r3, #64	; 0x40
 800cfb8:	2000      	movs	r0, #0
 800cfba:	6031      	str	r1, [r6, #0]
 800cfbc:	602b      	str	r3, [r5, #0]
 800cfbe:	b016      	add	sp, #88	; 0x58
 800cfc0:	bd70      	pop	{r4, r5, r6, pc}
 800cfc2:	466a      	mov	r2, sp
 800cfc4:	f000 f848 	bl	800d058 <_fstat_r>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	dbec      	blt.n	800cfa6 <__swhatbuf_r+0x12>
 800cfcc:	9901      	ldr	r1, [sp, #4]
 800cfce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cfd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cfd6:	4259      	negs	r1, r3
 800cfd8:	4159      	adcs	r1, r3
 800cfda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfde:	e7eb      	b.n	800cfb8 <__swhatbuf_r+0x24>

0800cfe0 <__smakebuf_r>:
 800cfe0:	898b      	ldrh	r3, [r1, #12]
 800cfe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfe4:	079d      	lsls	r5, r3, #30
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460c      	mov	r4, r1
 800cfea:	d507      	bpl.n	800cffc <__smakebuf_r+0x1c>
 800cfec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	6123      	str	r3, [r4, #16]
 800cff4:	2301      	movs	r3, #1
 800cff6:	6163      	str	r3, [r4, #20]
 800cff8:	b002      	add	sp, #8
 800cffa:	bd70      	pop	{r4, r5, r6, pc}
 800cffc:	ab01      	add	r3, sp, #4
 800cffe:	466a      	mov	r2, sp
 800d000:	f7ff ffc8 	bl	800cf94 <__swhatbuf_r>
 800d004:	9900      	ldr	r1, [sp, #0]
 800d006:	4605      	mov	r5, r0
 800d008:	4630      	mov	r0, r6
 800d00a:	f7fe fecb 	bl	800bda4 <_malloc_r>
 800d00e:	b948      	cbnz	r0, 800d024 <__smakebuf_r+0x44>
 800d010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d014:	059a      	lsls	r2, r3, #22
 800d016:	d4ef      	bmi.n	800cff8 <__smakebuf_r+0x18>
 800d018:	f023 0303 	bic.w	r3, r3, #3
 800d01c:	f043 0302 	orr.w	r3, r3, #2
 800d020:	81a3      	strh	r3, [r4, #12]
 800d022:	e7e3      	b.n	800cfec <__smakebuf_r+0xc>
 800d024:	89a3      	ldrh	r3, [r4, #12]
 800d026:	6020      	str	r0, [r4, #0]
 800d028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d02c:	81a3      	strh	r3, [r4, #12]
 800d02e:	9b00      	ldr	r3, [sp, #0]
 800d030:	6163      	str	r3, [r4, #20]
 800d032:	9b01      	ldr	r3, [sp, #4]
 800d034:	6120      	str	r0, [r4, #16]
 800d036:	b15b      	cbz	r3, 800d050 <__smakebuf_r+0x70>
 800d038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d03c:	4630      	mov	r0, r6
 800d03e:	f000 f81d 	bl	800d07c <_isatty_r>
 800d042:	b128      	cbz	r0, 800d050 <__smakebuf_r+0x70>
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	f023 0303 	bic.w	r3, r3, #3
 800d04a:	f043 0301 	orr.w	r3, r3, #1
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	431d      	orrs	r5, r3
 800d054:	81a5      	strh	r5, [r4, #12]
 800d056:	e7cf      	b.n	800cff8 <__smakebuf_r+0x18>

0800d058 <_fstat_r>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	4d07      	ldr	r5, [pc, #28]	; (800d078 <_fstat_r+0x20>)
 800d05c:	2300      	movs	r3, #0
 800d05e:	4604      	mov	r4, r0
 800d060:	4608      	mov	r0, r1
 800d062:	4611      	mov	r1, r2
 800d064:	602b      	str	r3, [r5, #0]
 800d066:	f7f4 f984 	bl	8001372 <_fstat>
 800d06a:	1c43      	adds	r3, r0, #1
 800d06c:	d102      	bne.n	800d074 <_fstat_r+0x1c>
 800d06e:	682b      	ldr	r3, [r5, #0]
 800d070:	b103      	cbz	r3, 800d074 <_fstat_r+0x1c>
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	bd38      	pop	{r3, r4, r5, pc}
 800d076:	bf00      	nop
 800d078:	2000a3c4 	.word	0x2000a3c4

0800d07c <_isatty_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4d06      	ldr	r5, [pc, #24]	; (800d098 <_isatty_r+0x1c>)
 800d080:	2300      	movs	r3, #0
 800d082:	4604      	mov	r4, r0
 800d084:	4608      	mov	r0, r1
 800d086:	602b      	str	r3, [r5, #0]
 800d088:	f7f4 f983 	bl	8001392 <_isatty>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	d102      	bne.n	800d096 <_isatty_r+0x1a>
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	b103      	cbz	r3, 800d096 <_isatty_r+0x1a>
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	2000a3c4 	.word	0x2000a3c4

0800d09c <_init>:
 800d09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09e:	bf00      	nop
 800d0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a2:	bc08      	pop	{r3}
 800d0a4:	469e      	mov	lr, r3
 800d0a6:	4770      	bx	lr

0800d0a8 <_fini>:
 800d0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0aa:	bf00      	nop
 800d0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ae:	bc08      	pop	{r3}
 800d0b0:	469e      	mov	lr, r3
 800d0b2:	4770      	bx	lr
