
GOS2022_minimal_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008054  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014c0  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e4  080096e4  0002168c  2**0
                  CONTENTS
  4 .ARM          00000008  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096ec  080096ec  0002168c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096f0  080096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000168c  20000000  080096f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008bc4  2000168c  0800ad80  0002168c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  2000a250  0800ad80  0002a250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002168c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000216bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000757e  00000000  00000000  000216ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f13  00000000  00000000  00028c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000588  00000000  00000000  0002ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000412  00000000  00000000  0002b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003585  00000000  00000000  0002b52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091f7  00000000  00000000  0002eaaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bfce  00000000  00000000  00037ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a90  00000000  00000000  00043c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000168c 	.word	0x2000168c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800820c 	.word	0x0800820c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001690 	.word	0x20001690
 800020c:	0800820c 	.word	0x0800820c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <APP_LowPriorityTask>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	4e17      	ldr	r6, [pc, #92]	; (800063c <APP_LowPriorityTask+0x60>)
 80005e0:	4d17      	ldr	r5, [pc, #92]	; (8000640 <APP_LowPriorityTask+0x64>)
 80005e2:	4f18      	ldr	r7, [pc, #96]	; (8000644 <APP_LowPriorityTask+0x68>)
 80005e4:	4631      	mov	r1, r6
 80005e6:	2036      	movs	r0, #54	; 0x36
 80005e8:	f006 fd20 	bl	800702c <gos_traceTrace>
 80005ec:	f003 fbbc 	bl	8003d68 <gos_kernelGetSysTicks>
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	4604      	mov	r4, r0
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <APP_LowPriorityTask+0x64>)
 80005f8:	f005 f8bc 	bl	8005774 <gos_mutexLock>
 80005fc:	2855      	cmp	r0, #85	; 0x55
 80005fe:	d117      	bne.n	8000630 <APP_LowPriorityTask+0x54>
 8000600:	f003 fbb2 	bl	8003d68 <gos_kernelGetSysTicks>
 8000604:	4639      	mov	r1, r7
 8000606:	1b02      	subs	r2, r0, r4
 8000608:	2036      	movs	r0, #54	; 0x36
 800060a:	f006 fdff 	bl	800720c <gos_traceTraceFormatted>
 800060e:	f003 fbab 	bl	8003d68 <gos_kernelGetSysTicks>
 8000612:	4604      	mov	r4, r0
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f003 fbe0 	bl	8003ddc <gos_kernelDelayMs>
 800061c:	f003 fba4 	bl	8003d68 <gos_kernelGetSysTicks>
 8000620:	4909      	ldr	r1, [pc, #36]	; (8000648 <APP_LowPriorityTask+0x6c>)
 8000622:	1b02      	subs	r2, r0, r4
 8000624:	2036      	movs	r0, #54	; 0x36
 8000626:	f006 fdf1 	bl	800720c <gos_traceTraceFormatted>
 800062a:	4628      	mov	r0, r5
 800062c:	f005 f94a 	bl	80058c4 <gos_mutexUnlock>
 8000630:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 8000634:	f002 fb0c 	bl	8002c50 <gos_kernelTaskSleep>
 8000638:	e7d4      	b.n	80005e4 <APP_LowPriorityTask+0x8>
 800063a:	bf00      	nop
 800063c:	080091da 	.word	0x080091da
 8000640:	200016cc 	.word	0x200016cc
 8000644:	080091ff 	.word	0x080091ff
 8000648:	08009238 	.word	0x08009238

0800064c <APP_MediumPriorityTask>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	203d      	movs	r0, #61	; 0x3d
 8000650:	f002 fafe 	bl	8002c50 <gos_kernelTaskSleep>
 8000654:	4e0c      	ldr	r6, [pc, #48]	; (8000688 <APP_MediumPriorityTask+0x3c>)
 8000656:	4d0d      	ldr	r5, [pc, #52]	; (800068c <APP_MediumPriorityTask+0x40>)
 8000658:	4631      	mov	r1, r6
 800065a:	2036      	movs	r0, #54	; 0x36
 800065c:	f006 fce6 	bl	800702c <gos_traceTrace>
 8000660:	f003 fb82 	bl	8003d68 <gos_kernelGetSysTicks>
 8000664:	4604      	mov	r4, r0
 8000666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066a:	f003 fbb7 	bl	8003ddc <gos_kernelDelayMs>
 800066e:	f003 fb7b 	bl	8003d68 <gos_kernelGetSysTicks>
 8000672:	4629      	mov	r1, r5
 8000674:	1b02      	subs	r2, r0, r4
 8000676:	2036      	movs	r0, #54	; 0x36
 8000678:	f006 fdc8 	bl	800720c <gos_traceTraceFormatted>
 800067c:	f240 10fb 	movw	r0, #507	; 0x1fb
 8000680:	f002 fae6 	bl	8002c50 <gos_kernelTaskSleep>
 8000684:	e7e8      	b.n	8000658 <APP_MediumPriorityTask+0xc>
 8000686:	bf00      	nop
 8000688:	08009268 	.word	0x08009268
 800068c:	08009292 	.word	0x08009292

08000690 <APP_HighPriorityTask>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	4819      	ldr	r0, [pc, #100]	; (80006f8 <APP_HighPriorityTask+0x68>)
 8000694:	4e19      	ldr	r6, [pc, #100]	; (80006fc <APP_HighPriorityTask+0x6c>)
 8000696:	4d18      	ldr	r5, [pc, #96]	; (80006f8 <APP_HighPriorityTask+0x68>)
 8000698:	4f19      	ldr	r7, [pc, #100]	; (8000700 <APP_HighPriorityTask+0x70>)
 800069a:	f005 f851 	bl	8005740 <gos_mutexInit>
 800069e:	2038      	movs	r0, #56	; 0x38
 80006a0:	f002 fad6 	bl	8002c50 <gos_kernelTaskSleep>
 80006a4:	4631      	mov	r1, r6
 80006a6:	2036      	movs	r0, #54	; 0x36
 80006a8:	f006 fcc0 	bl	800702c <gos_traceTrace>
 80006ac:	f003 fb5c 	bl	8003d68 <gos_kernelGetSysTicks>
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	4604      	mov	r4, r0
 80006b6:	4810      	ldr	r0, [pc, #64]	; (80006f8 <APP_HighPriorityTask+0x68>)
 80006b8:	f005 f85c 	bl	8005774 <gos_mutexLock>
 80006bc:	2855      	cmp	r0, #85	; 0x55
 80006be:	d116      	bne.n	80006ee <APP_HighPriorityTask+0x5e>
 80006c0:	f003 fb52 	bl	8003d68 <gos_kernelGetSysTicks>
 80006c4:	4639      	mov	r1, r7
 80006c6:	1b02      	subs	r2, r0, r4
 80006c8:	2036      	movs	r0, #54	; 0x36
 80006ca:	f006 fd9f 	bl	800720c <gos_traceTraceFormatted>
 80006ce:	f003 fb4b 	bl	8003d68 <gos_kernelGetSysTicks>
 80006d2:	4604      	mov	r4, r0
 80006d4:	200a      	movs	r0, #10
 80006d6:	f003 fb81 	bl	8003ddc <gos_kernelDelayMs>
 80006da:	f003 fb45 	bl	8003d68 <gos_kernelGetSysTicks>
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <APP_HighPriorityTask+0x74>)
 80006e0:	1b02      	subs	r2, r0, r4
 80006e2:	2036      	movs	r0, #54	; 0x36
 80006e4:	f006 fd92 	bl	800720c <gos_traceTraceFormatted>
 80006e8:	4628      	mov	r0, r5
 80006ea:	f005 f8eb 	bl	80058c4 <gos_mutexUnlock>
 80006ee:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 80006f2:	f002 faad 	bl	8002c50 <gos_kernelTaskSleep>
 80006f6:	e7d5      	b.n	80006a4 <APP_HighPriorityTask+0x14>
 80006f8:	200016cc 	.word	0x200016cc
 80006fc:	080092c6 	.word	0x080092c6
 8000700:	080092eb 	.word	0x080092eb
 8000704:	08009327 	.word	0x08009327

08000708 <APP_LifeSignTask>:
 8000708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800070c:	4f0f      	ldr	r7, [pc, #60]	; (800074c <APP_LifeSignTask+0x44>)
 800070e:	4e10      	ldr	r6, [pc, #64]	; (8000750 <APP_LifeSignTask+0x48>)
 8000710:	4d10      	ldr	r5, [pc, #64]	; (8000754 <APP_LifeSignTask+0x4c>)
 8000712:	2400      	movs	r4, #0
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <APP_LifeSignTask+0x44>)
 8000716:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800071a:	2101      	movs	r1, #1
 800071c:	f006 ff09 	bl	8007532 <gos_triggerWait>
 8000720:	2855      	cmp	r0, #85	; 0x55
 8000722:	d10b      	bne.n	800073c <APP_LifeSignTask+0x34>
 8000724:	4638      	mov	r0, r7
 8000726:	f006 fee4 	bl	80074f2 <gos_triggerReset>
 800072a:	f104 0801 	add.w	r8, r4, #1
 800072e:	4622      	mov	r2, r4
 8000730:	4909      	ldr	r1, [pc, #36]	; (8000758 <APP_LifeSignTask+0x50>)
 8000732:	2036      	movs	r0, #54	; 0x36
 8000734:	f006 fd6a 	bl	800720c <gos_traceTraceFormatted>
 8000738:	4644      	mov	r4, r8
 800073a:	e7eb      	b.n	8000714 <APP_LifeSignTask+0xc>
 800073c:	4633      	mov	r3, r6
 800073e:	f240 1249 	movw	r2, #329	; 0x149
 8000742:	4629      	mov	r1, r5
 8000744:	201a      	movs	r0, #26
 8000746:	f004 fdbd 	bl	80052c4 <gos_errorHandler>
 800074a:	e7e3      	b.n	8000714 <APP_LifeSignTask+0xc>
 800074c:	200016bc 	.word	0x200016bc
 8000750:	08009374 	.word	0x08009374
 8000754:	080093e1 	.word	0x080093e1
 8000758:	0800935c 	.word	0x0800935c

0800075c <APP_ButtonTask>:
 800075c:	b507      	push	{r0, r1, r2, lr}
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <APP_ButtonTask+0x54>)
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fa20 	bl	8000ba8 <iodef_get>
 8000768:	4c12      	ldr	r4, [pc, #72]	; (80007b4 <APP_ButtonTask+0x58>)
 800076a:	8883      	ldrh	r3, [r0, #4]
 800076c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000770:	4668      	mov	r0, sp
 8000772:	2349      	movs	r3, #73	; 0x49
 8000774:	7023      	strb	r3, [r4, #0]
 8000776:	f000 f9a3 	bl	8000ac0 <gpio_driverRegisterItCallback>
 800077a:	4d0f      	ldr	r5, [pc, #60]	; (80007b8 <APP_ButtonTask+0x5c>)
 800077c:	4e0f      	ldr	r6, [pc, #60]	; (80007bc <APP_ButtonTask+0x60>)
 800077e:	f04f 32ff 	mov.w	r2, #4294967295
 8000782:	2101      	movs	r1, #1
 8000784:	4628      	mov	r0, r5
 8000786:	f006 fed4 	bl	8007532 <gos_triggerWait>
 800078a:	2855      	cmp	r0, #85	; 0x55
 800078c:	d10b      	bne.n	80007a6 <APP_ButtonTask+0x4a>
 800078e:	4628      	mov	r0, r5
 8000790:	f006 feaf 	bl	80074f2 <gos_triggerReset>
 8000794:	4631      	mov	r1, r6
 8000796:	2036      	movs	r0, #54	; 0x36
 8000798:	f006 fc48 	bl	800702c <gos_traceTrace>
 800079c:	f003 fc8c 	bl	80040b8 <gos_kernelDump>
 80007a0:	2349      	movs	r3, #73	; 0x49
 80007a2:	7023      	strb	r3, [r4, #0]
 80007a4:	e7eb      	b.n	800077e <APP_ButtonTask+0x22>
 80007a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007aa:	f002 fa51 	bl	8002c50 <gos_kernelTaskSleep>
 80007ae:	e7e6      	b.n	800077e <APP_ButtonTask+0x22>
 80007b0:	080007e5 	.word	0x080007e5
 80007b4:	200016a8 	.word	0x200016a8
 80007b8:	200016ac 	.word	0x200016ac
 80007bc:	08009387 	.word	0x08009387

080007c0 <APP_LedTask>:
 80007c0:	b508      	push	{r3, lr}
 80007c2:	4c07      	ldr	r4, [pc, #28]	; (80007e0 <APP_LedTask+0x20>)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 f9ef 	bl	8000ba8 <iodef_get>
 80007ca:	f000 f991 	bl	8000af0 <gpio_driverTogglePin>
 80007ce:	4620      	mov	r0, r4
 80007d0:	f006 fefc 	bl	80075cc <gos_triggerIncrement>
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f002 fa3a 	bl	8002c50 <gos_kernelTaskSleep>
 80007dc:	e7f2      	b.n	80007c4 <APP_LedTask+0x4>
 80007de:	bf00      	nop
 80007e0:	200016bc 	.word	0x200016bc

080007e4 <APP_ButtonPressedInterruptCallback>:
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <APP_ButtonPressedInterruptCallback+0x14>)
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	2a49      	cmp	r2, #73	; 0x49
 80007ea:	d104      	bne.n	80007f6 <APP_ButtonPressedInterruptCallback+0x12>
 80007ec:	2236      	movs	r2, #54	; 0x36
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <APP_ButtonPressedInterruptCallback+0x18>)
 80007f0:	701a      	strb	r2, [r3, #0]
 80007f2:	f006 beeb 	b.w	80075cc <gos_triggerIncrement>
 80007f6:	4770      	bx	lr
 80007f8:	200016a8 	.word	0x200016a8
 80007fc:	200016ac 	.word	0x200016ac

08000800 <gos_platformDriverInit>:
 8000800:	b510      	push	{r4, lr}
 8000802:	f000 fc81 	bl	8001108 <HAL_Init>
 8000806:	f000 f8c1 	bl	800098c <driver_init>
 800080a:	4604      	mov	r4, r0
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <gos_platformDriverInit+0x2c>)
 800080e:	f001 ff59 	bl	80026c4 <gos_driverInit>
 8000812:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000816:	4020      	ands	r0, r4
 8000818:	b2c0      	uxtb	r0, r0
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
 800081e:	2855      	cmp	r0, #85	; 0x55
 8000820:	f04f 0207 	mov.w	r2, #7
 8000824:	611a      	str	r2, [r3, #16]
 8000826:	bf18      	it	ne
 8000828:	20ae      	movne	r0, #174	; 0xae
 800082a:	bd10      	pop	{r4, pc}
 800082c:	20000070 	.word	0x20000070

08000830 <gos_userApplicationInit>:
 8000830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000834:	2100      	movs	r1, #0
 8000836:	481d      	ldr	r0, [pc, #116]	; (80008ac <gos_userApplicationInit+0x7c>)
 8000838:	f002 f87e 	bl	8002938 <gos_kernelTaskRegister>
 800083c:	2100      	movs	r1, #0
 800083e:	4680      	mov	r8, r0
 8000840:	481b      	ldr	r0, [pc, #108]	; (80008b0 <gos_userApplicationInit+0x80>)
 8000842:	f002 f879 	bl	8002938 <gos_kernelTaskRegister>
 8000846:	2100      	movs	r1, #0
 8000848:	4607      	mov	r7, r0
 800084a:	481a      	ldr	r0, [pc, #104]	; (80008b4 <gos_userApplicationInit+0x84>)
 800084c:	f002 f874 	bl	8002938 <gos_kernelTaskRegister>
 8000850:	2100      	movs	r1, #0
 8000852:	4606      	mov	r6, r0
 8000854:	4818      	ldr	r0, [pc, #96]	; (80008b8 <gos_userApplicationInit+0x88>)
 8000856:	f002 f86f 	bl	8002938 <gos_kernelTaskRegister>
 800085a:	2100      	movs	r1, #0
 800085c:	4605      	mov	r5, r0
 800085e:	4817      	ldr	r0, [pc, #92]	; (80008bc <gos_userApplicationInit+0x8c>)
 8000860:	f002 f86a 	bl	8002938 <gos_kernelTaskRegister>
 8000864:	2100      	movs	r1, #0
 8000866:	4604      	mov	r4, r0
 8000868:	4815      	ldr	r0, [pc, #84]	; (80008c0 <gos_userApplicationInit+0x90>)
 800086a:	f002 f865 	bl	8002938 <gos_kernelTaskRegister>
 800086e:	ea08 0000 	and.w	r0, r8, r0
 8000872:	4007      	ands	r7, r0
 8000874:	403e      	ands	r6, r7
 8000876:	4035      	ands	r5, r6
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <gos_userApplicationInit+0x94>)
 800087a:	f006 fe25 	bl	80074c8 <gos_triggerInit>
 800087e:	402c      	ands	r4, r5
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <gos_userApplicationInit+0x98>)
 8000882:	f006 fe21 	bl	80074c8 <gos_triggerInit>
 8000886:	f004 0455 	and.w	r4, r4, #85	; 0x55
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <gos_userApplicationInit+0x9c>)
 800088c:	4910      	ldr	r1, [pc, #64]	; (80008d0 <gos_userApplicationInit+0xa0>)
 800088e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000892:	203a      	movs	r0, #58	; 0x3a
 8000894:	f004 fd16 	bl	80052c4 <gos_errorHandler>
 8000898:	2c55      	cmp	r4, #85	; 0x55
 800089a:	bf18      	it	ne
 800089c:	24ae      	movne	r4, #174	; 0xae
 800089e:	4621      	mov	r1, r4
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <gos_userApplicationInit+0xa4>)
 80008a2:	f004 fd93 	bl	80053cc <gos_errorTraceInit>
 80008a6:	4620      	mov	r0, r4
 80008a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008ac:	200000fa 	.word	0x200000fa
 80008b0:	20000168 	.word	0x20000168
 80008b4:	20000000 	.word	0x20000000
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	20000244 	.word	0x20000244
 80008c0:	200001d6 	.word	0x200001d6
 80008c4:	200016bc 	.word	0x200016bc
 80008c8:	200016ac 	.word	0x200016ac
 80008cc:	0800939e 	.word	0x0800939e
 80008d0:	080093f2 	.word	0x080093f2
 80008d4:	080093c6 	.word	0x080093c6

080008d8 <_sbrk>:
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <_sbrk+0x30>)
 80008da:	6811      	ldr	r1, [r2, #0]
 80008dc:	b510      	push	{r4, lr}
 80008de:	4603      	mov	r3, r0
 80008e0:	b909      	cbnz	r1, 80008e6 <_sbrk+0xe>
 80008e2:	490a      	ldr	r1, [pc, #40]	; (800090c <_sbrk+0x34>)
 80008e4:	6011      	str	r1, [r2, #0]
 80008e6:	6810      	ldr	r0, [r2, #0]
 80008e8:	4909      	ldr	r1, [pc, #36]	; (8000910 <_sbrk+0x38>)
 80008ea:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <_sbrk+0x3c>)
 80008ec:	4403      	add	r3, r0
 80008ee:	1b09      	subs	r1, r1, r4
 80008f0:	428b      	cmp	r3, r1
 80008f2:	d906      	bls.n	8000902 <_sbrk+0x2a>
 80008f4:	f007 f806 	bl	8007904 <__errno>
 80008f8:	230c      	movs	r3, #12
 80008fa:	6003      	str	r3, [r0, #0]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	bd10      	pop	{r4, pc}
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	e7fc      	b.n	8000900 <_sbrk+0x28>
 8000906:	bf00      	nop
 8000908:	200016d0 	.word	0x200016d0
 800090c:	2000a250 	.word	0x2000a250
 8000910:	20020000 	.word	0x20020000
 8000914:	00000400 	.word	0x00000400

08000918 <SystemInit>:
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SystemInit+0x18>)
 800091a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800091e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopFillZerobss+0x14>
 8000938:	2100      	movs	r1, #0
 800093a:	e003      	b.n	8000944 <LoopCopyDataInit>

0800093c <CopyDataInit>:
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <LoopFillZerobss+0x18>)
 800093e:	585b      	ldr	r3, [r3, r1]
 8000940:	5043      	str	r3, [r0, r1]
 8000942:	3104      	adds	r1, #4

08000944 <LoopCopyDataInit>:
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <LoopFillZerobss+0x1c>)
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <LoopFillZerobss+0x20>)
 8000948:	1842      	adds	r2, r0, r1
 800094a:	429a      	cmp	r2, r3
 800094c:	d3f6      	bcc.n	800093c <CopyDataInit>
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopFillZerobss+0x24>)
 8000950:	e002      	b.n	8000958 <LoopFillZerobss>

08000952 <FillZerobss>:
 8000952:	2300      	movs	r3, #0
 8000954:	f842 3b04 	str.w	r3, [r2], #4

08000958 <LoopFillZerobss>:
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <LoopFillZerobss+0x28>)
 800095a:	429a      	cmp	r2, r3
 800095c:	d3f9      	bcc.n	8000952 <FillZerobss>
 800095e:	f7ff ffdb 	bl	8000918 <SystemInit>
 8000962:	f006 ffd5 	bl	8007910 <__libc_init_array>
 8000966:	f004 fb61 	bl	800502c <main>
 800096a:	4770      	bx	lr
 800096c:	20020000 	.word	0x20020000
 8000970:	080096f4 	.word	0x080096f4
 8000974:	20000000 	.word	0x20000000
 8000978:	2000168c 	.word	0x2000168c
 800097c:	2000168c 	.word	0x2000168c
 8000980:	2000a250 	.word	0x2000a250

08000984 <ADC_IRQHandler>:
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>

08000986 <sysTickHook>:
 8000986:	f000 bbd9 	b.w	800113c <HAL_IncTick>
	...

0800098c <driver_init>:
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	f000 f913 	bl	8000bb8 <rcc_driverInit>
 8000992:	4604      	mov	r4, r0
 8000994:	f000 f962 	bl	8000c5c <timer_driverSystimerInit>
 8000998:	4004      	ands	r4, r0
 800099a:	f000 f81d 	bl	80009d8 <gpio_driverInit>
 800099e:	b2e4      	uxtb	r4, r4
 80009a0:	4606      	mov	r6, r0
 80009a2:	2500      	movs	r5, #0
 80009a4:	b2e8      	uxtb	r0, r5
 80009a6:	f000 f8ff 	bl	8000ba8 <iodef_get>
 80009aa:	3501      	adds	r5, #1
 80009ac:	f000 f86c 	bl	8000a88 <gpio_driverInitPin>
 80009b0:	2d06      	cmp	r5, #6
 80009b2:	d1f7      	bne.n	80009a4 <driver_init+0x18>
 80009b4:	f000 f98a 	bl	8000ccc <uart_driverInit>
 80009b8:	4605      	mov	r5, r0
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <driver_init+0x48>)
 80009bc:	f003 f988 	bl	8003cd0 <gos_kernelRegisterSysTickHook>
 80009c0:	4004      	ands	r4, r0
 80009c2:	4026      	ands	r6, r4
 80009c4:	ea05 0006 	and.w	r0, r5, r6
 80009c8:	f000 0055 	and.w	r0, r0, #85	; 0x55
 80009cc:	2855      	cmp	r0, #85	; 0x55
 80009ce:	bf18      	it	ne
 80009d0:	20ae      	movne	r0, #174	; 0xae
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	08000987 	.word	0x08000987

080009d8 <gpio_driverInit>:
 80009d8:	b510      	push	{r4, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <gpio_driverInit+0xa8>)
 80009de:	2400      	movs	r4, #0
 80009e0:	9401      	str	r4, [sp, #4]
 80009e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009e4:	f042 0201 	orr.w	r2, r2, #1
 80009e8:	631a      	str	r2, [r3, #48]	; 0x30
 80009ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ec:	f002 0201 	and.w	r2, r2, #1
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	9a01      	ldr	r2, [sp, #4]
 80009f4:	9402      	str	r4, [sp, #8]
 80009f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f8:	f042 0202 	orr.w	r2, r2, #2
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
 80009fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a00:	f002 0202 	and.w	r2, r2, #2
 8000a04:	9202      	str	r2, [sp, #8]
 8000a06:	9a02      	ldr	r2, [sp, #8]
 8000a08:	9403      	str	r4, [sp, #12]
 8000a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a0c:	f042 0204 	orr.w	r2, r2, #4
 8000a10:	631a      	str	r2, [r3, #48]	; 0x30
 8000a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a14:	f002 0204 	and.w	r2, r2, #4
 8000a18:	9203      	str	r2, [sp, #12]
 8000a1a:	9a03      	ldr	r2, [sp, #12]
 8000a1c:	9404      	str	r4, [sp, #16]
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a20:	f042 0208 	orr.w	r2, r2, #8
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
 8000a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a28:	f002 0208 	and.w	r2, r2, #8
 8000a2c:	9204      	str	r2, [sp, #16]
 8000a2e:	9a04      	ldr	r2, [sp, #16]
 8000a30:	9405      	str	r4, [sp, #20]
 8000a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a38:	631a      	str	r2, [r3, #48]	; 0x30
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a40:	4622      	mov	r2, r4
 8000a42:	4621      	mov	r1, r4
 8000a44:	9305      	str	r3, [sp, #20]
 8000a46:	2017      	movs	r0, #23
 8000a48:	9b05      	ldr	r3, [sp, #20]
 8000a4a:	f000 fb9b 	bl	8001184 <HAL_NVIC_SetPriority>
 8000a4e:	2017      	movs	r0, #23
 8000a50:	f000 fbca 	bl	80011e8 <HAL_NVIC_EnableIRQ>
 8000a54:	4622      	mov	r2, r4
 8000a56:	4621      	mov	r1, r4
 8000a58:	2028      	movs	r0, #40	; 0x28
 8000a5a:	f000 fb93 	bl	8001184 <HAL_NVIC_SetPriority>
 8000a5e:	2028      	movs	r0, #40	; 0x28
 8000a60:	f000 fbc2 	bl	80011e8 <HAL_NVIC_EnableIRQ>
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <gpio_driverInit+0xac>)
 8000a66:	4621      	mov	r1, r4
 8000a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6c:	3401      	adds	r4, #1
 8000a6e:	2c08      	cmp	r4, #8
 8000a70:	6019      	str	r1, [r3, #0]
 8000a72:	809a      	strh	r2, [r3, #4]
 8000a74:	f103 0308 	add.w	r3, r3, #8
 8000a78:	d1f8      	bne.n	8000a6c <gpio_driverInit+0x94>
 8000a7a:	2055      	movs	r0, #85	; 0x55
 8000a7c:	b006      	add	sp, #24
 8000a7e:	bd10      	pop	{r4, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	200016d4 	.word	0x200016d4

08000a88 <gpio_driverInitPin>:
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	2214      	movs	r2, #20
 8000a90:	2100      	movs	r1, #0
 8000a92:	a801      	add	r0, sp, #4
 8000a94:	f006 ff2e 	bl	80078f4 <memset>
 8000a98:	b184      	cbz	r4, 8000abc <gpio_driverInitPin+0x34>
 8000a9a:	88a3      	ldrh	r3, [r4, #4]
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	68a3      	ldr	r3, [r4, #8]
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	6923      	ldr	r3, [r4, #16]
 8000aa4:	9303      	str	r3, [sp, #12]
 8000aa6:	68e3      	ldr	r3, [r4, #12]
 8000aa8:	6820      	ldr	r0, [r4, #0]
 8000aaa:	9304      	str	r3, [sp, #16]
 8000aac:	a901      	add	r1, sp, #4
 8000aae:	6963      	ldr	r3, [r4, #20]
 8000ab0:	9305      	str	r3, [sp, #20]
 8000ab2:	f000 fd9f 	bl	80015f4 <HAL_GPIO_Init>
 8000ab6:	2055      	movs	r0, #85	; 0x55
 8000ab8:	b006      	add	sp, #24
 8000aba:	bd10      	pop	{r4, pc}
 8000abc:	20ae      	movs	r0, #174	; 0xae
 8000abe:	e7fb      	b.n	8000ab8 <gpio_driverInitPin+0x30>

08000ac0 <gpio_driverRegisterItCallback>:
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	b188      	cbz	r0, 8000ae8 <gpio_driverRegisterItCallback+0x28>
 8000ac4:	6801      	ldr	r1, [r0, #0]
 8000ac6:	b179      	cbz	r1, 8000ae8 <gpio_driverRegisterItCallback+0x28>
 8000ac8:	4a08      	ldr	r2, [pc, #32]	; (8000aec <gpio_driverRegisterItCallback+0x2c>)
 8000aca:	2300      	movs	r3, #0
 8000acc:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8000ad0:	b93c      	cbnz	r4, 8000ae2 <gpio_driverRegisterItCallback+0x22>
 8000ad2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8000ad6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000ada:	8881      	ldrh	r1, [r0, #4]
 8000adc:	8091      	strh	r1, [r2, #4]
 8000ade:	2055      	movs	r0, #85	; 0x55
 8000ae0:	bd10      	pop	{r4, pc}
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	2b08      	cmp	r3, #8
 8000ae6:	d1f1      	bne.n	8000acc <gpio_driverRegisterItCallback+0xc>
 8000ae8:	20ae      	movs	r0, #174	; 0xae
 8000aea:	e7f9      	b.n	8000ae0 <gpio_driverRegisterItCallback+0x20>
 8000aec:	200016d4 	.word	0x200016d4

08000af0 <gpio_driverTogglePin>:
 8000af0:	b508      	push	{r3, lr}
 8000af2:	b128      	cbz	r0, 8000b00 <gpio_driverTogglePin+0x10>
 8000af4:	8881      	ldrh	r1, [r0, #4]
 8000af6:	6800      	ldr	r0, [r0, #0]
 8000af8:	f000 fe52 	bl	80017a0 <HAL_GPIO_TogglePin>
 8000afc:	2055      	movs	r0, #85	; 0x55
 8000afe:	bd08      	pop	{r3, pc}
 8000b00:	20ae      	movs	r0, #174	; 0xae
 8000b02:	e7fc      	b.n	8000afe <gpio_driverTogglePin+0xe>

08000b04 <EXTI15_10_IRQHandler>:
 8000b04:	b510      	push	{r4, lr}
 8000b06:	4c0f      	ldr	r4, [pc, #60]	; (8000b44 <EXTI15_10_IRQHandler+0x40>)
 8000b08:	7823      	ldrb	r3, [r4, #0]
 8000b0a:	b91b      	cbnz	r3, 8000b14 <EXTI15_10_IRQHandler+0x10>
 8000b0c:	490e      	ldr	r1, [pc, #56]	; (8000b48 <EXTI15_10_IRQHandler+0x44>)
 8000b0e:	780a      	ldrb	r2, [r1, #0]
 8000b10:	3201      	adds	r2, #1
 8000b12:	700a      	strb	r2, [r1, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	2001      	movs	r0, #1
 8000b18:	7023      	strb	r3, [r4, #0]
 8000b1a:	f000 f845 	bl	8000ba8 <iodef_get>
 8000b1e:	8880      	ldrh	r0, [r0, #4]
 8000b20:	f000 fe46 	bl	80017b0 <HAL_GPIO_EXTI_IRQHandler>
 8000b24:	7823      	ldrb	r3, [r4, #0]
 8000b26:	b91b      	cbnz	r3, 8000b30 <EXTI15_10_IRQHandler+0x2c>
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <EXTI15_10_IRQHandler+0x44>)
 8000b2a:	7813      	ldrb	r3, [r2, #0]
 8000b2c:	b933      	cbnz	r3, 8000b3c <EXTI15_10_IRQHandler+0x38>
 8000b2e:	bd10      	pop	{r4, pc}
 8000b30:	3b01      	subs	r3, #1
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	7023      	strb	r3, [r4, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1f9      	bne.n	8000b2e <EXTI15_10_IRQHandler+0x2a>
 8000b3a:	e7f5      	b.n	8000b28 <EXTI15_10_IRQHandler+0x24>
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	7013      	strb	r3, [r2, #0]
 8000b40:	e7f5      	b.n	8000b2e <EXTI15_10_IRQHandler+0x2a>
 8000b42:	bf00      	nop
 8000b44:	200018fb 	.word	0x200018fb
 8000b48:	200018fa 	.word	0x200018fa

08000b4c <HAL_GPIO_EXTI_Callback>:
 8000b4c:	b510      	push	{r4, lr}
 8000b4e:	4c13      	ldr	r4, [pc, #76]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x50>)
 8000b50:	7823      	ldrb	r3, [r4, #0]
 8000b52:	b91b      	cbnz	r3, 8000b5c <HAL_GPIO_EXTI_Callback+0x10>
 8000b54:	4912      	ldr	r1, [pc, #72]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b56:	780a      	ldrb	r2, [r1, #0]
 8000b58:	3201      	adds	r2, #1
 8000b5a:	700a      	strb	r2, [r1, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b60:	7023      	strb	r3, [r4, #0]
 8000b62:	2300      	movs	r3, #0
 8000b64:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8000b68:	8889      	ldrh	r1, [r1, #4]
 8000b6a:	4281      	cmp	r1, r0
 8000b6c:	d108      	bne.n	8000b80 <HAL_GPIO_EXTI_Callback+0x34>
 8000b6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b72:	4798      	blx	r3
 8000b74:	7823      	ldrb	r3, [r4, #0]
 8000b76:	b93b      	cbnz	r3, 8000b88 <HAL_GPIO_EXTI_Callback+0x3c>
 8000b78:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b7a:	7813      	ldrb	r3, [r2, #0]
 8000b7c:	b953      	cbnz	r3, 8000b94 <HAL_GPIO_EXTI_Callback+0x48>
 8000b7e:	bd10      	pop	{r4, pc}
 8000b80:	3301      	adds	r3, #1
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	d1ee      	bne.n	8000b64 <HAL_GPIO_EXTI_Callback+0x18>
 8000b86:	e7f5      	b.n	8000b74 <HAL_GPIO_EXTI_Callback+0x28>
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	7023      	strb	r3, [r4, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f5      	bne.n	8000b7e <HAL_GPIO_EXTI_Callback+0x32>
 8000b92:	e7f1      	b.n	8000b78 <HAL_GPIO_EXTI_Callback+0x2c>
 8000b94:	3b01      	subs	r3, #1
 8000b96:	7013      	strb	r3, [r2, #0]
 8000b98:	e7f1      	b.n	8000b7e <HAL_GPIO_EXTI_Callback+0x32>
 8000b9a:	bf00      	nop
 8000b9c:	200018fb 	.word	0x200018fb
 8000ba0:	200018fa 	.word	0x200018fa
 8000ba4:	200016d4 	.word	0x200016d4

08000ba8 <iodef_get>:
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <iodef_get+0xc>)
 8000baa:	2218      	movs	r2, #24
 8000bac:	fb02 3000 	mla	r0, r2, r0, r3
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	08009424 	.word	0x08009424

08000bb8 <rcc_driverInit>:
 8000bb8:	b530      	push	{r4, r5, lr}
 8000bba:	b095      	sub	sp, #84	; 0x54
 8000bbc:	2210      	movs	r2, #16
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	a809      	add	r0, sp, #36	; 0x24
 8000bc2:	f006 fe97 	bl	80078f4 <memset>
 8000bc6:	2214      	movs	r2, #20
 8000bc8:	2100      	movs	r1, #0
 8000bca:	a802      	add	r0, sp, #8
 8000bcc:	f006 fe92 	bl	80078f4 <memset>
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <rcc_driverInit+0x9c>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	9100      	str	r1, [sp, #0]
 8000bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <rcc_driverInit+0xa0>)
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	9b00      	ldr	r3, [sp, #0]
 8000bea:	9101      	str	r1, [sp, #4]
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	6813      	ldr	r3, [r2, #0]
 8000bfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	9b01      	ldr	r3, [sp, #4]
 8000c02:	2501      	movs	r5, #1
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	2402      	movs	r4, #2
 8000c0a:	e9cd 5307 	strd	r5, r3, [sp, #28]
 8000c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c12:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
 8000c16:	2204      	movs	r2, #4
 8000c18:	2332      	movs	r3, #50	; 0x32
 8000c1a:	a807      	add	r0, sp, #28
 8000c1c:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 8000c20:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8000c24:	9413      	str	r4, [sp, #76]	; 0x4c
 8000c26:	f000 fed1 	bl	80019cc <HAL_RCC_OscConfig>
 8000c2a:	b110      	cbz	r0, 8000c32 <rcc_driverInit+0x7a>
 8000c2c:	20ae      	movs	r0, #174	; 0xae
 8000c2e:	b015      	add	sp, #84	; 0x54
 8000c30:	bd30      	pop	{r4, r5, pc}
 8000c32:	230f      	movs	r3, #15
 8000c34:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	e9cd 3005 	strd	r3, r0, [sp, #20]
 8000c40:	9004      	str	r0, [sp, #16]
 8000c42:	4629      	mov	r1, r5
 8000c44:	a802      	add	r0, sp, #8
 8000c46:	f000 fdbf 	bl	80017c8 <HAL_RCC_ClockConfig>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d1ee      	bne.n	8000c2c <rcc_driverInit+0x74>
 8000c4e:	2055      	movs	r0, #85	; 0x55
 8000c50:	e7ed      	b.n	8000c2e <rcc_driverInit+0x76>
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <timer_driverSystimerInit>:
 8000c5c:	b513      	push	{r0, r1, r4, lr}
 8000c5e:	2300      	movs	r3, #0
 8000c60:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <timer_driverSystimerInit+0x4c>)
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000c66:	4c11      	ldr	r4, [pc, #68]	; (8000cac <timer_driverSystimerInit+0x50>)
 8000c68:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000c6c:	6411      	str	r1, [r2, #64]	; 0x40
 8000c6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c70:	490f      	ldr	r1, [pc, #60]	; (8000cb0 <timer_driverSystimerInit+0x54>)
 8000c72:	60a3      	str	r3, [r4, #8]
 8000c74:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000c78:	9201      	str	r2, [sp, #4]
 8000c7a:	9a01      	ldr	r2, [sp, #4]
 8000c7c:	61a3      	str	r3, [r4, #24]
 8000c7e:	2253      	movs	r2, #83	; 0x53
 8000c80:	e9c4 1200 	strd	r1, r2, [r4]
 8000c84:	4620      	mov	r0, r4
 8000c86:	f06f 0201 	mvn.w	r2, #1
 8000c8a:	e9c4 2303 	strd	r2, r3, [r4, #12]
 8000c8e:	f001 f8b3 	bl	8001df8 <HAL_TIM_Base_Init>
 8000c92:	b110      	cbz	r0, 8000c9a <timer_driverSystimerInit+0x3e>
 8000c94:	20ae      	movs	r0, #174	; 0xae
 8000c96:	b002      	add	sp, #8
 8000c98:	bd10      	pop	{r4, pc}
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f001 f833 	bl	8001d06 <HAL_TIM_Base_Start>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1f7      	bne.n	8000c94 <timer_driverSystimerInit+0x38>
 8000ca4:	2055      	movs	r0, #85	; 0x55
 8000ca6:	e7f6      	b.n	8000c96 <timer_driverSystimerInit+0x3a>
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	20001714 	.word	0x20001714
 8000cb0:	40001800 	.word	0x40001800

08000cb4 <timer_driverSystimerGet>:
 8000cb4:	b128      	cbz	r0, 8000cc2 <timer_driverSystimerGet+0xe>
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <timer_driverSystimerGet+0x14>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbc:	8003      	strh	r3, [r0, #0]
 8000cbe:	2055      	movs	r0, #85	; 0x55
 8000cc0:	4770      	bx	lr
 8000cc2:	20ae      	movs	r0, #174	; 0xae
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20001714 	.word	0x20001714

08000ccc <uart_driverInit>:
 8000ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <uart_driverInit+0xcc>)
 8000cd6:	9501      	str	r5, [sp, #4]
 8000cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cda:	4830      	ldr	r0, [pc, #192]	; (8000d9c <uart_driverInit+0xd0>)
 8000cdc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ce8:	9201      	str	r2, [sp, #4]
 8000cea:	9a01      	ldr	r2, [sp, #4]
 8000cec:	9502      	str	r5, [sp, #8]
 8000cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000cfc:	9202      	str	r2, [sp, #8]
 8000cfe:	9a02      	ldr	r2, [sp, #8]
 8000d00:	9503      	str	r5, [sp, #12]
 8000d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d04:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000d08:	631a      	str	r2, [r3, #48]	; 0x30
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	6105      	str	r5, [r0, #16]
 8000d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d12:	9303      	str	r3, [sp, #12]
 8000d14:	9b03      	ldr	r3, [sp, #12]
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <uart_driverInit+0xd4>)
 8000d18:	61c5      	str	r5, [r0, #28]
 8000d1a:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
 8000d1e:	f04f 080c 	mov.w	r8, #12
 8000d22:	e9c0 3900 	strd	r3, r9, [r0]
 8000d26:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8000d2a:	e9c0 8505 	strd	r8, r5, [r0, #20]
 8000d2e:	f001 f93f 	bl	8001fb0 <HAL_UART_Init>
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	481b      	ldr	r0, [pc, #108]	; (8000da4 <uart_driverInit+0xd8>)
 8000d36:	bf0c      	ite	eq
 8000d38:	2455      	moveq	r4, #85	; 0x55
 8000d3a:	24ae      	movne	r4, #174	; 0xae
 8000d3c:	f004 fd00 	bl	8005740 <gos_mutexInit>
 8000d40:	4607      	mov	r7, r0
 8000d42:	4819      	ldr	r0, [pc, #100]	; (8000da8 <uart_driverInit+0xdc>)
 8000d44:	f006 fbc0 	bl	80074c8 <gos_triggerInit>
 8000d48:	4a18      	ldr	r2, [pc, #96]	; (8000dac <uart_driverInit+0xe0>)
 8000d4a:	4606      	mov	r6, r0
 8000d4c:	4818      	ldr	r0, [pc, #96]	; (8000db0 <uart_driverInit+0xe4>)
 8000d4e:	e9c0 2900 	strd	r2, r9, [r0]
 8000d52:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8000d56:	e9c0 5804 	strd	r5, r8, [r0, #16]
 8000d5a:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8000d5e:	f001 f927 	bl	8001fb0 <HAL_UART_Init>
 8000d62:	b9b8      	cbnz	r0, 8000d94 <uart_driverInit+0xc8>
 8000d64:	403c      	ands	r4, r7
 8000d66:	4034      	ands	r4, r6
 8000d68:	4812      	ldr	r0, [pc, #72]	; (8000db4 <uart_driverInit+0xe8>)
 8000d6a:	f004 fce9 	bl	8005740 <gos_mutexInit>
 8000d6e:	4004      	ands	r4, r0
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <uart_driverInit+0xec>)
 8000d72:	f004 fce5 	bl	8005740 <gos_mutexInit>
 8000d76:	4004      	ands	r4, r0
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <uart_driverInit+0xf0>)
 8000d7a:	f006 fba5 	bl	80074c8 <gos_triggerInit>
 8000d7e:	4004      	ands	r4, r0
 8000d80:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <uart_driverInit+0xf4>)
 8000d82:	f006 fba1 	bl	80074c8 <gos_triggerInit>
 8000d86:	4020      	ands	r0, r4
 8000d88:	2855      	cmp	r0, #85	; 0x55
 8000d8a:	bf18      	it	ne
 8000d8c:	20ae      	movne	r0, #174	; 0xae
 8000d8e:	b005      	add	sp, #20
 8000d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d94:	24ae      	movs	r4, #174	; 0xae
 8000d96:	e7e7      	b.n	8000d68 <uart_driverInit+0x9c>
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	20001814 	.word	0x20001814
 8000da0:	40004400 	.word	0x40004400
 8000da4:	2000189c 	.word	0x2000189c
 8000da8:	200018a0 	.word	0x200018a0
 8000dac:	40005000 	.word	0x40005000
 8000db0:	20001858 	.word	0x20001858
 8000db4:	200018b0 	.word	0x200018b0
 8000db8:	200018c4 	.word	0x200018c4
 8000dbc:	200018b4 	.word	0x200018b4
 8000dc0:	200018c8 	.word	0x200018c8

08000dc4 <uart_driverTraceTransmitStringUnsafe>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	4c0e      	ldr	r4, [pc, #56]	; (8000e00 <uart_driverTraceTransmitStringUnsafe+0x3c>)
 8000dc8:	7823      	ldrb	r3, [r4, #0]
 8000dca:	4605      	mov	r5, r0
 8000dcc:	3301      	adds	r3, #1
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <uart_driverTraceTransmitStringUnsafe+0x40>)
 8000dd0:	7023      	strb	r3, [r4, #0]
 8000dd2:	f001 f9d1 	bl	8002178 <HAL_UART_Abort>
 8000dd6:	b128      	cbz	r0, 8000de4 <uart_driverTraceTransmitStringUnsafe+0x20>
 8000dd8:	20ae      	movs	r0, #174	; 0xae
 8000dda:	7823      	ldrb	r3, [r4, #0]
 8000ddc:	b10b      	cbz	r3, 8000de2 <uart_driverTraceTransmitStringUnsafe+0x1e>
 8000dde:	3b01      	subs	r3, #1
 8000de0:	7023      	strb	r3, [r4, #0]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
 8000de4:	4628      	mov	r0, r5
 8000de6:	f7ff fa1d 	bl	8000224 <strlen>
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	b282      	uxth	r2, r0
 8000df0:	4629      	mov	r1, r5
 8000df2:	4804      	ldr	r0, [pc, #16]	; (8000e04 <uart_driverTraceTransmitStringUnsafe+0x40>)
 8000df4:	f001 f90a 	bl	800200c <HAL_UART_Transmit>
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d1ed      	bne.n	8000dd8 <uart_driverTraceTransmitStringUnsafe+0x14>
 8000dfc:	2055      	movs	r0, #85	; 0x55
 8000dfe:	e7ec      	b.n	8000dda <uart_driverTraceTransmitStringUnsafe+0x16>
 8000e00:	200018fa 	.word	0x200018fa
 8000e04:	20001814 	.word	0x20001814

08000e08 <uart_driverTraceTransmitString>:
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e0e:	4604      	mov	r4, r0
 8000e10:	4810      	ldr	r0, [pc, #64]	; (8000e54 <uart_driverTraceTransmitString+0x4c>)
 8000e12:	f004 fcaf 	bl	8005774 <gos_mutexLock>
 8000e16:	2855      	cmp	r0, #85	; 0x55
 8000e18:	d005      	beq.n	8000e26 <uart_driverTraceTransmitString+0x1e>
 8000e1a:	24ae      	movs	r4, #174	; 0xae
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <uart_driverTraceTransmitString+0x4c>)
 8000e1e:	f004 fd51 	bl	80058c4 <gos_mutexUnlock>
 8000e22:	4620      	mov	r0, r4
 8000e24:	bd10      	pop	{r4, pc}
 8000e26:	4620      	mov	r0, r4
 8000e28:	f7ff f9fc 	bl	8000224 <strlen>
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	b282      	uxth	r2, r0
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <uart_driverTraceTransmitString+0x50>)
 8000e32:	f001 f95f 	bl	80020f4 <HAL_UART_Transmit_DMA>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d1ef      	bne.n	8000e1a <uart_driverTraceTransmitString+0x12>
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <uart_driverTraceTransmitString+0x54>)
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	2101      	movs	r1, #1
 8000e42:	f006 fb76 	bl	8007532 <gos_triggerWait>
 8000e46:	2855      	cmp	r0, #85	; 0x55
 8000e48:	4604      	mov	r4, r0
 8000e4a:	d1e6      	bne.n	8000e1a <uart_driverTraceTransmitString+0x12>
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <uart_driverTraceTransmitString+0x54>)
 8000e4e:	f006 fb50 	bl	80074f2 <gos_triggerReset>
 8000e52:	e7e3      	b.n	8000e1c <uart_driverTraceTransmitString+0x14>
 8000e54:	2000189c 	.word	0x2000189c
 8000e58:	20001814 	.word	0x20001814
 8000e5c:	200018a0 	.word	0x200018a0

08000e60 <uart_driverShellReceiveChar>:
 8000e60:	b510      	push	{r4, lr}
 8000e62:	f04f 31ff 	mov.w	r1, #4294967295
 8000e66:	4604      	mov	r4, r0
 8000e68:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <uart_driverShellReceiveChar+0x48>)
 8000e6a:	f004 fc83 	bl	8005774 <gos_mutexLock>
 8000e6e:	2855      	cmp	r0, #85	; 0x55
 8000e70:	d118      	bne.n	8000ea4 <uart_driverShellReceiveChar+0x44>
 8000e72:	480e      	ldr	r0, [pc, #56]	; (8000eac <uart_driverShellReceiveChar+0x4c>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	4621      	mov	r1, r4
 8000e78:	f001 fc0b 	bl	8002692 <HAL_UART_Receive_IT>
 8000e7c:	b128      	cbz	r0, 8000e8a <uart_driverShellReceiveChar+0x2a>
 8000e7e:	24ae      	movs	r4, #174	; 0xae
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <uart_driverShellReceiveChar+0x48>)
 8000e82:	f004 fd1f 	bl	80058c4 <gos_mutexUnlock>
 8000e86:	4620      	mov	r0, r4
 8000e88:	bd10      	pop	{r4, pc}
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <uart_driverShellReceiveChar+0x50>)
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	2101      	movs	r1, #1
 8000e92:	f006 fb4e 	bl	8007532 <gos_triggerWait>
 8000e96:	2855      	cmp	r0, #85	; 0x55
 8000e98:	4604      	mov	r4, r0
 8000e9a:	d1f0      	bne.n	8000e7e <uart_driverShellReceiveChar+0x1e>
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <uart_driverShellReceiveChar+0x50>)
 8000e9e:	f006 fb28 	bl	80074f2 <gos_triggerReset>
 8000ea2:	e7ed      	b.n	8000e80 <uart_driverShellReceiveChar+0x20>
 8000ea4:	24ae      	movs	r4, #174	; 0xae
 8000ea6:	e7ee      	b.n	8000e86 <uart_driverShellReceiveChar+0x26>
 8000ea8:	200018b0 	.word	0x200018b0
 8000eac:	20001858 	.word	0x20001858
 8000eb0:	200018b4 	.word	0x200018b4

08000eb4 <uart_driverShellTransmitString>:
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <uart_driverShellTransmitString+0x50>)
 8000ebe:	f004 fc59 	bl	8005774 <gos_mutexLock>
 8000ec2:	2855      	cmp	r0, #85	; 0x55
 8000ec4:	d11b      	bne.n	8000efe <uart_driverShellTransmitString+0x4a>
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f7ff f9ac 	bl	8000224 <strlen>
 8000ecc:	4621      	mov	r1, r4
 8000ece:	b282      	uxth	r2, r0
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <uart_driverShellTransmitString+0x54>)
 8000ed2:	f001 f8f0 	bl	80020b6 <HAL_UART_Transmit_IT>
 8000ed6:	b128      	cbz	r0, 8000ee4 <uart_driverShellTransmitString+0x30>
 8000ed8:	24ae      	movs	r4, #174	; 0xae
 8000eda:	480a      	ldr	r0, [pc, #40]	; (8000f04 <uart_driverShellTransmitString+0x50>)
 8000edc:	f004 fcf2 	bl	80058c4 <gos_mutexUnlock>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	bd10      	pop	{r4, pc}
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <uart_driverShellTransmitString+0x58>)
 8000ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eea:	2101      	movs	r1, #1
 8000eec:	f006 fb21 	bl	8007532 <gos_triggerWait>
 8000ef0:	2855      	cmp	r0, #85	; 0x55
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	d1f0      	bne.n	8000ed8 <uart_driverShellTransmitString+0x24>
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <uart_driverShellTransmitString+0x58>)
 8000ef8:	f006 fafb 	bl	80074f2 <gos_triggerReset>
 8000efc:	e7ed      	b.n	8000eda <uart_driverShellTransmitString+0x26>
 8000efe:	24ae      	movs	r4, #174	; 0xae
 8000f00:	e7ee      	b.n	8000ee0 <uart_driverShellTransmitString+0x2c>
 8000f02:	bf00      	nop
 8000f04:	200018c4 	.word	0x200018c4
 8000f08:	20001858 	.word	0x20001858
 8000f0c:	200018c8 	.word	0x200018c8

08000f10 <HAL_UART_MspInit>:
 8000f10:	6803      	ldr	r3, [r0, #0]
 8000f12:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <HAL_UART_MspInit+0xb0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	b570      	push	{r4, r5, r6, lr}
 8000f18:	4606      	mov	r6, r0
 8000f1a:	d128      	bne.n	8000f6e <HAL_UART_MspInit+0x5e>
 8000f1c:	4c29      	ldr	r4, [pc, #164]	; (8000fc4 <HAL_UART_MspInit+0xb4>)
 8000f1e:	492a      	ldr	r1, [pc, #168]	; (8000fc8 <HAL_UART_MspInit+0xb8>)
 8000f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f24:	2500      	movs	r5, #0
 8000f26:	e9c4 1300 	strd	r1, r3, [r4]
 8000f2a:	2340      	movs	r3, #64	; 0x40
 8000f2c:	e9c4 3502 	strd	r3, r5, [r4, #8]
 8000f30:	4620      	mov	r0, r4
 8000f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f36:	e9c4 3504 	strd	r3, r5, [r4, #16]
 8000f3a:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8000f3e:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8000f42:	f000 f989 	bl	8001258 <HAL_DMA_Init>
 8000f46:	462a      	mov	r2, r5
 8000f48:	4629      	mov	r1, r5
 8000f4a:	6374      	str	r4, [r6, #52]	; 0x34
 8000f4c:	2026      	movs	r0, #38	; 0x26
 8000f4e:	63a6      	str	r6, [r4, #56]	; 0x38
 8000f50:	f000 f918 	bl	8001184 <HAL_NVIC_SetPriority>
 8000f54:	2026      	movs	r0, #38	; 0x26
 8000f56:	f000 f947 	bl	80011e8 <HAL_NVIC_EnableIRQ>
 8000f5a:	2011      	movs	r0, #17
 8000f5c:	462a      	mov	r2, r5
 8000f5e:	4629      	mov	r1, r5
 8000f60:	f000 f910 	bl	8001184 <HAL_NVIC_SetPriority>
 8000f64:	2011      	movs	r0, #17
 8000f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000f6a:	f000 b93d 	b.w	80011e8 <HAL_NVIC_EnableIRQ>
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_UART_MspInit+0xbc>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d124      	bne.n	8000fbe <HAL_UART_MspInit+0xae>
 8000f74:	4c16      	ldr	r4, [pc, #88]	; (8000fd0 <HAL_UART_MspInit+0xc0>)
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_UART_MspInit+0xc4>)
 8000f78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f7c:	2500      	movs	r5, #0
 8000f7e:	e9c4 2300 	strd	r2, r3, [r4]
 8000f82:	4620      	mov	r0, r4
 8000f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f88:	e9c4 3504 	strd	r3, r5, [r4, #16]
 8000f8c:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8000f90:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8000f94:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8000f98:	f000 f95e 	bl	8001258 <HAL_DMA_Init>
 8000f9c:	462a      	mov	r2, r5
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	63b4      	str	r4, [r6, #56]	; 0x38
 8000fa2:	2035      	movs	r0, #53	; 0x35
 8000fa4:	63a6      	str	r6, [r4, #56]	; 0x38
 8000fa6:	f000 f8ed 	bl	8001184 <HAL_NVIC_SetPriority>
 8000faa:	2035      	movs	r0, #53	; 0x35
 8000fac:	f000 f91c 	bl	80011e8 <HAL_NVIC_EnableIRQ>
 8000fb0:	200b      	movs	r0, #11
 8000fb2:	462a      	mov	r2, r5
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	f000 f8e5 	bl	8001184 <HAL_NVIC_SetPriority>
 8000fba:	200b      	movs	r0, #11
 8000fbc:	e7d3      	b.n	8000f66 <HAL_UART_MspInit+0x56>
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	200017b4 	.word	0x200017b4
 8000fc8:	400260a0 	.word	0x400260a0
 8000fcc:	40005000 	.word	0x40005000
 8000fd0:	20001754 	.word	0x20001754
 8000fd4:	40026010 	.word	0x40026010

08000fd8 <USART2_IRQHandler>:
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	4c0d      	ldr	r4, [pc, #52]	; (8001010 <USART2_IRQHandler+0x38>)
 8000fdc:	7823      	ldrb	r3, [r4, #0]
 8000fde:	b91b      	cbnz	r3, 8000fe8 <USART2_IRQHandler+0x10>
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <USART2_IRQHandler+0x3c>)
 8000fe2:	780a      	ldrb	r2, [r1, #0]
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	700a      	strb	r2, [r1, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	480b      	ldr	r0, [pc, #44]	; (8001018 <USART2_IRQHandler+0x40>)
 8000fec:	7023      	strb	r3, [r4, #0]
 8000fee:	f001 f9ef 	bl	80023d0 <HAL_UART_IRQHandler>
 8000ff2:	7823      	ldrb	r3, [r4, #0]
 8000ff4:	b91b      	cbnz	r3, 8000ffe <USART2_IRQHandler+0x26>
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <USART2_IRQHandler+0x3c>)
 8000ff8:	7813      	ldrb	r3, [r2, #0]
 8000ffa:	b933      	cbnz	r3, 800100a <USART2_IRQHandler+0x32>
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	3b01      	subs	r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	7023      	strb	r3, [r4, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f9      	bne.n	8000ffc <USART2_IRQHandler+0x24>
 8001008:	e7f5      	b.n	8000ff6 <USART2_IRQHandler+0x1e>
 800100a:	3b01      	subs	r3, #1
 800100c:	7013      	strb	r3, [r2, #0]
 800100e:	e7f5      	b.n	8000ffc <USART2_IRQHandler+0x24>
 8001010:	200018fb 	.word	0x200018fb
 8001014:	200018fa 	.word	0x200018fa
 8001018:	20001814 	.word	0x20001814

0800101c <UART5_IRQHandler>:
 800101c:	b510      	push	{r4, lr}
 800101e:	4c0d      	ldr	r4, [pc, #52]	; (8001054 <UART5_IRQHandler+0x38>)
 8001020:	7823      	ldrb	r3, [r4, #0]
 8001022:	b91b      	cbnz	r3, 800102c <UART5_IRQHandler+0x10>
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <UART5_IRQHandler+0x3c>)
 8001026:	780a      	ldrb	r2, [r1, #0]
 8001028:	3201      	adds	r2, #1
 800102a:	700a      	strb	r2, [r1, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	480b      	ldr	r0, [pc, #44]	; (800105c <UART5_IRQHandler+0x40>)
 8001030:	7023      	strb	r3, [r4, #0]
 8001032:	f001 f9cd 	bl	80023d0 <HAL_UART_IRQHandler>
 8001036:	7823      	ldrb	r3, [r4, #0]
 8001038:	b91b      	cbnz	r3, 8001042 <UART5_IRQHandler+0x26>
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <UART5_IRQHandler+0x3c>)
 800103c:	7813      	ldrb	r3, [r2, #0]
 800103e:	b933      	cbnz	r3, 800104e <UART5_IRQHandler+0x32>
 8001040:	bd10      	pop	{r4, pc}
 8001042:	3b01      	subs	r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	7023      	strb	r3, [r4, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f9      	bne.n	8001040 <UART5_IRQHandler+0x24>
 800104c:	e7f5      	b.n	800103a <UART5_IRQHandler+0x1e>
 800104e:	3b01      	subs	r3, #1
 8001050:	7013      	strb	r3, [r2, #0]
 8001052:	e7f5      	b.n	8001040 <UART5_IRQHandler+0x24>
 8001054:	200018fb 	.word	0x200018fb
 8001058:	200018fa 	.word	0x200018fa
 800105c:	20001858 	.word	0x20001858

08001060 <HAL_UART_TxCpltCallback>:
 8001060:	6803      	ldr	r3, [r0, #0]
 8001062:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_UART_TxCpltCallback+0x1c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d102      	bne.n	800106e <HAL_UART_TxCpltCallback+0xe>
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_UART_TxCpltCallback+0x20>)
 800106a:	f006 baaf 	b.w	80075cc <gos_triggerIncrement>
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <HAL_UART_TxCpltCallback+0x24>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d101      	bne.n	8001078 <HAL_UART_TxCpltCallback+0x18>
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <HAL_UART_TxCpltCallback+0x28>)
 8001076:	e7f8      	b.n	800106a <HAL_UART_TxCpltCallback+0xa>
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40004400 	.word	0x40004400
 8001080:	200018a0 	.word	0x200018a0
 8001084:	40005000 	.word	0x40005000
 8001088:	200018c8 	.word	0x200018c8

0800108c <HAL_UART_RxCpltCallback>:
 800108c:	6802      	ldr	r2, [r0, #0]
 800108e:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_UART_RxCpltCallback+0x10>)
 8001090:	429a      	cmp	r2, r3
 8001092:	d102      	bne.n	800109a <HAL_UART_RxCpltCallback+0xe>
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <HAL_UART_RxCpltCallback+0x14>)
 8001096:	f006 ba99 	b.w	80075cc <gos_triggerIncrement>
 800109a:	4770      	bx	lr
 800109c:	40005000 	.word	0x40005000
 80010a0:	200018b4 	.word	0x200018b4

080010a4 <DMA1_Stream0_IRQHandler>:
 80010a4:	4801      	ldr	r0, [pc, #4]	; (80010ac <DMA1_Stream0_IRQHandler+0x8>)
 80010a6:	f000 b9e5 	b.w	8001474 <HAL_DMA_IRQHandler>
 80010aa:	bf00      	nop
 80010ac:	20001754 	.word	0x20001754

080010b0 <DMA1_Stream6_IRQHandler>:
 80010b0:	4801      	ldr	r0, [pc, #4]	; (80010b8 <DMA1_Stream6_IRQHandler+0x8>)
 80010b2:	f000 b9df 	b.w	8001474 <HAL_DMA_IRQHandler>
 80010b6:	bf00      	nop
 80010b8:	200017b4 	.word	0x200017b4

080010bc <HAL_MspInit>:
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_InitTick>:
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_InitTick+0x3c>)
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_InitTick+0x40>)
 80010d0:	4605      	mov	r5, r0
 80010d2:	6810      	ldr	r0, [r2, #0]
 80010d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80010d8:	f000 f894 	bl	8001204 <HAL_SYSTICK_Config>
 80010dc:	4604      	mov	r4, r0
 80010de:	b958      	cbnz	r0, 80010f8 <HAL_InitTick+0x38>
 80010e0:	2d0f      	cmp	r5, #15
 80010e2:	d809      	bhi.n	80010f8 <HAL_InitTick+0x38>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4629      	mov	r1, r5
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f84a 	bl	8001184 <HAL_NVIC_SetPriority>
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_InitTick+0x44>)
 80010f2:	4620      	mov	r0, r4
 80010f4:	601d      	str	r5, [r3, #0]
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
 80010f8:	2001      	movs	r0, #1
 80010fa:	e7fc      	b.n	80010f6 <HAL_InitTick+0x36>
 80010fc:	200002b8 	.word	0x200002b8
 8001100:	200002b4 	.word	0x200002b4
 8001104:	200002bc 	.word	0x200002bc

08001108 <HAL_Init>:
 8001108:	b508      	push	{r3, lr}
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x30>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f81b 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ffc8 	bl	80010c0 <HAL_InitTick>
 8001130:	f7ff ffc4 	bl	80010bc <HAL_MspInit>
 8001134:	2000      	movs	r0, #0
 8001136:	bd08      	pop	{r3, pc}
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_IncTick>:
 800113c:	4a03      	ldr	r2, [pc, #12]	; (800114c <HAL_IncTick+0x10>)
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_IncTick+0x14>)
 8001140:	6811      	ldr	r1, [r2, #0]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	440b      	add	r3, r1
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200018d8 	.word	0x200018d8
 8001150:	200002b8 	.word	0x200002b8

08001154 <HAL_GetTick>:
 8001154:	4b01      	ldr	r3, [pc, #4]	; (800115c <HAL_GetTick+0x8>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200018d8 	.word	0x200018d8

08001160 <HAL_NVIC_SetPriorityGrouping>:
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001162:	68ca      	ldr	r2, [r1, #12]
 8001164:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001168:	0203      	lsls	r3, r0, #8
 800116a:	0412      	lsls	r2, r2, #16
 800116c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001170:	0c12      	lsrs	r2, r2, #16
 8001172:	4313      	orrs	r3, r2
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60cb      	str	r3, [r1, #12]
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_NVIC_SetPriority>:
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_NVIC_SetPriority+0x5c>)
 8001186:	b530      	push	{r4, r5, lr}
 8001188:	68dc      	ldr	r4, [r3, #12]
 800118a:	f3c4 2402 	ubfx	r4, r4, #8, #3
 800118e:	f1c4 0307 	rsb	r3, r4, #7
 8001192:	1d25      	adds	r5, r4, #4
 8001194:	2b04      	cmp	r3, #4
 8001196:	bf28      	it	cs
 8001198:	2304      	movcs	r3, #4
 800119a:	2d06      	cmp	r5, #6
 800119c:	f04f 35ff 	mov.w	r5, #4294967295
 80011a0:	bf8c      	ite	hi
 80011a2:	3c03      	subhi	r4, #3
 80011a4:	2400      	movls	r4, #0
 80011a6:	fa05 f303 	lsl.w	r3, r5, r3
 80011aa:	ea21 0303 	bic.w	r3, r1, r3
 80011ae:	40a5      	lsls	r5, r4
 80011b0:	ea22 0205 	bic.w	r2, r2, r5
 80011b4:	40a3      	lsls	r3, r4
 80011b6:	2800      	cmp	r0, #0
 80011b8:	ea43 0302 	orr.w	r3, r3, r2
 80011bc:	bfac      	ite	ge
 80011be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80011c2:	4a08      	ldrlt	r2, [pc, #32]	; (80011e4 <HAL_NVIC_SetPriority+0x60>)
 80011c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80011c8:	bfb8      	it	lt
 80011ca:	f000 000f 	andlt.w	r0, r0, #15
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	bfaa      	itet	ge
 80011d2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80011d6:	5413      	strblt	r3, [r2, r0]
 80011d8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
 80011dc:	bd30      	pop	{r4, r5, pc}
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	e000ed14 	.word	0xe000ed14

080011e8 <HAL_NVIC_EnableIRQ>:
 80011e8:	2800      	cmp	r0, #0
 80011ea:	db07      	blt.n	80011fc <HAL_NVIC_EnableIRQ+0x14>
 80011ec:	0941      	lsrs	r1, r0, #5
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_NVIC_EnableIRQ+0x18>)
 80011f0:	f000 001f 	and.w	r0, r0, #31
 80011f4:	2301      	movs	r3, #1
 80011f6:	4083      	lsls	r3, r0
 80011f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <HAL_SYSTICK_Config>:
 8001204:	3801      	subs	r0, #1
 8001206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800120a:	d20b      	bcs.n	8001224 <HAL_SYSTICK_Config+0x20>
 800120c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001210:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_SYSTICK_Config+0x24>)
 8001212:	6158      	str	r0, [r3, #20]
 8001214:	21f0      	movs	r1, #240	; 0xf0
 8001216:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 800121a:	2000      	movs	r0, #0
 800121c:	2207      	movs	r2, #7
 800121e:	6198      	str	r0, [r3, #24]
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	4770      	bx	lr
 8001224:	2001      	movs	r0, #1
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <DMA_CalcBaseAndBitshift>:
 800122c:	6803      	ldr	r3, [r0, #0]
 800122e:	b510      	push	{r4, lr}
 8001230:	b2da      	uxtb	r2, r3
 8001232:	3a10      	subs	r2, #16
 8001234:	4c07      	ldr	r4, [pc, #28]	; (8001254 <DMA_CalcBaseAndBitshift+0x28>)
 8001236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800123a:	f023 0303 	bic.w	r3, r3, #3
 800123e:	2a5f      	cmp	r2, #95	; 0x5f
 8001240:	bf88      	it	hi
 8001242:	3304      	addhi	r3, #4
 8001244:	2118      	movs	r1, #24
 8001246:	fbb2 f1f1 	udiv	r1, r2, r1
 800124a:	5c61      	ldrb	r1, [r4, r1]
 800124c:	65c1      	str	r1, [r0, #92]	; 0x5c
 800124e:	6583      	str	r3, [r0, #88]	; 0x58
 8001250:	4618      	mov	r0, r3
 8001252:	bd10      	pop	{r4, pc}
 8001254:	080094b4 	.word	0x080094b4

08001258 <HAL_DMA_Init>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	4604      	mov	r4, r0
 800125c:	f7ff ff7a 	bl	8001154 <HAL_GetTick>
 8001260:	4605      	mov	r5, r0
 8001262:	2c00      	cmp	r4, #0
 8001264:	d071      	beq.n	800134a <HAL_DMA_Init+0xf2>
 8001266:	2300      	movs	r3, #0
 8001268:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	2302      	movs	r3, #2
 8001270:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8001274:	6813      	ldr	r3, [r2, #0]
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	6822      	ldr	r2, [r4, #0]
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	07d8      	lsls	r0, r3, #31
 8001282:	d42e      	bmi.n	80012e2 <HAL_DMA_Init+0x8a>
 8001284:	6813      	ldr	r3, [r2, #0]
 8001286:	4832      	ldr	r0, [pc, #200]	; (8001350 <HAL_DMA_Init+0xf8>)
 8001288:	69a1      	ldr	r1, [r4, #24]
 800128a:	4018      	ands	r0, r3
 800128c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001290:	432b      	orrs	r3, r5
 8001292:	68e5      	ldr	r5, [r4, #12]
 8001294:	432b      	orrs	r3, r5
 8001296:	6925      	ldr	r5, [r4, #16]
 8001298:	432b      	orrs	r3, r5
 800129a:	6965      	ldr	r5, [r4, #20]
 800129c:	432b      	orrs	r3, r5
 800129e:	69e5      	ldr	r5, [r4, #28]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	432b      	orrs	r3, r5
 80012a4:	6a25      	ldr	r5, [r4, #32]
 80012a6:	432b      	orrs	r3, r5
 80012a8:	4303      	orrs	r3, r0
 80012aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80012ac:	2804      	cmp	r0, #4
 80012ae:	bf02      	ittt	eq
 80012b0:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80012b4:	4335      	orreq	r5, r6
 80012b6:	432b      	orreq	r3, r5
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	6953      	ldr	r3, [r2, #20]
 80012bc:	2804      	cmp	r0, #4
 80012be:	f023 0307 	bic.w	r3, r3, #7
 80012c2:	ea43 0300 	orr.w	r3, r3, r0
 80012c6:	d132      	bne.n	800132e <HAL_DMA_Init+0xd6>
 80012c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80012ca:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80012cc:	4303      	orrs	r3, r0
 80012ce:	b375      	cbz	r5, 800132e <HAL_DMA_Init+0xd6>
 80012d0:	b991      	cbnz	r1, 80012f8 <HAL_DMA_Init+0xa0>
 80012d2:	2801      	cmp	r0, #1
 80012d4:	d020      	beq.n	8001318 <HAL_DMA_Init+0xc0>
 80012d6:	f030 0102 	bics.w	r1, r0, #2
 80012da:	d128      	bne.n	800132e <HAL_DMA_Init+0xd6>
 80012dc:	01e9      	lsls	r1, r5, #7
 80012de:	d526      	bpl.n	800132e <HAL_DMA_Init+0xd6>
 80012e0:	e01d      	b.n	800131e <HAL_DMA_Init+0xc6>
 80012e2:	f7ff ff37 	bl	8001154 <HAL_GetTick>
 80012e6:	1b40      	subs	r0, r0, r5
 80012e8:	2805      	cmp	r0, #5
 80012ea:	d9c7      	bls.n	800127c <HAL_DMA_Init+0x24>
 80012ec:	2320      	movs	r3, #32
 80012ee:	6563      	str	r3, [r4, #84]	; 0x54
 80012f0:	2003      	movs	r0, #3
 80012f2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
 80012f8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80012fc:	d113      	bne.n	8001326 <HAL_DMA_Init+0xce>
 80012fe:	2803      	cmp	r0, #3
 8001300:	d815      	bhi.n	800132e <HAL_DMA_Init+0xd6>
 8001302:	a101      	add	r1, pc, #4	; (adr r1, 8001308 <HAL_DMA_Init+0xb0>)
 8001304:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001308:	0800131f 	.word	0x0800131f
 800130c:	080012dd 	.word	0x080012dd
 8001310:	0800131f 	.word	0x0800131f
 8001314:	08001319 	.word	0x08001319
 8001318:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800131c:	d107      	bne.n	800132e <HAL_DMA_Init+0xd6>
 800131e:	2340      	movs	r3, #64	; 0x40
 8001320:	6563      	str	r3, [r4, #84]	; 0x54
 8001322:	2001      	movs	r0, #1
 8001324:	e7e5      	b.n	80012f2 <HAL_DMA_Init+0x9a>
 8001326:	2802      	cmp	r0, #2
 8001328:	d9f9      	bls.n	800131e <HAL_DMA_Init+0xc6>
 800132a:	2803      	cmp	r0, #3
 800132c:	d0d6      	beq.n	80012dc <HAL_DMA_Init+0x84>
 800132e:	6153      	str	r3, [r2, #20]
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff ff7b 	bl	800122c <DMA_CalcBaseAndBitshift>
 8001336:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001338:	233f      	movs	r3, #63	; 0x3f
 800133a:	4093      	lsls	r3, r2
 800133c:	6083      	str	r3, [r0, #8]
 800133e:	2000      	movs	r0, #0
 8001340:	2301      	movs	r3, #1
 8001342:	6560      	str	r0, [r4, #84]	; 0x54
 8001344:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8001348:	e7d5      	b.n	80012f6 <HAL_DMA_Init+0x9e>
 800134a:	2001      	movs	r0, #1
 800134c:	e7d3      	b.n	80012f6 <HAL_DMA_Init+0x9e>
 800134e:	bf00      	nop
 8001350:	f010803f 	.word	0xf010803f

08001354 <HAL_DMA_Start_IT>:
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800135a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800135c:	2c01      	cmp	r4, #1
 800135e:	d031      	beq.n	80013c4 <HAL_DMA_Start_IT+0x70>
 8001360:	2401      	movs	r4, #1
 8001362:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
 8001366:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800136a:	2c01      	cmp	r4, #1
 800136c:	f04f 0500 	mov.w	r5, #0
 8001370:	f04f 0402 	mov.w	r4, #2
 8001374:	d124      	bne.n	80013c0 <HAL_DMA_Start_IT+0x6c>
 8001376:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
 800137a:	6804      	ldr	r4, [r0, #0]
 800137c:	6545      	str	r5, [r0, #84]	; 0x54
 800137e:	6825      	ldr	r5, [r4, #0]
 8001380:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001384:	6025      	str	r5, [r4, #0]
 8001386:	6063      	str	r3, [r4, #4]
 8001388:	6883      	ldr	r3, [r0, #8]
 800138a:	2b40      	cmp	r3, #64	; 0x40
 800138c:	bf0e      	itee	eq
 800138e:	60a2      	streq	r2, [r4, #8]
 8001390:	60a1      	strne	r1, [r4, #8]
 8001392:	60e2      	strne	r2, [r4, #12]
 8001394:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001396:	bf08      	it	eq
 8001398:	60e1      	streq	r1, [r4, #12]
 800139a:	233f      	movs	r3, #63	; 0x3f
 800139c:	4093      	lsls	r3, r2
 800139e:	60b3      	str	r3, [r6, #8]
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	f043 0316 	orr.w	r3, r3, #22
 80013a6:	6023      	str	r3, [r4, #0]
 80013a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013aa:	b11b      	cbz	r3, 80013b4 <HAL_DMA_Start_IT+0x60>
 80013ac:	6823      	ldr	r3, [r4, #0]
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6023      	str	r3, [r4, #0]
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6023      	str	r3, [r4, #0]
 80013bc:	2000      	movs	r0, #0
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 80013c4:	2002      	movs	r0, #2
 80013c6:	e7fa      	b.n	80013be <HAL_DMA_Start_IT+0x6a>

080013c8 <HAL_DMA_Abort>:
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	4604      	mov	r4, r0
 80013cc:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80013ce:	f7ff fec1 	bl	8001154 <HAL_GetTick>
 80013d2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	4605      	mov	r5, r0
 80013da:	d006      	beq.n	80013ea <HAL_DMA_Abort+0x22>
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	6563      	str	r3, [r4, #84]	; 0x54
 80013e0:	2300      	movs	r3, #0
 80013e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80013e6:	2001      	movs	r0, #1
 80013e8:	bd70      	pop	{r4, r5, r6, pc}
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	f022 0216 	bic.w	r2, r2, #22
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013fe:	b90a      	cbnz	r2, 8001404 <HAL_DMA_Abort+0x3c>
 8001400:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001402:	b11a      	cbz	r2, 800140c <HAL_DMA_Abort+0x44>
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	f022 0208 	bic.w	r2, r2, #8
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f013 0301 	ands.w	r3, r3, #1
 800141c:	d10a      	bne.n	8001434 <HAL_DMA_Abort+0x6c>
 800141e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001420:	223f      	movs	r2, #63	; 0x3f
 8001422:	408a      	lsls	r2, r1
 8001424:	60b2      	str	r2, [r6, #8]
 8001426:	2201      	movs	r2, #1
 8001428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800142c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8001430:	4618      	mov	r0, r3
 8001432:	e7d9      	b.n	80013e8 <HAL_DMA_Abort+0x20>
 8001434:	f7ff fe8e 	bl	8001154 <HAL_GetTick>
 8001438:	1b40      	subs	r0, r0, r5
 800143a:	2805      	cmp	r0, #5
 800143c:	d9ea      	bls.n	8001414 <HAL_DMA_Abort+0x4c>
 800143e:	2320      	movs	r3, #32
 8001440:	6563      	str	r3, [r4, #84]	; 0x54
 8001442:	2003      	movs	r0, #3
 8001444:	2300      	movs	r3, #0
 8001446:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800144a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800144e:	e7cb      	b.n	80013e8 <HAL_DMA_Abort+0x20>

08001450 <HAL_DMA_Abort_IT>:
 8001450:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001454:	2b02      	cmp	r3, #2
 8001456:	d003      	beq.n	8001460 <HAL_DMA_Abort_IT+0x10>
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	6543      	str	r3, [r0, #84]	; 0x54
 800145c:	2001      	movs	r0, #1
 800145e:	4770      	bx	lr
 8001460:	6802      	ldr	r2, [r0, #0]
 8001462:	2305      	movs	r3, #5
 8001464:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 8001468:	6813      	ldr	r3, [r2, #0]
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	2000      	movs	r0, #0
 8001472:	4770      	bx	lr

08001474 <HAL_DMA_IRQHandler>:
 8001474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001476:	2300      	movs	r3, #0
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_DMA_IRQHandler+0x178>)
 800147c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800147e:	681f      	ldr	r7, [r3, #0]
 8001480:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001482:	682e      	ldr	r6, [r5, #0]
 8001484:	2208      	movs	r2, #8
 8001486:	409a      	lsls	r2, r3
 8001488:	4232      	tst	r2, r6
 800148a:	4604      	mov	r4, r0
 800148c:	d00c      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x34>
 800148e:	6801      	ldr	r1, [r0, #0]
 8001490:	6808      	ldr	r0, [r1, #0]
 8001492:	0740      	lsls	r0, r0, #29
 8001494:	d508      	bpl.n	80014a8 <HAL_DMA_IRQHandler+0x34>
 8001496:	6808      	ldr	r0, [r1, #0]
 8001498:	f020 0004 	bic.w	r0, r0, #4
 800149c:	6008      	str	r0, [r1, #0]
 800149e:	60aa      	str	r2, [r5, #8]
 80014a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	6562      	str	r2, [r4, #84]	; 0x54
 80014a8:	2201      	movs	r2, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	4232      	tst	r2, r6
 80014ae:	d008      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x4e>
 80014b0:	6821      	ldr	r1, [r4, #0]
 80014b2:	6949      	ldr	r1, [r1, #20]
 80014b4:	0609      	lsls	r1, r1, #24
 80014b6:	bf41      	itttt	mi
 80014b8:	60aa      	strmi	r2, [r5, #8]
 80014ba:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80014bc:	f042 0202 	orrmi.w	r2, r2, #2
 80014c0:	6562      	strmi	r2, [r4, #84]	; 0x54
 80014c2:	2204      	movs	r2, #4
 80014c4:	409a      	lsls	r2, r3
 80014c6:	4232      	tst	r2, r6
 80014c8:	d008      	beq.n	80014dc <HAL_DMA_IRQHandler+0x68>
 80014ca:	6821      	ldr	r1, [r4, #0]
 80014cc:	6809      	ldr	r1, [r1, #0]
 80014ce:	0788      	lsls	r0, r1, #30
 80014d0:	bf41      	itttt	mi
 80014d2:	60aa      	strmi	r2, [r5, #8]
 80014d4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80014d6:	f042 0204 	orrmi.w	r2, r2, #4
 80014da:	6562      	strmi	r2, [r4, #84]	; 0x54
 80014dc:	2210      	movs	r2, #16
 80014de:	409a      	lsls	r2, r3
 80014e0:	4232      	tst	r2, r6
 80014e2:	d010      	beq.n	8001506 <HAL_DMA_IRQHandler+0x92>
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	0709      	lsls	r1, r1, #28
 80014ea:	d50c      	bpl.n	8001506 <HAL_DMA_IRQHandler+0x92>
 80014ec:	60aa      	str	r2, [r5, #8]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	0350      	lsls	r0, r2, #13
 80014f2:	d537      	bpl.n	8001564 <HAL_DMA_IRQHandler+0xf0>
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0319      	lsls	r1, r3, #12
 80014f8:	d401      	bmi.n	80014fe <HAL_DMA_IRQHandler+0x8a>
 80014fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014fc:	e000      	b.n	8001500 <HAL_DMA_IRQHandler+0x8c>
 80014fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001500:	b10b      	cbz	r3, 8001506 <HAL_DMA_IRQHandler+0x92>
 8001502:	4620      	mov	r0, r4
 8001504:	4798      	blx	r3
 8001506:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001508:	2220      	movs	r2, #32
 800150a:	408a      	lsls	r2, r1
 800150c:	4232      	tst	r2, r6
 800150e:	d03a      	beq.n	8001586 <HAL_DMA_IRQHandler+0x112>
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	06c6      	lsls	r6, r0, #27
 8001516:	d536      	bpl.n	8001586 <HAL_DMA_IRQHandler+0x112>
 8001518:	60aa      	str	r2, [r5, #8]
 800151a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800151e:	2a05      	cmp	r2, #5
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	d127      	bne.n	8001574 <HAL_DMA_IRQHandler+0x100>
 8001524:	f022 0216 	bic.w	r2, r2, #22
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	695a      	ldr	r2, [r3, #20]
 800152c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001530:	615a      	str	r2, [r3, #20]
 8001532:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001534:	b90a      	cbnz	r2, 800153a <HAL_DMA_IRQHandler+0xc6>
 8001536:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001538:	b11a      	cbz	r2, 8001542 <HAL_DMA_IRQHandler+0xce>
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f022 0208 	bic.w	r2, r2, #8
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	233f      	movs	r3, #63	; 0x3f
 8001544:	408b      	lsls	r3, r1
 8001546:	60ab      	str	r3, [r5, #8]
 8001548:	2300      	movs	r3, #0
 800154a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800154e:	2301      	movs	r3, #1
 8001550:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8001554:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001556:	2b00      	cmp	r3, #0
 8001558:	d045      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x172>
 800155a:	4620      	mov	r0, r4
 800155c:	b003      	add	sp, #12
 800155e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001562:	4718      	bx	r3
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	05d2      	lsls	r2, r2, #23
 8001568:	bf5e      	ittt	pl
 800156a:	681a      	ldrpl	r2, [r3, #0]
 800156c:	f022 0208 	bicpl.w	r2, r2, #8
 8001570:	601a      	strpl	r2, [r3, #0]
 8001572:	e7c2      	b.n	80014fa <HAL_DMA_IRQHandler+0x86>
 8001574:	0350      	lsls	r0, r2, #13
 8001576:	d527      	bpl.n	80015c8 <HAL_DMA_IRQHandler+0x154>
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0319      	lsls	r1, r3, #12
 800157c:	d431      	bmi.n	80015e2 <HAL_DMA_IRQHandler+0x16e>
 800157e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001580:	b10b      	cbz	r3, 8001586 <HAL_DMA_IRQHandler+0x112>
 8001582:	4620      	mov	r0, r4
 8001584:	4798      	blx	r3
 8001586:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001588:	b36b      	cbz	r3, 80015e6 <HAL_DMA_IRQHandler+0x172>
 800158a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800158c:	07da      	lsls	r2, r3, #31
 800158e:	d519      	bpl.n	80015c4 <HAL_DMA_IRQHandler+0x150>
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001596:	fbb7 f7f3 	udiv	r7, r7, r3
 800159a:	2305      	movs	r3, #5
 800159c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	9b01      	ldr	r3, [sp, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	42bb      	cmp	r3, r7
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	d802      	bhi.n	80015b8 <HAL_DMA_IRQHandler+0x144>
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	07db      	lsls	r3, r3, #31
 80015b6:	d4f7      	bmi.n	80015a8 <HAL_DMA_IRQHandler+0x134>
 80015b8:	2300      	movs	r3, #0
 80015ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80015be:	2301      	movs	r3, #1
 80015c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80015c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80015c6:	e7c6      	b.n	8001556 <HAL_DMA_IRQHandler+0xe2>
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80015ce:	d108      	bne.n	80015e2 <HAL_DMA_IRQHandler+0x16e>
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	f021 0110 	bic.w	r1, r1, #16
 80015d6:	6019      	str	r1, [r3, #0]
 80015d8:	2301      	movs	r3, #1
 80015da:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 80015de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80015e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015e4:	e7cc      	b.n	8001580 <HAL_DMA_IRQHandler+0x10c>
 80015e6:	b003      	add	sp, #12
 80015e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002b4 	.word	0x200002b4

080015f0 <HAL_DMA_GetError>:
 80015f0:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80015f2:	4770      	bx	lr

080015f4 <HAL_GPIO_Init>:
 80015f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001798 <HAL_GPIO_Init+0x1a4>
 80015fc:	4a64      	ldr	r2, [pc, #400]	; (8001790 <HAL_GPIO_Init+0x19c>)
 80015fe:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800179c <HAL_GPIO_Init+0x1a8>
 8001602:	2300      	movs	r3, #0
 8001604:	680d      	ldr	r5, [r1, #0]
 8001606:	2401      	movs	r4, #1
 8001608:	409c      	lsls	r4, r3
 800160a:	ea04 0605 	and.w	r6, r4, r5
 800160e:	43ac      	bics	r4, r5
 8001610:	f040 80aa 	bne.w	8001768 <HAL_GPIO_Init+0x174>
 8001614:	684c      	ldr	r4, [r1, #4]
 8001616:	f024 0c10 	bic.w	ip, r4, #16
 800161a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800161e:	2503      	movs	r5, #3
 8001620:	f10c 37ff 	add.w	r7, ip, #4294967295
 8001624:	fa05 f50e 	lsl.w	r5, r5, lr
 8001628:	2f01      	cmp	r7, #1
 800162a:	ea6f 0505 	mvn.w	r5, r5
 800162e:	d810      	bhi.n	8001652 <HAL_GPIO_Init+0x5e>
 8001630:	6887      	ldr	r7, [r0, #8]
 8001632:	ea07 0a05 	and.w	sl, r7, r5
 8001636:	68cf      	ldr	r7, [r1, #12]
 8001638:	fa07 f70e 	lsl.w	r7, r7, lr
 800163c:	ea47 070a 	orr.w	r7, r7, sl
 8001640:	6087      	str	r7, [r0, #8]
 8001642:	6847      	ldr	r7, [r0, #4]
 8001644:	ea27 0a06 	bic.w	sl, r7, r6
 8001648:	0927      	lsrs	r7, r4, #4
 800164a:	409f      	lsls	r7, r3
 800164c:	ea47 070a 	orr.w	r7, r7, sl
 8001650:	6047      	str	r7, [r0, #4]
 8001652:	68c7      	ldr	r7, [r0, #12]
 8001654:	ea07 0a05 	and.w	sl, r7, r5
 8001658:	688f      	ldr	r7, [r1, #8]
 800165a:	fa07 f70e 	lsl.w	r7, r7, lr
 800165e:	ea47 070a 	orr.w	r7, r7, sl
 8001662:	f1bc 0f02 	cmp.w	ip, #2
 8001666:	60c7      	str	r7, [r0, #12]
 8001668:	d116      	bne.n	8001698 <HAL_GPIO_Init+0xa4>
 800166a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800166e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001672:	f003 0b07 	and.w	fp, r3, #7
 8001676:	f8da 7020 	ldr.w	r7, [sl, #32]
 800167a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800167e:	f04f 0c0f 	mov.w	ip, #15
 8001682:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001686:	ea27 0c0c 	bic.w	ip, r7, ip
 800168a:	690f      	ldr	r7, [r1, #16]
 800168c:	fa07 f70b 	lsl.w	r7, r7, fp
 8001690:	ea47 070c 	orr.w	r7, r7, ip
 8001694:	f8ca 7020 	str.w	r7, [sl, #32]
 8001698:	6807      	ldr	r7, [r0, #0]
 800169a:	402f      	ands	r7, r5
 800169c:	f004 0503 	and.w	r5, r4, #3
 80016a0:	fa05 f50e 	lsl.w	r5, r5, lr
 80016a4:	433d      	orrs	r5, r7
 80016a6:	6005      	str	r5, [r0, #0]
 80016a8:	00e5      	lsls	r5, r4, #3
 80016aa:	d55d      	bpl.n	8001768 <HAL_GPIO_Init+0x174>
 80016ac:	f04f 0b00 	mov.w	fp, #0
 80016b0:	f8cd b004 	str.w	fp, [sp, #4]
 80016b4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016b8:	4d36      	ldr	r5, [pc, #216]	; (8001794 <HAL_GPIO_Init+0x1a0>)
 80016ba:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80016be:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80016c2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016c6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80016ca:	9701      	str	r7, [sp, #4]
 80016cc:	9f01      	ldr	r7, [sp, #4]
 80016ce:	f023 0703 	bic.w	r7, r3, #3
 80016d2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80016d6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80016da:	f003 0e03 	and.w	lr, r3, #3
 80016de:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80016e2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80016e6:	f04f 0c0f 	mov.w	ip, #15
 80016ea:	fa0c fc0e 	lsl.w	ip, ip, lr
 80016ee:	42a8      	cmp	r0, r5
 80016f0:	ea2a 0c0c 	bic.w	ip, sl, ip
 80016f4:	d03f      	beq.n	8001776 <HAL_GPIO_Init+0x182>
 80016f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016fa:	42a8      	cmp	r0, r5
 80016fc:	d03d      	beq.n	800177a <HAL_GPIO_Init+0x186>
 80016fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001702:	42a8      	cmp	r0, r5
 8001704:	d03b      	beq.n	800177e <HAL_GPIO_Init+0x18a>
 8001706:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800170a:	42a8      	cmp	r0, r5
 800170c:	d039      	beq.n	8001782 <HAL_GPIO_Init+0x18e>
 800170e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001712:	42a8      	cmp	r0, r5
 8001714:	d037      	beq.n	8001786 <HAL_GPIO_Init+0x192>
 8001716:	4548      	cmp	r0, r9
 8001718:	d037      	beq.n	800178a <HAL_GPIO_Init+0x196>
 800171a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800171e:	42a8      	cmp	r0, r5
 8001720:	bf0c      	ite	eq
 8001722:	2506      	moveq	r5, #6
 8001724:	2507      	movne	r5, #7
 8001726:	fa05 f50e 	lsl.w	r5, r5, lr
 800172a:	ea45 050c 	orr.w	r5, r5, ip
 800172e:	60bd      	str	r5, [r7, #8]
 8001730:	6815      	ldr	r5, [r2, #0]
 8001732:	43f7      	mvns	r7, r6
 8001734:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001738:	bf0c      	ite	eq
 800173a:	403d      	andeq	r5, r7
 800173c:	4335      	orrne	r5, r6
 800173e:	6015      	str	r5, [r2, #0]
 8001740:	6855      	ldr	r5, [r2, #4]
 8001742:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001746:	bf0c      	ite	eq
 8001748:	403d      	andeq	r5, r7
 800174a:	4335      	orrne	r5, r6
 800174c:	6055      	str	r5, [r2, #4]
 800174e:	6895      	ldr	r5, [r2, #8]
 8001750:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8001754:	bf0c      	ite	eq
 8001756:	403d      	andeq	r5, r7
 8001758:	4335      	orrne	r5, r6
 800175a:	6095      	str	r5, [r2, #8]
 800175c:	68d5      	ldr	r5, [r2, #12]
 800175e:	02a4      	lsls	r4, r4, #10
 8001760:	bf54      	ite	pl
 8001762:	403d      	andpl	r5, r7
 8001764:	4335      	orrmi	r5, r6
 8001766:	60d5      	str	r5, [r2, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	2b10      	cmp	r3, #16
 800176c:	f47f af4a 	bne.w	8001604 <HAL_GPIO_Init+0x10>
 8001770:	b003      	add	sp, #12
 8001772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001776:	465d      	mov	r5, fp
 8001778:	e7d5      	b.n	8001726 <HAL_GPIO_Init+0x132>
 800177a:	2501      	movs	r5, #1
 800177c:	e7d3      	b.n	8001726 <HAL_GPIO_Init+0x132>
 800177e:	2502      	movs	r5, #2
 8001780:	e7d1      	b.n	8001726 <HAL_GPIO_Init+0x132>
 8001782:	2503      	movs	r5, #3
 8001784:	e7cf      	b.n	8001726 <HAL_GPIO_Init+0x132>
 8001786:	2504      	movs	r5, #4
 8001788:	e7cd      	b.n	8001726 <HAL_GPIO_Init+0x132>
 800178a:	2505      	movs	r5, #5
 800178c:	e7cb      	b.n	8001726 <HAL_GPIO_Init+0x132>
 800178e:	bf00      	nop
 8001790:	40013c00 	.word	0x40013c00
 8001794:	40020000 	.word	0x40020000
 8001798:	40023800 	.word	0x40023800
 800179c:	40021400 	.word	0x40021400

080017a0 <HAL_GPIO_TogglePin>:
 80017a0:	6943      	ldr	r3, [r0, #20]
 80017a2:	ea31 0303 	bics.w	r3, r1, r3
 80017a6:	bf08      	it	eq
 80017a8:	0409      	lsleq	r1, r1, #16
 80017aa:	6181      	str	r1, [r0, #24]
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_GPIO_EXTI_IRQHandler>:
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80017b2:	6951      	ldr	r1, [r2, #20]
 80017b4:	4201      	tst	r1, r0
 80017b6:	b508      	push	{r3, lr}
 80017b8:	d002      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x10>
 80017ba:	6150      	str	r0, [r2, #20]
 80017bc:	f7ff f9c6 	bl	8000b4c <HAL_GPIO_EXTI_Callback>
 80017c0:	bd08      	pop	{r3, pc}
 80017c2:	bf00      	nop
 80017c4:	40013c00 	.word	0x40013c00

080017c8 <HAL_RCC_ClockConfig>:
 80017c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017cc:	460d      	mov	r5, r1
 80017ce:	4604      	mov	r4, r0
 80017d0:	b910      	cbnz	r0, 80017d8 <HAL_RCC_ClockConfig+0x10>
 80017d2:	2001      	movs	r0, #1
 80017d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <HAL_RCC_ClockConfig+0x120>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	f002 020f 	and.w	r2, r2, #15
 80017e0:	428a      	cmp	r2, r1
 80017e2:	d328      	bcc.n	8001836 <HAL_RCC_ClockConfig+0x6e>
 80017e4:	6821      	ldr	r1, [r4, #0]
 80017e6:	078f      	lsls	r7, r1, #30
 80017e8:	d42d      	bmi.n	8001846 <HAL_RCC_ClockConfig+0x7e>
 80017ea:	07c8      	lsls	r0, r1, #31
 80017ec:	d440      	bmi.n	8001870 <HAL_RCC_ClockConfig+0xa8>
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <HAL_RCC_ClockConfig+0x120>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	f002 020f 	and.w	r2, r2, #15
 80017f6:	42aa      	cmp	r2, r5
 80017f8:	d865      	bhi.n	80018c6 <HAL_RCC_ClockConfig+0xfe>
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	0751      	lsls	r1, r2, #29
 80017fe:	d46b      	bmi.n	80018d8 <HAL_RCC_ClockConfig+0x110>
 8001800:	0713      	lsls	r3, r2, #28
 8001802:	d507      	bpl.n	8001814 <HAL_RCC_ClockConfig+0x4c>
 8001804:	4a39      	ldr	r2, [pc, #228]	; (80018ec <HAL_RCC_ClockConfig+0x124>)
 8001806:	6921      	ldr	r1, [r4, #16]
 8001808:	6893      	ldr	r3, [r2, #8]
 800180a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800180e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001812:	6093      	str	r3, [r2, #8]
 8001814:	f000 f892 	bl	800193c <HAL_RCC_GetSysClockFreq>
 8001818:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x124>)
 800181a:	4a35      	ldr	r2, [pc, #212]	; (80018f0 <HAL_RCC_ClockConfig+0x128>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	40d8      	lsrs	r0, r3
 8001826:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <HAL_RCC_ClockConfig+0x12c>)
 8001828:	6018      	str	r0, [r3, #0]
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_RCC_ClockConfig+0x130>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f7ff fc47 	bl	80010c0 <HAL_InitTick>
 8001832:	2000      	movs	r0, #0
 8001834:	e7ce      	b.n	80017d4 <HAL_RCC_ClockConfig+0xc>
 8001836:	b2ca      	uxtb	r2, r1
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	428b      	cmp	r3, r1
 8001842:	d1c6      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xa>
 8001844:	e7ce      	b.n	80017e4 <HAL_RCC_ClockConfig+0x1c>
 8001846:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_RCC_ClockConfig+0x124>)
 8001848:	f011 0f04 	tst.w	r1, #4
 800184c:	bf1e      	ittt	ne
 800184e:	689a      	ldrne	r2, [r3, #8]
 8001850:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001854:	609a      	strne	r2, [r3, #8]
 8001856:	070e      	lsls	r6, r1, #28
 8001858:	bf42      	ittt	mi
 800185a:	689a      	ldrmi	r2, [r3, #8]
 800185c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001860:	609a      	strmi	r2, [r3, #8]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	68a0      	ldr	r0, [r4, #8]
 8001866:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800186a:	4302      	orrs	r2, r0
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	e7bc      	b.n	80017ea <HAL_RCC_ClockConfig+0x22>
 8001870:	6862      	ldr	r2, [r4, #4]
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_RCC_ClockConfig+0x124>)
 8001874:	2a01      	cmp	r2, #1
 8001876:	d11c      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xea>
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800187e:	d0a8      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xa>
 8001880:	4e1a      	ldr	r6, [pc, #104]	; (80018ec <HAL_RCC_ClockConfig+0x124>)
 8001882:	68b3      	ldr	r3, [r6, #8]
 8001884:	f023 0303 	bic.w	r3, r3, #3
 8001888:	4313      	orrs	r3, r2
 800188a:	60b3      	str	r3, [r6, #8]
 800188c:	f7ff fc62 	bl	8001154 <HAL_GetTick>
 8001890:	f241 3888 	movw	r8, #5000	; 0x1388
 8001894:	4607      	mov	r7, r0
 8001896:	68b3      	ldr	r3, [r6, #8]
 8001898:	6862      	ldr	r2, [r4, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018a2:	d0a4      	beq.n	80017ee <HAL_RCC_ClockConfig+0x26>
 80018a4:	f7ff fc56 	bl	8001154 <HAL_GetTick>
 80018a8:	1bc0      	subs	r0, r0, r7
 80018aa:	4540      	cmp	r0, r8
 80018ac:	d9f3      	bls.n	8001896 <HAL_RCC_ClockConfig+0xce>
 80018ae:	2003      	movs	r0, #3
 80018b0:	e790      	b.n	80017d4 <HAL_RCC_ClockConfig+0xc>
 80018b2:	1e91      	subs	r1, r2, #2
 80018b4:	2901      	cmp	r1, #1
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	d802      	bhi.n	80018c0 <HAL_RCC_ClockConfig+0xf8>
 80018ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018be:	e7de      	b.n	800187e <HAL_RCC_ClockConfig+0xb6>
 80018c0:	f013 0f02 	tst.w	r3, #2
 80018c4:	e7db      	b.n	800187e <HAL_RCC_ClockConfig+0xb6>
 80018c6:	b2ea      	uxtb	r2, r5
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	42ab      	cmp	r3, r5
 80018d2:	f47f af7e 	bne.w	80017d2 <HAL_RCC_ClockConfig+0xa>
 80018d6:	e790      	b.n	80017fa <HAL_RCC_ClockConfig+0x32>
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <HAL_RCC_ClockConfig+0x124>)
 80018da:	68e0      	ldr	r0, [r4, #12]
 80018dc:	688b      	ldr	r3, [r1, #8]
 80018de:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80018e2:	4303      	orrs	r3, r0
 80018e4:	608b      	str	r3, [r1, #8]
 80018e6:	e78b      	b.n	8001800 <HAL_RCC_ClockConfig+0x38>
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	0800940a 	.word	0x0800940a
 80018f4:	200002b4 	.word	0x200002b4
 80018f8:	200002bc 	.word	0x200002bc

080018fc <HAL_RCC_GetPCLK1Freq>:
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x14>)
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800190a:	6810      	ldr	r0, [r2, #0]
 800190c:	40d8      	lsrs	r0, r3
 800190e:	4770      	bx	lr
 8001910:	40023800 	.word	0x40023800
 8001914:	0800941a 	.word	0x0800941a
 8001918:	200002b4 	.word	0x200002b4

0800191c <HAL_RCC_GetPCLK2Freq>:
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <HAL_RCC_GetPCLK2Freq+0x14>)
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800192a:	6810      	ldr	r0, [r2, #0]
 800192c:	40d8      	lsrs	r0, r3
 800192e:	4770      	bx	lr
 8001930:	40023800 	.word	0x40023800
 8001934:	0800941a 	.word	0x0800941a
 8001938:	200002b4 	.word	0x200002b4

0800193c <HAL_RCC_GetSysClockFreq>:
 800193c:	4920      	ldr	r1, [pc, #128]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x84>)
 800193e:	b508      	push	{r3, lr}
 8001940:	688b      	ldr	r3, [r1, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d007      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x1e>
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d020      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x54>
 800194e:	481d      	ldr	r0, [pc, #116]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x88>)
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf08      	it	eq
 8001956:	4610      	moveq	r0, r2
 8001958:	bd08      	pop	{r3, pc}
 800195a:	684a      	ldr	r2, [r1, #4]
 800195c:	684b      	ldr	r3, [r1, #4]
 800195e:	6849      	ldr	r1, [r1, #4]
 8001960:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001964:	bf14      	ite	ne
 8001966:	4818      	ldrne	r0, [pc, #96]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001968:	4816      	ldreq	r0, [pc, #88]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x88>)
 800196a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800196e:	bf18      	it	ne
 8001970:	2300      	movne	r3, #0
 8001972:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001976:	fba1 0100 	umull	r0, r1, r1, r0
 800197a:	f7fe fcb1 	bl	80002e0 <__aeabi_uldivmod>
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x84>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fbb0 f0f3 	udiv	r0, r0, r3
 800198e:	e7e3      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x1c>
 8001990:	684a      	ldr	r2, [r1, #4]
 8001992:	684b      	ldr	r3, [r1, #4]
 8001994:	6849      	ldr	r1, [r1, #4]
 8001996:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800199a:	bf14      	ite	ne
 800199c:	480a      	ldrne	r0, [pc, #40]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x8c>)
 800199e:	4809      	ldreq	r0, [pc, #36]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x88>)
 80019a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019a4:	bf18      	it	ne
 80019a6:	2300      	movne	r3, #0
 80019a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80019ac:	fba1 0100 	umull	r0, r1, r1, r0
 80019b0:	f7fe fc96 	bl	80002e0 <__aeabi_uldivmod>
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x84>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80019bc:	e7e5      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x4e>
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	007a1200 	.word	0x007a1200

080019cc <HAL_RCC_OscConfig>:
 80019cc:	6803      	ldr	r3, [r0, #0]
 80019ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80019d2:	07df      	lsls	r7, r3, #31
 80019d4:	4604      	mov	r4, r0
 80019d6:	d410      	bmi.n	80019fa <HAL_RCC_OscConfig+0x2e>
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	079e      	lsls	r6, r3, #30
 80019dc:	d467      	bmi.n	8001aae <HAL_RCC_OscConfig+0xe2>
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	071a      	lsls	r2, r3, #28
 80019e2:	f100 80b2 	bmi.w	8001b4a <HAL_RCC_OscConfig+0x17e>
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	075b      	lsls	r3, r3, #29
 80019ea:	f100 80d2 	bmi.w	8001b92 <HAL_RCC_OscConfig+0x1c6>
 80019ee:	69a2      	ldr	r2, [r4, #24]
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	f040 8139 	bne.w	8001c68 <HAL_RCC_OscConfig+0x29c>
 80019f6:	2000      	movs	r0, #0
 80019f8:	e01e      	b.n	8001a38 <HAL_RCC_OscConfig+0x6c>
 80019fa:	4b98      	ldr	r3, [pc, #608]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	f002 020c 	and.w	r2, r2, #12
 8001a02:	2a04      	cmp	r2, #4
 8001a04:	d010      	beq.n	8001a28 <HAL_RCC_OscConfig+0x5c>
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	f002 020c 	and.w	r2, r2, #12
 8001a0c:	2a08      	cmp	r2, #8
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4a>
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	025d      	lsls	r5, r3, #9
 8001a14:	d408      	bmi.n	8001a28 <HAL_RCC_OscConfig+0x5c>
 8001a16:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	f002 020c 	and.w	r2, r2, #12
 8001a1e:	2a0c      	cmp	r2, #12
 8001a20:	d10d      	bne.n	8001a3e <HAL_RCC_OscConfig+0x72>
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	0250      	lsls	r0, r2, #9
 8001a26:	d50a      	bpl.n	8001a3e <HAL_RCC_OscConfig+0x72>
 8001a28:	4b8c      	ldr	r3, [pc, #560]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0399      	lsls	r1, r3, #14
 8001a2e:	d5d3      	bpl.n	80019d8 <HAL_RCC_OscConfig+0xc>
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1d0      	bne.n	80019d8 <HAL_RCC_OscConfig+0xc>
 8001a36:	2001      	movs	r0, #1
 8001a38:	b002      	add	sp, #8
 8001a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a3e:	6862      	ldr	r2, [r4, #4]
 8001a40:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001a44:	d111      	bne.n	8001a6a <HAL_RCC_OscConfig+0x9e>
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f7ff fb81 	bl	8001154 <HAL_GetTick>
 8001a52:	4e82      	ldr	r6, [pc, #520]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001a54:	4605      	mov	r5, r0
 8001a56:	6833      	ldr	r3, [r6, #0]
 8001a58:	039a      	lsls	r2, r3, #14
 8001a5a:	d4bd      	bmi.n	80019d8 <HAL_RCC_OscConfig+0xc>
 8001a5c:	f7ff fb7a 	bl	8001154 <HAL_GetTick>
 8001a60:	1b40      	subs	r0, r0, r5
 8001a62:	2864      	cmp	r0, #100	; 0x64
 8001a64:	d9f7      	bls.n	8001a56 <HAL_RCC_OscConfig+0x8a>
 8001a66:	2003      	movs	r0, #3
 8001a68:	e7e6      	b.n	8001a38 <HAL_RCC_OscConfig+0x6c>
 8001a6a:	4d7c      	ldr	r5, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001a6c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0xb8>
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	602b      	str	r3, [r5, #0]
 8001a7a:	682b      	ldr	r3, [r5, #0]
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	602b      	str	r3, [r5, #0]
 8001a82:	e7e4      	b.n	8001a4e <HAL_RCC_OscConfig+0x82>
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	602b      	str	r3, [r5, #0]
 8001a8a:	682b      	ldr	r3, [r5, #0]
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	2a00      	cmp	r2, #0
 8001a94:	d1db      	bne.n	8001a4e <HAL_RCC_OscConfig+0x82>
 8001a96:	f7ff fb5d 	bl	8001154 <HAL_GetTick>
 8001a9a:	4606      	mov	r6, r0
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	039b      	lsls	r3, r3, #14
 8001aa0:	d59a      	bpl.n	80019d8 <HAL_RCC_OscConfig+0xc>
 8001aa2:	f7ff fb57 	bl	8001154 <HAL_GetTick>
 8001aa6:	1b80      	subs	r0, r0, r6
 8001aa8:	2864      	cmp	r0, #100	; 0x64
 8001aaa:	d9f7      	bls.n	8001a9c <HAL_RCC_OscConfig+0xd0>
 8001aac:	e7db      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001aae:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	f012 0f0c 	tst.w	r2, #12
 8001ab6:	d010      	beq.n	8001ada <HAL_RCC_OscConfig+0x10e>
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	f002 020c 	and.w	r2, r2, #12
 8001abe:	2a08      	cmp	r2, #8
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xfc>
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	025f      	lsls	r7, r3, #9
 8001ac6:	d508      	bpl.n	8001ada <HAL_RCC_OscConfig+0x10e>
 8001ac8:	4a64      	ldr	r2, [pc, #400]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001aca:	6893      	ldr	r3, [r2, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d111      	bne.n	8001af8 <HAL_RCC_OscConfig+0x12c>
 8001ad4:	6853      	ldr	r3, [r2, #4]
 8001ad6:	025e      	lsls	r6, r3, #9
 8001ad8:	d40e      	bmi.n	8001af8 <HAL_RCC_OscConfig+0x12c>
 8001ada:	4a60      	ldr	r2, [pc, #384]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001adc:	6813      	ldr	r3, [r2, #0]
 8001ade:	079d      	lsls	r5, r3, #30
 8001ae0:	d502      	bpl.n	8001ae8 <HAL_RCC_OscConfig+0x11c>
 8001ae2:	68e3      	ldr	r3, [r4, #12]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d1a6      	bne.n	8001a36 <HAL_RCC_OscConfig+0x6a>
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	6921      	ldr	r1, [r4, #16]
 8001aec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001af0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e772      	b.n	80019de <HAL_RCC_OscConfig+0x12>
 8001af8:	68e2      	ldr	r2, [r4, #12]
 8001afa:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_OscConfig+0x294>)
 8001afc:	b1b2      	cbz	r2, 8001b2c <HAL_RCC_OscConfig+0x160>
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	f7ff fb27 	bl	8001154 <HAL_GetTick>
 8001b06:	4d55      	ldr	r5, [pc, #340]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001b08:	4606      	mov	r6, r0
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	0798      	lsls	r0, r3, #30
 8001b0e:	d507      	bpl.n	8001b20 <HAL_RCC_OscConfig+0x154>
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	6922      	ldr	r2, [r4, #16]
 8001b14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b1c:	602b      	str	r3, [r5, #0]
 8001b1e:	e75e      	b.n	80019de <HAL_RCC_OscConfig+0x12>
 8001b20:	f7ff fb18 	bl	8001154 <HAL_GetTick>
 8001b24:	1b80      	subs	r0, r0, r6
 8001b26:	2802      	cmp	r0, #2
 8001b28:	d9ef      	bls.n	8001b0a <HAL_RCC_OscConfig+0x13e>
 8001b2a:	e79c      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f7ff fb11 	bl	8001154 <HAL_GetTick>
 8001b32:	4e4a      	ldr	r6, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001b34:	4605      	mov	r5, r0
 8001b36:	6833      	ldr	r3, [r6, #0]
 8001b38:	0799      	lsls	r1, r3, #30
 8001b3a:	f57f af50 	bpl.w	80019de <HAL_RCC_OscConfig+0x12>
 8001b3e:	f7ff fb09 	bl	8001154 <HAL_GetTick>
 8001b42:	1b40      	subs	r0, r0, r5
 8001b44:	2802      	cmp	r0, #2
 8001b46:	d9f6      	bls.n	8001b36 <HAL_RCC_OscConfig+0x16a>
 8001b48:	e78d      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001b4a:	6962      	ldr	r2, [r4, #20]
 8001b4c:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <HAL_RCC_OscConfig+0x294>)
 8001b4e:	b182      	cbz	r2, 8001b72 <HAL_RCC_OscConfig+0x1a6>
 8001b50:	2201      	movs	r2, #1
 8001b52:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
 8001b56:	f7ff fafd 	bl	8001154 <HAL_GetTick>
 8001b5a:	4e40      	ldr	r6, [pc, #256]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001b5c:	4605      	mov	r5, r0
 8001b5e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001b60:	079f      	lsls	r7, r3, #30
 8001b62:	f53f af40 	bmi.w	80019e6 <HAL_RCC_OscConfig+0x1a>
 8001b66:	f7ff faf5 	bl	8001154 <HAL_GetTick>
 8001b6a:	1b40      	subs	r0, r0, r5
 8001b6c:	2802      	cmp	r0, #2
 8001b6e:	d9f6      	bls.n	8001b5e <HAL_RCC_OscConfig+0x192>
 8001b70:	e779      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001b72:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
 8001b76:	f7ff faed 	bl	8001154 <HAL_GetTick>
 8001b7a:	4e38      	ldr	r6, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001b7c:	4605      	mov	r5, r0
 8001b7e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001b80:	0798      	lsls	r0, r3, #30
 8001b82:	f57f af30 	bpl.w	80019e6 <HAL_RCC_OscConfig+0x1a>
 8001b86:	f7ff fae5 	bl	8001154 <HAL_GetTick>
 8001b8a:	1b40      	subs	r0, r0, r5
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9f6      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1b2>
 8001b90:	e769      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b96:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001b9a:	d128      	bne.n	8001bee <HAL_RCC_OscConfig+0x222>
 8001b9c:	9201      	str	r2, [sp, #4]
 8001b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	9b01      	ldr	r3, [sp, #4]
 8001bb0:	2701      	movs	r7, #1
 8001bb2:	4d2c      	ldr	r5, [pc, #176]	; (8001c64 <HAL_RCC_OscConfig+0x298>)
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	05d9      	lsls	r1, r3, #23
 8001bb8:	d51b      	bpl.n	8001bf2 <HAL_RCC_OscConfig+0x226>
 8001bba:	68a3      	ldr	r3, [r4, #8]
 8001bbc:	4d27      	ldr	r5, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d127      	bne.n	8001c12 <HAL_RCC_OscConfig+0x246>
 8001bc2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	672b      	str	r3, [r5, #112]	; 0x70
 8001bca:	f7ff fac3 	bl	8001154 <HAL_GetTick>
 8001bce:	4e23      	ldr	r6, [pc, #140]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	f241 3888 	movw	r8, #5000	; 0x1388
 8001bd6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001bd8:	079b      	lsls	r3, r3, #30
 8001bda:	d539      	bpl.n	8001c50 <HAL_RCC_OscConfig+0x284>
 8001bdc:	2f00      	cmp	r7, #0
 8001bde:	f43f af06 	beq.w	80019ee <HAL_RCC_OscConfig+0x22>
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_RCC_OscConfig+0x290>)
 8001be4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	e6ff      	b.n	80019ee <HAL_RCC_OscConfig+0x22>
 8001bee:	2700      	movs	r7, #0
 8001bf0:	e7df      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1e6>
 8001bf2:	682b      	ldr	r3, [r5, #0]
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf8:	602b      	str	r3, [r5, #0]
 8001bfa:	f7ff faab 	bl	8001154 <HAL_GetTick>
 8001bfe:	4606      	mov	r6, r0
 8001c00:	682b      	ldr	r3, [r5, #0]
 8001c02:	05da      	lsls	r2, r3, #23
 8001c04:	d4d9      	bmi.n	8001bba <HAL_RCC_OscConfig+0x1ee>
 8001c06:	f7ff faa5 	bl	8001154 <HAL_GetTick>
 8001c0a:	1b80      	subs	r0, r0, r6
 8001c0c:	2802      	cmp	r0, #2
 8001c0e:	d9f7      	bls.n	8001c00 <HAL_RCC_OscConfig+0x234>
 8001c10:	e729      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d104      	bne.n	8001c20 <HAL_RCC_OscConfig+0x254>
 8001c16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	672b      	str	r3, [r5, #112]	; 0x70
 8001c1e:	e7d0      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1f6>
 8001c20:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	672a      	str	r2, [r5, #112]	; 0x70
 8001c28:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c2a:	f022 0204 	bic.w	r2, r2, #4
 8001c2e:	672a      	str	r2, [r5, #112]	; 0x70
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ca      	bne.n	8001bca <HAL_RCC_OscConfig+0x1fe>
 8001c34:	f7ff fa8e 	bl	8001154 <HAL_GetTick>
 8001c38:	f241 3888 	movw	r8, #5000	; 0x1388
 8001c3c:	4606      	mov	r6, r0
 8001c3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c40:	0798      	lsls	r0, r3, #30
 8001c42:	d5cb      	bpl.n	8001bdc <HAL_RCC_OscConfig+0x210>
 8001c44:	f7ff fa86 	bl	8001154 <HAL_GetTick>
 8001c48:	1b80      	subs	r0, r0, r6
 8001c4a:	4540      	cmp	r0, r8
 8001c4c:	d9f7      	bls.n	8001c3e <HAL_RCC_OscConfig+0x272>
 8001c4e:	e70a      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001c50:	f7ff fa80 	bl	8001154 <HAL_GetTick>
 8001c54:	1b40      	subs	r0, r0, r5
 8001c56:	4540      	cmp	r0, r8
 8001c58:	d9bd      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x20a>
 8001c5a:	e704      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	42470000 	.word	0x42470000
 8001c64:	40007000 	.word	0x40007000
 8001c68:	4d24      	ldr	r5, [pc, #144]	; (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001c6a:	68ab      	ldr	r3, [r5, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	f43f aee0 	beq.w	8001a36 <HAL_RCC_OscConfig+0x6a>
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0x334>)
 8001c78:	2a02      	cmp	r2, #2
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
 8001c80:	d12e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x314>
 8001c82:	f7ff fa67 	bl	8001154 <HAL_GetTick>
 8001c86:	4606      	mov	r6, r0
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	0199      	lsls	r1, r3, #6
 8001c8c:	d422      	bmi.n	8001cd4 <HAL_RCC_OscConfig+0x308>
 8001c8e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c96:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ca0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ca2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001ca6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ca8:	0852      	lsrs	r2, r2, #1
 8001caa:	3a01      	subs	r2, #1
 8001cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cb0:	606b      	str	r3, [r5, #4]
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_RCC_OscConfig+0x334>)
 8001cb4:	4d11      	ldr	r5, [pc, #68]	; (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	661a      	str	r2, [r3, #96]	; 0x60
 8001cba:	f7ff fa4b 	bl	8001154 <HAL_GetTick>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	019a      	lsls	r2, r3, #6
 8001cc4:	f53f ae97 	bmi.w	80019f6 <HAL_RCC_OscConfig+0x2a>
 8001cc8:	f7ff fa44 	bl	8001154 <HAL_GetTick>
 8001ccc:	1b00      	subs	r0, r0, r4
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9f6      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x2f4>
 8001cd2:	e6c8      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001cd4:	f7ff fa3e 	bl	8001154 <HAL_GetTick>
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d9d4      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2bc>
 8001cde:	e6c2      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001ce0:	f7ff fa38 	bl	8001154 <HAL_GetTick>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	682b      	ldr	r3, [r5, #0]
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	f57f ae84 	bpl.w	80019f6 <HAL_RCC_OscConfig+0x2a>
 8001cee:	f7ff fa31 	bl	8001154 <HAL_GetTick>
 8001cf2:	1b00      	subs	r0, r0, r4
 8001cf4:	2802      	cmp	r0, #2
 8001cf6:	d9f6      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x31a>
 8001cf8:	e6b5      	b.n	8001a66 <HAL_RCC_OscConfig+0x9a>
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	42470000 	.word	0x42470000

08001d04 <HAL_TIM_Base_MspInit>:
 8001d04:	4770      	bx	lr

08001d06 <HAL_TIM_Base_Start>:
 8001d06:	2302      	movs	r3, #2
 8001d08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	f002 0207 	and.w	r2, r2, #7
 8001d14:	2a06      	cmp	r2, #6
 8001d16:	bf1e      	ittt	ne
 8001d18:	681a      	ldrne	r2, [r3, #0]
 8001d1a:	f042 0201 	orrne.w	r2, r2, #1
 8001d1e:	601a      	strne	r2, [r3, #0]
 8001d20:	2301      	movs	r3, #1
 8001d22:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001d26:	2000      	movs	r0, #0
 8001d28:	4770      	bx	lr
	...

08001d2c <TIM_Base_SetConfig>:
 8001d2c:	4a30      	ldr	r2, [pc, #192]	; (8001df0 <TIM_Base_SetConfig+0xc4>)
 8001d2e:	6803      	ldr	r3, [r0, #0]
 8001d30:	4290      	cmp	r0, r2
 8001d32:	d012      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d38:	d00f      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d3a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d3e:	4290      	cmp	r0, r2
 8001d40:	d00b      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d46:	4290      	cmp	r0, r2
 8001d48:	d007      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d4e:	4290      	cmp	r0, r2
 8001d50:	d003      	beq.n	8001d5a <TIM_Base_SetConfig+0x2e>
 8001d52:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d56:	4290      	cmp	r0, r2
 8001d58:	d119      	bne.n	8001d8e <TIM_Base_SetConfig+0x62>
 8001d5a:	684a      	ldr	r2, [r1, #4]
 8001d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d60:	4313      	orrs	r3, r2
 8001d62:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <TIM_Base_SetConfig+0xc4>)
 8001d64:	4290      	cmp	r0, r2
 8001d66:	d029      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d6c:	d026      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d6e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d72:	4290      	cmp	r0, r2
 8001d74:	d022      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d7a:	4290      	cmp	r0, r2
 8001d7c:	d01e      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d82:	4290      	cmp	r0, r2
 8001d84:	d01a      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d8a:	4290      	cmp	r0, r2
 8001d8c:	d016      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d8e:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <TIM_Base_SetConfig+0xc8>)
 8001d90:	4290      	cmp	r0, r2
 8001d92:	d013      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d98:	4290      	cmp	r0, r2
 8001d9a:	d00f      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001d9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001da0:	4290      	cmp	r0, r2
 8001da2:	d00b      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001da4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001da8:	4290      	cmp	r0, r2
 8001daa:	d007      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db0:	4290      	cmp	r0, r2
 8001db2:	d003      	beq.n	8001dbc <TIM_Base_SetConfig+0x90>
 8001db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db8:	4290      	cmp	r0, r2
 8001dba:	d103      	bne.n	8001dc4 <TIM_Base_SetConfig+0x98>
 8001dbc:	68ca      	ldr	r2, [r1, #12]
 8001dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	694a      	ldr	r2, [r1, #20]
 8001dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	6003      	str	r3, [r0, #0]
 8001dce:	688b      	ldr	r3, [r1, #8]
 8001dd0:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001dd2:	680b      	ldr	r3, [r1, #0]
 8001dd4:	6283      	str	r3, [r0, #40]	; 0x28
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <TIM_Base_SetConfig+0xc4>)
 8001dd8:	4298      	cmp	r0, r3
 8001dda:	d003      	beq.n	8001de4 <TIM_Base_SetConfig+0xb8>
 8001ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de0:	4298      	cmp	r0, r3
 8001de2:	d101      	bne.n	8001de8 <TIM_Base_SetConfig+0xbc>
 8001de4:	690b      	ldr	r3, [r1, #16]
 8001de6:	6303      	str	r3, [r0, #48]	; 0x30
 8001de8:	2301      	movs	r3, #1
 8001dea:	6143      	str	r3, [r0, #20]
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40014000 	.word	0x40014000

08001df8 <HAL_TIM_Base_Init>:
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	b1a0      	cbz	r0, 8001e28 <HAL_TIM_Base_Init+0x30>
 8001dfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e06:	b91b      	cbnz	r3, 8001e10 <HAL_TIM_Base_Init+0x18>
 8001e08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8001e0c:	f7ff ff7a 	bl	8001d04 <HAL_TIM_Base_MspInit>
 8001e10:	2302      	movs	r3, #2
 8001e12:	6820      	ldr	r0, [r4, #0]
 8001e14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001e18:	1d21      	adds	r1, r4, #4
 8001e1a:	f7ff ff87 	bl	8001d2c <TIM_Base_SetConfig>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001e24:	2000      	movs	r0, #0
 8001e26:	bd10      	pop	{r4, pc}
 8001e28:	2001      	movs	r0, #1
 8001e2a:	e7fc      	b.n	8001e26 <HAL_TIM_Base_Init+0x2e>

08001e2c <UART_EndRxTransfer>:
 8001e2c:	6802      	ldr	r2, [r0, #0]
 8001e2e:	f102 030c 	add.w	r3, r2, #12
 8001e32:	e853 3f00 	ldrex	r3, [r3]
 8001e36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e3a:	320c      	adds	r2, #12
 8001e3c:	e842 3100 	strex	r1, r3, [r2]
 8001e40:	6802      	ldr	r2, [r0, #0]
 8001e42:	2900      	cmp	r1, #0
 8001e44:	d1f2      	bne.n	8001e2c <UART_EndRxTransfer>
 8001e46:	f102 0314 	add.w	r3, r2, #20
 8001e4a:	e853 3f00 	ldrex	r3, [r3]
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	f102 0c14 	add.w	ip, r2, #20
 8001e56:	e84c 3100 	strex	r1, r3, [ip]
 8001e5a:	2900      	cmp	r1, #0
 8001e5c:	d1f3      	bne.n	8001e46 <UART_EndRxTransfer+0x1a>
 8001e5e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d10b      	bne.n	8001e7c <UART_EndRxTransfer+0x50>
 8001e64:	f102 030c 	add.w	r3, r2, #12
 8001e68:	e853 3f00 	ldrex	r3, [r3]
 8001e6c:	f023 0310 	bic.w	r3, r3, #16
 8001e70:	f102 0c0c 	add.w	ip, r2, #12
 8001e74:	e84c 3100 	strex	r1, r3, [ip]
 8001e78:	2900      	cmp	r1, #0
 8001e7a:	d1f3      	bne.n	8001e64 <UART_EndRxTransfer+0x38>
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001e82:	2300      	movs	r3, #0
 8001e84:	6303      	str	r3, [r0, #48]	; 0x30
 8001e86:	4770      	bx	lr

08001e88 <UART_SetConfig>:
 8001e88:	6802      	ldr	r2, [r0, #0]
 8001e8a:	68c1      	ldr	r1, [r0, #12]
 8001e8c:	6913      	ldr	r3, [r2, #16]
 8001e8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e92:	430b      	orrs	r3, r1
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	6113      	str	r3, [r2, #16]
 8001e98:	4605      	mov	r5, r0
 8001e9a:	6883      	ldr	r3, [r0, #8]
 8001e9c:	6900      	ldr	r0, [r0, #16]
 8001e9e:	68d1      	ldr	r1, [r2, #12]
 8001ea0:	4303      	orrs	r3, r0
 8001ea2:	6968      	ldr	r0, [r5, #20]
 8001ea4:	4303      	orrs	r3, r0
 8001ea6:	69e8      	ldr	r0, [r5, #28]
 8001ea8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001eac:	f021 010c 	bic.w	r1, r1, #12
 8001eb0:	4303      	orrs	r3, r0
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	60d3      	str	r3, [r2, #12]
 8001eb6:	6953      	ldr	r3, [r2, #20]
 8001eb8:	69a9      	ldr	r1, [r5, #24]
 8001eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	6153      	str	r3, [r2, #20]
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <UART_SetConfig+0xb8>)
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d003      	beq.n	8001ed0 <UART_SetConfig+0x48>
 8001ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d123      	bne.n	8001f18 <UART_SetConfig+0x90>
 8001ed0:	f7ff fd24 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8001ed4:	69eb      	ldr	r3, [r5, #28]
 8001ed6:	2119      	movs	r1, #25
 8001ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001edc:	e9d5 4600 	ldrd	r4, r6, [r5]
 8001ee0:	fba0 0101 	umull	r0, r1, r0, r1
 8001ee4:	d11b      	bne.n	8001f1e <UART_SetConfig+0x96>
 8001ee6:	19b2      	adds	r2, r6, r6
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	415b      	adcs	r3, r3
 8001eee:	f7fe f9f7 	bl	80002e0 <__aeabi_uldivmod>
 8001ef2:	2264      	movs	r2, #100	; 0x64
 8001ef4:	fbb0 f1f2 	udiv	r1, r0, r2
 8001ef8:	fb02 0311 	mls	r3, r2, r1, r0
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	3332      	adds	r3, #50	; 0x32
 8001f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f04:	f003 0207 	and.w	r2, r3, #7
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001f0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f12:	4413      	add	r3, r2
 8001f14:	60a3      	str	r3, [r4, #8]
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f7ff fcf0 	bl	80018fc <HAL_RCC_GetPCLK1Freq>
 8001f1c:	e7da      	b.n	8001ed4 <UART_SetConfig+0x4c>
 8001f1e:	00b2      	lsls	r2, r6, #2
 8001f20:	0fb3      	lsrs	r3, r6, #30
 8001f22:	f7fe f9dd 	bl	80002e0 <__aeabi_uldivmod>
 8001f26:	2264      	movs	r2, #100	; 0x64
 8001f28:	fbb0 f1f2 	udiv	r1, r0, r2
 8001f2c:	fb02 0311 	mls	r3, r2, r1, r0
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	3332      	adds	r3, #50	; 0x32
 8001f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f38:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001f3c:	e7ea      	b.n	8001f14 <UART_SetConfig+0x8c>
 8001f3e:	bf00      	nop
 8001f40:	40011000 	.word	0x40011000

08001f44 <UART_WaitOnFlagUntilTimeout.constprop.0>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	4604      	mov	r4, r0
 8001f48:	460e      	mov	r6, r1
 8001f4a:	4617      	mov	r7, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	6822      	ldr	r2, [r4, #0]
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	ea36 0303 	bics.w	r3, r6, r3
 8001f56:	d101      	bne.n	8001f5c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
 8001f58:	2000      	movs	r0, #0
 8001f5a:	e028      	b.n	8001fae <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
 8001f5c:	1c6b      	adds	r3, r5, #1
 8001f5e:	d0f7      	beq.n	8001f50 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
 8001f60:	b125      	cbz	r5, 8001f6c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001f62:	f7ff f8f7 	bl	8001154 <HAL_GetTick>
 8001f66:	1bc0      	subs	r0, r0, r7
 8001f68:	4285      	cmp	r5, r0
 8001f6a:	d2f0      	bcs.n	8001f4e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001f6c:	6822      	ldr	r2, [r4, #0]
 8001f6e:	f102 030c 	add.w	r3, r2, #12
 8001f72:	e853 3f00 	ldrex	r3, [r3]
 8001f76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f7a:	320c      	adds	r2, #12
 8001f7c:	e842 3000 	strex	r0, r3, [r2]
 8001f80:	6821      	ldr	r1, [r4, #0]
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d1f2      	bne.n	8001f6c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001f86:	f101 0314 	add.w	r3, r1, #20
 8001f8a:	e853 3f00 	ldrex	r3, [r3]
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f101 0014 	add.w	r0, r1, #20
 8001f96:	e840 3200 	strex	r2, r3, [r0]
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	d1f3      	bne.n	8001f86 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001fa4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8001fa8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001fac:	2003      	movs	r0, #3
 8001fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fb0 <HAL_UART_Init>:
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	b340      	cbz	r0, 8002008 <HAL_UART_Init+0x58>
 8001fb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fbe:	b91b      	cbnz	r3, 8001fc8 <HAL_UART_Init+0x18>
 8001fc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8001fc4:	f7fe ffa4 	bl	8000f10 <HAL_UART_MspInit>
 8001fc8:	6822      	ldr	r2, [r4, #0]
 8001fca:	2324      	movs	r3, #36	; 0x24
 8001fcc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001fd0:	68d3      	ldr	r3, [r2, #12]
 8001fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fd6:	60d3      	str	r3, [r2, #12]
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff ff55 	bl	8001e88 <UART_SetConfig>
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	6420      	str	r0, [r4, #64]	; 0x40
 8001ffe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002002:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002006:	bd10      	pop	{r4, pc}
 8002008:	2001      	movs	r0, #1
 800200a:	e7fc      	b.n	8002006 <HAL_UART_Init+0x56>

0800200c <HAL_UART_Transmit>:
 800200c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800200e:	4617      	mov	r7, r2
 8002010:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2a20      	cmp	r2, #32
 8002018:	4604      	mov	r4, r0
 800201a:	460e      	mov	r6, r1
 800201c:	d149      	bne.n	80020b2 <HAL_UART_Transmit+0xa6>
 800201e:	2900      	cmp	r1, #0
 8002020:	d045      	beq.n	80020ae <HAL_UART_Transmit+0xa2>
 8002022:	2f00      	cmp	r7, #0
 8002024:	d043      	beq.n	80020ae <HAL_UART_Transmit+0xa2>
 8002026:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800202a:	2a01      	cmp	r2, #1
 800202c:	d041      	beq.n	80020b2 <HAL_UART_Transmit+0xa6>
 800202e:	2201      	movs	r2, #1
 8002030:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8002034:	2500      	movs	r5, #0
 8002036:	2221      	movs	r2, #33	; 0x21
 8002038:	6405      	str	r5, [r0, #64]	; 0x40
 800203a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 800203e:	f7ff f889 	bl	8001154 <HAL_GetTick>
 8002042:	68a1      	ldr	r1, [r4, #8]
 8002044:	9b00      	ldr	r3, [sp, #0]
 8002046:	84a7      	strh	r7, [r4, #36]	; 0x24
 8002048:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800204c:	4602      	mov	r2, r0
 800204e:	84e7      	strh	r7, [r4, #38]	; 0x26
 8002050:	d103      	bne.n	800205a <HAL_UART_Transmit+0x4e>
 8002052:	6921      	ldr	r1, [r4, #16]
 8002054:	b909      	cbnz	r1, 800205a <HAL_UART_Transmit+0x4e>
 8002056:	4635      	mov	r5, r6
 8002058:	460e      	mov	r6, r1
 800205a:	2100      	movs	r1, #0
 800205c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 8002060:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002062:	b289      	uxth	r1, r1
 8002064:	b941      	cbnz	r1, 8002078 <HAL_UART_Transmit+0x6c>
 8002066:	2140      	movs	r1, #64	; 0x40
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff ff6b 	bl	8001f44 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800206e:	b960      	cbnz	r0, 800208a <HAL_UART_Transmit+0x7e>
 8002070:	2320      	movs	r3, #32
 8002072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002076:	e009      	b.n	800208c <HAL_UART_Transmit+0x80>
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	4620      	mov	r0, r4
 800207c:	e9cd 2300 	strd	r2, r3, [sp]
 8002080:	f7ff ff60 	bl	8001f44 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002084:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002088:	b110      	cbz	r0, 8002090 <HAL_UART_Transmit+0x84>
 800208a:	2003      	movs	r0, #3
 800208c:	b003      	add	sp, #12
 800208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002090:	6820      	ldr	r0, [r4, #0]
 8002092:	b94e      	cbnz	r6, 80020a8 <HAL_UART_Transmit+0x9c>
 8002094:	f835 1b02 	ldrh.w	r1, [r5], #2
 8002098:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800209c:	6041      	str	r1, [r0, #4]
 800209e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80020a0:	3901      	subs	r1, #1
 80020a2:	b289      	uxth	r1, r1
 80020a4:	84e1      	strh	r1, [r4, #38]	; 0x26
 80020a6:	e7db      	b.n	8002060 <HAL_UART_Transmit+0x54>
 80020a8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80020ac:	e7f6      	b.n	800209c <HAL_UART_Transmit+0x90>
 80020ae:	2001      	movs	r0, #1
 80020b0:	e7ec      	b.n	800208c <HAL_UART_Transmit+0x80>
 80020b2:	2002      	movs	r0, #2
 80020b4:	e7ea      	b.n	800208c <HAL_UART_Transmit+0x80>

080020b6 <HAL_UART_Transmit_IT>:
 80020b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d118      	bne.n	80020f0 <HAL_UART_Transmit_IT+0x3a>
 80020be:	b1a9      	cbz	r1, 80020ec <HAL_UART_Transmit_IT+0x36>
 80020c0:	b1a2      	cbz	r2, 80020ec <HAL_UART_Transmit_IT+0x36>
 80020c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d012      	beq.n	80020f0 <HAL_UART_Transmit_IT+0x3a>
 80020ca:	84c2      	strh	r2, [r0, #38]	; 0x26
 80020cc:	6201      	str	r1, [r0, #32]
 80020ce:	8482      	strh	r2, [r0, #36]	; 0x24
 80020d0:	6801      	ldr	r1, [r0, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	2221      	movs	r2, #33	; 0x21
 80020d6:	6403      	str	r3, [r0, #64]	; 0x40
 80020d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80020dc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 80020e0:	68ca      	ldr	r2, [r1, #12]
 80020e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020e6:	60ca      	str	r2, [r1, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	4770      	bx	lr
 80020ec:	2001      	movs	r0, #1
 80020ee:	4770      	bx	lr
 80020f0:	2002      	movs	r0, #2
 80020f2:	4770      	bx	lr

080020f4 <HAL_UART_Transmit_DMA>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	4604      	mov	r4, r0
 80020f8:	4613      	mov	r3, r2
 80020fa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80020fe:	2a20      	cmp	r2, #32
 8002100:	d132      	bne.n	8002168 <HAL_UART_Transmit_DMA+0x74>
 8002102:	b379      	cbz	r1, 8002164 <HAL_UART_Transmit_DMA+0x70>
 8002104:	b373      	cbz	r3, 8002164 <HAL_UART_Transmit_DMA+0x70>
 8002106:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800210a:	2a01      	cmp	r2, #1
 800210c:	d02c      	beq.n	8002168 <HAL_UART_Transmit_DMA+0x74>
 800210e:	2201      	movs	r2, #1
 8002110:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8002114:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002116:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002118:	2500      	movs	r5, #0
 800211a:	2221      	movs	r2, #33	; 0x21
 800211c:	6425      	str	r5, [r4, #64]	; 0x40
 800211e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_UART_Transmit_DMA+0x78>)
 8002124:	84a3      	strh	r3, [r4, #36]	; 0x24
 8002126:	6221      	str	r1, [r4, #32]
 8002128:	63c2      	str	r2, [r0, #60]	; 0x3c
 800212a:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_UART_Transmit_DMA+0x7c>)
 800212c:	6402      	str	r2, [r0, #64]	; 0x40
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_UART_Transmit_DMA+0x80>)
 8002130:	e9c0 2513 	strd	r2, r5, [r0, #76]	; 0x4c
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	3204      	adds	r2, #4
 8002138:	f7ff f90c 	bl	8001354 <HAL_DMA_Start_IT>
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	6822      	ldr	r2, [r4, #0]
 8002146:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800214a:	f102 0314 	add.w	r3, r2, #20
 800214e:	e853 3f00 	ldrex	r3, [r3]
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	f102 0114 	add.w	r1, r2, #20
 800215a:	e841 3000 	strex	r0, r3, [r1]
 800215e:	2800      	cmp	r0, #0
 8002160:	d1f3      	bne.n	800214a <HAL_UART_Transmit_DMA+0x56>
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	2001      	movs	r0, #1
 8002166:	e7fc      	b.n	8002162 <HAL_UART_Transmit_DMA+0x6e>
 8002168:	2002      	movs	r0, #2
 800216a:	e7fa      	b.n	8002162 <HAL_UART_Transmit_DMA+0x6e>
 800216c:	08002255 	.word	0x08002255
 8002170:	080022a3 	.word	0x080022a3
 8002174:	080022af 	.word	0x080022af

08002178 <HAL_UART_Abort>:
 8002178:	b510      	push	{r4, lr}
 800217a:	4604      	mov	r4, r0
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	f102 030c 	add.w	r3, r2, #12
 8002182:	e853 3f00 	ldrex	r3, [r3]
 8002186:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800218a:	320c      	adds	r2, #12
 800218c:	e842 3100 	strex	r1, r3, [r2]
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	2900      	cmp	r1, #0
 8002194:	d1f2      	bne.n	800217c <HAL_UART_Abort+0x4>
 8002196:	f103 0214 	add.w	r2, r3, #20
 800219a:	e852 2f00 	ldrex	r2, [r2]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	f103 0014 	add.w	r0, r3, #20
 80021a6:	e840 2100 	strex	r1, r2, [r0]
 80021aa:	2900      	cmp	r1, #0
 80021ac:	d1f3      	bne.n	8002196 <HAL_UART_Abort+0x1e>
 80021ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80021b0:	2a01      	cmp	r2, #1
 80021b2:	d10b      	bne.n	80021cc <HAL_UART_Abort+0x54>
 80021b4:	f103 020c 	add.w	r2, r3, #12
 80021b8:	e852 2f00 	ldrex	r2, [r2]
 80021bc:	f022 0210 	bic.w	r2, r2, #16
 80021c0:	f103 000c 	add.w	r0, r3, #12
 80021c4:	e840 2100 	strex	r1, r2, [r0]
 80021c8:	2900      	cmp	r1, #0
 80021ca:	d1f3      	bne.n	80021b4 <HAL_UART_Abort+0x3c>
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	0612      	lsls	r2, r2, #24
 80021d0:	d51a      	bpl.n	8002208 <HAL_UART_Abort+0x90>
 80021d2:	f103 0214 	add.w	r2, r3, #20
 80021d6:	e852 2f00 	ldrex	r2, [r2]
 80021da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021de:	f103 0014 	add.w	r0, r3, #20
 80021e2:	e840 2100 	strex	r1, r2, [r0]
 80021e6:	2900      	cmp	r1, #0
 80021e8:	d1f3      	bne.n	80021d2 <HAL_UART_Abort+0x5a>
 80021ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80021ec:	b160      	cbz	r0, 8002208 <HAL_UART_Abort+0x90>
 80021ee:	6501      	str	r1, [r0, #80]	; 0x50
 80021f0:	f7ff f8ea 	bl	80013c8 <HAL_DMA_Abort>
 80021f4:	b140      	cbz	r0, 8002208 <HAL_UART_Abort+0x90>
 80021f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80021f8:	f7ff f9fa 	bl	80015f0 <HAL_DMA_GetError>
 80021fc:	2820      	cmp	r0, #32
 80021fe:	d103      	bne.n	8002208 <HAL_UART_Abort+0x90>
 8002200:	2310      	movs	r3, #16
 8002202:	6423      	str	r3, [r4, #64]	; 0x40
 8002204:	2003      	movs	r0, #3
 8002206:	bd10      	pop	{r4, pc}
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	6953      	ldr	r3, [r2, #20]
 800220c:	065b      	lsls	r3, r3, #25
 800220e:	d516      	bpl.n	800223e <HAL_UART_Abort+0xc6>
 8002210:	f102 0314 	add.w	r3, r2, #20
 8002214:	e853 3f00 	ldrex	r3, [r3]
 8002218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800221c:	f102 0014 	add.w	r0, r2, #20
 8002220:	e840 3100 	strex	r1, r3, [r0]
 8002224:	2900      	cmp	r1, #0
 8002226:	d1f3      	bne.n	8002210 <HAL_UART_Abort+0x98>
 8002228:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800222a:	b140      	cbz	r0, 800223e <HAL_UART_Abort+0xc6>
 800222c:	6501      	str	r1, [r0, #80]	; 0x50
 800222e:	f7ff f8cb 	bl	80013c8 <HAL_DMA_Abort>
 8002232:	b120      	cbz	r0, 800223e <HAL_UART_Abort+0xc6>
 8002234:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002236:	f7ff f9db 	bl	80015f0 <HAL_DMA_GetError>
 800223a:	2820      	cmp	r0, #32
 800223c:	d0e0      	beq.n	8002200 <HAL_UART_Abort+0x88>
 800223e:	2000      	movs	r0, #0
 8002240:	2320      	movs	r3, #32
 8002242:	84e0      	strh	r0, [r4, #38]	; 0x26
 8002244:	85e0      	strh	r0, [r4, #46]	; 0x2e
 8002246:	6420      	str	r0, [r4, #64]	; 0x40
 8002248:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800224c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002250:	6320      	str	r0, [r4, #48]	; 0x30
 8002252:	e7d8      	b.n	8002206 <HAL_UART_Abort+0x8e>

08002254 <UART_DMATransmitCplt>:
 8002254:	6802      	ldr	r2, [r0, #0]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800225c:	b508      	push	{r3, lr}
 800225e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002260:	d11a      	bne.n	8002298 <UART_DMATransmitCplt+0x44>
 8002262:	84da      	strh	r2, [r3, #38]	; 0x26
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	f101 0214 	add.w	r2, r1, #20
 800226a:	e852 2f00 	ldrex	r2, [r2]
 800226e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002272:	3114      	adds	r1, #20
 8002274:	e841 2000 	strex	r0, r2, [r1]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2800      	cmp	r0, #0
 800227c:	d1f2      	bne.n	8002264 <UART_DMATransmitCplt+0x10>
 800227e:	f102 030c 	add.w	r3, r2, #12
 8002282:	e853 3f00 	ldrex	r3, [r3]
 8002286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228a:	f102 000c 	add.w	r0, r2, #12
 800228e:	e840 3100 	strex	r1, r3, [r0]
 8002292:	2900      	cmp	r1, #0
 8002294:	d1f3      	bne.n	800227e <UART_DMATransmitCplt+0x2a>
 8002296:	bd08      	pop	{r3, pc}
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fee1 	bl	8001060 <HAL_UART_TxCpltCallback>
 800229e:	e7fa      	b.n	8002296 <UART_DMATransmitCplt+0x42>

080022a0 <HAL_UART_TxHalfCpltCallback>:
 80022a0:	4770      	bx	lr

080022a2 <UART_DMATxHalfCplt>:
 80022a2:	b508      	push	{r3, lr}
 80022a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80022a6:	f7ff fffb 	bl	80022a0 <HAL_UART_TxHalfCpltCallback>
 80022aa:	bd08      	pop	{r3, pc}

080022ac <HAL_UART_ErrorCallback>:
 80022ac:	4770      	bx	lr

080022ae <UART_DMAError>:
 80022ae:	b508      	push	{r3, lr}
 80022b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80022b2:	6803      	ldr	r3, [r0, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80022ba:	2921      	cmp	r1, #33	; 0x21
 80022bc:	d112      	bne.n	80022e4 <UART_DMAError+0x36>
 80022be:	0612      	lsls	r2, r2, #24
 80022c0:	d510      	bpl.n	80022e4 <UART_DMAError+0x36>
 80022c2:	2200      	movs	r2, #0
 80022c4:	84c2      	strh	r2, [r0, #38]	; 0x26
 80022c6:	f103 020c 	add.w	r2, r3, #12
 80022ca:	e852 2f00 	ldrex	r2, [r2]
 80022ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022d2:	f103 0c0c 	add.w	ip, r3, #12
 80022d6:	e84c 2100 	strex	r1, r2, [ip]
 80022da:	2900      	cmp	r1, #0
 80022dc:	d1f3      	bne.n	80022c6 <UART_DMAError+0x18>
 80022de:	2220      	movs	r2, #32
 80022e0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80022ea:	2a22      	cmp	r2, #34	; 0x22
 80022ec:	d105      	bne.n	80022fa <UART_DMAError+0x4c>
 80022ee:	065b      	lsls	r3, r3, #25
 80022f0:	d503      	bpl.n	80022fa <UART_DMAError+0x4c>
 80022f2:	2300      	movs	r3, #0
 80022f4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80022f6:	f7ff fd99 	bl	8001e2c <UART_EndRxTransfer>
 80022fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	6403      	str	r3, [r0, #64]	; 0x40
 8002302:	f7ff ffd3 	bl	80022ac <HAL_UART_ErrorCallback>
 8002306:	bd08      	pop	{r3, pc}

08002308 <UART_DMAAbortOnError>:
 8002308:	b508      	push	{r3, lr}
 800230a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800230c:	2300      	movs	r3, #0
 800230e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002310:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002312:	f7ff ffcb 	bl	80022ac <HAL_UART_ErrorCallback>
 8002316:	bd08      	pop	{r3, pc}

08002318 <HAL_UARTEx_RxEventCallback>:
 8002318:	4770      	bx	lr

0800231a <UART_Receive_IT.isra.0>:
 800231a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800231e:	2b22      	cmp	r3, #34	; 0x22
 8002320:	b507      	push	{r0, r1, r2, lr}
 8002322:	d141      	bne.n	80023a8 <UART_Receive_IT.isra.0+0x8e>
 8002324:	6881      	ldr	r1, [r0, #8]
 8002326:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002328:	6802      	ldr	r2, [r0, #0]
 800232a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800232e:	d13e      	bne.n	80023ae <UART_Receive_IT.isra.0+0x94>
 8002330:	6901      	ldr	r1, [r0, #16]
 8002332:	2900      	cmp	r1, #0
 8002334:	d13e      	bne.n	80023b4 <UART_Receive_IT.isra.0+0x9a>
 8002336:	6852      	ldr	r2, [r2, #4]
 8002338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800233c:	f823 2b02 	strh.w	r2, [r3], #2
 8002340:	6283      	str	r3, [r0, #40]	; 0x28
 8002342:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002344:	3b01      	subs	r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800234a:	2b00      	cmp	r3, #0
 800234c:	d12c      	bne.n	80023a8 <UART_Receive_IT.isra.0+0x8e>
 800234e:	6802      	ldr	r2, [r0, #0]
 8002350:	68d1      	ldr	r1, [r2, #12]
 8002352:	f021 0120 	bic.w	r1, r1, #32
 8002356:	60d1      	str	r1, [r2, #12]
 8002358:	68d1      	ldr	r1, [r2, #12]
 800235a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800235e:	60d1      	str	r1, [r2, #12]
 8002360:	6951      	ldr	r1, [r2, #20]
 8002362:	f021 0101 	bic.w	r1, r1, #1
 8002366:	6151      	str	r1, [r2, #20]
 8002368:	2220      	movs	r2, #32
 800236a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 800236e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002370:	2a01      	cmp	r2, #1
 8002372:	6802      	ldr	r2, [r0, #0]
 8002374:	d128      	bne.n	80023c8 <UART_Receive_IT.isra.0+0xae>
 8002376:	6303      	str	r3, [r0, #48]	; 0x30
 8002378:	f102 030c 	add.w	r3, r2, #12
 800237c:	e853 3f00 	ldrex	r3, [r3]
 8002380:	f023 0310 	bic.w	r3, r3, #16
 8002384:	f102 0c0c 	add.w	ip, r2, #12
 8002388:	e84c 3100 	strex	r1, r3, [ip]
 800238c:	2900      	cmp	r1, #0
 800238e:	d1f3      	bne.n	8002378 <UART_Receive_IT.isra.0+0x5e>
 8002390:	6813      	ldr	r3, [r2, #0]
 8002392:	06db      	lsls	r3, r3, #27
 8002394:	d505      	bpl.n	80023a2 <UART_Receive_IT.isra.0+0x88>
 8002396:	9101      	str	r1, [sp, #4]
 8002398:	6813      	ldr	r3, [r2, #0]
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	6853      	ldr	r3, [r2, #4]
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	9b01      	ldr	r3, [sp, #4]
 80023a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80023a4:	f7ff ffb8 	bl	8002318 <HAL_UARTEx_RxEventCallback>
 80023a8:	b003      	add	sp, #12
 80023aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ae:	b939      	cbnz	r1, 80023c0 <UART_Receive_IT.isra.0+0xa6>
 80023b0:	6901      	ldr	r1, [r0, #16]
 80023b2:	b929      	cbnz	r1, 80023c0 <UART_Receive_IT.isra.0+0xa6>
 80023b4:	6852      	ldr	r2, [r2, #4]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023bc:	3301      	adds	r3, #1
 80023be:	e7bf      	b.n	8002340 <UART_Receive_IT.isra.0+0x26>
 80023c0:	6852      	ldr	r2, [r2, #4]
 80023c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023c6:	e7f7      	b.n	80023b8 <UART_Receive_IT.isra.0+0x9e>
 80023c8:	f7fe fe60 	bl	800108c <HAL_UART_RxCpltCallback>
 80023cc:	e7ec      	b.n	80023a8 <UART_Receive_IT.isra.0+0x8e>
	...

080023d0 <HAL_UART_IRQHandler>:
 80023d0:	6803      	ldr	r3, [r0, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023d6:	0716      	lsls	r6, r2, #28
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	695d      	ldr	r5, [r3, #20]
 80023dc:	4604      	mov	r4, r0
 80023de:	d108      	bne.n	80023f2 <HAL_UART_IRQHandler+0x22>
 80023e0:	0696      	lsls	r6, r2, #26
 80023e2:	d568      	bpl.n	80024b6 <HAL_UART_IRQHandler+0xe6>
 80023e4:	068d      	lsls	r5, r1, #26
 80023e6:	d566      	bpl.n	80024b6 <HAL_UART_IRQHandler+0xe6>
 80023e8:	b002      	add	sp, #8
 80023ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80023ee:	f7ff bf94 	b.w	800231a <UART_Receive_IT.isra.0>
 80023f2:	f005 0001 	and.w	r0, r5, #1
 80023f6:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80023fa:	4305      	orrs	r5, r0
 80023fc:	d05b      	beq.n	80024b6 <HAL_UART_IRQHandler+0xe6>
 80023fe:	07d6      	lsls	r6, r2, #31
 8002400:	d505      	bpl.n	800240e <HAL_UART_IRQHandler+0x3e>
 8002402:	05cd      	lsls	r5, r1, #23
 8002404:	bf42      	ittt	mi
 8002406:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8002408:	f043 0301 	orrmi.w	r3, r3, #1
 800240c:	6423      	strmi	r3, [r4, #64]	; 0x40
 800240e:	0753      	lsls	r3, r2, #29
 8002410:	d504      	bpl.n	800241c <HAL_UART_IRQHandler+0x4c>
 8002412:	b118      	cbz	r0, 800241c <HAL_UART_IRQHandler+0x4c>
 8002414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	6423      	str	r3, [r4, #64]	; 0x40
 800241c:	0796      	lsls	r6, r2, #30
 800241e:	d504      	bpl.n	800242a <HAL_UART_IRQHandler+0x5a>
 8002420:	b118      	cbz	r0, 800242a <HAL_UART_IRQHandler+0x5a>
 8002422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6423      	str	r3, [r4, #64]	; 0x40
 800242a:	0715      	lsls	r5, r2, #28
 800242c:	d507      	bpl.n	800243e <HAL_UART_IRQHandler+0x6e>
 800242e:	f001 0320 	and.w	r3, r1, #32
 8002432:	4303      	orrs	r3, r0
 8002434:	bf1e      	ittt	ne
 8002436:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8002438:	f043 0308 	orrne.w	r3, r3, #8
 800243c:	6423      	strne	r3, [r4, #64]	; 0x40
 800243e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d032      	beq.n	80024aa <HAL_UART_IRQHandler+0xda>
 8002444:	0692      	lsls	r2, r2, #26
 8002446:	d504      	bpl.n	8002452 <HAL_UART_IRQHandler+0x82>
 8002448:	068b      	lsls	r3, r1, #26
 800244a:	d502      	bpl.n	8002452 <HAL_UART_IRQHandler+0x82>
 800244c:	4620      	mov	r0, r4
 800244e:	f7ff ff64 	bl	800231a <UART_Receive_IT.isra.0>
 8002452:	6826      	ldr	r6, [r4, #0]
 8002454:	6973      	ldr	r3, [r6, #20]
 8002456:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	f002 0208 	and.w	r2, r2, #8
 8002460:	ea53 0502 	orrs.w	r5, r3, r2
 8002464:	4620      	mov	r0, r4
 8002466:	d022      	beq.n	80024ae <HAL_UART_IRQHandler+0xde>
 8002468:	f7ff fce0 	bl	8001e2c <UART_EndRxTransfer>
 800246c:	6973      	ldr	r3, [r6, #20]
 800246e:	065e      	lsls	r6, r3, #25
 8002470:	d518      	bpl.n	80024a4 <HAL_UART_IRQHandler+0xd4>
 8002472:	6822      	ldr	r2, [r4, #0]
 8002474:	f102 0314 	add.w	r3, r2, #20
 8002478:	e853 3f00 	ldrex	r3, [r3]
 800247c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002480:	3214      	adds	r2, #20
 8002482:	e842 3100 	strex	r1, r3, [r2]
 8002486:	2900      	cmp	r1, #0
 8002488:	d1f3      	bne.n	8002472 <HAL_UART_IRQHandler+0xa2>
 800248a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800248c:	b150      	cbz	r0, 80024a4 <HAL_UART_IRQHandler+0xd4>
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_UART_IRQHandler+0x288>)
 8002490:	6503      	str	r3, [r0, #80]	; 0x50
 8002492:	f7fe ffdd 	bl	8001450 <HAL_DMA_Abort_IT>
 8002496:	b140      	cbz	r0, 80024aa <HAL_UART_IRQHandler+0xda>
 8002498:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800249a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800249c:	b002      	add	sp, #8
 800249e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80024a2:	4718      	bx	r3
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ff01 	bl	80022ac <HAL_UART_ErrorCallback>
 80024aa:	b002      	add	sp, #8
 80024ac:	bd70      	pop	{r4, r5, r6, pc}
 80024ae:	f7ff fefd 	bl	80022ac <HAL_UART_ErrorCallback>
 80024b2:	6425      	str	r5, [r4, #64]	; 0x40
 80024b4:	e7f9      	b.n	80024aa <HAL_UART_IRQHandler+0xda>
 80024b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80024b8:	2801      	cmp	r0, #1
 80024ba:	f040 8091 	bne.w	80025e0 <HAL_UART_IRQHandler+0x210>
 80024be:	06d5      	lsls	r5, r2, #27
 80024c0:	f140 808e 	bpl.w	80025e0 <HAL_UART_IRQHandler+0x210>
 80024c4:	06c8      	lsls	r0, r1, #27
 80024c6:	f140 808b 	bpl.w	80025e0 <HAL_UART_IRQHandler+0x210>
 80024ca:	2200      	movs	r2, #0
 80024cc:	9201      	str	r2, [sp, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	9201      	str	r2, [sp, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	9201      	str	r2, [sp, #4]
 80024d6:	9a01      	ldr	r2, [sp, #4]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	0652      	lsls	r2, r2, #25
 80024dc:	d54c      	bpl.n	8002578 <HAL_UART_IRQHandler+0x1a8>
 80024de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024e0:	680a      	ldr	r2, [r1, #0]
 80024e2:	6852      	ldr	r2, [r2, #4]
 80024e4:	b292      	uxth	r2, r2
 80024e6:	2a00      	cmp	r2, #0
 80024e8:	d0df      	beq.n	80024aa <HAL_UART_IRQHandler+0xda>
 80024ea:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80024ec:	4290      	cmp	r0, r2
 80024ee:	d9dc      	bls.n	80024aa <HAL_UART_IRQHandler+0xda>
 80024f0:	85e2      	strh	r2, [r4, #46]	; 0x2e
 80024f2:	69ca      	ldr	r2, [r1, #28]
 80024f4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80024f8:	d036      	beq.n	8002568 <HAL_UART_IRQHandler+0x198>
 80024fa:	f103 020c 	add.w	r2, r3, #12
 80024fe:	e852 2f00 	ldrex	r2, [r2]
 8002502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002506:	f103 000c 	add.w	r0, r3, #12
 800250a:	e840 2100 	strex	r1, r2, [r0]
 800250e:	2900      	cmp	r1, #0
 8002510:	d1f3      	bne.n	80024fa <HAL_UART_IRQHandler+0x12a>
 8002512:	f103 0214 	add.w	r2, r3, #20
 8002516:	e852 2f00 	ldrex	r2, [r2]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	f103 0014 	add.w	r0, r3, #20
 8002522:	e840 2100 	strex	r1, r2, [r0]
 8002526:	2900      	cmp	r1, #0
 8002528:	d1f3      	bne.n	8002512 <HAL_UART_IRQHandler+0x142>
 800252a:	f103 0214 	add.w	r2, r3, #20
 800252e:	e852 2f00 	ldrex	r2, [r2]
 8002532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002536:	f103 0014 	add.w	r0, r3, #20
 800253a:	e840 2100 	strex	r1, r2, [r0]
 800253e:	2900      	cmp	r1, #0
 8002540:	d1f3      	bne.n	800252a <HAL_UART_IRQHandler+0x15a>
 8002542:	2220      	movs	r2, #32
 8002544:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002548:	6321      	str	r1, [r4, #48]	; 0x30
 800254a:	f103 020c 	add.w	r2, r3, #12
 800254e:	e852 2f00 	ldrex	r2, [r2]
 8002552:	f022 0210 	bic.w	r2, r2, #16
 8002556:	f103 000c 	add.w	r0, r3, #12
 800255a:	e840 2100 	strex	r1, r2, [r0]
 800255e:	2900      	cmp	r1, #0
 8002560:	d1f3      	bne.n	800254a <HAL_UART_IRQHandler+0x17a>
 8002562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002564:	f7fe ff30 	bl	80013c8 <HAL_DMA_Abort>
 8002568:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800256a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800256c:	1ac9      	subs	r1, r1, r3
 800256e:	b289      	uxth	r1, r1
 8002570:	4620      	mov	r0, r4
 8002572:	f7ff fed1 	bl	8002318 <HAL_UARTEx_RxEventCallback>
 8002576:	e798      	b.n	80024aa <HAL_UART_IRQHandler+0xda>
 8002578:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800257a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800257c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800257e:	b280      	uxth	r0, r0
 8002580:	b292      	uxth	r2, r2
 8002582:	2800      	cmp	r0, #0
 8002584:	d091      	beq.n	80024aa <HAL_UART_IRQHandler+0xda>
 8002586:	1a89      	subs	r1, r1, r2
 8002588:	b289      	uxth	r1, r1
 800258a:	2900      	cmp	r1, #0
 800258c:	d08d      	beq.n	80024aa <HAL_UART_IRQHandler+0xda>
 800258e:	f103 020c 	add.w	r2, r3, #12
 8002592:	e852 2f00 	ldrex	r2, [r2]
 8002596:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800259a:	f103 050c 	add.w	r5, r3, #12
 800259e:	e845 2000 	strex	r0, r2, [r5]
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d1f3      	bne.n	800258e <HAL_UART_IRQHandler+0x1be>
 80025a6:	f103 0214 	add.w	r2, r3, #20
 80025aa:	e852 2f00 	ldrex	r2, [r2]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	f103 0514 	add.w	r5, r3, #20
 80025b6:	e845 2000 	strex	r0, r2, [r5]
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d1f3      	bne.n	80025a6 <HAL_UART_IRQHandler+0x1d6>
 80025be:	2220      	movs	r2, #32
 80025c0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80025c4:	6320      	str	r0, [r4, #48]	; 0x30
 80025c6:	f103 020c 	add.w	r2, r3, #12
 80025ca:	e852 2f00 	ldrex	r2, [r2]
 80025ce:	f022 0210 	bic.w	r2, r2, #16
 80025d2:	f103 050c 	add.w	r5, r3, #12
 80025d6:	e845 2000 	strex	r0, r2, [r5]
 80025da:	2800      	cmp	r0, #0
 80025dc:	d1f3      	bne.n	80025c6 <HAL_UART_IRQHandler+0x1f6>
 80025de:	e7c7      	b.n	8002570 <HAL_UART_IRQHandler+0x1a0>
 80025e0:	0616      	lsls	r6, r2, #24
 80025e2:	d528      	bpl.n	8002636 <HAL_UART_IRQHandler+0x266>
 80025e4:	060d      	lsls	r5, r1, #24
 80025e6:	d526      	bpl.n	8002636 <HAL_UART_IRQHandler+0x266>
 80025e8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025ec:	2a21      	cmp	r2, #33	; 0x21
 80025ee:	f47f af5c 	bne.w	80024aa <HAL_UART_IRQHandler+0xda>
 80025f2:	68a1      	ldr	r1, [r4, #8]
 80025f4:	6a22      	ldr	r2, [r4, #32]
 80025f6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80025fa:	d117      	bne.n	800262c <HAL_UART_IRQHandler+0x25c>
 80025fc:	6921      	ldr	r1, [r4, #16]
 80025fe:	b9a9      	cbnz	r1, 800262c <HAL_UART_IRQHandler+0x25c>
 8002600:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002604:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002608:	6059      	str	r1, [r3, #4]
 800260a:	6222      	str	r2, [r4, #32]
 800260c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800260e:	3a01      	subs	r2, #1
 8002610:	b292      	uxth	r2, r2
 8002612:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002614:	2a00      	cmp	r2, #0
 8002616:	f47f af48 	bne.w	80024aa <HAL_UART_IRQHandler+0xda>
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	e73e      	b.n	80024aa <HAL_UART_IRQHandler+0xda>
 800262c:	1c51      	adds	r1, r2, #1
 800262e:	6221      	str	r1, [r4, #32]
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	e7ea      	b.n	800260c <HAL_UART_IRQHandler+0x23c>
 8002636:	0650      	lsls	r0, r2, #25
 8002638:	f57f af37 	bpl.w	80024aa <HAL_UART_IRQHandler+0xda>
 800263c:	064a      	lsls	r2, r1, #25
 800263e:	f57f af34 	bpl.w	80024aa <HAL_UART_IRQHandler+0xda>
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	2320      	movs	r3, #32
 800264c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002650:	4620      	mov	r0, r4
 8002652:	f7fe fd05 	bl	8001060 <HAL_UART_TxCpltCallback>
 8002656:	e728      	b.n	80024aa <HAL_UART_IRQHandler+0xda>
 8002658:	08002309 	.word	0x08002309

0800265c <UART_Start_Receive_IT>:
 800265c:	85c2      	strh	r2, [r0, #46]	; 0x2e
 800265e:	2300      	movs	r3, #0
 8002660:	8582      	strh	r2, [r0, #44]	; 0x2c
 8002662:	2222      	movs	r2, #34	; 0x22
 8002664:	6403      	str	r3, [r0, #64]	; 0x40
 8002666:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 800266a:	6902      	ldr	r2, [r0, #16]
 800266c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8002670:	6281      	str	r1, [r0, #40]	; 0x28
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	b11a      	cbz	r2, 800267e <UART_Start_Receive_IT+0x22>
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	615a      	str	r2, [r3, #20]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	f042 0220 	orr.w	r2, r2, #32
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	2000      	movs	r0, #0
 8002690:	4770      	bx	lr

08002692 <HAL_UART_Receive_IT>:
 8002692:	b470      	push	{r4, r5, r6}
 8002694:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8002698:	2e20      	cmp	r6, #32
 800269a:	d110      	bne.n	80026be <HAL_UART_Receive_IT+0x2c>
 800269c:	b161      	cbz	r1, 80026b8 <HAL_UART_Receive_IT+0x26>
 800269e:	b15a      	cbz	r2, 80026b8 <HAL_UART_Receive_IT+0x26>
 80026a0:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80026a4:	2c01      	cmp	r4, #1
 80026a6:	d00a      	beq.n	80026be <HAL_UART_Receive_IT+0x2c>
 80026a8:	2401      	movs	r4, #1
 80026aa:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
 80026ae:	2400      	movs	r4, #0
 80026b0:	6304      	str	r4, [r0, #48]	; 0x30
 80026b2:	bc70      	pop	{r4, r5, r6}
 80026b4:	f7ff bfd2 	b.w	800265c <UART_Start_Receive_IT>
 80026b8:	2001      	movs	r0, #1
 80026ba:	bc70      	pop	{r4, r5, r6}
 80026bc:	4770      	bx	lr
 80026be:	2002      	movs	r0, #2
 80026c0:	e7fb      	b.n	80026ba <HAL_UART_Receive_IT+0x28>
	...

080026c4 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 80026cc:	23ae      	movs	r3, #174	; 0xae
 80026ce:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <gos_driverInit+0x20>
    {
        memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 80026d6:	221c      	movs	r2, #28
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4805      	ldr	r0, [pc, #20]	; (80026f0 <gos_driverInit+0x2c>)
 80026dc:	f005 f946 	bl	800796c <memcpy>
        driverInitResult = GOS_SUCCESS;
 80026e0:	2355      	movs	r3, #85	; 0x55
 80026e2:	73fb      	strb	r3, [r7, #15]
    }

    return driverInitResult;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200018dc 	.word	0x200018dc

080026f4 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 80026fa:	23ae      	movs	r3, #174	; 0xae
 80026fc:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 80026fe:	2301      	movs	r3, #1
 8002700:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8002702:	2301      	movs	r3, #1
 8002704:	80fb      	strh	r3, [r7, #6]
 8002706:	e031      	b.n	800276c <gos_kernelInit+0x78>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	4a67      	ldr	r2, [pc, #412]	; (80028a8 <gos_kernelInit+0x1b4>)
 800270c:	216e      	movs	r1, #110	; 0x6e
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	2200      	movs	r2, #0
 8002716:	801a      	strh	r2, [r3, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	805a      	strh	r2, [r3, #2]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	4a62      	ldr	r2, [pc, #392]	; (80028a8 <gos_kernelInit+0x1b4>)
 8002720:	216e      	movs	r1, #110	; 0x6e
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3306      	adds	r3, #6
 800272a:	22ff      	movs	r2, #255	; 0xff
 800272c:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	4a5d      	ldr	r2, [pc, #372]	; (80028a8 <gos_kernelInit+0x1b4>)
 8002732:	216e      	movs	r1, #110	; 0x6e
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	3307      	adds	r3, #7
 800273c:	22ff      	movs	r2, #255	; 0xff
 800273e:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	4a59      	ldr	r2, [pc, #356]	; (80028a8 <gos_kernelInit+0x1b4>)
 8002744:	216e      	movs	r1, #110	; 0x6e
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	2205      	movs	r2, #5
 8002750:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	4a54      	ldr	r2, [pc, #336]	; (80028a8 <gos_kernelInit+0x1b4>)
 8002756:	216e      	movs	r1, #110	; 0x6e
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	332a      	adds	r3, #42	; 0x2a
 8002760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002764:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	3301      	adds	r3, #1
 800276a:	80fb      	strh	r3, [r7, #6]
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b23      	cmp	r3, #35	; 0x23
 8002770:	d9ca      	bls.n	8002708 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 8002772:	4b4e      	ldr	r3, [pc, #312]	; (80028ac <gos_kernelInit+0x1b8>)
 8002774:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3b04      	subs	r3, #4
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002782:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_kernelIdleTask; // PC
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	3b04      	subs	r3, #4
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4a49      	ldr	r2, [pc, #292]	; (80028b0 <gos_kernelInit+0x1bc>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3b04      	subs	r3, #4
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f06f 0202 	mvn.w	r2, #2
 800279c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	3b04      	subs	r3, #4
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80027aa:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3b04      	subs	r3, #4
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80027b8:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	3b04      	subs	r3, #4
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80027c6:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	3b04      	subs	r3, #4
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80027d4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3b04      	subs	r3, #4
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	3b04      	subs	r3, #4
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80027ee:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	3b04      	subs	r3, #4
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80027fc:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3b04      	subs	r3, #4
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800280a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	3b04      	subs	r3, #4
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8002818:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3b04      	subs	r3, #4
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8002826:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	3b04      	subs	r3, #4
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8002834:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	3b04      	subs	r3, #4
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002842:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3b04      	subs	r3, #4
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002850:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <gos_kernelInit+0x1b4>)
 8002856:	6413      	str	r3, [r2, #64]	; 0x40

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <gos_kernelInit+0x1b4>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <gos_kernelInit+0x1b4>)
 800285e:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	3340      	adds	r3, #64	; 0x40
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <gos_kernelInit+0x1b4>)
 8002868:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <gos_kernelInit+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <gos_kernelInit+0x1c0>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <gos_kernelInit+0x1c0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <gos_kernelInit+0x1c0>)
 800287e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <gos_kernelInit+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <gos_kernelInit+0x1c0>)
 800288a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288e:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <gos_kernelInit+0x1c4>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 8002896:	2355      	movs	r3, #85	; 0x55
 8002898:	717b      	strb	r3, [r7, #5]

    return initResult;
 800289a:	797b      	ldrb	r3, [r7, #5]
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	200002c4 	.word	0x200002c4
 80028ac:	2001ee00 	.word	0x2001ee00
 80028b0:	08004c49 	.word	0x08004c49
 80028b4:	e000ed24 	.word	0xe000ed24
 80028b8:	200018fa 	.word	0x200018fa

080028bc <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 80028c2:	23ae      	movs	r3, #174	; 0xae
 80028c4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <gos_kernelStart+0x6c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 80028cc:	f002 f830 	bl	8004930 <gos_kernelGetCurrentPsp>
 80028d0:	f380 8809 	msr	PSP, r0
 80028d4:	f3ef 8014 	mrs	r0, CONTROL
 80028d8:	f040 0002 	orr.w	r0, r0, #2
 80028dc:	f380 8814 	msr	CONTROL, r0
 80028e0:	f3ef 8014 	mrs	r0, CONTROL
 80028e4:	f040 0001 	orr.w	r0, r0, #1
 80028e8:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <gos_kernelStart+0x6c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <gos_kernelStart+0x70>)
 80028f2:	216e      	movs	r1, #110	; 0x6e
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    gos_timerDriverSysTimerGet(&sysTimerValue);
 80028fe:	480c      	ldr	r0, [pc, #48]	; (8002930 <gos_kernelStart+0x74>)
 8002900:	f004 fee4 	bl	80076cc <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <gos_kernelStart+0x78>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <gos_kernelStart+0x5c>
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <gos_kernelStart+0x78>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <gos_kernelStart+0x78>)
 8002916:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 800291c:	79fb      	ldrb	r3, [r7, #7]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20001900 	.word	0x20001900
 800292c:	200002c4 	.word	0x200002c4
 8002930:	20001904 	.word	0x20001904
 8002934:	200018fa 	.word	0x200018fa

08002938 <gos_kernelTaskRegister>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelTaskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 8002942:	2355      	movs	r3, #85	; 0x55
 8002944:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 8002946:	2300      	movs	r3, #0
 8002948:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 800294a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800294e:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_kernelCheckTaskDescriptor(taskDescriptor) == GOS_ERROR)
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f001 ffb5 	bl	80048c4 <gos_kernelCheckTaskDescriptor>
 800295a:	4603      	mov	r3, r0
 800295c:	2bae      	cmp	r3, #174	; 0xae
 800295e:	d102      	bne.n	8002966 <gos_kernelTaskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 8002960:	23ae      	movs	r3, #174	; 0xae
 8002962:	75fb      	strb	r3, [r7, #23]
 8002964:	e16c      	b.n	8002c40 <gos_kernelTaskRegister+0x308>
    }
    else
    {
        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8002966:	2300      	movs	r3, #0
 8002968:	82bb      	strh	r3, [r7, #20]
 800296a:	e017      	b.n	800299c <gos_kernelTaskRegister+0x64>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 800296c:	8abb      	ldrh	r3, [r7, #20]
 800296e:	4a7f      	ldr	r2, [pc, #508]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002970:	216e      	movs	r1, #110	; 0x6e
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d012      	beq.n	80029a4 <gos_kernelTaskRegister+0x6c>
            {
                break;
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 800297e:	8abb      	ldrh	r3, [r7, #20]
 8002980:	4a7a      	ldr	r2, [pc, #488]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002982:	216e      	movs	r1, #110	; 0x6e
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	334c      	adds	r3, #76	; 0x4c
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8002996:	8abb      	ldrh	r3, [r7, #20]
 8002998:	3301      	adds	r3, #1
 800299a:	82bb      	strh	r3, [r7, #20]
 800299c:	8abb      	ldrh	r3, [r7, #20]
 800299e:	2b23      	cmp	r3, #35	; 0x23
 80029a0:	d9e4      	bls.n	800296c <gos_kernelTaskRegister+0x34>
 80029a2:	e000      	b.n	80029a6 <gos_kernelTaskRegister+0x6e>
                break;
 80029a4:	bf00      	nop
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 80029a6:	8abb      	ldrh	r3, [r7, #20]
 80029a8:	2b23      	cmp	r3, #35	; 0x23
 80029aa:	d902      	bls.n	80029b2 <gos_kernelTaskRegister+0x7a>
        {
            taskRegisterResult = GOS_ERROR;
 80029ac:	23ae      	movs	r3, #174	; 0xae
 80029ae:	75fb      	strb	r3, [r7, #23]
 80029b0:	e146      	b.n	8002c40 <gos_kernelTaskRegister+0x308>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80029b8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80029bc:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3b04      	subs	r3, #4
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ca:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3b04      	subs	r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3b04      	subs	r3, #4
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f06f 0202 	mvn.w	r2, #2
 80029e6:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b04      	subs	r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80029f4:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b04      	subs	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8002a02:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3b04      	subs	r3, #4
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8002a10:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3b04      	subs	r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8002a1e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3b04      	subs	r3, #4
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8002a38:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b04      	subs	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8002a46:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8002a54:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b04      	subs	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8002a62:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3b04      	subs	r3, #4
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8002a70:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3b04      	subs	r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8002a7e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3b04      	subs	r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002a8c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3b04      	subs	r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002a9a:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 8002a9c:	8abb      	ldrh	r3, [r7, #20]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4932      	ldr	r1, [pc, #200]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002aa2:	206e      	movs	r0, #110	; 0x6e
 8002aa4:	fb00 f303 	mul.w	r3, r0, r3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3340      	adds	r3, #64	; 0x40
 8002aac:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 8002aae:	8abb      	ldrh	r3, [r7, #20]
 8002ab0:	4a2e      	ldr	r2, [pc, #184]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002ab2:	216e      	movs	r1, #110	; 0x6e
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	220a      	movs	r2, #10
 8002abe:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 8002ac0:	8abb      	ldrh	r3, [r7, #20]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4929      	ldr	r1, [pc, #164]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002ac8:	206e      	movs	r0, #110	; 0x6e
 8002aca:	fb00 f303 	mul.w	r3, r0, r3
 8002ace:	440b      	add	r3, r1
 8002ad0:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 8002ad2:	8abb      	ldrh	r3, [r7, #20]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	7990      	ldrb	r0, [r2, #6]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002ada:	216e      	movs	r1, #110	; 0x6e
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3306      	adds	r3, #6
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 8002ae8:	8abb      	ldrh	r3, [r7, #20]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	7990      	ldrb	r0, [r2, #6]
 8002aee:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002af0:	216e      	movs	r1, #110	; 0x6e
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3307      	adds	r3, #7
 8002afa:	4602      	mov	r2, r0
 8002afc:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 8002afe:	8abb      	ldrh	r3, [r7, #20]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8002b06:	b290      	uxth	r0, r2
 8002b08:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002b0a:	216e      	movs	r1, #110	; 0x6e
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	334c      	adds	r3, #76	; 0x4c
 8002b14:	4602      	mov	r2, r0
 8002b16:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 8002b18:	8abb      	ldrh	r3, [r7, #20]
 8002b1a:	8aba      	ldrh	r2, [r7, #20]
 8002b1c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8002b20:	b290      	uxth	r0, r2
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002b24:	216e      	movs	r1, #110	; 0x6e
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	332a      	adds	r3, #42	; 0x2a
 8002b2e:	4602      	mov	r2, r0
 8002b30:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 8002b32:	8abb      	ldrh	r3, [r7, #20]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	8912      	ldrh	r2, [r2, #8]
 8002b38:	b290      	uxth	r0, r2
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002b3c:	216e      	movs	r1, #110	; 0x6e
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3308      	adds	r3, #8
 8002b46:	4602      	mov	r2, r0
 8002b48:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <gos_kernelTaskRegister+0x238>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8002b56:	8abb      	ldrh	r3, [r7, #20]
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <gos_kernelTaskRegister+0x234>)
 8002b5a:	216e      	movs	r1, #110	; 0x6e
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	335e      	adds	r3, #94	; 0x5e
 8002b64:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e00e      	b.n	8002b8a <gos_kernelTaskRegister+0x252>
 8002b6c:	200002c4 	.word	0x200002c4
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 8002b70:	8abb      	ldrh	r3, [r7, #20]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8002b78:	b290      	uxth	r0, r2
 8002b7a:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <gos_kernelTaskRegister+0x314>)
 8002b7c:	216e      	movs	r1, #110	; 0x6e
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	335e      	adds	r3, #94	; 0x5e
 8002b86:	4602      	mov	r2, r0
 8002b88:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	330a      	adds	r3, #10
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d015      	beq.n	8002bbe <gos_kernelTaskRegister+0x286>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	330a      	adds	r3, #10
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fb44 	bl	8000224 <strlen>
 8002b9c:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d80d      	bhi.n	8002bbe <gos_kernelTaskRegister+0x286>
            {
                strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 8002ba2:	8abb      	ldrh	r3, [r7, #20]
 8002ba4:	226e      	movs	r2, #110	; 0x6e
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	3308      	adds	r3, #8
 8002bac:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <gos_kernelTaskRegister+0x314>)
 8002bae:	4413      	add	r3, r2
 8002bb0:	1c9a      	adds	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	330a      	adds	r3, #10
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f004 fecf 	bl	800795c <strcpy>
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 8002bbe:	8abb      	ldrh	r3, [r7, #20]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <gos_kernelTaskRegister+0x314>)
 8002bc2:	216e      	movs	r1, #110	; 0x6e
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	332a      	adds	r3, #42	; 0x2a
 8002bcc:	881a      	ldrh	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
            if (taskId != NULL)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <gos_kernelTaskRegister+0x2b4>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 8002bd8:	8abb      	ldrh	r3, [r7, #20]
 8002bda:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <gos_kernelTaskRegister+0x314>)
 8002bdc:	216e      	movs	r1, #110	; 0x6e
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	332a      	adds	r3, #42	; 0x2a
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	801a      	strh	r2, [r3, #0]
            }
            if (taskDescriptor->taskIdEx != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <gos_kernelTaskRegister+0x2d2>
            {
                *taskDescriptor->taskIdEx = taskDescriptors[taskIndex].taskId;
 8002bf4:	8aba      	ldrh	r2, [r7, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	4914      	ldr	r1, [pc, #80]	; (8002c4c <gos_kernelTaskRegister+0x314>)
 8002bfc:	206e      	movs	r0, #110	; 0x6e
 8002bfe:	fb00 f202 	mul.w	r2, r0, r2
 8002c02:	440a      	add	r2, r1
 8002c04:	322a      	adds	r2, #42	; 0x2a
 8002c06:	8812      	ldrh	r2, [r2, #0]
 8002c08:	801a      	strh	r2, [r3, #0]
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8002c0a:	8abb      	ldrh	r3, [r7, #20]
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <gos_kernelTaskRegister+0x314>)
 8002c0e:	216e      	movs	r1, #110	; 0x6e
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3340      	adds	r3, #64	; 0x40
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	8aba      	ldrh	r2, [r7, #20]
 8002c1c:	490b      	ldr	r1, [pc, #44]	; (8002c4c <gos_kernelTaskRegister+0x314>)
 8002c1e:	206e      	movs	r0, #110	; 0x6e
 8002c20:	fb00 f202 	mul.w	r2, r0, r2
 8002c24:	440a      	add	r2, r1
 8002c26:	324c      	adds	r2, #76	; 0x4c
 8002c28:	8812      	ldrh	r2, [r2, #0]
 8002c2a:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8002c2c:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8002c2e:	3240      	adds	r2, #64	; 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8002c30:	4906      	ldr	r1, [pc, #24]	; (8002c4c <gos_kernelTaskRegister+0x314>)
 8002c32:	206e      	movs	r0, #110	; 0x6e
 8002c34:	fb00 f303 	mul.w	r3, r0, r3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3360      	adds	r3, #96	; 0x60
 8002c3c:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200002c4 	.word	0x200002c4

08002c50 <gos_kernelTaskSleep>:

/*
 * Function: gos_kernelTaskSleep
 */
GOS_INLINE gos_result_t gos_kernelTaskSleep (gos_taskSleepTick_t sleepTicks)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 8002c58:	23ae      	movs	r3, #174	; 0xae
 8002c5a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (currentTaskIndex > 0u)
 8002c5c:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <gos_kernelTaskSleep+0xcc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d053      	beq.n	8002d0c <gos_kernelTaskSleep+0xbc>
    {
        GOS_ATOMIC_ENTER
 8002c64:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <gos_kernelTaskSleep+0xd0>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <gos_kernelTaskSleep+0xd0>)
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	b672      	cpsid	i
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
        {
            if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <gos_kernelTaskSleep+0xcc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a29      	ldr	r2, [pc, #164]	; (8002d24 <gos_kernelTaskSleep+0xd4>)
 8002c80:	216e      	movs	r1, #110	; 0x6e
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b0a      	cmp	r3, #10
 8002c8e:	d121      	bne.n	8002cd4 <gos_kernelTaskSleep+0x84>
            {
                taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 8002c90:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <gos_kernelTaskSleep+0xcc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <gos_kernelTaskSleep+0xd4>)
 8002c96:	216e      	movs	r1, #110	; 0x6e
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	2216      	movs	r2, #22
 8002ca2:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <gos_kernelTaskSleep+0xcc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <gos_kernelTaskSleep+0xd4>)
 8002caa:	216e      	movs	r1, #110	; 0x6e
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3330      	adds	r3, #48	; 0x30
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	601a      	str	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <gos_kernelTaskSleep+0xcc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <gos_kernelTaskSleep+0xd4>)
 8002cbe:	216e      	movs	r1, #110	; 0x6e
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3334      	adds	r3, #52	; 0x34
 8002cc8:	2200      	movs	r2, #0
 8002cca:	801a      	strh	r2, [r3, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	805a      	strh	r2, [r3, #2]
                taskSleepResult = GOS_SUCCESS;
 8002cd0:	2355      	movs	r3, #85	; 0x55
 8002cd2:	73fb      	strb	r3, [r7, #15]
            }
        }
        GOS_ATOMIC_EXIT
 8002cd4:	b662      	cpsie	i
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <gos_kernelTaskSleep+0xd0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <gos_kernelTaskSleep+0x9a>
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <gos_kernelTaskSleep+0xd0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <gos_kernelTaskSleep+0xd0>)
 8002ce8:	701a      	strb	r2, [r3, #0]

        if (taskSleepResult == GOS_SUCCESS)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b55      	cmp	r3, #85	; 0x55
 8002cee:	d10d      	bne.n	8002d0c <gos_kernelTaskSleep+0xbc>
 8002cf0:	2309      	movs	r3, #9
 8002cf2:	73bb      	strb	r3, [r7, #14]
GOS_STATIC_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 8002cf4:	7bbb      	ldrb	r3, [r7, #14]
 8002cf6:	2b16      	cmp	r3, #22
 8002cf8:	d106      	bne.n	8002d08 <gos_kernelTaskSleep+0xb8>
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <gos_kernelTaskSleep+0xd8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <gos_kernelTaskSleep+0xd8>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	e000      	b.n	8002d0a <gos_kernelTaskSleep+0xba>
    gos_ported_reschedule(privilege);
 8002d08:	dfff      	svc	255	; 0xff
}
 8002d0a:	bf00      	nop
    return taskSleepResult;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20001900 	.word	0x20001900
 8002d20:	200018fa 	.word	0x200018fa
 8002d24:	200002c4 	.word	0x200002c4
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <gos_kernelTaskWakeup>:
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskWakeupResult = GOS_ERROR;
 8002d36:	23ae      	movs	r3, #174	; 0xae
 8002d38:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8002d3e:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <gos_kernelTaskWakeup+0xf8>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <gos_kernelTaskWakeup+0xf8>)
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	b672      	cpsid	i
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5a:	d953      	bls.n	8002e04 <gos_kernelTaskWakeup+0xd8>
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	f248 0223 	movw	r2, #32803	; 0x8023
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d84e      	bhi.n	8002e04 <gos_kernelTaskWakeup+0xd8>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d6c:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <gos_kernelTaskWakeup+0xfc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <gos_kernelTaskWakeup+0x100>)
 8002d74:	216e      	movs	r1, #110	; 0x6e
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3308      	adds	r3, #8
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b21b      	sxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db03      	blt.n	8002d8e <gos_kernelTaskWakeup+0x62>
            inIsr > 0)
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <gos_kernelTaskWakeup+0x104>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d015      	beq.n	8002dba <gos_kernelTaskWakeup+0x8e>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8002d8e:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <gos_kernelTaskWakeup+0x100>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	216e      	movs	r1, #110	; 0x6e
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b16      	cmp	r3, #22
 8002da0:	d130      	bne.n	8002e04 <gos_kernelTaskWakeup+0xd8>
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <gos_kernelTaskWakeup+0x100>)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	216e      	movs	r1, #110	; 0x6e
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	220a      	movs	r2, #10
 8002db2:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 8002db4:	2355      	movs	r3, #85	; 0x55
 8002db6:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8002db8:	e024      	b.n	8002e04 <gos_kernelTaskWakeup+0xd8>
            GOS_ATOMIC_EXIT
 8002dba:	b662      	cpsie	i
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <gos_kernelTaskWakeup+0xf8>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <gos_kernelTaskWakeup+0xa4>
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <gos_kernelTaskWakeup+0xf8>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <gos_kernelTaskWakeup+0xf8>)
 8002dce:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <gos_kernelTaskWakeup+0xfc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	226e      	movs	r2, #110	; 0x6e
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	3308      	adds	r3, #8
 8002ddc:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <gos_kernelTaskWakeup+0x100>)
 8002dde:	4413      	add	r3, r2
 8002de0:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	216e      	movs	r1, #110	; 0x6e
 8002de6:	fb01 f202 	mul.w	r2, r1, r2
 8002dea:	3208      	adds	r2, #8
 8002dec:	490f      	ldr	r1, [pc, #60]	; (8002e2c <gos_kernelTaskWakeup+0x100>)
 8002dee:	440a      	add	r2, r1
 8002df0:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 8002df2:	9201      	str	r2, [sp, #4]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <gos_kernelTaskWakeup+0x108>)
 8002df8:	f240 225f 	movw	r2, #607	; 0x25f
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <gos_kernelTaskWakeup+0x10c>)
 8002dfe:	2034      	movs	r0, #52	; 0x34
 8002e00:	f002 fa60 	bl	80052c4 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 8002e04:	b662      	cpsie	i
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <gos_kernelTaskWakeup+0xf8>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <gos_kernelTaskWakeup+0xee>
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <gos_kernelTaskWakeup+0xf8>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <gos_kernelTaskWakeup+0xf8>)
 8002e18:	701a      	strb	r2, [r3, #0]
    return taskWakeupResult;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	200018fa 	.word	0x200018fa
 8002e28:	20001900 	.word	0x20001900
 8002e2c:	200002c4 	.word	0x200002c4
 8002e30:	200018fb 	.word	0x200018fb
 8002e34:	08008224 	.word	0x08008224
 8002e38:	080094bc 	.word	0x080094bc

08002e3c <gos_kernelTaskSuspend>:
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	4603      	mov	r3, r0
 8002e44:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskSuspendResult = GOS_ERROR;
 8002e46:	23ae      	movs	r3, #174	; 0xae
 8002e48:	75fb      	strb	r3, [r7, #23]
    u32_t        taskIndex         = 0u;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
    GOS_ATOMIC_ENTER
 8002e4e:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	b672      	cpsid	i
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6a:	f240 809f 	bls.w	8002fac <gos_kernelTaskSuspend+0x170>
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	f248 0223 	movw	r2, #32803	; 0x8023
 8002e74:	4293      	cmp	r3, r2
 8002e76:	f200 8099 	bhi.w	8002fac <gos_kernelTaskSuspend+0x170>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002e80:	613b      	str	r3, [r7, #16]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8002e82:	4b55      	ldr	r3, [pc, #340]	; (8002fd8 <gos_kernelTaskSuspend+0x19c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a55      	ldr	r2, [pc, #340]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002e88:	216e      	movs	r1, #110	; 0x6e
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3308      	adds	r3, #8
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b21b      	sxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	db08      	blt.n	8002eac <gos_kernelTaskSuspend+0x70>
            currentTaskIndex == taskIndex || inIsr > 0)
 8002e9a:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <gos_kernelTaskSuspend+0x19c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d003      	beq.n	8002eac <gos_kernelTaskSuspend+0x70>
            currentTaskIndex == taskIndex || inIsr > 0)
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <gos_kernelTaskSuspend+0x1a4>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d058      	beq.n	8002f5e <gos_kernelTaskSuspend+0x122>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8002eac:	4a4b      	ldr	r2, [pc, #300]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	216e      	movs	r1, #110	; 0x6e
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b0a      	cmp	r3, #10
 8002ebe:	d013      	beq.n	8002ee8 <gos_kernelTaskSuspend+0xac>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8002ec0:	4a46      	ldr	r2, [pc, #280]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	216e      	movs	r1, #110	; 0x6e
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3304      	adds	r3, #4
 8002ece:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8002ed0:	2b16      	cmp	r3, #22
 8002ed2:	d009      	beq.n	8002ee8 <gos_kernelTaskSuspend+0xac>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8002ed4:	4a41      	ldr	r2, [pc, #260]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	216e      	movs	r1, #110	; 0x6e
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8002ee4:	2b19      	cmp	r3, #25
 8002ee6:	d160      	bne.n	8002faa <gos_kernelTaskSuspend+0x16e>
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 8002ee8:	4a3c      	ldr	r2, [pc, #240]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	216e      	movs	r1, #110	; 0x6e
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	7818      	ldrb	r0, [r3, #0]
 8002ef8:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	216e      	movs	r1, #110	; 0x6e
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3305      	adds	r3, #5
 8002f06:	4602      	mov	r2, r0
 8002f08:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	216e      	movs	r1, #110	; 0x6e
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	2205      	movs	r2, #5
 8002f1a:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 8002f1c:	2355      	movs	r3, #85	; 0x55
 8002f1e:	75fb      	strb	r3, [r7, #23]
                GOS_ATOMIC_EXIT
 8002f20:	b662      	cpsie	i
 8002f22:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <gos_kernelTaskSuspend+0xfa>
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002f34:	701a      	strb	r2, [r3, #0]
                if (currentTaskIndex == taskIndex)
 8002f36:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <gos_kernelTaskSuspend+0x19c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d134      	bne.n	8002faa <gos_kernelTaskSuspend+0x16e>
 8002f40:	2309      	movs	r3, #9
 8002f42:	73fb      	strb	r3, [r7, #15]
    gos_ported_reschedule(privilege);
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b16      	cmp	r3, #22
 8002f48:	d106      	bne.n	8002f58 <gos_kernelTaskSuspend+0x11c>
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <gos_kernelTaskSuspend+0x1a8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a25      	ldr	r2, [pc, #148]	; (8002fe4 <gos_kernelTaskSuspend+0x1a8>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6013      	str	r3, [r2, #0]
}
 8002f56:	e000      	b.n	8002f5a <gos_kernelTaskSuspend+0x11e>
    gos_ported_reschedule(privilege);
 8002f58:	dfff      	svc	255	; 0xff
}
 8002f5a:	bf00      	nop
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8002f5c:	e025      	b.n	8002faa <gos_kernelTaskSuspend+0x16e>
            GOS_ATOMIC_EXIT
 8002f5e:	b662      	cpsie	i
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <gos_kernelTaskSuspend+0x138>
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002f72:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <gos_kernelTaskSuspend+0x19c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	226e      	movs	r2, #110	; 0x6e
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	3308      	adds	r3, #8
 8002f80:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002f82:	4413      	add	r3, r2
 8002f84:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	216e      	movs	r1, #110	; 0x6e
 8002f8a:	fb01 f202 	mul.w	r2, r1, r2
 8002f8e:	3208      	adds	r2, #8
 8002f90:	4912      	ldr	r1, [pc, #72]	; (8002fdc <gos_kernelTaskSuspend+0x1a0>)
 8002f92:	440a      	add	r2, r1
 8002f94:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 8002f96:	9201      	str	r2, [sp, #4]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <gos_kernelTaskSuspend+0x1ac>)
 8002f9c:	f240 2296 	movw	r2, #662	; 0x296
 8002fa0:	4912      	ldr	r1, [pc, #72]	; (8002fec <gos_kernelTaskSuspend+0x1b0>)
 8002fa2:	2034      	movs	r0, #52	; 0x34
 8002fa4:	f002 f98e 	bl	80052c4 <gos_errorHandler>
 8002fa8:	e000      	b.n	8002fac <gos_kernelTaskSuspend+0x170>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8002faa:	bf00      	nop
    if (taskSuspendResult != GOS_SUCCESS)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b55      	cmp	r3, #85	; 0x55
 8002fb0:	d00a      	beq.n	8002fc8 <gos_kernelTaskSuspend+0x18c>
        GOS_ATOMIC_EXIT
 8002fb2:	b662      	cpsie	i
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <gos_kernelTaskSuspend+0x18c>
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <gos_kernelTaskSuspend+0x198>)
 8002fc6:	701a      	strb	r2, [r3, #0]
    return taskSuspendResult;
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200018fa 	.word	0x200018fa
 8002fd8:	20001900 	.word	0x20001900
 8002fdc:	200002c4 	.word	0x200002c4
 8002fe0:	200018fb 	.word	0x200018fb
 8002fe4:	e000ed04 	.word	0xe000ed04
 8002fe8:	0800824c 	.word	0x0800824c
 8002fec:	080094d4 	.word	0x080094d4

08002ff0 <gos_kernelTaskResume>:
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskResumeResult = GOS_ERROR;
 8002ffa:	23ae      	movs	r3, #174	; 0xae
 8002ffc:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8003002:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <gos_kernelTaskResume+0xf4>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <gos_kernelTaskResume+0xf4>)
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	b672      	cpsid	i
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301e:	d950      	bls.n	80030c2 <gos_kernelTaskResume+0xd2>
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	f248 0223 	movw	r2, #32803	; 0x8023
 8003026:	4293      	cmp	r3, r2
 8003028:	d84b      	bhi.n	80030c2 <gos_kernelTaskResume+0xd2>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003030:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <gos_kernelTaskResume+0xf8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2d      	ldr	r2, [pc, #180]	; (80030ec <gos_kernelTaskResume+0xfc>)
 8003038:	216e      	movs	r1, #110	; 0x6e
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3308      	adds	r3, #8
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b21b      	sxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	db03      	blt.n	8003052 <gos_kernelTaskResume+0x62>
            inIsr > 0)
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <gos_kernelTaskResume+0x100>)
 800304c:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01d      	beq.n	800308e <gos_kernelTaskResume+0x9e>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8003052:	4a26      	ldr	r2, [pc, #152]	; (80030ec <gos_kernelTaskResume+0xfc>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	216e      	movs	r1, #110	; 0x6e
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d12d      	bne.n	80030c2 <gos_kernelTaskResume+0xd2>
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 8003066:	4a21      	ldr	r2, [pc, #132]	; (80030ec <gos_kernelTaskResume+0xfc>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	216e      	movs	r1, #110	; 0x6e
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3305      	adds	r3, #5
 8003074:	7818      	ldrb	r0, [r3, #0]
 8003076:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <gos_kernelTaskResume+0xfc>)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	216e      	movs	r1, #110	; 0x6e
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	4602      	mov	r2, r0
 8003086:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 8003088:	2355      	movs	r3, #85	; 0x55
 800308a:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 800308c:	e019      	b.n	80030c2 <gos_kernelTaskResume+0xd2>
                taskDescriptors[currentTaskIndex].taskName,
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <gos_kernelTaskResume+0xf8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	226e      	movs	r2, #110	; 0x6e
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	3308      	adds	r3, #8
 800309a:	4a14      	ldr	r2, [pc, #80]	; (80030ec <gos_kernelTaskResume+0xfc>)
 800309c:	4413      	add	r3, r2
 800309e:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	216e      	movs	r1, #110	; 0x6e
 80030a4:	fb01 f202 	mul.w	r2, r1, r2
 80030a8:	3208      	adds	r2, #8
 80030aa:	4910      	ldr	r1, [pc, #64]	; (80030ec <gos_kernelTaskResume+0xfc>)
 80030ac:	440a      	add	r2, r1
 80030ae:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 80030b0:	9201      	str	r2, [sp, #4]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <gos_kernelTaskResume+0x104>)
 80030b6:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80030ba:	490f      	ldr	r1, [pc, #60]	; (80030f8 <gos_kernelTaskResume+0x108>)
 80030bc:	2034      	movs	r0, #52	; 0x34
 80030be:	f002 f901 	bl	80052c4 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 80030c2:	b662      	cpsie	i
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <gos_kernelTaskResume+0xf4>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <gos_kernelTaskResume+0xe8>
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <gos_kernelTaskResume+0xf4>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <gos_kernelTaskResume+0xf4>)
 80030d6:	701a      	strb	r2, [r3, #0]
    return taskResumeResult;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200018fa 	.word	0x200018fa
 80030e8:	20001900 	.word	0x20001900
 80030ec:	200002c4 	.word	0x200002c4
 80030f0:	200018fb 	.word	0x200018fb
 80030f4:	08008274 	.word	0x08008274
 80030f8:	080094ec 	.word	0x080094ec

080030fc <gos_kernelTaskBlock>:
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af02      	add	r7, sp, #8
 8003102:	4603      	mov	r3, r0
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskBlockResult = GOS_ERROR;
 8003108:	23ae      	movs	r3, #174	; 0xae
 800310a:	75fb      	strb	r3, [r7, #23]
    u32_t        taskIndex       = 0u;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
    GOS_ATOMIC_ENTER
 8003110:	4b59      	ldr	r3, [pc, #356]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	b2da      	uxtb	r2, r3
 8003118:	4b57      	ldr	r3, [pc, #348]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	b672      	cpsid	i
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312c:	f240 8090 	bls.w	8003250 <gos_kernelTaskBlock+0x154>
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	f248 0223 	movw	r2, #32803	; 0x8023
 8003136:	4293      	cmp	r3, r2
 8003138:	f200 808a 	bhi.w	8003250 <gos_kernelTaskBlock+0x154>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003142:	613b      	str	r3, [r7, #16]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <gos_kernelTaskBlock+0x180>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a4d      	ldr	r2, [pc, #308]	; (8003280 <gos_kernelTaskBlock+0x184>)
 800314a:	216e      	movs	r1, #110	; 0x6e
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3308      	adds	r3, #8
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b21b      	sxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	db08      	blt.n	800316e <gos_kernelTaskBlock+0x72>
            currentTaskIndex == taskIndex || inIsr > 0)
 800315c:	4b47      	ldr	r3, [pc, #284]	; (800327c <gos_kernelTaskBlock+0x180>)
 800315e:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	429a      	cmp	r2, r3
 8003164:	d003      	beq.n	800316e <gos_kernelTaskBlock+0x72>
            currentTaskIndex == taskIndex || inIsr > 0)
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <gos_kernelTaskBlock+0x188>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d049      	beq.n	8003202 <gos_kernelTaskBlock+0x106>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800316e:	4a44      	ldr	r2, [pc, #272]	; (8003280 <gos_kernelTaskBlock+0x184>)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	216e      	movs	r1, #110	; 0x6e
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3304      	adds	r3, #4
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b0a      	cmp	r3, #10
 8003180:	d13c      	bne.n	80031fc <gos_kernelTaskBlock+0x100>
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 8003182:	4a3f      	ldr	r2, [pc, #252]	; (8003280 <gos_kernelTaskBlock+0x184>)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	216e      	movs	r1, #110	; 0x6e
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3304      	adds	r3, #4
 8003190:	2219      	movs	r2, #25
 8003192:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 8003194:	4a3a      	ldr	r2, [pc, #232]	; (8003280 <gos_kernelTaskBlock+0x184>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	216e      	movs	r1, #110	; 0x6e
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3338      	adds	r3, #56	; 0x38
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 80031a6:	4a36      	ldr	r2, [pc, #216]	; (8003280 <gos_kernelTaskBlock+0x184>)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	216e      	movs	r1, #110	; 0x6e
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	333c      	adds	r3, #60	; 0x3c
 80031b4:	2200      	movs	r2, #0
 80031b6:	801a      	strh	r2, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	805a      	strh	r2, [r3, #2]
                taskBlockResult = GOS_SUCCESS;
 80031bc:	2355      	movs	r3, #85	; 0x55
 80031be:	75fb      	strb	r3, [r7, #23]
                GOS_ATOMIC_EXIT
 80031c0:	b662      	cpsie	i
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <gos_kernelTaskBlock+0xda>
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b29      	ldr	r3, [pc, #164]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 80031d4:	701a      	strb	r2, [r3, #0]
                if (currentTaskIndex == taskIndex)
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <gos_kernelTaskBlock+0x180>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d136      	bne.n	800324e <gos_kernelTaskBlock+0x152>
 80031e0:	2309      	movs	r3, #9
 80031e2:	73fb      	strb	r3, [r7, #15]
    gos_ported_reschedule(privilege);
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b16      	cmp	r3, #22
 80031e8:	d106      	bne.n	80031f8 <gos_kernelTaskBlock+0xfc>
 80031ea:	4b27      	ldr	r3, [pc, #156]	; (8003288 <gos_kernelTaskBlock+0x18c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a26      	ldr	r2, [pc, #152]	; (8003288 <gos_kernelTaskBlock+0x18c>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6013      	str	r3, [r2, #0]
}
 80031f6:	e003      	b.n	8003200 <gos_kernelTaskBlock+0x104>
    gos_ported_reschedule(privilege);
 80031f8:	dfff      	svc	255	; 0xff
}
 80031fa:	e001      	b.n	8003200 <gos_kernelTaskBlock+0x104>
                GOS_NOP;
 80031fc:	bf00      	nop
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80031fe:	e026      	b.n	800324e <gos_kernelTaskBlock+0x152>
 8003200:	e025      	b.n	800324e <gos_kernelTaskBlock+0x152>
            GOS_ATOMIC_EXIT
 8003202:	b662      	cpsie	i
 8003204:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <gos_kernelTaskBlock+0x11c>
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	3b01      	subs	r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 8003216:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <gos_kernelTaskBlock+0x180>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	226e      	movs	r2, #110	; 0x6e
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	3308      	adds	r3, #8
 8003224:	4a16      	ldr	r2, [pc, #88]	; (8003280 <gos_kernelTaskBlock+0x184>)
 8003226:	4413      	add	r3, r2
 8003228:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	216e      	movs	r1, #110	; 0x6e
 800322e:	fb01 f202 	mul.w	r2, r1, r2
 8003232:	3208      	adds	r2, #8
 8003234:	4912      	ldr	r1, [pc, #72]	; (8003280 <gos_kernelTaskBlock+0x184>)
 8003236:	440a      	add	r2, r1
 8003238:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 800323a:	9201      	str	r2, [sp, #4]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <gos_kernelTaskBlock+0x190>)
 8003240:	f240 22ff 	movw	r2, #767	; 0x2ff
 8003244:	4912      	ldr	r1, [pc, #72]	; (8003290 <gos_kernelTaskBlock+0x194>)
 8003246:	2034      	movs	r0, #52	; 0x34
 8003248:	f002 f83c 	bl	80052c4 <gos_errorHandler>
 800324c:	e000      	b.n	8003250 <gos_kernelTaskBlock+0x154>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800324e:	bf00      	nop
    if (taskBlockResult != GOS_SUCCESS)
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b55      	cmp	r3, #85	; 0x55
 8003254:	d00a      	beq.n	800326c <gos_kernelTaskBlock+0x170>
        GOS_ATOMIC_EXIT
 8003256:	b662      	cpsie	i
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <gos_kernelTaskBlock+0x170>
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	3b01      	subs	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <gos_kernelTaskBlock+0x17c>)
 800326a:	701a      	strb	r2, [r3, #0]
    return taskBlockResult;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200018fa 	.word	0x200018fa
 800327c:	20001900 	.word	0x20001900
 8003280:	200002c4 	.word	0x200002c4
 8003284:	200018fb 	.word	0x200018fb
 8003288:	e000ed04 	.word	0xe000ed04
 800328c:	0800829c 	.word	0x0800829c
 8003290:	08009504 	.word	0x08009504

08003294 <gos_kernelTaskUnblock>:
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af02      	add	r7, sp, #8
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskUnblockResult = GOS_ERROR;
 800329e:	23ae      	movs	r3, #174	; 0xae
 80032a0:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80032a6:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <gos_kernelTaskUnblock+0x13c>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	3301      	adds	r3, #1
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <gos_kernelTaskUnblock+0x13c>)
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	b672      	cpsid	i
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c2:	d975      	bls.n	80033b0 <gos_kernelTaskUnblock+0x11c>
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	f248 0223 	movw	r2, #32803	; 0x8023
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d870      	bhi.n	80033b0 <gos_kernelTaskUnblock+0x11c>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80032d4:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <gos_kernelTaskUnblock+0x140>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <gos_kernelTaskUnblock+0x144>)
 80032dc:	216e      	movs	r1, #110	; 0x6e
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3308      	adds	r3, #8
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b21b      	sxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db03      	blt.n	80032f6 <gos_kernelTaskUnblock+0x62>
            inIsr > 0)
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <gos_kernelTaskUnblock+0x148>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d035      	beq.n	8003362 <gos_kernelTaskUnblock+0xce>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80032f6:	4a38      	ldr	r2, [pc, #224]	; (80033d8 <gos_kernelTaskUnblock+0x144>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	216e      	movs	r1, #110	; 0x6e
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	3304      	adds	r3, #4
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b19      	cmp	r3, #25
 8003308:	d10b      	bne.n	8003322 <gos_kernelTaskUnblock+0x8e>
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800330a:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <gos_kernelTaskUnblock+0x144>)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	216e      	movs	r1, #110	; 0x6e
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	220a      	movs	r2, #10
 800331a:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 800331c:	2355      	movs	r3, #85	; 0x55
 800331e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8003320:	e045      	b.n	80033ae <gos_kernelTaskUnblock+0x11a>
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8003322:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <gos_kernelTaskUnblock+0x144>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	216e      	movs	r1, #110	; 0x6e
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b05      	cmp	r3, #5
 8003334:	d13b      	bne.n	80033ae <gos_kernelTaskUnblock+0x11a>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 8003336:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <gos_kernelTaskUnblock+0x144>)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	216e      	movs	r1, #110	; 0x6e
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3305      	adds	r3, #5
 8003344:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8003346:	2b19      	cmp	r3, #25
 8003348:	d131      	bne.n	80033ae <gos_kernelTaskUnblock+0x11a>
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <gos_kernelTaskUnblock+0x144>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	216e      	movs	r1, #110	; 0x6e
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3305      	adds	r3, #5
 8003358:	220a      	movs	r2, #10
 800335a:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 800335c:	2355      	movs	r3, #85	; 0x55
 800335e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8003360:	e025      	b.n	80033ae <gos_kernelTaskUnblock+0x11a>
            GOS_ATOMIC_EXIT
 8003362:	b662      	cpsie	i
 8003364:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <gos_kernelTaskUnblock+0x13c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <gos_kernelTaskUnblock+0xe4>
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <gos_kernelTaskUnblock+0x13c>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	3b01      	subs	r3, #1
 8003372:	b2da      	uxtb	r2, r3
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <gos_kernelTaskUnblock+0x13c>)
 8003376:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <gos_kernelTaskUnblock+0x140>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	226e      	movs	r2, #110	; 0x6e
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	3308      	adds	r3, #8
 8003384:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <gos_kernelTaskUnblock+0x144>)
 8003386:	4413      	add	r3, r2
 8003388:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	216e      	movs	r1, #110	; 0x6e
 800338e:	fb01 f202 	mul.w	r2, r1, r2
 8003392:	3208      	adds	r2, #8
 8003394:	4910      	ldr	r1, [pc, #64]	; (80033d8 <gos_kernelTaskUnblock+0x144>)
 8003396:	440a      	add	r2, r1
 8003398:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 800339a:	9201      	str	r2, [sp, #4]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <gos_kernelTaskUnblock+0x14c>)
 80033a0:	f240 3233 	movw	r2, #819	; 0x333
 80033a4:	490f      	ldr	r1, [pc, #60]	; (80033e4 <gos_kernelTaskUnblock+0x150>)
 80033a6:	2034      	movs	r0, #52	; 0x34
 80033a8:	f001 ff8c 	bl	80052c4 <gos_errorHandler>
 80033ac:	e000      	b.n	80033b0 <gos_kernelTaskUnblock+0x11c>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80033ae:	bf00      	nop
    GOS_ATOMIC_EXIT
 80033b0:	b662      	cpsie	i
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <gos_kernelTaskUnblock+0x13c>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <gos_kernelTaskUnblock+0x132>
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <gos_kernelTaskUnblock+0x13c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	3b01      	subs	r3, #1
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <gos_kernelTaskUnblock+0x13c>)
 80033c4:	701a      	strb	r2, [r3, #0]
    return taskUnblockResult;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200018fa 	.word	0x200018fa
 80033d4:	20001900 	.word	0x20001900
 80033d8:	200002c4 	.word	0x200002c4
 80033dc:	200018fb 	.word	0x200018fb
 80033e0:	080082c4 	.word	0x080082c4
 80033e4:	08009518 	.word	0x08009518

080033e8 <gos_kernelTaskDelete>:
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	4603      	mov	r3, r0
 80033f0:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskDeleteResult = GOS_ERROR;
 80033f2:	23ae      	movs	r3, #174	; 0xae
 80033f4:	75fb      	strb	r3, [r7, #23]
    u32_t        taskIndex         = 0u;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
    GOS_ATOMIC_ENTER
 80033fa:	4b6c      	ldr	r3, [pc, #432]	; (80035ac <gos_kernelTaskDelete+0x1c4>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <gos_kernelTaskDelete+0x1c4>)
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	b672      	cpsid	i
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003416:	f240 80a2 	bls.w	800355e <gos_kernelTaskDelete+0x176>
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	f248 0223 	movw	r2, #32803	; 0x8023
 8003420:	4293      	cmp	r3, r2
 8003422:	f200 809c 	bhi.w	800355e <gos_kernelTaskDelete+0x176>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800342c:	613b      	str	r3, [r7, #16]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800342e:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a60      	ldr	r2, [pc, #384]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 8003434:	216e      	movs	r1, #110	; 0x6e
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	3308      	adds	r3, #8
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b21b      	sxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	db08      	blt.n	8003458 <gos_kernelTaskDelete+0x70>
            currentTaskIndex == taskIndex || inIsr > 0)
 8003446:	4b5a      	ldr	r3, [pc, #360]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 8003448:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	429a      	cmp	r2, r3
 800344e:	d003      	beq.n	8003458 <gos_kernelTaskDelete+0x70>
            currentTaskIndex == taskIndex || inIsr > 0)
 8003450:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <gos_kernelTaskDelete+0x1d0>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05d      	beq.n	8003514 <gos_kernelTaskDelete+0x12c>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8003458:	4a56      	ldr	r2, [pc, #344]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	216e      	movs	r1, #110	; 0x6e
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b0d      	cmp	r3, #13
 800346a:	d078      	beq.n	800355e <gos_kernelTaskDelete+0x176>
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 800346c:	4a51      	ldr	r2, [pc, #324]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	216e      	movs	r1, #110	; 0x6e
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	220d      	movs	r2, #13
 800347c:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 800347e:	2355      	movs	r3, #85	; 0x55
 8003480:	75fb      	strb	r3, [r7, #23]
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 8003482:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a4b      	ldr	r2, [pc, #300]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 8003488:	216e      	movs	r1, #110	; 0x6e
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3308      	adds	r3, #8
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003498:	2b00      	cmp	r3, #0
 800349a:	d133      	bne.n	8003504 <gos_kernelTaskDelete+0x11c>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 800349c:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a44      	ldr	r2, [pc, #272]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 80034a2:	216e      	movs	r1, #110	; 0x6e
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3308      	adds	r3, #8
 80034ac:	881a      	ldrh	r2, [r3, #0]
 80034ae:	4b40      	ldr	r3, [pc, #256]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b6:	b290      	uxth	r0, r2
 80034b8:	4a3e      	ldr	r2, [pc, #248]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 80034ba:	216e      	movs	r1, #110	; 0x6e
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3308      	adds	r3, #8
 80034c4:	4602      	mov	r2, r0
 80034c6:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 80034c8:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <gos_kernelTaskDelete+0x1d4>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 f939 	bl	8006748 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a36      	ldr	r2, [pc, #216]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 80034dc:	216e      	movs	r1, #110	; 0x6e
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3308      	adds	r3, #8
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f0:	b290      	uxth	r0, r2
 80034f2:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 80034f4:	216e      	movs	r1, #110	; 0x6e
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3308      	adds	r3, #8
 80034fe:	4602      	mov	r2, r0
 8003500:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8003502:	e02c      	b.n	800355e <gos_kernelTaskDelete+0x176>
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <gos_kernelTaskDelete+0x1d4>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f003 f91b 	bl	8006748 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8003512:	e024      	b.n	800355e <gos_kernelTaskDelete+0x176>
            GOS_ATOMIC_EXIT
 8003514:	b662      	cpsie	i
 8003516:	4b25      	ldr	r3, [pc, #148]	; (80035ac <gos_kernelTaskDelete+0x1c4>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <gos_kernelTaskDelete+0x142>
 800351e:	4b23      	ldr	r3, [pc, #140]	; (80035ac <gos_kernelTaskDelete+0x1c4>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	3b01      	subs	r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4b21      	ldr	r3, [pc, #132]	; (80035ac <gos_kernelTaskDelete+0x1c4>)
 8003528:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	226e      	movs	r2, #110	; 0x6e
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	3308      	adds	r3, #8
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 8003538:	4413      	add	r3, r2
 800353a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	216e      	movs	r1, #110	; 0x6e
 8003540:	fb01 f202 	mul.w	r2, r1, r2
 8003544:	3208      	adds	r2, #8
 8003546:	491b      	ldr	r1, [pc, #108]	; (80035b4 <gos_kernelTaskDelete+0x1cc>)
 8003548:	440a      	add	r2, r1
 800354a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 800354c:	9201      	str	r2, [sp, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <gos_kernelTaskDelete+0x1d8>)
 8003552:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8003556:	491b      	ldr	r1, [pc, #108]	; (80035c4 <gos_kernelTaskDelete+0x1dc>)
 8003558:	2034      	movs	r0, #52	; 0x34
 800355a:	f001 feb3 	bl	80052c4 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 800355e:	b662      	cpsie	i
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <gos_kernelTaskDelete+0x1c4>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <gos_kernelTaskDelete+0x18c>
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <gos_kernelTaskDelete+0x1c4>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <gos_kernelTaskDelete+0x1c4>)
 8003572:	701a      	strb	r2, [r3, #0]
    if (taskDeleteResult == GOS_SUCCESS)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b55      	cmp	r3, #85	; 0x55
 8003578:	d112      	bne.n	80035a0 <gos_kernelTaskDelete+0x1b8>
        if (currentTaskIndex == taskIndex)
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <gos_kernelTaskDelete+0x1c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d10d      	bne.n	80035a0 <gos_kernelTaskDelete+0x1b8>
 8003584:	2309      	movs	r3, #9
 8003586:	73fb      	strb	r3, [r7, #15]
    gos_ported_reschedule(privilege);
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b16      	cmp	r3, #22
 800358c:	d106      	bne.n	800359c <gos_kernelTaskDelete+0x1b4>
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <gos_kernelTaskDelete+0x1e0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0d      	ldr	r2, [pc, #52]	; (80035c8 <gos_kernelTaskDelete+0x1e0>)
 8003594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	e000      	b.n	800359e <gos_kernelTaskDelete+0x1b6>
    gos_ported_reschedule(privilege);
 800359c:	dfff      	svc	255	; 0xff
}
 800359e:	bf00      	nop
    return taskDeleteResult;
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200018fa 	.word	0x200018fa
 80035b0:	20001900 	.word	0x20001900
 80035b4:	200002c4 	.word	0x200002c4
 80035b8:	200018fb 	.word	0x200018fb
 80035bc:	200018f9 	.word	0x200018f9
 80035c0:	080082ec 	.word	0x080082ec
 80035c4:	08009530 	.word	0x08009530
 80035c8:	e000ed04 	.word	0xe000ed04

080035cc <gos_kernelTaskSetPriority>:
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	4603      	mov	r3, r0
 80035d4:	460a      	mov	r2, r1
 80035d6:	80fb      	strh	r3, [r7, #6]
 80035d8:	4613      	mov	r3, r2
 80035da:	717b      	strb	r3, [r7, #5]
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80035dc:	23ae      	movs	r3, #174	; 0xae
 80035de:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80035e4:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <gos_kernelTaskSetPriority+0xf4>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <gos_kernelTaskSetPriority+0xf4>)
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	b672      	cpsid	i
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003600:	d94d      	bls.n	800369e <gos_kernelTaskSetPriority+0xd2>
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	f248 0223 	movw	r2, #32803	; 0x8023
 8003608:	4293      	cmp	r3, r2
 800360a:	d848      	bhi.n	800369e <gos_kernelTaskSetPriority+0xd2>
 800360c:	797b      	ldrb	r3, [r7, #5]
 800360e:	2bff      	cmp	r3, #255	; 0xff
 8003610:	d045      	beq.n	800369e <gos_kernelTaskSetPriority+0xd2>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003618:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800361a:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <gos_kernelTaskSetPriority+0xf8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <gos_kernelTaskSetPriority+0xfc>)
 8003620:	216e      	movs	r1, #110	; 0x6e
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3308      	adds	r3, #8
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <gos_kernelTaskSetPriority+0x70>
            inIsr > 0)
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <gos_kernelTaskSetPriority+0x100>)
 8003636:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <gos_kernelTaskSetPriority+0x88>
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 800363c:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <gos_kernelTaskSetPriority+0xfc>)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	216e      	movs	r1, #110	; 0x6e
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3306      	adds	r3, #6
 800364a:	797a      	ldrb	r2, [r7, #5]
 800364c:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 800364e:	2355      	movs	r3, #85	; 0x55
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e024      	b.n	800369e <gos_kernelTaskSetPriority+0xd2>
            GOS_ATOMIC_EXIT
 8003654:	b662      	cpsie	i
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <gos_kernelTaskSetPriority+0xf4>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <gos_kernelTaskSetPriority+0x9e>
 800365e:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <gos_kernelTaskSetPriority+0xf4>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	3b01      	subs	r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <gos_kernelTaskSetPriority+0xf4>)
 8003668:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <gos_kernelTaskSetPriority+0xf8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	226e      	movs	r2, #110	; 0x6e
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	3308      	adds	r3, #8
 8003676:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <gos_kernelTaskSetPriority+0xfc>)
 8003678:	4413      	add	r3, r2
 800367a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	216e      	movs	r1, #110	; 0x6e
 8003680:	fb01 f202 	mul.w	r2, r1, r2
 8003684:	3208      	adds	r2, #8
 8003686:	4910      	ldr	r1, [pc, #64]	; (80036c8 <gos_kernelTaskSetPriority+0xfc>)
 8003688:	440a      	add	r2, r1
 800368a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 800368c:	9201      	str	r2, [sp, #4]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <gos_kernelTaskSetPriority+0x104>)
 8003692:	f240 329f 	movw	r2, #927	; 0x39f
 8003696:	490f      	ldr	r1, [pc, #60]	; (80036d4 <gos_kernelTaskSetPriority+0x108>)
 8003698:	2034      	movs	r0, #52	; 0x34
 800369a:	f001 fe13 	bl	80052c4 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 800369e:	b662      	cpsie	i
 80036a0:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <gos_kernelTaskSetPriority+0xf4>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <gos_kernelTaskSetPriority+0xe8>
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <gos_kernelTaskSetPriority+0xf4>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <gos_kernelTaskSetPriority+0xf4>)
 80036b2:	701a      	strb	r2, [r3, #0]
    return taskSetPriorityResult;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200018fa 	.word	0x200018fa
 80036c4:	20001900 	.word	0x20001900
 80036c8:	200002c4 	.word	0x200002c4
 80036cc:	200018fb 	.word	0x200018fb
 80036d0:	08008314 	.word	0x08008314
 80036d4:	08009548 	.word	0x08009548

080036d8 <gos_kernelTaskSetOriginalPriority>:
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	4603      	mov	r3, r0
 80036e0:	460a      	mov	r2, r1
 80036e2:	80fb      	strh	r3, [r7, #6]
 80036e4:	4613      	mov	r3, r2
 80036e6:	717b      	strb	r3, [r7, #5]
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80036e8:	23ae      	movs	r3, #174	; 0xae
 80036ea:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80036f0:	4b36      	ldr	r3, [pc, #216]	; (80037cc <gos_kernelTaskSetOriginalPriority+0xf4>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b34      	ldr	r3, [pc, #208]	; (80037cc <gos_kernelTaskSetOriginalPriority+0xf4>)
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	b672      	cpsid	i
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370c:	d94d      	bls.n	80037aa <gos_kernelTaskSetOriginalPriority+0xd2>
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	f248 0223 	movw	r2, #32803	; 0x8023
 8003714:	4293      	cmp	r3, r2
 8003716:	d848      	bhi.n	80037aa <gos_kernelTaskSetOriginalPriority+0xd2>
 8003718:	797b      	ldrb	r3, [r7, #5]
 800371a:	2bff      	cmp	r3, #255	; 0xff
 800371c:	d045      	beq.n	80037aa <gos_kernelTaskSetOriginalPriority+0xd2>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003724:	60bb      	str	r3, [r7, #8]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8003726:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <gos_kernelTaskSetOriginalPriority+0xf8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <gos_kernelTaskSetOriginalPriority+0xfc>)
 800372c:	216e      	movs	r1, #110	; 0x6e
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3308      	adds	r3, #8
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <gos_kernelTaskSetOriginalPriority+0x70>
            inIsr > 0)
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <gos_kernelTaskSetOriginalPriority+0x100>)
 8003742:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <gos_kernelTaskSetOriginalPriority+0x88>
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 8003748:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <gos_kernelTaskSetOriginalPriority+0xfc>)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	216e      	movs	r1, #110	; 0x6e
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	3307      	adds	r3, #7
 8003756:	797a      	ldrb	r2, [r7, #5]
 8003758:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 800375a:	2355      	movs	r3, #85	; 0x55
 800375c:	73fb      	strb	r3, [r7, #15]
 800375e:	e024      	b.n	80037aa <gos_kernelTaskSetOriginalPriority+0xd2>
            GOS_ATOMIC_EXIT
 8003760:	b662      	cpsie	i
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <gos_kernelTaskSetOriginalPriority+0xf4>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <gos_kernelTaskSetOriginalPriority+0x9e>
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <gos_kernelTaskSetOriginalPriority+0xf4>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	3b01      	subs	r3, #1
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <gos_kernelTaskSetOriginalPriority+0xf4>)
 8003774:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskName,
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <gos_kernelTaskSetOriginalPriority+0xf8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	226e      	movs	r2, #110	; 0x6e
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	3308      	adds	r3, #8
 8003782:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <gos_kernelTaskSetOriginalPriority+0xfc>)
 8003784:	4413      	add	r3, r2
 8003786:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	216e      	movs	r1, #110	; 0x6e
 800378c:	fb01 f202 	mul.w	r2, r1, r2
 8003790:	3208      	adds	r2, #8
 8003792:	4910      	ldr	r1, [pc, #64]	; (80037d4 <gos_kernelTaskSetOriginalPriority+0xfc>)
 8003794:	440a      	add	r2, r1
 8003796:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 8003798:	9201      	str	r2, [sp, #4]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <gos_kernelTaskSetOriginalPriority+0x104>)
 800379e:	f240 32ca 	movw	r2, #970	; 0x3ca
 80037a2:	490f      	ldr	r1, [pc, #60]	; (80037e0 <gos_kernelTaskSetOriginalPriority+0x108>)
 80037a4:	2034      	movs	r0, #52	; 0x34
 80037a6:	f001 fd8d 	bl	80052c4 <gos_errorHandler>
    GOS_ATOMIC_EXIT
 80037aa:	b662      	cpsie	i
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <gos_kernelTaskSetOriginalPriority+0xf4>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <gos_kernelTaskSetOriginalPriority+0xe8>
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <gos_kernelTaskSetOriginalPriority+0xf4>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <gos_kernelTaskSetOriginalPriority+0xf4>)
 80037be:	701a      	strb	r2, [r3, #0]
    return taskSetPriorityResult;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200018fa 	.word	0x200018fa
 80037d0:	20001900 	.word	0x20001900
 80037d4:	200002c4 	.word	0x200002c4
 80037d8:	200018fb 	.word	0x200018fb
 80037dc:	08008314 	.word	0x08008314
 80037e0:	08009564 	.word	0x08009564

080037e4 <gos_kernelTaskGetPriority>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 80037f0:	23ae      	movs	r3, #174	; 0xae
 80037f2:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <gos_kernelTaskGetPriority+0x88>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <gos_kernelTaskGetPriority+0x88>)
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	b672      	cpsid	i
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003814:	d917      	bls.n	8003846 <gos_kernelTaskGetPriority+0x62>
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	f248 0223 	movw	r2, #32803	; 0x8023
 800381c:	4293      	cmp	r3, r2
 800381e:	d812      	bhi.n	8003846 <gos_kernelTaskGetPriority+0x62>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00f      	beq.n	8003846 <gos_kernelTaskGetPriority+0x62>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800382c:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <gos_kernelTaskGetPriority+0x8c>)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	216e      	movs	r1, #110	; 0x6e
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3306      	adds	r3, #6
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 8003842:	2355      	movs	r3, #85	; 0x55
 8003844:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8003846:	b662      	cpsie	i
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <gos_kernelTaskGetPriority+0x88>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <gos_kernelTaskGetPriority+0x78>
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <gos_kernelTaskGetPriority+0x88>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	b2da      	uxtb	r2, r3
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <gos_kernelTaskGetPriority+0x88>)
 800385a:	701a      	strb	r2, [r3, #0]
    return taskGetPriorityResult;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	200018fa 	.word	0x200018fa
 8003870:	200002c4 	.word	0x200002c4

08003874 <gos_kernelTaskGetOriginalPriority>:
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 8003880:	23ae      	movs	r3, #174	; 0xae
 8003882:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <gos_kernelTaskGetOriginalPriority+0x88>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	b2da      	uxtb	r2, r3
 8003890:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <gos_kernelTaskGetOriginalPriority+0x88>)
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	b672      	cpsid	i
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a4:	d917      	bls.n	80038d6 <gos_kernelTaskGetOriginalPriority+0x62>
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	f248 0223 	movw	r2, #32803	; 0x8023
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d812      	bhi.n	80038d6 <gos_kernelTaskGetOriginalPriority+0x62>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00f      	beq.n	80038d6 <gos_kernelTaskGetOriginalPriority+0x62>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80038bc:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskOriginalPriority;
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <gos_kernelTaskGetOriginalPriority+0x8c>)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	216e      	movs	r1, #110	; 0x6e
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3307      	adds	r3, #7
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 80038d2:	2355      	movs	r3, #85	; 0x55
 80038d4:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 80038d6:	b662      	cpsie	i
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <gos_kernelTaskGetOriginalPriority+0x88>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <gos_kernelTaskGetOriginalPriority+0x78>
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <gos_kernelTaskGetOriginalPriority+0x88>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <gos_kernelTaskGetOriginalPriority+0x88>)
 80038ea:	701a      	strb	r2, [r3, #0]
    return taskGetPriorityResult;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	200018fa 	.word	0x200018fa
 8003900:	200002c4 	.word	0x200002c4

08003904 <gos_kernelTaskAddPrivilege>:
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	460a      	mov	r2, r1
 800390e:	80fb      	strh	r3, [r7, #6]
 8003910:	4613      	mov	r3, r2
 8003912:	80bb      	strh	r3, [r7, #4]
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 8003914:	23ae      	movs	r3, #174	; 0xae
 8003916:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 800391c:	4b1f      	ldr	r3, [pc, #124]	; (800399c <gos_kernelTaskAddPrivilege+0x98>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <gos_kernelTaskAddPrivilege+0x98>)
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	b672      	cpsid	i
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003938:	d91e      	bls.n	8003978 <gos_kernelTaskAddPrivilege+0x74>
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	f248 0223 	movw	r2, #32803	; 0x8023
 8003940:	4293      	cmp	r3, r2
 8003942:	d819      	bhi.n	8003978 <gos_kernelTaskAddPrivilege+0x74>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800394a:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <gos_kernelTaskAddPrivilege+0x9c>)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	216e      	movs	r1, #110	; 0x6e
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3308      	adds	r3, #8
 800395a:	881a      	ldrh	r2, [r3, #0]
 800395c:	88bb      	ldrh	r3, [r7, #4]
 800395e:	4313      	orrs	r3, r2
 8003960:	b298      	uxth	r0, r3
 8003962:	4a0f      	ldr	r2, [pc, #60]	; (80039a0 <gos_kernelTaskAddPrivilege+0x9c>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	216e      	movs	r1, #110	; 0x6e
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	3308      	adds	r3, #8
 8003970:	4602      	mov	r2, r0
 8003972:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 8003974:	2355      	movs	r3, #85	; 0x55
 8003976:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8003978:	b662      	cpsie	i
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <gos_kernelTaskAddPrivilege+0x98>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <gos_kernelTaskAddPrivilege+0x8a>
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <gos_kernelTaskAddPrivilege+0x98>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	3b01      	subs	r3, #1
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <gos_kernelTaskAddPrivilege+0x98>)
 800398c:	701a      	strb	r2, [r3, #0]
    return taskAddPrivilegeResult;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	200018fa 	.word	0x200018fa
 80039a0:	200002c4 	.word	0x200002c4

080039a4 <gos_kernelTaskRemovePrivilege>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	460a      	mov	r2, r1
 80039ae:	80fb      	strh	r3, [r7, #6]
 80039b0:	4613      	mov	r3, r2
 80039b2:	80bb      	strh	r3, [r7, #4]
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 80039b4:	23ae      	movs	r3, #174	; 0xae
 80039b6:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 80039bc:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <gos_kernelTaskRemovePrivilege+0xa4>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <gos_kernelTaskRemovePrivilege+0xa4>)
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	b672      	cpsid	i
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d8:	d923      	bls.n	8003a22 <gos_kernelTaskRemovePrivilege+0x7e>
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	f248 0223 	movw	r2, #32803	; 0x8023
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d81e      	bhi.n	8003a22 <gos_kernelTaskRemovePrivilege+0x7e>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80039ea:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 80039ec:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <gos_kernelTaskRemovePrivilege+0xa8>)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	216e      	movs	r1, #110	; 0x6e
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3308      	adds	r3, #8
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b21a      	sxth	r2, r3
 80039fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	b21b      	sxth	r3, r3
 8003a06:	4013      	ands	r3, r2
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	b298      	uxth	r0, r3
 8003a0c:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <gos_kernelTaskRemovePrivilege+0xa8>)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	216e      	movs	r1, #110	; 0x6e
 8003a12:	fb01 f303 	mul.w	r3, r1, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	3308      	adds	r3, #8
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 8003a1e:	2355      	movs	r3, #85	; 0x55
 8003a20:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8003a22:	b662      	cpsie	i
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <gos_kernelTaskRemovePrivilege+0xa4>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <gos_kernelTaskRemovePrivilege+0x94>
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <gos_kernelTaskRemovePrivilege+0xa4>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <gos_kernelTaskRemovePrivilege+0xa4>)
 8003a36:	701a      	strb	r2, [r3, #0]
    return taskRemovePrivilegeResult;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	200018fa 	.word	0x200018fa
 8003a4c:	200002c4 	.word	0x200002c4

08003a50 <gos_kernelTaskSetPrivileges>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	460a      	mov	r2, r1
 8003a5a:	80fb      	strh	r3, [r7, #6]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80bb      	strh	r3, [r7, #4]
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 8003a60:	23ae      	movs	r3, #174	; 0xae
 8003a62:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <gos_kernelTaskSetPrivileges+0x84>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <gos_kernelTaskSetPrivileges+0x84>)
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	b672      	cpsid	i
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a84:	d913      	bls.n	8003aae <gos_kernelTaskSetPrivileges+0x5e>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	f248 0223 	movw	r2, #32803	; 0x8023
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d80e      	bhi.n	8003aae <gos_kernelTaskSetPrivileges+0x5e>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003a96:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 8003a98:	4a0f      	ldr	r2, [pc, #60]	; (8003ad8 <gos_kernelTaskSetPrivileges+0x88>)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	216e      	movs	r1, #110	; 0x6e
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	88ba      	ldrh	r2, [r7, #4]
 8003aa8:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 8003aaa:	2355      	movs	r3, #85	; 0x55
 8003aac:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8003aae:	b662      	cpsie	i
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <gos_kernelTaskSetPrivileges+0x84>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <gos_kernelTaskSetPrivileges+0x74>
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <gos_kernelTaskSetPrivileges+0x84>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <gos_kernelTaskSetPrivileges+0x84>)
 8003ac2:	701a      	strb	r2, [r3, #0]
    return taskSetPrivilegesResult;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	200018fa 	.word	0x200018fa
 8003ad8:	200002c4 	.word	0x200002c4

08003adc <gos_kernelTaskGetPrivileges>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 8003ae8:	23ae      	movs	r3, #174	; 0xae
 8003aea:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <gos_kernelTaskGetPrivileges+0x88>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <gos_kernelTaskGetPrivileges+0x88>)
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	b672      	cpsid	i
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0c:	d917      	bls.n	8003b3e <gos_kernelTaskGetPrivileges+0x62>
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	f248 0223 	movw	r2, #32803	; 0x8023
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d812      	bhi.n	8003b3e <gos_kernelTaskGetPrivileges+0x62>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00f      	beq.n	8003b3e <gos_kernelTaskGetPrivileges+0x62>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003b24:	60bb      	str	r3, [r7, #8]
        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 8003b26:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <gos_kernelTaskGetPrivileges+0x8c>)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	216e      	movs	r1, #110	; 0x6e
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	4413      	add	r3, r2
 8003b32:	3308      	adds	r3, #8
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 8003b3a:	2355      	movs	r3, #85	; 0x55
 8003b3c:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8003b3e:	b662      	cpsie	i
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <gos_kernelTaskGetPrivileges+0x88>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <gos_kernelTaskGetPrivileges+0x78>
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <gos_kernelTaskGetPrivileges+0x88>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <gos_kernelTaskGetPrivileges+0x88>)
 8003b52:	701a      	strb	r2, [r3, #0]
    return taskGetPrivilegesResult;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	200018fa 	.word	0x200018fa
 8003b68:	200002c4 	.word	0x200002c4

08003b6c <gos_kernelTaskGetId>:
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
    gos_result_t taskGetIdResult = GOS_ERROR;
 8003b76:	23ae      	movs	r3, #174	; 0xae
 8003b78:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	e01e      	b.n	8003bc2 <gos_kernelTaskGetId+0x56>
        if (strcmp(taskName, taskDescriptors[taskIndex].taskName) == 0u)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	226e      	movs	r2, #110	; 0x6e
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <gos_kernelTaskGetId+0x6c>)
 8003b90:	4413      	add	r3, r2
 8003b92:	3302      	adds	r3, #2
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fc fb3a 	bl	8000210 <strcmp>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10c      	bne.n	8003bbc <gos_kernelTaskGetId+0x50>
            *taskId = taskDescriptors[taskIndex].taskId;
 8003ba2:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <gos_kernelTaskGetId+0x6c>)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	216e      	movs	r1, #110	; 0x6e
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	332a      	adds	r3, #42	; 0x2a
 8003bb0:	881a      	ldrh	r2, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	801a      	strh	r2, [r3, #0]
            taskGetIdResult = GOS_SUCCESS;
 8003bb6:	2355      	movs	r3, #85	; 0x55
 8003bb8:	73fb      	strb	r3, [r7, #15]
            break;
 8003bba:	e008      	b.n	8003bce <gos_kernelTaskGetId+0x62>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b23      	cmp	r3, #35	; 0x23
 8003bc6:	d802      	bhi.n	8003bce <gos_kernelTaskGetId+0x62>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1da      	bne.n	8003b84 <gos_kernelTaskGetId+0x18>
    return taskGetIdResult;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	200002c4 	.word	0x200002c4

08003bdc <gos_kernelTaskGetCurrentId>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 8003be4:	23ae      	movs	r3, #174	; 0xae
 8003be6:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_ENTER
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <gos_kernelTaskGetCurrentId+0x60>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <gos_kernelTaskGetCurrentId+0x60>)
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	b672      	cpsid	i
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	f3bf 8f6f 	isb	sy
    if (taskId != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <gos_kernelTaskGetCurrentId+0x3c>
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <gos_kernelTaskGetCurrentId+0x64>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 8003c14:	2355      	movs	r3, #85	; 0x55
 8003c16:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8003c18:	b662      	cpsie	i
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <gos_kernelTaskGetCurrentId+0x60>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <gos_kernelTaskGetCurrentId+0x52>
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <gos_kernelTaskGetCurrentId+0x60>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <gos_kernelTaskGetCurrentId+0x60>)
 8003c2c:	701a      	strb	r2, [r3, #0]
    return taskGetCurrentIdResult;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	200018fa 	.word	0x200018fa
 8003c40:	20001900 	.word	0x20001900

08003c44 <gos_kernelTaskGetData>:
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	80fb      	strh	r3, [r7, #6]
    gos_result_t taskGetDataResult = GOS_ERROR;
 8003c50:	23ae      	movs	r3, #174	; 0xae
 8003c52:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
    GOS_ATOMIC_ENTER
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <gos_kernelTaskGetData+0x84>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <gos_kernelTaskGetData+0x84>)
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	b672      	cpsid	i
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	f3bf 8f6f 	isb	sy
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8003c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da18      	bge.n	8003ca8 <gos_kernelTaskGetData+0x64>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	f248 0223 	movw	r2, #32803	; 0x8023
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d813      	bhi.n	8003ca8 <gos_kernelTaskGetData+0x64>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <gos_kernelTaskGetData+0x64>
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c8c:	60bb      	str	r3, [r7, #8]
        memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	226e      	movs	r2, #110	; 0x6e
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <gos_kernelTaskGetData+0x88>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	226e      	movs	r2, #110	; 0x6e
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6838      	ldr	r0, [r7, #0]
 8003ca0:	f003 fe64 	bl	800796c <memcpy>
        taskGetDataResult = GOS_SUCCESS;
 8003ca4:	2355      	movs	r3, #85	; 0x55
 8003ca6:	73fb      	strb	r3, [r7, #15]
    GOS_ATOMIC_EXIT
 8003ca8:	b662      	cpsie	i
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <gos_kernelTaskGetData+0x84>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <gos_kernelTaskGetData+0x7a>
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <gos_kernelTaskGetData+0x84>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <gos_kernelTaskGetData+0x84>)
 8003cbc:	701a      	strb	r2, [r3, #0]
    return taskGetDataResult;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200018fa 	.word	0x200018fa
 8003ccc:	200002c4 	.word	0x200002c4

08003cd0 <gos_kernelRegisterSysTickHook>:
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
    gos_result_t hookRegisterResult = GOS_ERROR;
 8003cd8:	23ae      	movs	r3, #174	; 0xae
 8003cda:	73fb      	strb	r3, [r7, #15]
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <gos_kernelRegisterSysTickHook+0x24>
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <gos_kernelRegisterSysTickHook+0x34>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <gos_kernelRegisterSysTickHook+0x24>
        kernelSysTickHookFunction = sysTickHookFunction;
 8003cea:	4a06      	ldr	r2, [pc, #24]	; (8003d04 <gos_kernelRegisterSysTickHook+0x34>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 8003cf0:	2355      	movs	r3, #85	; 0x55
 8003cf2:	73fb      	strb	r3, [r7, #15]
    return hookRegisterResult;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20001918 	.word	0x20001918

08003d08 <SysTick_Handler>:
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
    sysTicks++;
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <SysTick_Handler+0x50>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <SysTick_Handler+0x50>)
 8003d16:	6013      	str	r3, [r2, #0]
    gos_kernelCheckTaskStack();
 8003d18:	f000 fd48 	bl	80047ac <gos_kernelCheckTaskStack>
    if (schedDisableCntr == 0u)
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <SysTick_Handler+0x54>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <SysTick_Handler+0x38>
 8003d24:	2316      	movs	r3, #22
 8003d26:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	2b16      	cmp	r3, #22
 8003d2c:	d106      	bne.n	8003d3c <SysTick_Handler+0x34>
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <SysTick_Handler+0x58>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <SysTick_Handler+0x58>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	6013      	str	r3, [r2, #0]
}
 8003d3a:	e000      	b.n	8003d3e <SysTick_Handler+0x36>
    gos_ported_reschedule(privilege);
 8003d3c:	dfff      	svc	255	; 0xff
}
 8003d3e:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <SysTick_Handler+0x5c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <SysTick_Handler+0x46>
        kernelSysTickHookFunction();
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <SysTick_Handler+0x5c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4798      	blx	r3
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200018fc 	.word	0x200018fc
 8003d5c:	200018fa 	.word	0x200018fa
 8003d60:	e000ed04 	.word	0xe000ed04
 8003d64:	20001918 	.word	0x20001918

08003d68 <gos_kernelGetSysTicks>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
    return sysTicks;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <gos_kernelGetSysTicks+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	200018fc 	.word	0x200018fc

08003d80 <gos_kernelGetCpuUsage>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <gos_kernelGetCpuUsage+0x1c>)
 8003d86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003d8a:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8003d8e:	3310      	adds	r3, #16
 8003d90:	b29b      	uxth	r3, r3
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	200002c4 	.word	0x200002c4

08003da0 <gos_kernelReset>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
    resetRequired = GOS_TRUE;
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <gos_kernelReset+0x34>)
 8003da8:	2236      	movs	r2, #54	; 0x36
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	2309      	movs	r3, #9
 8003dae:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2b16      	cmp	r3, #22
 8003db4:	d106      	bne.n	8003dc4 <gos_kernelReset+0x24>
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <gos_kernelReset+0x38>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <gos_kernelReset+0x38>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6013      	str	r3, [r2, #0]
}
 8003dc2:	e000      	b.n	8003dc6 <gos_kernelReset+0x26>
    gos_ported_reschedule(privilege);
 8003dc4:	dfff      	svc	255	; 0xff
}
 8003dc6:	bf00      	nop
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	200002c2 	.word	0x200002c2
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <gos_kernelDelayMs>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <gos_kernelDelayMs+0x34>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 8003dec:	bf00      	nop
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <gos_kernelDelayMs+0x34>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d8f5      	bhi.n	8003dee <gos_kernelDelayMs+0x12>
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	200018fc 	.word	0x200018fc

08003e14 <gos_kernelCalculateTaskCpuUsages>:
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8003e2a:	4b9f      	ldr	r3, [pc, #636]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8003e2c:	795b      	ldrb	r3, [r3, #5]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b9e      	ldr	r3, [pc, #632]	; (80040ac <gos_kernelCalculateTaskCpuUsages+0x298>)
 8003e32:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 8003e36:	4b9c      	ldr	r3, [pc, #624]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8003e38:	791b      	ldrb	r3, [r3, #4]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4b9c      	ldr	r3, [pc, #624]	; (80040b0 <gos_kernelCalculateTaskCpuUsages+0x29c>)
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8003e42:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 8003e44:	4b98      	ldr	r3, [pc, #608]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8003e46:	885b      	ldrh	r3, [r3, #2]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 8003e52:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 8003e54:	4a94      	ldr	r2, [pc, #592]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8003e56:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 8003e58:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8003e5a:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	82fb      	strh	r3, [r7, #22]
 8003e60:	e0fe      	b.n	8004060 <gos_kernelCalculateTaskCpuUsages+0x24c>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8003e62:	8afb      	ldrh	r3, [r7, #22]
 8003e64:	4a93      	ldr	r2, [pc, #588]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003e66:	216e      	movs	r1, #110	; 0x6e
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	335b      	adds	r3, #91	; 0x5b
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b8d      	ldr	r3, [pc, #564]	; (80040ac <gos_kernelCalculateTaskCpuUsages+0x298>)
 8003e76:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8003e7a:	8afb      	ldrh	r3, [r7, #22]
 8003e7c:	498d      	ldr	r1, [pc, #564]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003e7e:	206e      	movs	r0, #110	; 0x6e
 8003e80:	fb00 f303 	mul.w	r3, r0, r3
 8003e84:	440b      	add	r3, r1
 8003e86:	335a      	adds	r3, #90	; 0x5a
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <gos_kernelCalculateTaskCpuUsages+0x29c>)
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8003e92:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8003e94:	8afb      	ldrh	r3, [r7, #22]
 8003e96:	4987      	ldr	r1, [pc, #540]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003e98:	206e      	movs	r0, #110	; 0x6e
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3358      	adds	r3, #88	; 0x58
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8003eae:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 8003eb0:	8afa      	ldrh	r2, [r7, #22]
 8003eb2:	4980      	ldr	r1, [pc, #512]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003eb4:	206e      	movs	r0, #110	; 0x6e
 8003eb6:	fb00 f202 	mul.w	r2, r0, r2
 8003eba:	440a      	add	r2, r1
 8003ebc:	3256      	adds	r2, #86	; 0x56
 8003ebe:	8812      	ldrh	r2, [r2, #0]
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8003ec0:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8003ec2:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80be 	beq.w	8004048 <gos_kernelCalculateTaskCpuUsages+0x234>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ed2:	fb03 f202 	mul.w	r2, r3, r2
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003edc:	8afb      	ldrh	r3, [r7, #22]
 8003ede:	b290      	uxth	r0, r2
 8003ee0:	4a74      	ldr	r2, [pc, #464]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003ee2:	216e      	movs	r1, #110	; 0x6e
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3364      	adds	r3, #100	; 0x64
 8003eec:	4602      	mov	r2, r0
 8003eee:	801a      	strh	r2, [r3, #0]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2b36      	cmp	r3, #54	; 0x36
 8003ef4:	d004      	beq.n	8003f00 <gos_kernelCalculateTaskCpuUsages+0xec>
 8003ef6:	4b6c      	ldr	r3, [pc, #432]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8003ef8:	791b      	ldrb	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80a4 	beq.w	8004048 <gos_kernelCalculateTaskCpuUsages+0x234>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f06:	fb03 f202 	mul.w	r2, r3, r2
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f10:	8afb      	ldrh	r3, [r7, #22]
 8003f12:	b290      	uxth	r0, r2
 8003f14:	4a67      	ldr	r2, [pc, #412]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003f16:	216e      	movs	r1, #110	; 0x6e
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3362      	adds	r3, #98	; 0x62
 8003f20:	4602      	mov	r2, r0
 8003f22:	801a      	strh	r2, [r3, #0]
                        &taskDescriptors[taskIndex].taskRunTime,
 8003f24:	8afb      	ldrh	r3, [r7, #22]
                gos_runTimeAddMicroseconds(
 8003f26:	226e      	movs	r2, #110	; 0x6e
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	3348      	adds	r3, #72	; 0x48
 8003f2e:	4a61      	ldr	r2, [pc, #388]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003f30:	4413      	add	r3, r2
 8003f32:	1d98      	adds	r0, r3, #6
 8003f34:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 8003f36:	4a5f      	ldr	r2, [pc, #380]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003f38:	216e      	movs	r1, #110	; 0x6e
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	3356      	adds	r3, #86	; 0x56
 8003f42:	881b      	ldrh	r3, [r3, #0]
                gos_runTimeAddMicroseconds(
 8003f44:	461a      	mov	r2, r3
 8003f46:	2100      	movs	r1, #0
 8003f48:	f002 fe1c 	bl	8006b84 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 8003f4c:	8afb      	ldrh	r3, [r7, #22]
                gos_runTimeAddMilliseconds(
 8003f4e:	226e      	movs	r2, #110	; 0x6e
 8003f50:	fb02 f303 	mul.w	r3, r2, r3
 8003f54:	3348      	adds	r3, #72	; 0x48
 8003f56:	4a57      	ldr	r2, [pc, #348]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	1d98      	adds	r0, r3, #6
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 8003f5c:	8afb      	ldrh	r3, [r7, #22]
 8003f5e:	4a55      	ldr	r2, [pc, #340]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003f60:	216e      	movs	r1, #110	; 0x6e
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	3358      	adds	r3, #88	; 0x58
 8003f6a:	881a      	ldrh	r2, [r3, #0]
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 8003f6c:	8afb      	ldrh	r3, [r7, #22]
 8003f6e:	4951      	ldr	r1, [pc, #324]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003f70:	246e      	movs	r4, #110	; 0x6e
 8003f72:	fb04 f303 	mul.w	r3, r4, r3
 8003f76:	440b      	add	r3, r1
 8003f78:	335a      	adds	r3, #90	; 0x5a
 8003f7a:	781b      	ldrb	r3, [r3, #0]
                gos_runTimeAddMilliseconds(
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	4619      	mov	r1, r3
 8003f80:	0149      	lsls	r1, r1, #5
 8003f82:	1ac9      	subs	r1, r1, r3
 8003f84:	0089      	lsls	r1, r1, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	4619      	mov	r1, r3
 8003f92:	f002 fed1 	bl	8006d38 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	4a46      	ldr	r2, [pc, #280]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003f9a:	216e      	movs	r1, #110	; 0x6e
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	335d      	adds	r3, #93	; 0x5d
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 8003fa8:	8afb      	ldrh	r3, [r7, #22]
 8003faa:	4a42      	ldr	r2, [pc, #264]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003fac:	216e      	movs	r1, #110	; 0x6e
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	335c      	adds	r3, #92	; 0x5c
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8003fba:	8afb      	ldrh	r3, [r7, #22]
 8003fbc:	4a3d      	ldr	r2, [pc, #244]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003fbe:	216e      	movs	r1, #110	; 0x6e
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	335b      	adds	r3, #91	; 0x5b
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8003fcc:	8afb      	ldrh	r3, [r7, #22]
 8003fce:	4a39      	ldr	r2, [pc, #228]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003fd0:	216e      	movs	r1, #110	; 0x6e
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	335a      	adds	r3, #90	; 0x5a
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8003fde:	8afb      	ldrh	r3, [r7, #22]
 8003fe0:	4a34      	ldr	r2, [pc, #208]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003fe2:	216e      	movs	r1, #110	; 0x6e
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3358      	adds	r3, #88	; 0x58
 8003fec:	2200      	movs	r2, #0
 8003fee:	801a      	strh	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8003ff0:	8afb      	ldrh	r3, [r7, #22]
 8003ff2:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8003ff4:	216e      	movs	r1, #110	; 0x6e
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3356      	adds	r3, #86	; 0x56
 8003ffe:	2200      	movs	r2, #0
 8004000:	801a      	strh	r2, [r3, #0]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 8004002:	8afb      	ldrh	r3, [r7, #22]
 8004004:	4a2b      	ldr	r2, [pc, #172]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8004006:	216e      	movs	r1, #110	; 0x6e
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	3362      	adds	r3, #98	; 0x62
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	8afb      	ldrh	r3, [r7, #22]
 8004014:	4927      	ldr	r1, [pc, #156]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 8004016:	206e      	movs	r0, #110	; 0x6e
 8004018:	fb00 f303 	mul.w	r3, r0, r3
 800401c:	440b      	add	r3, r1
 800401e:	3360      	adds	r3, #96	; 0x60
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d910      	bls.n	8004048 <gos_kernelCalculateTaskCpuUsages+0x234>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 8004026:	8afa      	ldrh	r2, [r7, #22]
 8004028:	8afb      	ldrh	r3, [r7, #22]
 800402a:	4922      	ldr	r1, [pc, #136]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 800402c:	206e      	movs	r0, #110	; 0x6e
 800402e:	fb00 f202 	mul.w	r2, r0, r2
 8004032:	440a      	add	r2, r1
 8004034:	3262      	adds	r2, #98	; 0x62
 8004036:	8810      	ldrh	r0, [r2, #0]
 8004038:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 800403a:	216e      	movs	r1, #110	; 0x6e
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	3360      	adds	r3, #96	; 0x60
 8004044:	4602      	mov	r2, r0
 8004046:	801a      	strh	r2, [r3, #0]
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8004048:	8afb      	ldrh	r3, [r7, #22]
 800404a:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <gos_kernelCalculateTaskCpuUsages+0x2a0>)
 800404c:	216e      	movs	r1, #110	; 0x6e
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <gos_kernelCalculateTaskCpuUsages+0x256>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800405a:	8afb      	ldrh	r3, [r7, #22]
 800405c:	3301      	adds	r3, #1
 800405e:	82fb      	strh	r3, [r7, #22]
 8004060:	8afb      	ldrh	r3, [r7, #22]
 8004062:	2b23      	cmp	r3, #35	; 0x23
 8004064:	f67f aefd 	bls.w	8003e62 <gos_kernelCalculateTaskCpuUsages+0x4e>
 8004068:	e000      	b.n	800406c <gos_kernelCalculateTaskCpuUsages+0x258>
            break;
 800406a:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	2b36      	cmp	r3, #54	; 0x36
 8004070:	d003      	beq.n	800407a <gos_kernelCalculateTaskCpuUsages+0x266>
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8004074:	791b      	ldrb	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d011      	beq.n	800409e <gos_kernelCalculateTaskCpuUsages+0x28a>
        monitoringTime.days         = 0u;
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 800407c:	2200      	movs	r2, #0
 800407e:	71da      	strb	r2, [r3, #7]
        monitoringTime.hours        = 0u;
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8004082:	2200      	movs	r2, #0
 8004084:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 8004086:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8004088:	2200      	movs	r2, #0
 800408a:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 800408e:	2200      	movs	r2, #0
 8004090:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 8004094:	2200      	movs	r2, #0
 8004096:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <gos_kernelCalculateTaskCpuUsages+0x294>)
 800409a:	2200      	movs	r2, #0
 800409c:	801a      	strh	r2, [r3, #0]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd90      	pop	{r4, r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20001908 	.word	0x20001908
 80040ac:	03938700 	.word	0x03938700
 80040b0:	000f4240 	.word	0x000f4240
 80040b4:	200002c4 	.word	0x200002c4

080040b8 <gos_kernelDump>:
{
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	b0a6      	sub	sp, #152	; 0x98
 80040be:	af14      	add	r7, sp, #80	; 0x50
    u16_t taskIndex = 0u;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 80040c6:	48a6      	ldr	r0, [pc, #664]	; (8004360 <gos_kernelDump+0x2a8>)
 80040c8:	f003 fadc 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 80040cc:	48a5      	ldr	r0, [pc, #660]	; (8004364 <gos_kernelDump+0x2ac>)
 80040ce:	f003 fad9 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 80040d2:	4ba5      	ldr	r3, [pc, #660]	; (8004368 <gos_kernelDump+0x2b0>)
 80040d4:	9302      	str	r3, [sp, #8]
 80040d6:	4ba5      	ldr	r3, [pc, #660]	; (800436c <gos_kernelDump+0x2b4>)
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	4ba5      	ldr	r3, [pc, #660]	; (8004370 <gos_kernelDump+0x2b8>)
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	4ba5      	ldr	r3, [pc, #660]	; (8004374 <gos_kernelDump+0x2bc>)
 80040e0:	4aa5      	ldr	r2, [pc, #660]	; (8004378 <gos_kernelDump+0x2c0>)
 80040e2:	49a6      	ldr	r1, [pc, #664]	; (800437c <gos_kernelDump+0x2c4>)
 80040e4:	48a6      	ldr	r0, [pc, #664]	; (8004380 <gos_kernelDump+0x2c8>)
 80040e6:	f003 facd 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 80040ea:	489e      	ldr	r0, [pc, #632]	; (8004364 <gos_kernelDump+0x2ac>)
 80040ec:	f003 faca 	bl	8007684 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80040f6:	e1b9      	b.n	800446c <gos_kernelDump+0x3b4>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 80040f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040fc:	4aa1      	ldr	r2, [pc, #644]	; (8004384 <gos_kernelDump+0x2cc>)
 80040fe:	216e      	movs	r1, #110	; 0x6e
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 81b5 	beq.w	8004478 <gos_kernelDump+0x3c0>
                taskDescriptors[taskIndex].taskId,
 800410e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004112:	4a9c      	ldr	r2, [pc, #624]	; (8004384 <gos_kernelDump+0x2cc>)
 8004114:	216e      	movs	r1, #110	; 0x6e
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	332a      	adds	r3, #42	; 0x2a
 800411e:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8004120:	4699      	mov	r9, r3
                taskDescriptors[taskIndex].taskName,
 8004122:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004126:	226e      	movs	r2, #110	; 0x6e
 8004128:	fb02 f303 	mul.w	r3, r2, r3
 800412c:	3308      	adds	r3, #8
 800412e:	4a95      	ldr	r2, [pc, #596]	; (8004384 <gos_kernelDump+0x2cc>)
 8004130:	4413      	add	r3, r2
 8004132:	f103 0802 	add.w	r8, r3, #2
                taskDescriptors[taskIndex].taskPriority,
 8004136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800413a:	4a92      	ldr	r2, [pc, #584]	; (8004384 <gos_kernelDump+0x2cc>)
 800413c:	216e      	movs	r1, #110	; 0x6e
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3306      	adds	r3, #6
 8004146:	781b      	ldrb	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8004148:	469a      	mov	sl, r3
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800414a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800414e:	4a8d      	ldr	r2, [pc, #564]	; (8004384 <gos_kernelDump+0x2cc>)
 8004150:	216e      	movs	r1, #110	; 0x6e
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	4413      	add	r3, r2
 8004158:	3308      	adds	r3, #8
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b21b      	sxth	r3, r3
        (void_t) gos_shellDriverTransmitString(
 800415e:	2b00      	cmp	r3, #0
 8004160:	da02      	bge.n	8004168 <gos_kernelDump+0xb0>
 8004162:	4b89      	ldr	r3, [pc, #548]	; (8004388 <gos_kernelDump+0x2d0>)
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004166:	e001      	b.n	800416c <gos_kernelDump+0xb4>
 8004168:	4b88      	ldr	r3, [pc, #544]	; (800438c <gos_kernelDump+0x2d4>)
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800416c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004170:	4a84      	ldr	r2, [pc, #528]	; (8004384 <gos_kernelDump+0x2cc>)
 8004172:	216e      	movs	r1, #110	; 0x6e
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	3308      	adds	r3, #8
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        (void_t) gos_shellDriverTransmitString(
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <gos_kernelDump+0xd4>
 8004186:	4b80      	ldr	r3, [pc, #512]	; (8004388 <gos_kernelDump+0x2d0>)
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38
 800418a:	e001      	b.n	8004190 <gos_kernelDump+0xd8>
 800418c:	4b7f      	ldr	r3, [pc, #508]	; (800438c <gos_kernelDump+0x2d4>)
 800418e:	63bb      	str	r3, [r7, #56]	; 0x38
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8004190:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004194:	4a7b      	ldr	r2, [pc, #492]	; (8004384 <gos_kernelDump+0x2cc>)
 8004196:	216e      	movs	r1, #110	; 0x6e
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3308      	adds	r3, #8
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (void_t) gos_shellDriverTransmitString(
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <gos_kernelDump+0xf8>
 80041aa:	4b77      	ldr	r3, [pc, #476]	; (8004388 <gos_kernelDump+0x2d0>)
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
 80041ae:	e001      	b.n	80041b4 <gos_kernelDump+0xfc>
 80041b0:	4b76      	ldr	r3, [pc, #472]	; (800438c <gos_kernelDump+0x2d4>)
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80041b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041b8:	4a72      	ldr	r2, [pc, #456]	; (8004384 <gos_kernelDump+0x2cc>)
 80041ba:	216e      	movs	r1, #110	; 0x6e
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	3308      	adds	r3, #8
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
        (void_t) gos_shellDriverTransmitString(
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <gos_kernelDump+0x11c>
 80041ce:	4b6e      	ldr	r3, [pc, #440]	; (8004388 <gos_kernelDump+0x2d0>)
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
 80041d2:	e001      	b.n	80041d8 <gos_kernelDump+0x120>
 80041d4:	4b6d      	ldr	r3, [pc, #436]	; (800438c <gos_kernelDump+0x2d4>)
 80041d6:	633b      	str	r3, [r7, #48]	; 0x30
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80041d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041dc:	4a69      	ldr	r2, [pc, #420]	; (8004384 <gos_kernelDump+0x2cc>)
 80041de:	216e      	movs	r1, #110	; 0x6e
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	3308      	adds	r3, #8
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
        (void_t) gos_shellDriverTransmitString(
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <gos_kernelDump+0x140>
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <gos_kernelDump+0x2d0>)
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f6:	e001      	b.n	80041fc <gos_kernelDump+0x144>
 80041f8:	4b64      	ldr	r3, [pc, #400]	; (800438c <gos_kernelDump+0x2d4>)
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80041fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004200:	4a60      	ldr	r2, [pc, #384]	; (8004384 <gos_kernelDump+0x2cc>)
 8004202:	216e      	movs	r1, #110	; 0x6e
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	3308      	adds	r3, #8
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (void_t) gos_shellDriverTransmitString(
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <gos_kernelDump+0x164>
 8004216:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <gos_kernelDump+0x2d0>)
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	e001      	b.n	8004220 <gos_kernelDump+0x168>
 800421c:	4b5b      	ldr	r3, [pc, #364]	; (800438c <gos_kernelDump+0x2d4>)
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8004220:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004224:	4a57      	ldr	r2, [pc, #348]	; (8004384 <gos_kernelDump+0x2cc>)
 8004226:	216e      	movs	r1, #110	; 0x6e
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3308      	adds	r3, #8
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	f403 7300 	and.w	r3, r3, #512	; 0x200
        (void_t) gos_shellDriverTransmitString(
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <gos_kernelDump+0x188>
 800423a:	4b53      	ldr	r3, [pc, #332]	; (8004388 <gos_kernelDump+0x2d0>)
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	e001      	b.n	8004244 <gos_kernelDump+0x18c>
 8004240:	4b52      	ldr	r3, [pc, #328]	; (800438c <gos_kernelDump+0x2d4>)
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8004244:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004248:	4a4e      	ldr	r2, [pc, #312]	; (8004384 <gos_kernelDump+0x2cc>)
 800424a:	216e      	movs	r1, #110	; 0x6e
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3308      	adds	r3, #8
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
        (void_t) gos_shellDriverTransmitString(
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <gos_kernelDump+0x1ac>
 800425e:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <gos_kernelDump+0x2d0>)
 8004260:	623b      	str	r3, [r7, #32]
 8004262:	e001      	b.n	8004268 <gos_kernelDump+0x1b0>
 8004264:	4b49      	ldr	r3, [pc, #292]	; (800438c <gos_kernelDump+0x2d4>)
 8004266:	623b      	str	r3, [r7, #32]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8004268:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800426c:	4a45      	ldr	r2, [pc, #276]	; (8004384 <gos_kernelDump+0x2cc>)
 800426e:	216e      	movs	r1, #110	; 0x6e
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3308      	adds	r3, #8
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
        (void_t) gos_shellDriverTransmitString(
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <gos_kernelDump+0x1d0>
 8004282:	4b41      	ldr	r3, [pc, #260]	; (8004388 <gos_kernelDump+0x2d0>)
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e001      	b.n	800428c <gos_kernelDump+0x1d4>
 8004288:	4b40      	ldr	r3, [pc, #256]	; (800438c <gos_kernelDump+0x2d4>)
 800428a:	61fb      	str	r3, [r7, #28]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800428c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004290:	493c      	ldr	r1, [pc, #240]	; (8004384 <gos_kernelDump+0x2cc>)
 8004292:	236e      	movs	r3, #110	; 0x6e
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	440b      	add	r3, r1
 800429a:	3308      	adds	r3, #8
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
        (void_t) gos_shellDriverTransmitString(
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <gos_kernelDump+0x1f4>
 80042a6:	4b38      	ldr	r3, [pc, #224]	; (8004388 <gos_kernelDump+0x2d0>)
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e001      	b.n	80042b0 <gos_kernelDump+0x1f8>
 80042ac:	4b37      	ldr	r3, [pc, #220]	; (800438c <gos_kernelDump+0x2d4>)
 80042ae:	61bb      	str	r3, [r7, #24]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80042b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80042b4:	4933      	ldr	r1, [pc, #204]	; (8004384 <gos_kernelDump+0x2cc>)
 80042b6:	236e      	movs	r3, #110	; 0x6e
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	440b      	add	r3, r1
 80042be:	3308      	adds	r3, #8
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	f003 0320 	and.w	r3, r3, #32
        (void_t) gos_shellDriverTransmitString(
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <gos_kernelDump+0x218>
 80042ca:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <gos_kernelDump+0x2d0>)
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e001      	b.n	80042d4 <gos_kernelDump+0x21c>
 80042d0:	4b2e      	ldr	r3, [pc, #184]	; (800438c <gos_kernelDump+0x2d4>)
 80042d2:	617b      	str	r3, [r7, #20]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80042d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80042d8:	492a      	ldr	r1, [pc, #168]	; (8004384 <gos_kernelDump+0x2cc>)
 80042da:	236e      	movs	r3, #110	; 0x6e
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	440b      	add	r3, r1
 80042e2:	3308      	adds	r3, #8
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	f003 0310 	and.w	r3, r3, #16
        (void_t) gos_shellDriverTransmitString(
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <gos_kernelDump+0x23c>
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <gos_kernelDump+0x2d0>)
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e001      	b.n	80042f8 <gos_kernelDump+0x240>
 80042f4:	4b25      	ldr	r3, [pc, #148]	; (800438c <gos_kernelDump+0x2d4>)
 80042f6:	613b      	str	r3, [r7, #16]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80042f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80042fc:	4921      	ldr	r1, [pc, #132]	; (8004384 <gos_kernelDump+0x2cc>)
 80042fe:	236e      	movs	r3, #110	; 0x6e
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	440b      	add	r3, r1
 8004306:	3308      	adds	r3, #8
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
        (void_t) gos_shellDriverTransmitString(
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <gos_kernelDump+0x260>
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <gos_kernelDump+0x2d0>)
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e001      	b.n	800431c <gos_kernelDump+0x264>
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <gos_kernelDump+0x2d4>)
 800431a:	60fb      	str	r3, [r7, #12]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800431c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004320:	4918      	ldr	r1, [pc, #96]	; (8004384 <gos_kernelDump+0x2cc>)
 8004322:	236e      	movs	r3, #110	; 0x6e
 8004324:	fb02 f303 	mul.w	r3, r2, r3
 8004328:	440b      	add	r3, r1
 800432a:	3308      	adds	r3, #8
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
        (void_t) gos_shellDriverTransmitString(
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <gos_kernelDump+0x284>
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <gos_kernelDump+0x2d0>)
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	e001      	b.n	8004340 <gos_kernelDump+0x288>
 800433c:	4b13      	ldr	r3, [pc, #76]	; (800438c <gos_kernelDump+0x2d4>)
 800433e:	60bb      	str	r3, [r7, #8]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8004340:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004344:	490f      	ldr	r1, [pc, #60]	; (8004384 <gos_kernelDump+0x2cc>)
 8004346:	236e      	movs	r3, #110	; 0x6e
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	440b      	add	r3, r1
 800434e:	3308      	adds	r3, #8
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
        (void_t) gos_shellDriverTransmitString(
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01a      	beq.n	8004390 <gos_kernelDump+0x2d8>
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <gos_kernelDump+0x2d0>)
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	e019      	b.n	8004394 <gos_kernelDump+0x2dc>
 8004360:	08008348 	.word	0x08008348
 8004364:	08008358 	.word	0x08008358
 8004368:	080083f4 	.word	0x080083f4
 800436c:	080083fc 	.word	0x080083fc
 8004370:	08008404 	.word	0x08008404
 8004374:	080083b4 	.word	0x080083b4
 8004378:	080083bc 	.word	0x080083bc
 800437c:	080083c4 	.word	0x080083c4
 8004380:	080083c8 	.word	0x080083c8
 8004384:	200002c4 	.word	0x200002c4
 8004388:	08008410 	.word	0x08008410
 800438c:	08008418 	.word	0x08008418
 8004390:	4bbe      	ldr	r3, [pc, #760]	; (800468c <gos_kernelDump+0x5d4>)
 8004392:	607b      	str	r3, [r7, #4]
                TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8004394:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004398:	49bd      	ldr	r1, [pc, #756]	; (8004690 <gos_kernelDump+0x5d8>)
 800439a:	236e      	movs	r3, #110	; 0x6e
 800439c:	fb02 f303 	mul.w	r3, r2, r3
 80043a0:	440b      	add	r3, r1
 80043a2:	3308      	adds	r3, #8
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
        (void_t) gos_shellDriverTransmitString(
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <gos_kernelDump+0x2fa>
 80043ae:	4db9      	ldr	r5, [pc, #740]	; (8004694 <gos_kernelDump+0x5dc>)
 80043b0:	e000      	b.n	80043b4 <gos_kernelDump+0x2fc>
 80043b2:	4db6      	ldr	r5, [pc, #728]	; (800468c <gos_kernelDump+0x5d4>)
                taskDescriptors[taskIndex].taskCpuUsage / 100,
 80043b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80043b8:	49b5      	ldr	r1, [pc, #724]	; (8004690 <gos_kernelDump+0x5d8>)
 80043ba:	236e      	movs	r3, #110	; 0x6e
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	440b      	add	r3, r1
 80043c2:	3362      	adds	r3, #98	; 0x62
 80043c4:	881a      	ldrh	r2, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80043c6:	4bb4      	ldr	r3, [pc, #720]	; (8004698 <gos_kernelDump+0x5e0>)
 80043c8:	fba3 2302 	umull	r2, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	461e      	mov	r6, r3
                taskDescriptors[taskIndex].taskCpuUsage % 100,
 80043d2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80043d6:	49ae      	ldr	r1, [pc, #696]	; (8004690 <gos_kernelDump+0x5d8>)
 80043d8:	236e      	movs	r3, #110	; 0x6e
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	440b      	add	r3, r1
 80043e0:	3362      	adds	r3, #98	; 0x62
 80043e2:	8819      	ldrh	r1, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80043e4:	4bac      	ldr	r3, [pc, #688]	; (8004698 <gos_kernelDump+0x5e0>)
 80043e6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ea:	095a      	lsrs	r2, r3, #5
 80043ec:	2364      	movs	r3, #100	; 0x64
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	1acb      	subs	r3, r1, r3
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	461c      	mov	r4, r3
 80043f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80043fc:	49a4      	ldr	r1, [pc, #656]	; (8004690 <gos_kernelDump+0x5d8>)
 80043fe:	236e      	movs	r3, #110	; 0x6e
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	440b      	add	r3, r1
 8004406:	3304      	adds	r3, #4
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fd92 	bl	8004f34 <gos_kernelGetTaskStateString>
 8004410:	4603      	mov	r3, r0
 8004412:	9312      	str	r3, [sp, #72]	; 0x48
 8004414:	9411      	str	r4, [sp, #68]	; 0x44
 8004416:	9610      	str	r6, [sp, #64]	; 0x40
 8004418:	950f      	str	r5, [sp, #60]	; 0x3c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	930e      	str	r3, [sp, #56]	; 0x38
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	930d      	str	r3, [sp, #52]	; 0x34
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	930c      	str	r3, [sp, #48]	; 0x30
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	930b      	str	r3, [sp, #44]	; 0x2c
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	930a      	str	r3, [sp, #40]	; 0x28
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	9309      	str	r3, [sp, #36]	; 0x24
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	9308      	str	r3, [sp, #32]
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	9307      	str	r3, [sp, #28]
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	9306      	str	r3, [sp, #24]
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	9305      	str	r3, [sp, #20]
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	9304      	str	r3, [sp, #16]
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	9303      	str	r3, [sp, #12]
 800444a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444c:	9302      	str	r3, [sp, #8]
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	4653      	mov	r3, sl
 8004458:	4642      	mov	r2, r8
 800445a:	4649      	mov	r1, r9
 800445c:	488f      	ldr	r0, [pc, #572]	; (800469c <gos_kernelDump+0x5e4>)
 800445e:	f003 f911 	bl	8007684 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8004462:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004466:	3301      	adds	r3, #1
 8004468:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800446c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004470:	2b23      	cmp	r3, #35	; 0x23
 8004472:	f67f ae41 	bls.w	80040f8 <gos_kernelDump+0x40>
 8004476:	e000      	b.n	800447a <gos_kernelDump+0x3c2>
            break;
 8004478:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 800447a:	4889      	ldr	r0, [pc, #548]	; (80046a0 <gos_kernelDump+0x5e8>)
 800447c:	f003 f902 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 8004480:	4888      	ldr	r0, [pc, #544]	; (80046a4 <gos_kernelDump+0x5ec>)
 8004482:	f003 f8ff 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8004486:	4888      	ldr	r0, [pc, #544]	; (80046a8 <gos_kernelDump+0x5f0>)
 8004488:	f003 f8fc 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 800448c:	4b87      	ldr	r3, [pc, #540]	; (80046ac <gos_kernelDump+0x5f4>)
 800448e:	4a88      	ldr	r2, [pc, #544]	; (80046b0 <gos_kernelDump+0x5f8>)
 8004490:	4988      	ldr	r1, [pc, #544]	; (80046b4 <gos_kernelDump+0x5fc>)
 8004492:	4889      	ldr	r0, [pc, #548]	; (80046b8 <gos_kernelDump+0x600>)
 8004494:	f003 f8f6 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8004498:	4883      	ldr	r0, [pc, #524]	; (80046a8 <gos_kernelDump+0x5f0>)
 800449a:	f003 f8f3 	bl	8007684 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800449e:	2300      	movs	r3, #0
 80044a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80044a4:	e049      	b.n	800453a <gos_kernelDump+0x482>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 80044a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044aa:	4a79      	ldr	r2, [pc, #484]	; (8004690 <gos_kernelDump+0x5d8>)
 80044ac:	216e      	movs	r1, #110	; 0x6e
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	4413      	add	r3, r2
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d044      	beq.n	8004544 <gos_kernelDump+0x48c>
                taskDescriptors[taskIndex].taskId,
 80044ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044be:	4a74      	ldr	r2, [pc, #464]	; (8004690 <gos_kernelDump+0x5d8>)
 80044c0:	216e      	movs	r1, #110	; 0x6e
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	332a      	adds	r3, #42	; 0x2a
 80044ca:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80044cc:	461c      	mov	r4, r3
                taskDescriptors[taskIndex].taskName,
 80044ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044d2:	226e      	movs	r2, #110	; 0x6e
 80044d4:	fb02 f303 	mul.w	r3, r2, r3
 80044d8:	3308      	adds	r3, #8
 80044da:	4a6d      	ldr	r2, [pc, #436]	; (8004690 <gos_kernelDump+0x5d8>)
 80044dc:	4413      	add	r3, r2
 80044de:	1c99      	adds	r1, r3, #2
                taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 80044e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80044e4:	4a6a      	ldr	r2, [pc, #424]	; (8004690 <gos_kernelDump+0x5d8>)
 80044e6:	206e      	movs	r0, #110	; 0x6e
 80044e8:	fb00 f303 	mul.w	r3, r0, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	3360      	adds	r3, #96	; 0x60
 80044f0:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80044f2:	4a69      	ldr	r2, [pc, #420]	; (8004698 <gos_kernelDump+0x5e0>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461d      	mov	r5, r3
                taskDescriptors[taskIndex].taskCpuUsageMax % 100
 80044fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004502:	4a63      	ldr	r2, [pc, #396]	; (8004690 <gos_kernelDump+0x5d8>)
 8004504:	206e      	movs	r0, #110	; 0x6e
 8004506:	fb00 f303 	mul.w	r3, r0, r3
 800450a:	4413      	add	r3, r2
 800450c:	3360      	adds	r3, #96	; 0x60
 800450e:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 8004510:	4a61      	ldr	r2, [pc, #388]	; (8004698 <gos_kernelDump+0x5e0>)
 8004512:	fba2 0203 	umull	r0, r2, r2, r3
 8004516:	0952      	lsrs	r2, r2, #5
 8004518:	2064      	movs	r0, #100	; 0x64
 800451a:	fb00 f202 	mul.w	r2, r0, r2
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	b29b      	uxth	r3, r3
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	462b      	mov	r3, r5
 8004526:	460a      	mov	r2, r1
 8004528:	4621      	mov	r1, r4
 800452a:	4864      	ldr	r0, [pc, #400]	; (80046bc <gos_kernelDump+0x604>)
 800452c:	f003 f8aa 	bl	8007684 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8004530:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004534:	3301      	adds	r3, #1
 8004536:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800453a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800453e:	2b23      	cmp	r3, #35	; 0x23
 8004540:	d9b1      	bls.n	80044a6 <gos_kernelDump+0x3ee>
 8004542:	e000      	b.n	8004546 <gos_kernelDump+0x48e>
            break;
 8004544:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 8004546:	485e      	ldr	r0, [pc, #376]	; (80046c0 <gos_kernelDump+0x608>)
 8004548:	f003 f89c 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 800454c:	485d      	ldr	r0, [pc, #372]	; (80046c4 <gos_kernelDump+0x60c>)
 800454e:	f003 f899 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8004552:	485d      	ldr	r0, [pc, #372]	; (80046c8 <gos_kernelDump+0x610>)
 8004554:	f003 f896 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8004558:	4b5c      	ldr	r3, [pc, #368]	; (80046cc <gos_kernelDump+0x614>)
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	4b5c      	ldr	r3, [pc, #368]	; (80046d0 <gos_kernelDump+0x618>)
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	4b5c      	ldr	r3, [pc, #368]	; (80046d4 <gos_kernelDump+0x61c>)
 8004562:	4a53      	ldr	r2, [pc, #332]	; (80046b0 <gos_kernelDump+0x5f8>)
 8004564:	4953      	ldr	r1, [pc, #332]	; (80046b4 <gos_kernelDump+0x5fc>)
 8004566:	485c      	ldr	r0, [pc, #368]	; (80046d8 <gos_kernelDump+0x620>)
 8004568:	f003 f88c 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 800456c:	4856      	ldr	r0, [pc, #344]	; (80046c8 <gos_kernelDump+0x610>)
 800456e:	f003 f889 	bl	8007684 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8004572:	2300      	movs	r3, #0
 8004574:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004578:	e081      	b.n	800467e <gos_kernelDump+0x5c6>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 800457a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800457e:	4a44      	ldr	r2, [pc, #272]	; (8004690 <gos_kernelDump+0x5d8>)
 8004580:	216e      	movs	r1, #110	; 0x6e
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80a8 	beq.w	80046e0 <gos_kernelDump+0x628>
                taskDescriptors[taskIndex].taskId,
 8004590:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004594:	4a3e      	ldr	r2, [pc, #248]	; (8004690 <gos_kernelDump+0x5d8>)
 8004596:	216e      	movs	r1, #110	; 0x6e
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	332a      	adds	r3, #42	; 0x2a
 80045a0:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80045a2:	469c      	mov	ip, r3
                taskDescriptors[taskIndex].taskName,
 80045a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045a8:	226e      	movs	r2, #110	; 0x6e
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	3308      	adds	r3, #8
 80045b0:	4a37      	ldr	r2, [pc, #220]	; (8004690 <gos_kernelDump+0x5d8>)
 80045b2:	4413      	add	r3, r2
 80045b4:	1c9c      	adds	r4, r3, #2
                taskDescriptors[taskIndex].taskStackSize,
 80045b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045ba:	4a35      	ldr	r2, [pc, #212]	; (8004690 <gos_kernelDump+0x5d8>)
 80045bc:	216e      	movs	r1, #110	; 0x6e
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	334c      	adds	r3, #76	; 0x4c
 80045c6:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80045c8:	469e      	mov	lr, r3
                taskDescriptors[taskIndex].taskStackMaxUsage,
 80045ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045ce:	4a30      	ldr	r2, [pc, #192]	; (8004690 <gos_kernelDump+0x5d8>)
 80045d0:	216e      	movs	r1, #110	; 0x6e
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	336a      	adds	r3, #106	; 0x6a
 80045da:	881b      	ldrh	r3, [r3, #0]
        (void_t) gos_shellDriverTransmitString(
 80045dc:	461e      	mov	r6, r3
                ((10000 * taskDescriptors[taskIndex].taskStackMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 80045de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80045e2:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <gos_kernelDump+0x5d8>)
 80045e4:	216e      	movs	r1, #110	; 0x6e
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	336a      	adds	r3, #106	; 0x6a
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80045fe:	4924      	ldr	r1, [pc, #144]	; (8004690 <gos_kernelDump+0x5d8>)
 8004600:	206e      	movs	r0, #110	; 0x6e
 8004602:	fb00 f202 	mul.w	r2, r0, r2
 8004606:	440a      	add	r2, r1
 8004608:	324c      	adds	r2, #76	; 0x4c
 800460a:	8812      	ldrh	r2, [r2, #0]
 800460c:	fb93 f3f2 	sdiv	r3, r3, r2
        (void_t) gos_shellDriverTransmitString(
 8004610:	4a21      	ldr	r2, [pc, #132]	; (8004698 <gos_kernelDump+0x5e0>)
 8004612:	fb82 1203 	smull	r1, r2, r2, r3
 8004616:	1152      	asrs	r2, r2, #5
 8004618:	17db      	asrs	r3, r3, #31
 800461a:	1ad1      	subs	r1, r2, r3
                ((10000 * taskDescriptors[taskIndex].taskStackMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 800461c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004620:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <gos_kernelDump+0x5d8>)
 8004622:	206e      	movs	r0, #110	; 0x6e
 8004624:	fb00 f303 	mul.w	r3, r0, r3
 8004628:	4413      	add	r3, r2
 800462a:	336a      	adds	r3, #106	; 0x6a
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	f242 7310 	movw	r3, #10000	; 0x2710
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800463c:	4814      	ldr	r0, [pc, #80]	; (8004690 <gos_kernelDump+0x5d8>)
 800463e:	256e      	movs	r5, #110	; 0x6e
 8004640:	fb05 f202 	mul.w	r2, r5, r2
 8004644:	4402      	add	r2, r0
 8004646:	324c      	adds	r2, #76	; 0x4c
 8004648:	8812      	ldrh	r2, [r2, #0]
 800464a:	fb93 f2f2 	sdiv	r2, r3, r2
        (void_t) gos_shellDriverTransmitString(
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <gos_kernelDump+0x5e0>)
 8004650:	fb83 0302 	smull	r0, r3, r3, r2
 8004654:	1158      	asrs	r0, r3, #5
 8004656:	17d3      	asrs	r3, r2, #31
 8004658:	1ac3      	subs	r3, r0, r3
 800465a:	2064      	movs	r0, #100	; 0x64
 800465c:	fb00 f303 	mul.w	r3, r0, r3
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	9101      	str	r1, [sp, #4]
 8004666:	9600      	str	r6, [sp, #0]
 8004668:	4673      	mov	r3, lr
 800466a:	4622      	mov	r2, r4
 800466c:	4661      	mov	r1, ip
 800466e:	481b      	ldr	r0, [pc, #108]	; (80046dc <gos_kernelDump+0x624>)
 8004670:	f003 f808 	bl	8007684 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8004674:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004678:	3301      	adds	r3, #1
 800467a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800467e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004682:	2b23      	cmp	r3, #35	; 0x23
 8004684:	f67f af79 	bls.w	800457a <gos_kernelDump+0x4c2>
 8004688:	e02b      	b.n	80046e2 <gos_kernelDump+0x62a>
 800468a:	bf00      	nop
 800468c:	08008418 	.word	0x08008418
 8004690:	200002c4 	.word	0x200002c4
 8004694:	08008410 	.word	0x08008410
 8004698:	51eb851f 	.word	0x51eb851f
 800469c:	08008420 	.word	0x08008420
 80046a0:	08008474 	.word	0x08008474
 80046a4:	080084d4 	.word	0x080084d4
 80046a8:	080084e8 	.word	0x080084e8
 80046ac:	08008524 	.word	0x08008524
 80046b0:	080083bc 	.word	0x080083bc
 80046b4:	080083c4 	.word	0x080083c4
 80046b8:	08008530 	.word	0x08008530
 80046bc:	08008548 	.word	0x08008548
 80046c0:	08008568 	.word	0x08008568
 80046c4:	080085a4 	.word	0x080085a4
 80046c8:	080085b8 	.word	0x080085b8
 80046cc:	08008638 	.word	0x08008638
 80046d0:	08008644 	.word	0x08008644
 80046d4:	0800860c 	.word	0x0800860c
 80046d8:	08008614 	.word	0x08008614
 80046dc:	08008654 	.word	0x08008654
            break;
 80046e0:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 80046e2:	4804      	ldr	r0, [pc, #16]	; (80046f4 <gos_kernelDump+0x63c>)
 80046e4:	f002 ffce 	bl	8007684 <gos_shellDriverTransmitString>
}
 80046e8:	bf00      	nop
 80046ea:	3748      	adds	r7, #72	; 0x48
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f2:	bf00      	nop
 80046f4:	08008688 	.word	0x08008688

080046f8 <gos_kernelIsCallerIsr>:
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <gos_kernelIsCallerIsr+0x1c>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <gos_kernelIsCallerIsr+0x10>
 8004704:	2336      	movs	r3, #54	; 0x36
 8004706:	e000      	b.n	800470a <gos_kernelIsCallerIsr+0x12>
 8004708:	2349      	movs	r3, #73	; 0x49
}
 800470a:	4618      	mov	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	200018fb 	.word	0x200018fb

08004718 <SVC_Handler>:
    gos_ported_handleSVC();
 8004718:	f01e 0f04 	tst.w	lr, #4
 800471c:	bf0c      	ite	eq
 800471e:	f3ef 8008 	mrseq	r0, MSP
 8004722:	f3ef 8009 	mrsne	r0, PSP
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <SVC_Handler+0x28>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b36      	cmp	r3, #54	; 0x36
 800472c:	d104      	bne.n	8004738 <SVC_Handler+0x20>
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <SVC_Handler+0x28>)
 8004730:	2249      	movs	r2, #73	; 0x49
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	f000 fc52 	bl	8004fdc <gos_kernelProcessorReset>
 8004738:	f000 b804 	b.w	8004744 <gos_kernelSVC_HandlerMain>
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	200002c2 	.word	0x200002c2

08004744 <gos_kernelSVC_HandlerMain>:
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3318      	adds	r3, #24
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b02      	subs	r3, #2
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	72fb      	strb	r3, [r7, #11]
 8004760:	7afb      	ldrb	r3, [r7, #11]
 8004762:	2bff      	cmp	r3, #255	; 0xff
 8004764:	d105      	bne.n	8004772 <gos_kernelSVC_HandlerMain+0x2e>
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <gos_kernelSVC_HandlerMain+0x3c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a05      	ldr	r2, [pc, #20]	; (8004780 <gos_kernelSVC_HandlerMain+0x3c>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	6013      	str	r3, [r2, #0]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000ed04 	.word	0xe000ed04

08004784 <PendSV_Handler>:
    gos_ported_doContextSwitch();
 8004784:	b500      	push	{lr}
 8004786:	f3ef 8009 	mrs	r0, PSP
 800478a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800478e:	f000 f8e3 	bl	8004958 <gos_kernelSaveCurrentPsp>
 8004792:	f000 f8f9 	bl	8004988 <gos_kernelSelectNextTask>
 8004796:	f000 f8cb 	bl	8004930 <gos_kernelGetCurrentPsp>
 800479a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800479e:	f380 8809 	msr	PSP, r0
 80047a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a6:	4770      	bx	lr
}
 80047a8:	bf00      	nop
	...

080047ac <gos_kernelCheckTaskStack>:
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af04      	add	r7, sp, #16
    u32_t sp = 0u;
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 80047b6:	f3ef 8309 	mrs	r3, PSP
 80047ba:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d02b      	beq.n	800481a <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 80047c2:	4b3d      	ldr	r3, [pc, #244]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3d      	ldr	r2, [pc, #244]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 80047c8:	216e      	movs	r1, #110	; 0x6e
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	3360      	adds	r3, #96	; 0x60
 80047d2:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d21e      	bcs.n	800481a <gos_kernelCheckTaskStack+0x6e>
                taskDescriptors[currentTaskIndex].taskName,
 80047dc:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	226e      	movs	r2, #110	; 0x6e
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	3308      	adds	r3, #8
 80047e8:	4a34      	ldr	r2, [pc, #208]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 80047ea:	4413      	add	r3, r2
 80047ec:	3302      	adds	r3, #2
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 80047ee:	4a32      	ldr	r2, [pc, #200]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	4932      	ldr	r1, [pc, #200]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 80047f4:	206e      	movs	r0, #110	; 0x6e
 80047f6:	fb00 f202 	mul.w	r2, r0, r2
 80047fa:	440a      	add	r2, r1
 80047fc:	3260      	adds	r2, #96	; 0x60
 80047fe:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	1a8a      	subs	r2, r1, r2
 8004806:	9202      	str	r2, [sp, #8]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	9201      	str	r2, [sp, #4]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	4b2c      	ldr	r3, [pc, #176]	; (80048c0 <gos_kernelCheckTaskStack+0x114>)
 8004810:	2200      	movs	r2, #0
 8004812:	2100      	movs	r1, #0
 8004814:	2034      	movs	r0, #52	; 0x34
 8004816:	f000 fd55 	bl	80052c4 <gos_errorHandler>
    if (sp != 0 &&
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d047      	beq.n	80048b0 <gos_kernelCheckTaskStack+0x104>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 8004826:	216e      	movs	r1, #110	; 0x6e
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	3360      	adds	r3, #96	; 0x60
 8004830:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8004834:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	4920      	ldr	r1, [pc, #128]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 800483a:	206e      	movs	r0, #110	; 0x6e
 800483c:	fb00 f202 	mul.w	r2, r0, r2
 8004840:	440a      	add	r2, r1
 8004842:	324c      	adds	r2, #76	; 0x4c
 8004844:	8812      	ldrh	r2, [r2, #0]
 8004846:	441a      	add	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	3b40      	subs	r3, #64	; 0x40
        taskDescriptors[currentTaskIndex].taskStackMaxUsage)
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	491a      	ldr	r1, [pc, #104]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 8004854:	206e      	movs	r0, #110	; 0x6e
 8004856:	fb00 f202 	mul.w	r2, r0, r2
 800485a:	440a      	add	r2, r1
 800485c:	326a      	adds	r2, #106	; 0x6a
 800485e:	8812      	ldrh	r2, [r2, #0]
    if (sp != 0 &&
 8004860:	4293      	cmp	r3, r2
 8004862:	d925      	bls.n	80048b0 <gos_kernelCheckTaskStack+0x104>
        taskDescriptors[currentTaskIndex].taskStackMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a14      	ldr	r2, [pc, #80]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 800486a:	216e      	movs	r1, #110	; 0x6e
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	3360      	adds	r3, #96	; 0x60
 8004874:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8004878:	b29a      	uxth	r2, r3
 800487a:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	490f      	ldr	r1, [pc, #60]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 8004880:	206e      	movs	r0, #110	; 0x6e
 8004882:	fb00 f303 	mul.w	r3, r0, r3
 8004886:	440b      	add	r3, r1
 8004888:	334c      	adds	r3, #76	; 0x4c
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	4413      	add	r3, r2
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	b29b      	uxth	r3, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	b29a      	uxth	r2, r3
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <gos_kernelCheckTaskStack+0x10c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3a20      	subs	r2, #32
 800489e:	b290      	uxth	r0, r2
 80048a0:	4a06      	ldr	r2, [pc, #24]	; (80048bc <gos_kernelCheckTaskStack+0x110>)
 80048a2:	216e      	movs	r1, #110	; 0x6e
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	336a      	adds	r3, #106	; 0x6a
 80048ac:	4602      	mov	r2, r0
 80048ae:	801a      	strh	r2, [r3, #0]
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20001900 	.word	0x20001900
 80048bc:	200002c4 	.word	0x200002c4
 80048c0:	080086dc 	.word	0x080086dc

080048c4 <gos_kernelCheckTaskDescriptor>:
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
    gos_result_t taskDescCheckResult = GOS_SUCCESS;
 80048cc:	2355      	movs	r3, #85	; 0x55
 80048ce:	73fb      	strb	r3, [r7, #15]
    if (taskDescriptor->taskFunction == NULL                    ||
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskPrivilegeLevel == 0                 ||
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	891b      	ldrh	r3, [r3, #8]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskFunction == gos_kernelIdleTask      ||
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
 80048e6:	4a11      	ldr	r2, [pc, #68]	; (800492c <gos_kernelCheckTaskDescriptor+0x68>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d016      	beq.n	800491a <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80048f2:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction == gos_kernelIdleTask      ||
 80048f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f8:	d80f      	bhi.n	800491a <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004900:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 8004902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004906:	d308      	bcc.n	800491a <gos_kernelCheckTaskDescriptor+0x56>
        taskDescriptor->taskStackSize % 4 != 0u)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800490e:	b29b      	uxth	r3, r3
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <gos_kernelCheckTaskDescriptor+0x5a>
        taskDescCheckResult = GOS_ERROR;
 800491a:	23ae      	movs	r3, #174	; 0xae
 800491c:	73fb      	strb	r3, [r7, #15]
    return taskDescCheckResult;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	08004c49 	.word	0x08004c49

08004930 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <gos_kernelGetCurrentPsp+0x20>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a06      	ldr	r2, [pc, #24]	; (8004954 <gos_kernelGetCurrentPsp+0x24>)
 800493a:	216e      	movs	r1, #110	; 0x6e
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	3340      	adds	r3, #64	; 0x40
 8004944:	681b      	ldr	r3, [r3, #0]
}
 8004946:	4618      	mov	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	20001900 	.word	0x20001900
 8004954:	200002c4 	.word	0x200002c4

08004958 <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <gos_kernelSaveCurrentPsp+0x28>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a07      	ldr	r2, [pc, #28]	; (8004984 <gos_kernelSaveCurrentPsp+0x2c>)
 8004966:	216e      	movs	r1, #110	; 0x6e
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	3340      	adds	r3, #64	; 0x40
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	20001900 	.word	0x20001900
 8004984:	200002c4 	.word	0x200002c4

08004988 <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 800498e:	2300      	movs	r3, #0
 8004990:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 8004992:	23ff      	movs	r3, #255	; 0xff
 8004994:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 8004996:	2300      	movs	r3, #0
 8004998:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 800499a:	2300      	movs	r3, #0
 800499c:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 800499e:	2300      	movs	r3, #0
 80049a0:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 80049a2:	4ba0      	ldr	r3, [pc, #640]	; (8004c24 <gos_kernelSelectNextTask+0x29c>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4ba0      	ldr	r3, [pc, #640]	; (8004c28 <gos_kernelSelectNextTask+0x2a0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 80049ae:	f7ff fefd 	bl	80047ac <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 80049b2:	4b9e      	ldr	r3, [pc, #632]	; (8004c2c <gos_kernelSelectNextTask+0x2a4>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 8130 	bne.w	8004c1c <gos_kernelSelectNextTask+0x294>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80049bc:	2300      	movs	r3, #0
 80049be:	81fb      	strh	r3, [r7, #14]
 80049c0:	e0cc      	b.n	8004b5c <gos_kernelSelectNextTask+0x1d4>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 80049c2:	89fb      	ldrh	r3, [r7, #14]
 80049c4:	4a9a      	ldr	r2, [pc, #616]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 80049c6:	216e      	movs	r1, #110	; 0x6e
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	3304      	adds	r3, #4
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b16      	cmp	r3, #22
 80049d4:	d12c      	bne.n	8004a30 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) == taskDescriptors[taskIndex].taskSleepTicks)
 80049d6:	89fb      	ldrh	r3, [r7, #14]
 80049d8:	4a95      	ldr	r2, [pc, #596]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 80049da:	216e      	movs	r1, #110	; 0x6e
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	4413      	add	r3, r2
 80049e2:	3334      	adds	r3, #52	; 0x34
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	4411      	add	r1, r2
 80049ec:	4890      	ldr	r0, [pc, #576]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 80049ee:	226e      	movs	r2, #110	; 0x6e
 80049f0:	fb03 f202 	mul.w	r2, r3, r2
 80049f4:	4402      	add	r2, r0
 80049f6:	3234      	adds	r2, #52	; 0x34
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	4a8d      	ldr	r2, [pc, #564]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 80049fc:	216e      	movs	r1, #110	; 0x6e
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3334      	adds	r3, #52	; 0x34
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	89fb      	ldrh	r3, [r7, #14]
 8004a0a:	4989      	ldr	r1, [pc, #548]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004a0c:	206e      	movs	r0, #110	; 0x6e
 8004a0e:	fb00 f303 	mul.w	r3, r0, r3
 8004a12:	440b      	add	r3, r1
 8004a14:	3330      	adds	r3, #48	; 0x30
 8004a16:	681b      	ldr	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d109      	bne.n	8004a30 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	4a84      	ldr	r2, [pc, #528]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004a20:	216e      	movs	r1, #110	; 0x6e
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	3304      	adds	r3, #4
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e040      	b.n	8004ab2 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	4a7f      	ldr	r2, [pc, #508]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004a34:	216e      	movs	r1, #110	; 0x6e
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b19      	cmp	r3, #25
 8004a42:	d136      	bne.n	8004ab2 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	4a7a      	ldr	r2, [pc, #488]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004a48:	216e      	movs	r1, #110	; 0x6e
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	3338      	adds	r3, #56	; 0x38
 8004a52:	681b      	ldr	r3, [r3, #0]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a58:	d02b      	beq.n	8004ab2 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) == taskDescriptors[taskIndex].taskBlockTicks))
 8004a5a:	89fb      	ldrh	r3, [r7, #14]
 8004a5c:	4a74      	ldr	r2, [pc, #464]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004a5e:	216e      	movs	r1, #110	; 0x6e
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	4413      	add	r3, r2
 8004a66:	333c      	adds	r3, #60	; 0x3c
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	89fb      	ldrh	r3, [r7, #14]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	4411      	add	r1, r2
 8004a70:	486f      	ldr	r0, [pc, #444]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004a72:	226e      	movs	r2, #110	; 0x6e
 8004a74:	fb03 f202 	mul.w	r2, r3, r2
 8004a78:	4402      	add	r2, r0
 8004a7a:	323c      	adds	r2, #60	; 0x3c
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	4a6c      	ldr	r2, [pc, #432]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004a80:	216e      	movs	r1, #110	; 0x6e
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	333c      	adds	r3, #60	; 0x3c
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	89fb      	ldrh	r3, [r7, #14]
 8004a8e:	4968      	ldr	r1, [pc, #416]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004a90:	206e      	movs	r0, #110	; 0x6e
 8004a92:	fb00 f303 	mul.w	r3, r0, r3
 8004a96:	440b      	add	r3, r1
 8004a98:	3338      	adds	r3, #56	; 0x38
 8004a9a:	681b      	ldr	r3, [r3, #0]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d108      	bne.n	8004ab2 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8004aa0:	89fb      	ldrh	r3, [r7, #14]
 8004aa2:	4a63      	ldr	r2, [pc, #396]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004aa4:	216e      	movs	r1, #110	; 0x6e
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	3304      	adds	r3, #4
 8004aae:	220a      	movs	r2, #10
 8004ab0:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 8004ab2:	89fa      	ldrh	r2, [r7, #14]
 8004ab4:	4b5f      	ldr	r3, [pc, #380]	; (8004c34 <gos_kernelSelectNextTask+0x2ac>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d043      	beq.n	8004b44 <gos_kernelSelectNextTask+0x1bc>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8004abc:	89fb      	ldrh	r3, [r7, #14]
 8004abe:	4a5c      	ldr	r2, [pc, #368]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004ac0:	216e      	movs	r1, #110	; 0x6e
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3304      	adds	r3, #4
 8004aca:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 8004acc:	2b0a      	cmp	r3, #10
 8004ace:	d139      	bne.n	8004b44 <gos_kernelSelectNextTask+0x1bc>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	4a57      	ldr	r2, [pc, #348]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004ad4:	216e      	movs	r1, #110	; 0x6e
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	3306      	adds	r3, #6
 8004ade:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8004ae0:	7b7a      	ldrb	r2, [r7, #13]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d92e      	bls.n	8004b44 <gos_kernelSelectNextTask+0x1bc>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 8004ae6:	89fb      	ldrh	r3, [r7, #14]
 8004ae8:	4a51      	ldr	r2, [pc, #324]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004aea:	216e      	movs	r1, #110	; 0x6e
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	3364      	adds	r3, #100	; 0x64
 8004af4:	881a      	ldrh	r2, [r3, #0]
 8004af6:	89fb      	ldrh	r3, [r7, #14]
 8004af8:	494d      	ldr	r1, [pc, #308]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004afa:	206e      	movs	r0, #110	; 0x6e
 8004afc:	fb00 f303 	mul.w	r3, r0, r3
 8004b00:	440b      	add	r3, r1
 8004b02:	335e      	adds	r3, #94	; 0x5e
 8004b04:	881b      	ldrh	r3, [r3, #0]
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d21c      	bcs.n	8004b44 <gos_kernelSelectNextTask+0x1bc>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	4a48      	ldr	r2, [pc, #288]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004b0e:	216e      	movs	r1, #110	; 0x6e
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3362      	adds	r3, #98	; 0x62
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	89fb      	ldrh	r3, [r7, #14]
 8004b1c:	4944      	ldr	r1, [pc, #272]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004b1e:	206e      	movs	r0, #110	; 0x6e
 8004b20:	fb00 f303 	mul.w	r3, r0, r3
 8004b24:	440b      	add	r3, r1
 8004b26:	335e      	adds	r3, #94	; 0x5e
 8004b28:	881b      	ldrh	r3, [r3, #0]
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d20a      	bcs.n	8004b44 <gos_kernelSelectNextTask+0x1bc>
            {
                nextTask = taskIndex;
 8004b2e:	89fb      	ldrh	r3, [r7, #14]
 8004b30:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 8004b32:	89fb      	ldrh	r3, [r7, #14]
 8004b34:	4a3e      	ldr	r2, [pc, #248]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004b36:	216e      	movs	r1, #110	; 0x6e
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3306      	adds	r3, #6
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	4a3a      	ldr	r2, [pc, #232]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004b48:	216e      	movs	r1, #110	; 0x6e
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <gos_kernelSelectNextTask+0x1de>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8004b56:	89fb      	ldrh	r3, [r7, #14]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	81fb      	strh	r3, [r7, #14]
 8004b5c:	89fb      	ldrh	r3, [r7, #14]
 8004b5e:	2b23      	cmp	r3, #35	; 0x23
 8004b60:	f67f af2f 	bls.w	80049c2 <gos_kernelSelectNextTask+0x3a>
 8004b64:	e000      	b.n	8004b68 <gos_kernelSelectNextTask+0x1e0>
            {
                break;
 8004b66:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 8004b68:	f7ff f90a 	bl	8003d80 <gos_kernelGetCpuUsage>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b31      	ldr	r3, [pc, #196]	; (8004c38 <gos_kernelSelectNextTask+0x2b0>)
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d901      	bls.n	8004b7c <gos_kernelSelectNextTask+0x1f4>
        {
            nextTask = 0u;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 8004b7c:	897a      	ldrh	r2, [r7, #10]
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <gos_kernelSelectNextTask+0x2ac>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d029      	beq.n	8004bda <gos_kernelSelectNextTask+0x252>
        {
            if (kernelSwapHookFunction != NULL)
 8004b86:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <gos_kernelSelectNextTask+0x2b4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d014      	beq.n	8004bb8 <gos_kernelSelectNextTask+0x230>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <gos_kernelSelectNextTask+0x2b4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <gos_kernelSelectNextTask+0x2ac>)
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4926      	ldr	r1, [pc, #152]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004b98:	206e      	movs	r0, #110	; 0x6e
 8004b9a:	fb00 f202 	mul.w	r2, r0, r2
 8004b9e:	440a      	add	r2, r1
 8004ba0:	322a      	adds	r2, #42	; 0x2a
 8004ba2:	8810      	ldrh	r0, [r2, #0]
 8004ba4:	897a      	ldrh	r2, [r7, #10]
 8004ba6:	4922      	ldr	r1, [pc, #136]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004ba8:	246e      	movs	r4, #110	; 0x6e
 8004baa:	fb04 f202 	mul.w	r2, r4, r2
 8004bae:	440a      	add	r2, r1
 8004bb0:	322a      	adds	r2, #42	; 0x2a
 8004bb2:	8812      	ldrh	r2, [r2, #0]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <gos_kernelSelectNextTask+0x2ac>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	491c      	ldr	r1, [pc, #112]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004bbe:	226e      	movs	r2, #110	; 0x6e
 8004bc0:	fb03 f202 	mul.w	r2, r3, r2
 8004bc4:	440a      	add	r2, r1
 8004bc6:	3248      	adds	r2, #72	; 0x48
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	3201      	adds	r2, #1
 8004bcc:	4918      	ldr	r1, [pc, #96]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004bce:	206e      	movs	r0, #110	; 0x6e
 8004bd0:	fb00 f303 	mul.w	r3, r0, r3
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3348      	adds	r3, #72	; 0x48
 8004bd8:	601a      	str	r2, [r3, #0]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 8004bda:	1cbb      	adds	r3, r7, #2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f002 fd75 	bl	80076cc <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 8004be2:	887a      	ldrh	r2, [r7, #2]
 8004be4:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <gos_kernelSelectNextTask+0x2b8>)
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 8004bec:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <gos_kernelSelectNextTask+0x2ac>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	226e      	movs	r2, #110	; 0x6e
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	3350      	adds	r3, #80	; 0x50
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <gos_kernelSelectNextTask+0x2a8>)
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3306      	adds	r3, #6
 8004bfe:	893a      	ldrh	r2, [r7, #8]
 8004c00:	4619      	mov	r1, r3
 8004c02:	4810      	ldr	r0, [pc, #64]	; (8004c44 <gos_kernelSelectNextTask+0x2bc>)
 8004c04:	f001 ffbe 	bl	8006b84 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8004c08:	480d      	ldr	r0, [pc, #52]	; (8004c40 <gos_kernelSelectNextTask+0x2b8>)
 8004c0a:	f002 fd5f 	bl	80076cc <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 8004c0e:	897b      	ldrh	r3, [r7, #10]
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <gos_kernelSelectNextTask+0x2ac>)
 8004c12:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <gos_kernelSelectNextTask+0x29c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a03      	ldr	r2, [pc, #12]	; (8004c28 <gos_kernelSelectNextTask+0x2a0>)
 8004c1a:	6013      	str	r3, [r2, #0]
    }
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	200018fc 	.word	0x200018fc
 8004c28:	2000191c 	.word	0x2000191c
 8004c2c:	200018fa 	.word	0x200018fa
 8004c30:	200002c4 	.word	0x200002c4
 8004c34:	20001900 	.word	0x20001900
 8004c38:	200002c0 	.word	0x200002c0
 8004c3c:	20001914 	.word	0x20001914
 8004c40:	20001904 	.word	0x20001904
 8004c44:	20001908 	.word	0x20001908

08004c48 <gos_kernelIdleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelIdleTask (void_t)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 8004c4e:	2155      	movs	r1, #85	; 0x55
 8004c50:	48b1      	ldr	r0, [pc, #708]	; (8004f18 <gos_kernelIdleTask+0x2d0>)
 8004c52:	f000 fbbb 	bl	80053cc <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 8004c56:	4bb1      	ldr	r3, [pc, #708]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	4aaf      	ldr	r2, [pc, #700]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004c5e:	6453      	str	r3, [r2, #68]	; 0x44

        if (kernelIdleHookFunction != NULL)
 8004c60:	4baf      	ldr	r3, [pc, #700]	; (8004f20 <gos_kernelIdleTask+0x2d8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <gos_kernelIdleTask+0x26>
        {
            kernelIdleHookFunction();
 8004c68:	4bad      	ldr	r3, [pc, #692]	; (8004f20 <gos_kernelIdleTask+0x2d8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4798      	blx	r3
 8004c6e:	2349      	movs	r3, #73	; 0x49
 8004c70:	737b      	strb	r3, [r7, #13]
    u16_t taskIndex           = 0u;
 8004c72:	2300      	movs	r3, #0
 8004c74:	817b      	strh	r3, [r7, #10]
    u32_t systemConvertedTime = 0u;
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]
    u32_t taskConvertedTime   = 0u;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	603b      	str	r3, [r7, #0]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8004c7e:	4ba9      	ldr	r3, [pc, #676]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004c80:	795b      	ldrb	r3, [r3, #5]
 8004c82:	461a      	mov	r2, r3
 8004c84:	4ba8      	ldr	r3, [pc, #672]	; (8004f28 <gos_kernelIdleTask+0x2e0>)
 8004c86:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 8004c8a:	4ba6      	ldr	r3, [pc, #664]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004c8c:	791b      	ldrb	r3, [r3, #4]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4ba6      	ldr	r3, [pc, #664]	; (8004f2c <gos_kernelIdleTask+0x2e4>)
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8004c96:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 8004c98:	4ba2      	ldr	r3, [pc, #648]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004c9a:	885b      	ldrh	r3, [r3, #2]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 8004ca6:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 8004ca8:	4a9e      	ldr	r2, [pc, #632]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004caa:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 8004cac:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8004cae:	607b      	str	r3, [r7, #4]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	817b      	strh	r3, [r7, #10]
 8004cb4:	e0fe      	b.n	8004eb4 <gos_kernelIdleTask+0x26c>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8004cb6:	897b      	ldrh	r3, [r7, #10]
 8004cb8:	4a98      	ldr	r2, [pc, #608]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004cba:	216e      	movs	r1, #110	; 0x6e
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	335b      	adds	r3, #91	; 0x5b
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b97      	ldr	r3, [pc, #604]	; (8004f28 <gos_kernelIdleTask+0x2e0>)
 8004cca:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8004cce:	897b      	ldrh	r3, [r7, #10]
 8004cd0:	4992      	ldr	r1, [pc, #584]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004cd2:	206e      	movs	r0, #110	; 0x6e
 8004cd4:	fb00 f303 	mul.w	r3, r0, r3
 8004cd8:	440b      	add	r3, r1
 8004cda:	335a      	adds	r3, #90	; 0x5a
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4b92      	ldr	r3, [pc, #584]	; (8004f2c <gos_kernelIdleTask+0x2e4>)
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8004ce6:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8004ce8:	897b      	ldrh	r3, [r7, #10]
 8004cea:	498c      	ldr	r1, [pc, #560]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004cec:	206e      	movs	r0, #110	; 0x6e
 8004cee:	fb00 f303 	mul.w	r3, r0, r3
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3358      	adds	r3, #88	; 0x58
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8004d02:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 8004d04:	897a      	ldrh	r2, [r7, #10]
 8004d06:	4985      	ldr	r1, [pc, #532]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004d08:	206e      	movs	r0, #110	; 0x6e
 8004d0a:	fb00 f202 	mul.w	r2, r0, r2
 8004d0e:	440a      	add	r2, r1
 8004d10:	3256      	adds	r2, #86	; 0x56
 8004d12:	8812      	ldrh	r2, [r2, #0]
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8004d14:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8004d16:	603b      	str	r3, [r7, #0]
        if (systemConvertedTime > 0)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80be 	beq.w	8004e9c <gos_kernelIdleTask+0x254>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d26:	fb03 f202 	mul.w	r2, r3, r2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d30:	897b      	ldrh	r3, [r7, #10]
 8004d32:	b290      	uxth	r0, r2
 8004d34:	4a79      	ldr	r2, [pc, #484]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004d36:	216e      	movs	r1, #110	; 0x6e
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3364      	adds	r3, #100	; 0x64
 8004d40:	4602      	mov	r2, r0
 8004d42:	801a      	strh	r2, [r3, #0]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8004d44:	7b7b      	ldrb	r3, [r7, #13]
 8004d46:	2b36      	cmp	r3, #54	; 0x36
 8004d48:	d004      	beq.n	8004d54 <gos_kernelIdleTask+0x10c>
 8004d4a:	4b76      	ldr	r3, [pc, #472]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004d4c:	791b      	ldrb	r3, [r3, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80a4 	beq.w	8004e9c <gos_kernelIdleTask+0x254>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d5a:	fb03 f202 	mul.w	r2, r3, r2
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d64:	897b      	ldrh	r3, [r7, #10]
 8004d66:	b290      	uxth	r0, r2
 8004d68:	4a6c      	ldr	r2, [pc, #432]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004d6a:	216e      	movs	r1, #110	; 0x6e
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	4413      	add	r3, r2
 8004d72:	3362      	adds	r3, #98	; 0x62
 8004d74:	4602      	mov	r2, r0
 8004d76:	801a      	strh	r2, [r3, #0]
                        &taskDescriptors[taskIndex].taskRunTime,
 8004d78:	897b      	ldrh	r3, [r7, #10]
                gos_runTimeAddMicroseconds(
 8004d7a:	226e      	movs	r2, #110	; 0x6e
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	3348      	adds	r3, #72	; 0x48
 8004d82:	4a66      	ldr	r2, [pc, #408]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004d84:	4413      	add	r3, r2
 8004d86:	1d98      	adds	r0, r3, #6
 8004d88:	897b      	ldrh	r3, [r7, #10]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 8004d8a:	4a64      	ldr	r2, [pc, #400]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004d8c:	216e      	movs	r1, #110	; 0x6e
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	3356      	adds	r3, #86	; 0x56
 8004d96:	881b      	ldrh	r3, [r3, #0]
                gos_runTimeAddMicroseconds(
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f001 fef2 	bl	8006b84 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 8004da0:	897b      	ldrh	r3, [r7, #10]
                gos_runTimeAddMilliseconds(
 8004da2:	226e      	movs	r2, #110	; 0x6e
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	3348      	adds	r3, #72	; 0x48
 8004daa:	4a5c      	ldr	r2, [pc, #368]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004dac:	4413      	add	r3, r2
 8004dae:	1d98      	adds	r0, r3, #6
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 8004db0:	897b      	ldrh	r3, [r7, #10]
 8004db2:	4a5a      	ldr	r2, [pc, #360]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004db4:	216e      	movs	r1, #110	; 0x6e
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	3358      	adds	r3, #88	; 0x58
 8004dbe:	881a      	ldrh	r2, [r3, #0]
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	4956      	ldr	r1, [pc, #344]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004dc4:	246e      	movs	r4, #110	; 0x6e
 8004dc6:	fb04 f303 	mul.w	r3, r4, r3
 8004dca:	440b      	add	r3, r1
 8004dcc:	335a      	adds	r3, #90	; 0x5a
 8004dce:	781b      	ldrb	r3, [r3, #0]
                gos_runTimeAddMilliseconds(
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	0149      	lsls	r1, r1, #5
 8004dd6:	1ac9      	subs	r1, r1, r3
 8004dd8:	0089      	lsls	r1, r1, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4619      	mov	r1, r3
 8004de6:	f001 ffa7 	bl	8006d38 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 8004dea:	897b      	ldrh	r3, [r7, #10]
 8004dec:	4a4b      	ldr	r2, [pc, #300]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004dee:	216e      	movs	r1, #110	; 0x6e
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	4413      	add	r3, r2
 8004df6:	335d      	adds	r3, #93	; 0x5d
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 8004dfc:	897b      	ldrh	r3, [r7, #10]
 8004dfe:	4a47      	ldr	r2, [pc, #284]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e00:	216e      	movs	r1, #110	; 0x6e
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	335c      	adds	r3, #92	; 0x5c
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8004e0e:	897b      	ldrh	r3, [r7, #10]
 8004e10:	4a42      	ldr	r2, [pc, #264]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e12:	216e      	movs	r1, #110	; 0x6e
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	335b      	adds	r3, #91	; 0x5b
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8004e20:	897b      	ldrh	r3, [r7, #10]
 8004e22:	4a3e      	ldr	r2, [pc, #248]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e24:	216e      	movs	r1, #110	; 0x6e
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	335a      	adds	r3, #90	; 0x5a
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8004e32:	897b      	ldrh	r3, [r7, #10]
 8004e34:	4a39      	ldr	r2, [pc, #228]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e36:	216e      	movs	r1, #110	; 0x6e
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3358      	adds	r3, #88	; 0x58
 8004e40:	2200      	movs	r2, #0
 8004e42:	801a      	strh	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8004e44:	897b      	ldrh	r3, [r7, #10]
 8004e46:	4a35      	ldr	r2, [pc, #212]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e48:	216e      	movs	r1, #110	; 0x6e
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	3356      	adds	r3, #86	; 0x56
 8004e52:	2200      	movs	r2, #0
 8004e54:	801a      	strh	r2, [r3, #0]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 8004e56:	897b      	ldrh	r3, [r7, #10]
 8004e58:	4a30      	ldr	r2, [pc, #192]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e5a:	216e      	movs	r1, #110	; 0x6e
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	3362      	adds	r3, #98	; 0x62
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	897b      	ldrh	r3, [r7, #10]
 8004e68:	492c      	ldr	r1, [pc, #176]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e6a:	206e      	movs	r0, #110	; 0x6e
 8004e6c:	fb00 f303 	mul.w	r3, r0, r3
 8004e70:	440b      	add	r3, r1
 8004e72:	3360      	adds	r3, #96	; 0x60
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d910      	bls.n	8004e9c <gos_kernelIdleTask+0x254>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 8004e7a:	897a      	ldrh	r2, [r7, #10]
 8004e7c:	897b      	ldrh	r3, [r7, #10]
 8004e7e:	4927      	ldr	r1, [pc, #156]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e80:	206e      	movs	r0, #110	; 0x6e
 8004e82:	fb00 f202 	mul.w	r2, r0, r2
 8004e86:	440a      	add	r2, r1
 8004e88:	3262      	adds	r2, #98	; 0x62
 8004e8a:	8810      	ldrh	r0, [r2, #0]
 8004e8c:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004e8e:	216e      	movs	r1, #110	; 0x6e
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	3360      	adds	r3, #96	; 0x60
 8004e98:	4602      	mov	r2, r0
 8004e9a:	801a      	strh	r2, [r3, #0]
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8004e9c:	897b      	ldrh	r3, [r7, #10]
 8004e9e:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <gos_kernelIdleTask+0x2d4>)
 8004ea0:	216e      	movs	r1, #110	; 0x6e
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <gos_kernelIdleTask+0x276>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8004eae:	897b      	ldrh	r3, [r7, #10]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	817b      	strh	r3, [r7, #10]
 8004eb4:	897b      	ldrh	r3, [r7, #10]
 8004eb6:	2b23      	cmp	r3, #35	; 0x23
 8004eb8:	f67f aefd 	bls.w	8004cb6 <gos_kernelIdleTask+0x6e>
 8004ebc:	e000      	b.n	8004ec0 <gos_kernelIdleTask+0x278>
            break;
 8004ebe:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8004ec0:	7b7b      	ldrb	r3, [r7, #13]
 8004ec2:	2b36      	cmp	r3, #54	; 0x36
 8004ec4:	d003      	beq.n	8004ece <gos_kernelIdleTask+0x286>
 8004ec6:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004ec8:	791b      	ldrb	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d011      	beq.n	8004ef2 <gos_kernelIdleTask+0x2aa>
        monitoringTime.days         = 0u;
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	71da      	strb	r2, [r3, #7]
        monitoringTime.hours        = 0u;
 8004ed4:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 8004ee0:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <gos_kernelIdleTask+0x2dc>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	801a      	strh	r2, [r3, #0]
}
 8004ef2:	bf00      	nop
    gos_result_t taskYieldResult = GOS_SUCCESS;
 8004ef4:	2355      	movs	r3, #85	; 0x55
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	2309      	movs	r3, #9
 8004efa:	73bb      	strb	r3, [r7, #14]
    gos_ported_reschedule(privilege);
 8004efc:	7bbb      	ldrb	r3, [r7, #14]
 8004efe:	2b16      	cmp	r3, #22
 8004f00:	d106      	bne.n	8004f10 <gos_kernelIdleTask+0x2c8>
 8004f02:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <gos_kernelIdleTask+0x2e8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <gos_kernelIdleTask+0x2e8>)
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	6013      	str	r3, [r2, #0]
}
 8004f0e:	e000      	b.n	8004f12 <gos_kernelIdleTask+0x2ca>
    gos_ported_reschedule(privilege);
 8004f10:	dfff      	svc	255	; 0xff
}
 8004f12:	bf00      	nop
    return taskYieldResult;
 8004f14:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 8004f16:	e69e      	b.n	8004c56 <gos_kernelIdleTask+0xe>
 8004f18:	08008720 	.word	0x08008720
 8004f1c:	200002c4 	.word	0x200002c4
 8004f20:	20001910 	.word	0x20001910
 8004f24:	20001908 	.word	0x20001908
 8004f28:	03938700 	.word	0x03938700
 8004f2c:	000f4240 	.word	0x000f4240
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	3b05      	subs	r3, #5
 8004f42:	2b14      	cmp	r3, #20
 8004f44:	d836      	bhi.n	8004fb4 <gos_kernelGetTaskStateString+0x80>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <gos_kernelGetTaskStateString+0x18>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004fa9 	.word	0x08004fa9
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08004fb5 	.word	0x08004fb5
 8004f58:	08004fb5 	.word	0x08004fb5
 8004f5c:	08004fb5 	.word	0x08004fb5
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004fb5 	.word	0x08004fb5
 8004f68:	08004fb5 	.word	0x08004fb5
 8004f6c:	08004fb1 	.word	0x08004fb1
 8004f70:	08004fb5 	.word	0x08004fb5
 8004f74:	08004fb5 	.word	0x08004fb5
 8004f78:	08004fb5 	.word	0x08004fb5
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004fb5 	.word	0x08004fb5
 8004f84:	08004fb5 	.word	0x08004fb5
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fa5 	.word	0x08004fa5
 8004f94:	08004fb5 	.word	0x08004fb5
 8004f98:	08004fb5 	.word	0x08004fb5
 8004f9c:	08004fad 	.word	0x08004fad
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 8004fa0:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <gos_kernelGetTaskStateString+0x90>)
 8004fa2:	e008      	b.n	8004fb6 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <gos_kernelGetTaskStateString+0x94>)
 8004fa6:	e006      	b.n	8004fb6 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 8004fa8:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <gos_kernelGetTaskStateString+0x98>)
 8004faa:	e004      	b.n	8004fb6 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <gos_kernelGetTaskStateString+0x9c>)
 8004fae:	e002      	b.n	8004fb6 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <gos_kernelGetTaskStateString+0xa0>)
 8004fb2:	e000      	b.n	8004fb6 <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	08008730 	.word	0x08008730
 8004fc8:	08008740 	.word	0x08008740
 8004fcc:	08008754 	.word	0x08008754
 8004fd0:	08008768 	.word	0x08008768
 8004fd4:	0800877c 	.word	0x0800877c
 8004fd8:	0800878c 	.word	0x0800878c

08004fdc <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <gos_kernelProcessorReset+0x20>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fec:	4903      	ldr	r1, [pc, #12]	; (8004ffc <gos_kernelProcessorReset+0x20>)
 8004fee:	4b04      	ldr	r3, [pc, #16]	; (8005000 <gos_kernelProcessorReset+0x24>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	600b      	str	r3, [r1, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <gos_kernelProcessorReset+0x1c>
 8004ffc:	e000ed0c 	.word	0xe000ed0c
 8005000:	05fa0004 	.word	0x05fa0004

08005004 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <NMI_Handler+0x4>

0800500c <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <HardFault_Handler+0x4>

08005014 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8005018:	bf00      	nop
 800501a:	e7fd      	b.n	8005018 <MemManage_Handler+0x4>

0800501c <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <BusFault_Handler+0x4>

08005024 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <UsageFault_Handler+0x4>

0800502c <main>:

/*
 * Main
 */
int main (void_t)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <main+0x78>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	b2da      	uxtb	r2, r3
 800503a:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <main+0x78>)
 800503c:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 800503e:	f7fb fbdf 	bl	8000800 <gos_platformDriverInit>
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 8005046:	f000 f903 	bl	8005250 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	4619      	mov	r1, r3
 800504e:	4816      	ldr	r0, [pc, #88]	; (80050a8 <main+0x7c>)
 8005050:	f000 f9bc 	bl	80053cc <gos_errorTraceInit>

    // Initialize teche kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8005054:	f7fd fb4e 	bl	80026f4 <gos_kernelInit>
 8005058:	4603      	mov	r3, r0
 800505a:	4619      	mov	r1, r3
 800505c:	4813      	ldr	r0, [pc, #76]	; (80050ac <main+0x80>)
 800505e:	f000 f9b5 	bl	80053cc <gos_errorTraceInit>
 8005062:	4603      	mov	r3, r0
 8005064:	2b55      	cmp	r3, #85	; 0x55
 8005066:	d109      	bne.n	800507c <main+0x50>
        gos_kernelTaskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 8005068:	4911      	ldr	r1, [pc, #68]	; (80050b0 <main+0x84>)
 800506a:	4812      	ldr	r0, [pc, #72]	; (80050b4 <main+0x88>)
 800506c:	f7fd fc64 	bl	8002938 <gos_kernelTaskRegister>
 8005070:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8005072:	2b55      	cmp	r3, #85	; 0x55
 8005074:	d102      	bne.n	800507c <main+0x50>
    {
        initError = GOS_FALSE;
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <main+0x8c>)
 8005078:	2249      	movs	r2, #73	; 0x49
 800507a:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 800507c:	f000 f85c 	bl	8005138 <gos_Start>
 8005080:	4603      	mov	r3, r0
 8005082:	2bae      	cmp	r3, #174	; 0xae
 8005084:	d106      	bne.n	8005094 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <main+0x90>)
 8005088:	22c3      	movs	r2, #195	; 0xc3
 800508a:	490d      	ldr	r1, [pc, #52]	; (80050c0 <main+0x94>)
 800508c:	2034      	movs	r0, #52	; 0x34
 800508e:	f000 f919 	bl	80052c4 <gos_errorHandler>
 8005092:	e005      	b.n	80050a0 <main+0x74>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <main+0x98>)
 8005096:	22c7      	movs	r2, #199	; 0xc7
 8005098:	4909      	ldr	r1, [pc, #36]	; (80050c0 <main+0x94>)
 800509a:	2034      	movs	r0, #52	; 0x34
 800509c:	f000 f912 	bl	80052c4 <gos_errorHandler>
    }

    for (;;);
 80050a0:	e7fe      	b.n	80050a0 <main+0x74>
 80050a2:	bf00      	nop
 80050a4:	200018fa 	.word	0x200018fa
 80050a8:	08008790 	.word	0x08008790
 80050ac:	080087b0 	.word	0x080087b0
 80050b0:	20001922 	.word	0x20001922
 80050b4:	2000135c 	.word	0x2000135c
 80050b8:	20001920 	.word	0x20001920
 80050bc:	080087c8 	.word	0x080087c8
 80050c0:	08009588 	.word	0x08009588
 80050c4:	080087e8 	.word	0x080087e8

080050c8 <gos_Dump>:

/*
 * Function: gos_Dump
 */
void_t gos_Dump (void_t)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
    gos_taskPrivilegeLevel_t privileges = 0u;
 80050ce:	2300      	movs	r3, #0
 80050d0:	80fb      	strh	r3, [r7, #6]
    gos_tid_t currentTaskId = GOS_INVALID_TASK_ID;
 80050d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d6:	80bb      	strh	r3, [r7, #4]

    dumpRequired = GOS_TRUE;
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <gos_Dump+0x68>)
 80050da:	2236      	movs	r2, #54	; 0x36
 80050dc:	701a      	strb	r2, [r3, #0]

    (void_t) gos_kernelTaskGetCurrentId(&currentTaskId);
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe fd7b 	bl	8003bdc <gos_kernelTaskGetCurrentId>
    (void_t) gos_kernelTaskGetPrivileges(currentTaskId, &privileges);
 80050e6:	88bb      	ldrh	r3, [r7, #4]
 80050e8:	1dba      	adds	r2, r7, #6
 80050ea:	4611      	mov	r1, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe fcf5 	bl	8003adc <gos_kernelTaskGetPrivileges>

    if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	b21b      	sxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	db11      	blt.n	800511e <gos_Dump+0x56>
    {
        (void_t) gos_kernelTaskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe fbff 	bl	8003904 <gos_kernelTaskAddPrivilege>
        gos_kernelTaskWakeup(systemTaskId);
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <gos_Dump+0x6c>)
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd fe0e 	bl	8002d2c <gos_kernelTaskWakeup>
        (void_t) gos_kernelTaskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8005110:	88bb      	ldrh	r3, [r7, #4]
 8005112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fc44 	bl	80039a4 <gos_kernelTaskRemovePrivilege>
    }
    else
    {
        gos_kernelTaskWakeup(systemTaskId);
    }
}
 800511c:	e004      	b.n	8005128 <gos_Dump+0x60>
        gos_kernelTaskWakeup(systemTaskId);
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <gos_Dump+0x6c>)
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fd fe02 	bl	8002d2c <gos_kernelTaskWakeup>
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20001921 	.word	0x20001921
 8005134:	20001922 	.word	0x20001922

08005138 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 800513e:	23b1      	movs	r3, #177	; 0xb1
 8005140:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <gos_Start+0x24>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b49      	cmp	r3, #73	; 0x49
 8005148:	d103      	bne.n	8005152 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 800514a:	f7fd fbb7 	bl	80028bc <gos_kernelStart>
 800514e:	4603      	mov	r3, r0
 8005150:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 8005152:	79fb      	ldrb	r3, [r7, #7]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20001920 	.word	0x20001920

08005160 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 8005166:	2355      	movs	r3, #85	; 0x55
 8005168:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 800516a:	2300      	movs	r3, #0
 800516c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800516e:	4b32      	ldr	r3, [pc, #200]	; (8005238 <gos_systemTask+0xd8>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	b2da      	uxtb	r2, r3
 8005176:	4b30      	ldr	r3, [pc, #192]	; (8005238 <gos_systemTask+0xd8>)
 8005178:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 800517a:	2300      	movs	r3, #0
 800517c:	71bb      	strb	r3, [r7, #6]
 800517e:	e01d      	b.n	80051bc <gos_systemTask+0x5c>
    {
        sysInitResult &= gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc());
 8005180:	79ba      	ldrb	r2, [r7, #6]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4a2c      	ldr	r2, [pc, #176]	; (800523c <gos_systemTask+0xdc>)
 800518c:	189c      	adds	r4, r3, r2
 800518e:	79ba      	ldrb	r2, [r7, #6]
 8005190:	492a      	ldr	r1, [pc, #168]	; (800523c <gos_systemTask+0xdc>)
 8005192:	4613      	mov	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	3320      	adds	r3, #32
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4798      	blx	r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	4619      	mov	r1, r3
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f910 	bl	80053cc <gos_errorTraceInit>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	4013      	ands	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 80051b6:	79bb      	ldrb	r3, [r7, #6]
 80051b8:	3301      	adds	r3, #1
 80051ba:	71bb      	strb	r3, [r7, #6]
 80051bc:	79bb      	ldrb	r3, [r7, #6]
 80051be:	2b07      	cmp	r3, #7
 80051c0:	d9de      	bls.n	8005180 <gos_systemTask+0x20>
    }

    // Check and correct flag value.
    if (sysInitResult != GOS_SUCCESS)
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	2b55      	cmp	r3, #85	; 0x55
 80051c6:	d001      	beq.n	80051cc <gos_systemTask+0x6c>
    {
        sysInitResult = GOS_ERROR;
 80051c8:	23ae      	movs	r3, #174	; 0xae
 80051ca:	71fb      	strb	r3, [r7, #7]
    {
        // Nothing to do.
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	4619      	mov	r1, r3
 80051d0:	481b      	ldr	r0, [pc, #108]	; (8005240 <gos_systemTask+0xe0>)
 80051d2:	f000 f8fb 	bl	80053cc <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <gos_systemTask+0xd8>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <gos_systemTask+0x8a>
 80051de:	4b16      	ldr	r3, [pc, #88]	; (8005238 <gos_systemTask+0xd8>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4b14      	ldr	r3, [pc, #80]	; (8005238 <gos_systemTask+0xd8>)
 80051e8:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_kernelTaskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80051ea:	4b16      	ldr	r3, [pc, #88]	; (8005244 <gos_systemTask+0xe4>)
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	21c3      	movs	r1, #195	; 0xc3
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe fa71 	bl	80036d8 <gos_kernelTaskSetOriginalPriority>
    (void_t) gos_kernelTaskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <gos_systemTask+0xe4>)
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	21c3      	movs	r1, #195	; 0xc3
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe f9e5 	bl	80035cc <gos_kernelTaskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8005202:	2036      	movs	r0, #54	; 0x36
 8005204:	f7fe fe06 	bl	8003e14 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <gos_systemTask+0xe8>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b36      	cmp	r3, #54	; 0x36
 800520e:	d10f      	bne.n	8005230 <gos_systemTask+0xd0>
        {
            (void_t) gos_kernelTaskSleep(100);
 8005210:	2064      	movs	r0, #100	; 0x64
 8005212:	f7fd fd1d 	bl	8002c50 <gos_kernelTaskSleep>
            gos_kernelDump();
 8005216:	f7fe ff4f 	bl	80040b8 <gos_kernelDump>
#if CFG_PROC_USE_SERVICE
            gos_procDump();
#endif
            gos_queueDump();
 800521a:	f000 fe2f 	bl	8005e7c <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <gos_systemTask+0xec>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fa8f 	bl	8006748 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <gos_systemTask+0xe8>)
 800522c:	2249      	movs	r2, #73	; 0x49
 800522e:	701a      	strb	r2, [r3, #0]
        else
        {
            // Nothing to do.
        }

        (void_t) gos_kernelTaskSleep(GOS_SYS_TASK_SLEEP_TIME);
 8005230:	2064      	movs	r0, #100	; 0x64
 8005232:	f7fd fd0d 	bl	8002c50 <gos_kernelTaskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8005236:	e7e4      	b.n	8005202 <gos_systemTask+0xa2>
 8005238:	200018fa 	.word	0x200018fa
 800523c:	2000123c 	.word	0x2000123c
 8005240:	08008864 	.word	0x08008864
 8005244:	20001922 	.word	0x20001922
 8005248:	20001921 	.word	0x20001921
 800524c:	200018f8 	.word	0x200018f8

08005250 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
void_t gos_printStartupLogo (void_t)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 8005254:	4811      	ldr	r0, [pc, #68]	; (800529c <gos_printStartupLogo+0x4c>)
 8005256:	f002 f8db 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 800525a:	4811      	ldr	r0, [pc, #68]	; (80052a0 <gos_printStartupLogo+0x50>)
 800525c:	f002 f8d8 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 8005260:	4810      	ldr	r0, [pc, #64]	; (80052a4 <gos_printStartupLogo+0x54>)
 8005262:	f002 f8d5 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 8005266:	4810      	ldr	r0, [pc, #64]	; (80052a8 <gos_printStartupLogo+0x58>)
 8005268:	f002 f8d2 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 800526c:	480f      	ldr	r0, [pc, #60]	; (80052ac <gos_printStartupLogo+0x5c>)
 800526e:	f002 f8cf 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 8005272:	480f      	ldr	r0, [pc, #60]	; (80052b0 <gos_printStartupLogo+0x60>)
 8005274:	f002 f8cc 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 8005278:	480e      	ldr	r0, [pc, #56]	; (80052b4 <gos_printStartupLogo+0x64>)
 800527a:	f002 f8c9 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 800527e:	4809      	ldr	r0, [pc, #36]	; (80052a4 <gos_printStartupLogo+0x54>)
 8005280:	f002 f8c6 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 8005284:	480c      	ldr	r0, [pc, #48]	; (80052b8 <gos_printStartupLogo+0x68>)
 8005286:	f002 f8c3 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                           (c) Ahmed Gazar, 2023                          \r\n\r\n");
 800528a:	480c      	ldr	r0, [pc, #48]	; (80052bc <gos_printStartupLogo+0x6c>)
 800528c:	f002 f8c0 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 8005290:	480b      	ldr	r0, [pc, #44]	; (80052c0 <gos_printStartupLogo+0x70>)
 8005292:	f002 f8bd 	bl	8007410 <gos_traceTraceFormattedUnsafe>
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	0800887c 	.word	0x0800887c
 80052a0:	080088cc 	.word	0x080088cc
 80052a4:	0800891c 	.word	0x0800891c
 80052a8:	0800896c 	.word	0x0800896c
 80052ac:	080089bc 	.word	0x080089bc
 80052b0:	08008a0c 	.word	0x08008a0c
 80052b4:	08008a5c 	.word	0x08008a5c
 80052b8:	08008aac 	.word	0x08008aac
 80052bc:	08008afc 	.word	0x08008afc
 80052c0:	08008b4c 	.word	0x08008b4c

080052c4 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 80052c4:	b408      	push	{r3}
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	4603      	mov	r3, r0
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 80052d4:	4832      	ldr	r0, [pc, #200]	; (80053a0 <gos_errorHandler+0xdc>)
 80052d6:	f002 f89b 	bl	8007410 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2b34      	cmp	r3, #52	; 0x34
 80052de:	d103      	bne.n	80052e8 <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80052e0:	4830      	ldr	r0, [pc, #192]	; (80053a4 <gos_errorHandler+0xe0>)
 80052e2:	f002 f895 	bl	8007410 <gos_traceTraceFormattedUnsafe>
 80052e6:	e013      	b.n	8005310 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b2e      	cmp	r3, #46	; 0x2e
 80052ec:	d103      	bne.n	80052f6 <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80052ee:	482e      	ldr	r0, [pc, #184]	; (80053a8 <gos_errorHandler+0xe4>)
 80052f0:	f002 f88e 	bl	8007410 <gos_traceTraceFormattedUnsafe>
 80052f4:	e00c      	b.n	8005310 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b1a      	cmp	r3, #26
 80052fa:	d103      	bne.n	8005304 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80052fc:	482b      	ldr	r0, [pc, #172]	; (80053ac <gos_errorHandler+0xe8>)
 80052fe:	f002 f887 	bl	8007410 <gos_traceTraceFormattedUnsafe>
 8005302:	e005      	b.n	8005310 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b3a      	cmp	r3, #58	; 0x3a
 8005308:	d102      	bne.n	8005310 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800530a:	4829      	ldr	r0, [pc, #164]	; (80053b0 <gos_errorHandler+0xec>)
 800530c:	f002 f880 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	4826      	ldr	r0, [pc, #152]	; (80053b4 <gos_errorHandler+0xf0>)
 800531c:	f002 f878 	bl	8007410 <gos_traceTraceFormattedUnsafe>
 8005320:	e006      	b.n	8005330 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4823      	ldr	r0, [pc, #140]	; (80053b8 <gos_errorHandler+0xf4>)
 800532c:	f002 f870 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 8005336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533a:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005340:	481e      	ldr	r0, [pc, #120]	; (80053bc <gos_errorHandler+0xf8>)
 8005342:	f002 facd 	bl	80078e0 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 8005346:	491d      	ldr	r1, [pc, #116]	; (80053bc <gos_errorHandler+0xf8>)
 8005348:	481d      	ldr	r0, [pc, #116]	; (80053c0 <gos_errorHandler+0xfc>)
 800534a:	f002 f861 	bl	8007410 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 800534e:	481d      	ldr	r0, [pc, #116]	; (80053c4 <gos_errorHandler+0x100>)
 8005350:	f002 f85e 	bl	8007410 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b34      	cmp	r3, #52	; 0x34
 8005358:	d002      	beq.n	8005360 <gos_errorHandler+0x9c>
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b1a      	cmp	r3, #26
 800535e:	d118      	bne.n	8005392 <gos_errorHandler+0xce>
    {
        GOS_DISABLE_SCHED
 8005360:	4b19      	ldr	r3, [pc, #100]	; (80053c8 <gos_errorHandler+0x104>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	b2da      	uxtb	r2, r3
 8005368:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <gos_errorHandler+0x104>)
 800536a:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 800536c:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <gos_errorHandler+0x104>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <gos_errorHandler+0x104>)
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	b672      	cpsid	i
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
        for (;;)
        {
            GOS_NOP;
 8005382:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 8005384:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005388:	f7fe fd28 	bl	8003ddc <gos_kernelDelayMs>
            gos_kernelReset();
 800538c:	f7fe fd08 	bl	8003da0 <gos_kernelReset>
            GOS_NOP;
 8005390:	e7f7      	b.n	8005382 <gos_errorHandler+0xbe>
    }
    else
    {
        // Nothing to do.
    }
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800539c:	b001      	add	sp, #4
 800539e:	4770      	bx	lr
 80053a0:	08008b9c 	.word	0x08008b9c
 80053a4:	08008bf0 	.word	0x08008bf0
 80053a8:	08008c1c 	.word	0x08008c1c
 80053ac:	08008c3c 	.word	0x08008c3c
 80053b0:	08008c6c 	.word	0x08008c6c
 80053b4:	08008c8c 	.word	0x08008c8c
 80053b8:	08008cb0 	.word	0x08008cb0
 80053bc:	20001924 	.word	0x20001924
 80053c0:	08008cdc 	.word	0x08008cdc
 80053c4:	08008ce4 	.word	0x08008ce4
 80053c8:	200018fa 	.word	0x200018fa

080053cc <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */

    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 80053d8:	f7fe fcc6 	bl	8003d68 <gos_kernelGetSysTicks>
 80053dc:	4604      	mov	r4, r0
 80053de:	1cfb      	adds	r3, r7, #3
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f80d 	bl	8005400 <gos_traceResultToString>
 80053e6:	4603      	mov	r3, r0
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	4621      	mov	r1, r4
 80053ec:	4803      	ldr	r0, [pc, #12]	; (80053fc <gos_errorTraceInit+0x30>)
 80053ee:	f002 f80f 	bl	8007410 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 80053f2:	78fb      	ldrb	r3, [r7, #3]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd90      	pop	{r4, r7, pc}
 80053fc:	08008d34 	.word	0x08008d34

08005400 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b55      	cmp	r3, #85	; 0x55
 800540e:	d002      	beq.n	8005416 <gos_traceResultToString+0x16>
 8005410:	2bae      	cmp	r3, #174	; 0xae
 8005412:	d002      	beq.n	800541a <gos_traceResultToString+0x1a>
 8005414:	e003      	b.n	800541e <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <gos_traceResultToString+0x2c>)
 8005418:	e002      	b.n	8005420 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <gos_traceResultToString+0x30>)
 800541c:	e000      	b.n	8005420 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <gos_traceResultToString+0x34>)
        }
    }
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	08008d50 	.word	0x08008d50
 8005430:	08008d64 	.word	0x08008d64
 8005434:	08008d78 	.word	0x08008d78

08005438 <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 800543e:	2355      	movs	r3, #85	; 0x55
 8005440:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 8005442:	2300      	movs	r3, #0
 8005444:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8005446:	2300      	movs	r3, #0
 8005448:	80bb      	strh	r3, [r7, #4]
 800544a:	e01a      	b.n	8005482 <gos_gcpInit+0x4a>
    {
        gcpInitResult &= gos_mutexInit(&gcpRxMutexes[mutexIdx]);
 800544c:	88bb      	ldrh	r3, [r7, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a12      	ldr	r2, [pc, #72]	; (800549c <gos_gcpInit+0x64>)
 8005452:	4413      	add	r3, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f973 	bl	8005740 <gos_mutexInit>
 800545a:	4603      	mov	r3, r0
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	4013      	ands	r3, r2
 8005462:	71fb      	strb	r3, [r7, #7]
        gcpInitResult &= gos_mutexInit(&gcpTxMutexes[mutexIdx]);
 8005464:	88bb      	ldrh	r3, [r7, #4]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4a0d      	ldr	r2, [pc, #52]	; (80054a0 <gos_gcpInit+0x68>)
 800546a:	4413      	add	r3, r2
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f967 	bl	8005740 <gos_mutexInit>
 8005472:	4603      	mov	r3, r0
 8005474:	461a      	mov	r2, r3
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	4013      	ands	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 800547c:	88bb      	ldrh	r3, [r7, #4]
 800547e:	3301      	adds	r3, #1
 8005480:	80bb      	strh	r3, [r7, #4]
 8005482:	88bb      	ldrh	r3, [r7, #4]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d9e1      	bls.n	800544c <gos_gcpInit+0x14>
    }

    if (gcpInitResult != GOS_SUCCESS)
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	2b55      	cmp	r3, #85	; 0x55
 800548c:	d001      	beq.n	8005492 <gos_gcpInit+0x5a>
    {
        gcpInitResult = GOS_ERROR;
 800548e:	23ae      	movs	r3, #174	; 0xae
 8005490:	71fb      	strb	r3, [r7, #7]
    }

    return gcpInitResult;
 8005492:	79fb      	ldrb	r3, [r7, #7]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20001974 	.word	0x20001974
 80054a0:	20001980 	.word	0x20001980

080054a4 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_SUCCESS;
 80054aa:	2355      	movs	r3, #85	; 0x55
 80054ac:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 80054ae:	2300      	movs	r3, #0
 80054b0:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 80054b2:	2300      	movs	r3, #0
 80054b4:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <gos_messageInit+0x9c>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 80054bc:	4b21      	ldr	r3, [pc, #132]	; (8005544 <gos_messageInit+0xa0>)
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	71bb      	strb	r3, [r7, #6]
 80054c6:	e014      	b.n	80054f2 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 80054c8:	79bb      	ldrb	r3, [r7, #6]
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <gos_messageInit+0xa4>)
 80054cc:	2154      	movs	r1, #84	; 0x54
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d8:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 80054da:	79bb      	ldrb	r3, [r7, #6]
 80054dc:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <gos_messageInit+0xa4>)
 80054de:	2154      	movs	r1, #84	; 0x54
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	4413      	add	r3, r2
 80054e6:	3302      	adds	r3, #2
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80054ec:	79bb      	ldrb	r3, [r7, #6]
 80054ee:	3301      	adds	r3, #1
 80054f0:	71bb      	strb	r3, [r7, #6]
 80054f2:	79bb      	ldrb	r3, [r7, #6]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d9e7      	bls.n	80054c8 <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	717b      	strb	r3, [r7, #5]
 80054fc:	e009      	b.n	8005512 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 80054fe:	797b      	ldrb	r3, [r7, #5]
 8005500:	4a12      	ldr	r2, [pc, #72]	; (800554c <gos_messageInit+0xa8>)
 8005502:	015b      	lsls	r3, r3, #5
 8005504:	4413      	add	r3, r2
 8005506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550a:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800550c:	797b      	ldrb	r3, [r7, #5]
 800550e:	3301      	adds	r3, #1
 8005510:	717b      	strb	r3, [r7, #5]
 8005512:	797b      	ldrb	r3, [r7, #5]
 8005514:	2b09      	cmp	r3, #9
 8005516:	d9f2      	bls.n	80054fe <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8005518:	480d      	ldr	r0, [pc, #52]	; (8005550 <gos_messageInit+0xac>)
 800551a:	f000 f911 	bl	8005740 <gos_mutexInit>
 800551e:	4603      	mov	r3, r0
 8005520:	2b55      	cmp	r3, #85	; 0x55
 8005522:	d106      	bne.n	8005532 <gos_messageInit+0x8e>
        gos_kernelTaskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) != GOS_SUCCESS)
 8005524:	490b      	ldr	r1, [pc, #44]	; (8005554 <gos_messageInit+0xb0>)
 8005526:	480c      	ldr	r0, [pc, #48]	; (8005558 <gos_messageInit+0xb4>)
 8005528:	f7fd fa06 	bl	8002938 <gos_kernelTaskRegister>
 800552c:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 800552e:	2b55      	cmp	r3, #85	; 0x55
 8005530:	d001      	beq.n	8005536 <gos_messageInit+0x92>
    {
        messageInitResult = GOS_ERROR;
 8005532:	23ae      	movs	r3, #174	; 0xae
 8005534:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 8005536:	79fb      	ldrb	r3, [r7, #7]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20001c1e 	.word	0x20001c1e
 8005544:	20001c1f 	.word	0x20001c1f
 8005548:	2000198c 	.word	0x2000198c
 800554c:	20001adc 	.word	0x20001adc
 8005550:	20001c20 	.word	0x20001c20
 8005554:	20001c1c 	.word	0x20001c1c
 8005558:	200013cc 	.word	0x200013cc

0800555c <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 8005562:	2300      	movs	r3, #0
 8005564:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8005566:	2300      	movs	r3, #0
 8005568:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 800556a:	2300      	movs	r3, #0
 800556c:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for(;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800556e:	f04f 31ff 	mov.w	r1, #4294967295
 8005572:	4870      	ldr	r0, [pc, #448]	; (8005734 <gos_messageDaemonTask+0x1d8>)
 8005574:	f000 f8fe 	bl	8005774 <gos_mutexLock>
 8005578:	4603      	mov	r3, r0
 800557a:	2b55      	cmp	r3, #85	; 0x55
 800557c:	f040 80d5 	bne.w	800572a <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8005580:	2300      	movs	r3, #0
 8005582:	71bb      	strb	r3, [r7, #6]
 8005584:	e0ca      	b.n	800571c <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 8005586:	79bb      	ldrb	r3, [r7, #6]
 8005588:	4a6b      	ldr	r2, [pc, #428]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 800558a:	015b      	lsls	r3, r3, #5
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005594:	f000 80bf 	beq.w	8005716 <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8005598:	2300      	movs	r3, #0
 800559a:	717b      	strb	r3, [r7, #5]
 800559c:	e077      	b.n	800568e <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800559e:	2300      	movs	r3, #0
 80055a0:	71fb      	strb	r3, [r7, #7]
 80055a2:	e06e      	b.n	8005682 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 80055a4:	79ba      	ldrb	r2, [r7, #6]
 80055a6:	797b      	ldrb	r3, [r7, #5]
 80055a8:	4963      	ldr	r1, [pc, #396]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80055aa:	0112      	lsls	r2, r2, #4
 80055ac:	4413      	add	r3, r2
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	440b      	add	r3, r1
 80055b2:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	4961      	ldr	r1, [pc, #388]	; (800573c <gos_messageDaemonTask+0x1e0>)
 80055b8:	2054      	movs	r0, #84	; 0x54
 80055ba:	fb00 f303 	mul.w	r3, r0, r3
 80055be:	440b      	add	r3, r1
 80055c0:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d15a      	bne.n	800567c <gos_messageDaemonTask+0x120>
                            {
                                memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 80055c6:	79bb      	ldrb	r3, [r7, #6]
 80055c8:	4a5b      	ldr	r2, [pc, #364]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80055ca:	015b      	lsls	r3, r3, #5
 80055cc:	4413      	add	r3, r2
 80055ce:	3318      	adds	r3, #24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	2254      	movs	r2, #84	; 0x54
 80055d8:	fb02 f303 	mul.w	r3, r2, r3
 80055dc:	4a57      	ldr	r2, [pc, #348]	; (800573c <gos_messageDaemonTask+0x1e0>)
 80055de:	4413      	add	r3, r2
 80055e0:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	4a55      	ldr	r2, [pc, #340]	; (800573c <gos_messageDaemonTask+0x1e0>)
 80055e6:	2454      	movs	r4, #84	; 0x54
 80055e8:	fb04 f303 	mul.w	r3, r4, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	3302      	adds	r3, #2
 80055f0:	781b      	ldrb	r3, [r3, #0]
                                memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 80055f2:	461a      	mov	r2, r3
 80055f4:	f002 f9ba 	bl	800796c <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize    = messageArray[messageIndex].messageSize;
 80055f8:	79fa      	ldrb	r2, [r7, #7]
 80055fa:	79bb      	ldrb	r3, [r7, #6]
 80055fc:	494e      	ldr	r1, [pc, #312]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80055fe:	015b      	lsls	r3, r3, #5
 8005600:	440b      	add	r3, r1
 8005602:	3318      	adds	r3, #24
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	494d      	ldr	r1, [pc, #308]	; (800573c <gos_messageDaemonTask+0x1e0>)
 8005608:	2054      	movs	r0, #84	; 0x54
 800560a:	fb00 f202 	mul.w	r2, r0, r2
 800560e:	440a      	add	r2, r1
 8005610:	3202      	adds	r2, #2
 8005612:	7812      	ldrb	r2, [r2, #0]
 8005614:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 8005616:	79fa      	ldrb	r2, [r7, #7]
 8005618:	79bb      	ldrb	r3, [r7, #6]
 800561a:	4947      	ldr	r1, [pc, #284]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 800561c:	015b      	lsls	r3, r3, #5
 800561e:	440b      	add	r3, r1
 8005620:	3318      	adds	r3, #24
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4945      	ldr	r1, [pc, #276]	; (800573c <gos_messageDaemonTask+0x1e0>)
 8005626:	2054      	movs	r0, #84	; 0x54
 8005628:	fb00 f202 	mul.w	r2, r0, r2
 800562c:	440a      	add	r2, r1
 800562e:	8812      	ldrh	r2, [r2, #0]
 8005630:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_kernelTaskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8005632:	79bb      	ldrb	r3, [r7, #6]
 8005634:	4a40      	ldr	r2, [pc, #256]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 8005636:	015b      	lsls	r3, r3, #5
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fd fe29 	bl	8003294 <gos_kernelTaskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	4a3d      	ldr	r2, [pc, #244]	; (800573c <gos_messageDaemonTask+0x1e0>)
 8005646:	2154      	movs	r1, #84	; 0x54
 8005648:	fb01 f303 	mul.w	r3, r1, r3
 800564c:	4413      	add	r3, r2
 800564e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005652:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8005654:	79bb      	ldrb	r3, [r7, #6]
 8005656:	4a38      	ldr	r2, [pc, #224]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 8005658:	015b      	lsls	r3, r3, #5
 800565a:	4413      	add	r3, r2
 800565c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005660:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 8005662:	79bb      	ldrb	r3, [r7, #6]
 8005664:	4a34      	ldr	r2, [pc, #208]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 8005666:	015b      	lsls	r3, r3, #5
 8005668:	4413      	add	r3, r2
 800566a:	331c      	adds	r3, #28
 800566c:	2236      	movs	r2, #54	; 0x36
 800566e:	701a      	strb	r2, [r3, #0]

                                messageIndex = CFG_MESSAGE_MAX_NUMBER;
 8005670:	2304      	movs	r3, #4
 8005672:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex = CFG_MESSAGE_MAX_WAITER_IDS;
 8005674:	2308      	movs	r3, #8
 8005676:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 8005678:	230a      	movs	r3, #10
 800567a:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	3301      	adds	r3, #1
 8005680:	71fb      	strb	r3, [r7, #7]
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d98d      	bls.n	80055a4 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8005688:	797b      	ldrb	r3, [r7, #5]
 800568a:	3301      	adds	r3, #1
 800568c:	717b      	strb	r3, [r7, #5]
 800568e:	797b      	ldrb	r3, [r7, #5]
 8005690:	2b07      	cmp	r3, #7
 8005692:	d984      	bls.n	800559e <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8005694:	79bb      	ldrb	r3, [r7, #6]
 8005696:	4a28      	ldr	r2, [pc, #160]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 8005698:	015b      	lsls	r3, r3, #5
 800569a:	4413      	add	r3, r2
 800569c:	331c      	adds	r3, #28
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b49      	cmp	r3, #73	; 0x49
 80056a2:	d138      	bne.n	8005716 <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 80056a4:	79bb      	ldrb	r3, [r7, #6]
 80056a6:	4a24      	ldr	r2, [pc, #144]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80056a8:	015b      	lsls	r3, r3, #5
 80056aa:	4413      	add	r3, r2
 80056ac:	3302      	adds	r3, #2
 80056ae:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 80056b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d02e      	beq.n	8005716 <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 80056b8:	79bb      	ldrb	r3, [r7, #6]
 80056ba:	491f      	ldr	r1, [pc, #124]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	440a      	add	r2, r1
 80056c0:	3204      	adds	r2, #4
 80056c2:	8812      	ldrh	r2, [r2, #0]
 80056c4:	3201      	adds	r2, #1
 80056c6:	b291      	uxth	r1, r2
 80056c8:	4a1b      	ldr	r2, [pc, #108]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80056ca:	015b      	lsls	r3, r3, #5
 80056cc:	4413      	add	r3, r2
 80056ce:	3304      	adds	r3, #4
 80056d0:	460a      	mov	r2, r1
 80056d2:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS)  > messageWaiterArray[messageWaiterIndex].waitTmo)
 80056d4:	79bb      	ldrb	r3, [r7, #6]
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80056d8:	015b      	lsls	r3, r3, #5
 80056da:	4413      	add	r3, r2
 80056dc:	3304      	adds	r3, #4
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	2396      	movs	r3, #150	; 0x96
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	79ba      	ldrb	r2, [r7, #6]
 80056ea:	4913      	ldr	r1, [pc, #76]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80056ec:	0152      	lsls	r2, r2, #5
 80056ee:	440a      	add	r2, r1
 80056f0:	3202      	adds	r2, #2
 80056f2:	8812      	ldrh	r2, [r2, #0]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d90e      	bls.n	8005716 <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_kernelTaskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 80056f8:	79bb      	ldrb	r3, [r7, #6]
 80056fa:	4a0f      	ldr	r2, [pc, #60]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 80056fc:	015b      	lsls	r3, r3, #5
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fd fdc6 	bl	8003294 <gos_kernelTaskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8005708:	79bb      	ldrb	r3, [r7, #6]
 800570a:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <gos_messageDaemonTask+0x1dc>)
 800570c:	015b      	lsls	r3, r3, #5
 800570e:	4413      	add	r3, r2
 8005710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005714:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8005716:	79bb      	ldrb	r3, [r7, #6]
 8005718:	3301      	adds	r3, #1
 800571a:	71bb      	strb	r3, [r7, #6]
 800571c:	79bb      	ldrb	r3, [r7, #6]
 800571e:	2b09      	cmp	r3, #9
 8005720:	f67f af31 	bls.w	8005586 <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            gos_mutexUnlock(&messageMutex);
 8005724:	4803      	ldr	r0, [pc, #12]	; (8005734 <gos_messageDaemonTask+0x1d8>)
 8005726:	f000 f8cd 	bl	80058c4 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_kernelTaskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 800572a:	2096      	movs	r0, #150	; 0x96
 800572c:	f7fd fa90 	bl	8002c50 <gos_kernelTaskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8005730:	e71d      	b.n	800556e <gos_messageDaemonTask+0x12>
 8005732:	bf00      	nop
 8005734:	20001c20 	.word	0x20001c20
 8005738:	20001adc 	.word	0x20001adc
 800573c:	2000198c 	.word	0x2000198c

08005740 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 8005748:	23ae      	movs	r3, #174	; 0xae
 800574a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	22d2      	movs	r2, #210	; 0xd2
 8005756:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800575e:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 8005760:	2355      	movs	r3, #85	; 0x55
 8005762:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
GOS_INLINE gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    bool_t                   isLocked        = GOS_TRUE;
 800577e:	2336      	movs	r3, #54	; 0x36
 8005780:	75fb      	strb	r3, [r7, #23]
    gos_result_t             mutexLockResult = GOS_ERROR;
 8005782:	23ae      	movs	r3, #174	; 0xae
 8005784:	75bb      	strb	r3, [r7, #22]
    u32_t                    sysTickInitial  = 0u;
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
    gos_taskPrivilegeLevel_t privileges      = 0u;
 800578a:	2300      	movs	r3, #0
 800578c:	81fb      	strh	r3, [r7, #14]
#if CFG_USE_PRIO_INHERITANCE
    gos_taskPrio_t           ownerPrio       = CFG_PROC_MAX_PRIO_LEVELS;
 800578e:	23ff      	movs	r3, #255	; 0xff
 8005790:	737b      	strb	r3, [r7, #13]
    gos_taskPrio_t           currentPrio     = CFG_PROC_MAX_PRIO_LEVELS;
 8005792:	23ff      	movs	r3, #255	; 0xff
 8005794:	733b      	strb	r3, [r7, #12]
    gos_tid_t                currentId       = GOS_INVALID_TASK_ID;
 8005796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800579a:	817b      	strh	r3, [r7, #10]
#endif

    /*
     * Function code.
     */
    sysTickInitial = gos_kernelGetSysTicks();
 800579c:	f7fe fae4 	bl	8003d68 <gos_kernelGetSysTicks>
 80057a0:	6138      	str	r0, [r7, #16]

#if CFG_USE_PRIO_INHERITANCE
    (void_t) gos_kernelTaskGetCurrentId(&currentId);
 80057a2:	f107 030a 	add.w	r3, r7, #10
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fa18 	bl	8003bdc <gos_kernelTaskGetCurrentId>
    (void_t) gos_kernelTaskGetPriority(currentId, &currentPrio);
 80057ac:	897b      	ldrh	r3, [r7, #10]
 80057ae:	f107 020c 	add.w	r2, r7, #12
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe f815 	bl	80037e4 <gos_kernelTaskGetPriority>
    (void_t) gos_kernelTaskGetPriority(pMutex->owner, &ownerPrio);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	885b      	ldrh	r3, [r3, #2]
 80057be:	f107 020d 	add.w	r2, r7, #13
 80057c2:	4611      	mov	r1, r2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe f80d 	bl	80037e4 <gos_kernelTaskGetPriority>
#endif

    // Wait for the mutex to become available
    while (isLocked == GOS_TRUE)
 80057ca:	e06f      	b.n	80058ac <gos_mutexLock+0x138>
    {
        // Check if the mutex is locked
        GOS_ATOMIC_ENTER
 80057cc:	4b3c      	ldr	r3, [pc, #240]	; (80058c0 <gos_mutexLock+0x14c>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <gos_mutexLock+0x14c>)
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	b672      	cpsid	i
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2bd2      	cmp	r3, #210	; 0xd2
 80057e8:	d10c      	bne.n	8005804 <gos_mutexLock+0x90>
        {
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	226b      	movs	r2, #107	; 0x6b
 80057ee:	701a      	strb	r2, [r3, #0]
            (void_t) gos_kernelTaskGetCurrentId((gos_tid_t*)&(pMutex->owner));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3302      	adds	r3, #2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe f9f1 	bl	8003bdc <gos_kernelTaskGetCurrentId>
            isLocked = GOS_FALSE;
 80057fa:	2349      	movs	r3, #73	; 0x49
 80057fc:	75fb      	strb	r3, [r7, #23]
            mutexLockResult = GOS_SUCCESS;
 80057fe:	2355      	movs	r3, #85	; 0x55
 8005800:	75bb      	strb	r3, [r7, #22]
 8005802:	e034      	b.n	800586e <gos_mutexLock+0xfa>
        }
#if CFG_USE_PRIO_INHERITANCE
        else
        {
            if (ownerPrio > currentPrio)
 8005804:	7b7a      	ldrb	r2, [r7, #13]
 8005806:	7b3b      	ldrb	r3, [r7, #12]
 8005808:	429a      	cmp	r2, r3
 800580a:	d930      	bls.n	800586e <gos_mutexLock+0xfa>
            {
                (void_t) gos_kernelTaskGetPrivileges(currentId, &privileges);
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	f107 020e 	add.w	r2, r7, #14
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f7fe f961 	bl	8003adc <gos_kernelTaskGetPrivileges>

                if ((privileges & GOS_PRIV_TASK_PRIO_CHANGE) != GOS_PRIV_TASK_PRIO_CHANGE)
 800581a:	89fb      	ldrh	r3, [r7, #14]
 800581c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d118      	bne.n	8005856 <gos_mutexLock+0xe2>
                {
                    (void_t) gos_kernelTaskAddPrivilege(currentId, GOS_PRIV_TASK_PRIO_CHANGE);
 8005824:	897b      	ldrh	r3, [r7, #10]
 8005826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe f86a 	bl	8003904 <gos_kernelTaskAddPrivilege>
                    if (gos_kernelTaskSetPriority(pMutex->owner, currentPrio) == GOS_SUCCESS)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	885b      	ldrh	r3, [r3, #2]
 8005834:	7b3a      	ldrb	r2, [r7, #12]
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd fec7 	bl	80035cc <gos_kernelTaskSetPriority>
 800583e:	4603      	mov	r3, r0
 8005840:	2b55      	cmp	r3, #85	; 0x55
 8005842:	d101      	bne.n	8005848 <gos_mutexLock+0xd4>
                    {
                        ownerPrio = currentPrio;
 8005844:	7b3b      	ldrb	r3, [r7, #12]
 8005846:	737b      	strb	r3, [r7, #13]
                    }
                    else
                    {
                        // Nothing to do.
                    }
                    (void_t) gos_kernelTaskRemovePrivilege(currentId, GOS_PRIV_TASK_PRIO_CHANGE);
 8005848:	897b      	ldrh	r3, [r7, #10]
 800584a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe f8a8 	bl	80039a4 <gos_kernelTaskRemovePrivilege>
 8005854:	e00b      	b.n	800586e <gos_mutexLock+0xfa>
                }
                else
                {
                    if (gos_kernelTaskSetPriority(pMutex->owner, currentPrio) == GOS_SUCCESS)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	885b      	ldrh	r3, [r3, #2]
 800585a:	7b3a      	ldrb	r2, [r7, #12]
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f7fd feb4 	bl	80035cc <gos_kernelTaskSetPriority>
 8005864:	4603      	mov	r3, r0
 8005866:	2b55      	cmp	r3, #85	; 0x55
 8005868:	d101      	bne.n	800586e <gos_mutexLock+0xfa>
                    {
                        ownerPrio = currentPrio;
 800586a:	7b3b      	ldrb	r3, [r7, #12]
 800586c:	737b      	strb	r3, [r7, #13]
            {
                // Nothing to do.
            }
        }
#endif
        GOS_ATOMIC_EXIT
 800586e:	b662      	cpsie	i
 8005870:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <gos_mutexLock+0x14c>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <gos_mutexLock+0x110>
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <gos_mutexLock+0x14c>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	3b01      	subs	r3, #1
 800587e:	b2da      	uxtb	r2, r3
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <gos_mutexLock+0x14c>)
 8005882:	701a      	strb	r2, [r3, #0]

        if (isLocked == GOS_TRUE)
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b36      	cmp	r3, #54	; 0x36
 8005888:	d104      	bne.n	8005894 <gos_mutexLock+0x120>
        {
            (void_t) gos_kernelTaskBlock(currentId, MUTEX_LOCK_SLEEP_MS);
 800588a:	897b      	ldrh	r3, [r7, #10]
 800588c:	210a      	movs	r1, #10
 800588e:	4618      	mov	r0, r3
 8005890:	f7fd fc34 	bl	80030fc <gos_kernelTaskBlock>
        else
        {
            // Nothing to do.
        }

        if ((timeout != GOS_MUTEX_ENDLESS_TMO) &&
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d007      	beq.n	80058ac <gos_mutexLock+0x138>
            ((gos_kernelGetSysTicks() - sysTickInitial) >= timeout))
 800589c:	f7fe fa64 	bl	8003d68 <gos_kernelGetSysTicks>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
        if ((timeout != GOS_MUTEX_ENDLESS_TMO) &&
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d903      	bls.n	80058b4 <gos_mutexLock+0x140>
    while (isLocked == GOS_TRUE)
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	2b36      	cmp	r3, #54	; 0x36
 80058b0:	d08c      	beq.n	80057cc <gos_mutexLock+0x58>
 80058b2:	e000      	b.n	80058b6 <gos_mutexLock+0x142>
        {
            break;
 80058b4:	bf00      	nop
        {
            // Nothing to do.
        }
    }

    return mutexLockResult;
 80058b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	200018fa 	.word	0x200018fa

080058c4 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
GOS_INLINE void_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_tid_t                currentTaskId     = GOS_INVALID_TASK_ID;
 80058cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058d0:	81fb      	strh	r3, [r7, #14]
    gos_taskPrivilegeLevel_t privileges        = 0u;
 80058d2:	2300      	movs	r3, #0
 80058d4:	81bb      	strh	r3, [r7, #12]
#if CFG_USE_PRIO_INHERITANCE
    gos_taskPrio_t           ownerOriginalPrio = GOS_TASK_MAX_PRIO_LEVELS;
 80058d6:	23ff      	movs	r3, #255	; 0xff
 80058d8:	72fb      	strb	r3, [r7, #11]
    gos_taskPrio_t           ownerCurrentPrio  = GOS_TASK_MAX_PRIO_LEVELS;
 80058da:	23ff      	movs	r3, #255	; 0xff
 80058dc:	72bb      	strb	r3, [r7, #10]
#endif
    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80058de:	4b33      	ldr	r3, [pc, #204]	; (80059ac <gos_mutexUnlock+0xe8>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b31      	ldr	r3, [pc, #196]	; (80059ac <gos_mutexUnlock+0xe8>)
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	b672      	cpsid	i
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	f3bf 8f6f 	isb	sy

#if CFG_USE_PRIO_INHERITANCE
    (void_t) gos_kernelTaskGetOriginalPriority(pMutex->owner, &ownerOriginalPrio);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	885b      	ldrh	r3, [r3, #2]
 80058f8:	f107 020b 	add.w	r2, r7, #11
 80058fc:	4611      	mov	r1, r2
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fd ffb8 	bl	8003874 <gos_kernelTaskGetOriginalPriority>
    (void_t) gos_kernelTaskGetPriority(pMutex->owner, &ownerCurrentPrio);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	885b      	ldrh	r3, [r3, #2]
 8005908:	f107 020a 	add.w	r2, r7, #10
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f7fd ff68 	bl	80037e4 <gos_kernelTaskGetPriority>
    (void_t) gos_kernelTaskGetCurrentId(&currentTaskId);
 8005914:	f107 030e 	add.w	r3, r7, #14
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe f95f 	bl	8003bdc <gos_kernelTaskGetCurrentId>

    if (ownerCurrentPrio != ownerOriginalPrio)
 800591e:	7aba      	ldrb	r2, [r7, #10]
 8005920:	7afb      	ldrb	r3, [r7, #11]
 8005922:	429a      	cmp	r2, r3
 8005924:	d026      	beq.n	8005974 <gos_mutexUnlock+0xb0>
    {
        (void_t) gos_kernelTaskGetPrivileges(currentTaskId, &privileges);
 8005926:	89fb      	ldrh	r3, [r7, #14]
 8005928:	f107 020c 	add.w	r2, r7, #12
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe f8d4 	bl	8003adc <gos_kernelTaskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_PRIO_CHANGE) != GOS_PRIV_TASK_PRIO_CHANGE)
 8005934:	89bb      	ldrh	r3, [r7, #12]
 8005936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d113      	bne.n	8005966 <gos_mutexUnlock+0xa2>
        {
            (void_t) gos_kernelTaskAddPrivilege(currentTaskId, GOS_PRIV_TASK_PRIO_CHANGE);
 800593e:	89fb      	ldrh	r3, [r7, #14]
 8005940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005944:	4618      	mov	r0, r3
 8005946:	f7fd ffdd 	bl	8003904 <gos_kernelTaskAddPrivilege>
            (void_t) gos_kernelTaskSetPriority(pMutex->owner, ownerOriginalPrio);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	885b      	ldrh	r3, [r3, #2]
 800594e:	7afa      	ldrb	r2, [r7, #11]
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7fd fe3a 	bl	80035cc <gos_kernelTaskSetPriority>
            (void_t) gos_kernelTaskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_PRIO_CHANGE);
 8005958:	89fb      	ldrh	r3, [r7, #14]
 800595a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe f820 	bl	80039a4 <gos_kernelTaskRemovePrivilege>
 8005964:	e006      	b.n	8005974 <gos_mutexUnlock+0xb0>
        }
        else
        {
            (void_t) gos_kernelTaskSetPriority(pMutex->owner, ownerOriginalPrio);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	885b      	ldrh	r3, [r3, #2]
 800596a:	7afa      	ldrb	r2, [r7, #11]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f7fd fe2c 	bl	80035cc <gos_kernelTaskSetPriority>
        // Nothing to do.
    }
#endif

    // Only owner can release the mutex.
    if (currentTaskId == pMutex->owner)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	885a      	ldrh	r2, [r3, #2]
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	429a      	cmp	r2, r3
 800597c:	d106      	bne.n	800598c <gos_mutexUnlock+0xc8>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	22d2      	movs	r2, #210	; 0xd2
 8005982:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800598a:	805a      	strh	r2, [r3, #2]
    else
    {
        // Nothing to do.
    }

    GOS_ATOMIC_EXIT
 800598c:	b662      	cpsie	i
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <gos_mutexUnlock+0xe8>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <gos_mutexUnlock+0xde>
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <gos_mutexUnlock+0xe8>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	b2da      	uxtb	r2, r3
 800599e:	4b03      	ldr	r3, [pc, #12]	; (80059ac <gos_mutexUnlock+0xe8>)
 80059a0:	701a      	strb	r2, [r3, #0]
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200018fa 	.word	0x200018fa

080059b0 <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_SUCCESS;
 80059b6:	2355      	movs	r3, #85	; 0x55
 80059b8:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 80059ba:	2300      	movs	r3, #0
 80059bc:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 80059be:	2300      	movs	r3, #0
 80059c0:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	71fb      	strb	r3, [r7, #7]
 80059c6:	e038      	b.n	8005a3a <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <gos_queueInit+0xa4>)
 80059cc:	2100      	movs	r1, #0
 80059ce:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	4a21      	ldr	r2, [pc, #132]	; (8005a58 <gos_queueInit+0xa8>)
 80059d4:	2100      	movs	r1, #0
 80059d6:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	4a20      	ldr	r2, [pc, #128]	; (8005a5c <gos_queueInit+0xac>)
 80059dc:	f641 7184 	movw	r1, #8068	; 0x1f84
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80059ea:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <gos_queueInit+0xac>)
 80059f0:	f641 7184 	movw	r1, #8068	; 0x1f84
 80059f4:	fb01 f303 	mul.w	r3, r1, r3
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80059fe:	3302      	adds	r3, #2
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	71bb      	strb	r3, [r7, #6]
 8005a08:	e011      	b.n	8005a2e <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	79ba      	ldrb	r2, [r7, #6]
 8005a0e:	4913      	ldr	r1, [pc, #76]	; (8005a5c <gos_queueInit+0xac>)
 8005a10:	20c9      	movs	r0, #201	; 0xc9
 8005a12:	fb00 f202 	mul.w	r2, r0, r2
 8005a16:	f641 7084 	movw	r0, #8068	; 0x1f84
 8005a1a:	fb00 f303 	mul.w	r3, r0, r3
 8005a1e:	4413      	add	r3, r2
 8005a20:	440b      	add	r3, r1
 8005a22:	33e2      	adds	r3, #226	; 0xe2
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8005a28:	79bb      	ldrb	r3, [r7, #6]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	71bb      	strb	r3, [r7, #6]
 8005a2e:	79bb      	ldrb	r3, [r7, #6]
 8005a30:	2b27      	cmp	r3, #39	; 0x27
 8005a32:	d9ea      	bls.n	8005a0a <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	3301      	adds	r3, #1
 8005a38:	71fb      	strb	r3, [r7, #7]
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d9c3      	bls.n	80059c8 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 8005a40:	4807      	ldr	r0, [pc, #28]	; (8005a60 <gos_queueInit+0xb0>)
 8005a42:	f7ff fe7d 	bl	8005740 <gos_mutexInit>
 8005a46:	4603      	mov	r3, r0
 8005a48:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 8005a4a:	797b      	ldrb	r3, [r7, #5]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20009a34 	.word	0x20009a34
 8005a58:	20009a38 	.word	0x20009a38
 8005a5c:	20001c24 	.word	0x20001c24
 8005a60:	20009a3c 	.word	0x20009a3c

08005a64 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 8005a6c:	23ae      	movs	r3, #174	; 0xae
 8005a6e:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 8005a70:	2300      	movs	r3, #0
 8005a72:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d048      	beq.n	8005b0c <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73bb      	strb	r3, [r7, #14]
 8005a7e:	e042      	b.n	8005b06 <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
 8005a82:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <gos_queueCreate+0xb4>)
 8005a84:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a94:	d134      	bne.n	8005b00 <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 8005a96:	7bbb      	ldrb	r3, [r7, #14]
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8005aa0:	b290      	uxth	r0, r2
 8005aa2:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <gos_queueCreate+0xb4>)
 8005aa4:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005aa8:	fb01 f303 	mul.w	r3, r1, r3
 8005aac:	4413      	add	r3, r2
 8005aae:	4602      	mov	r2, r0
 8005ab0:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <gos_queueCreate+0xb4>)
 8005ab6:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005aba:	fb01 f303 	mul.w	r3, r1, r3
 8005abe:	4413      	add	r3, r2
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3302      	adds	r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d015      	beq.n	8005afa <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fa fba6 	bl	8000224 <strlen>
 8005ad8:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 8005ada:	2b18      	cmp	r3, #24
 8005adc:	d80d      	bhi.n	8005afa <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 8005ade:	7bbb      	ldrb	r3, [r7, #14]
 8005ae0:	f641 7284 	movw	r2, #8068	; 0x1f84
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <gos_queueCreate+0xb4>)
 8005aea:	4413      	add	r3, r2
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3302      	adds	r3, #2
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f001 ff31 	bl	800795c <strcpy>
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 8005afa:	2355      	movs	r3, #85	; 0x55
 8005afc:	73fb      	strb	r3, [r7, #15]
                break;
 8005afe:	e005      	b.n	8005b0c <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	3301      	adds	r3, #1
 8005b04:	73bb      	strb	r3, [r7, #14]
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d9b9      	bls.n	8005a80 <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20001c24 	.word	0x20001c24

08005b1c <gos_queuePut>:
 */
GOS_INLINE gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	4603      	mov	r3, r0
 8005b28:	81fb      	strh	r3, [r7, #14]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 8005b2e:	23ae      	movs	r3, #174	; 0xae
 8005b30:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	485a      	ldr	r0, [pc, #360]	; (8005ca4 <gos_queuePut+0x188>)
 8005b3a:	f7ff fe1b 	bl	8005774 <gos_mutexLock>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b55      	cmp	r3, #85	; 0x55
 8005b42:	f040 80a7 	bne.w	8005c94 <gos_queuePut+0x178>
 8005b46:	89fb      	ldrh	r3, [r7, #14]
 8005b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b4c:	f0c0 80a2 	bcc.w	8005c94 <gos_queuePut+0x178>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	f243 0203 	movw	r2, #12291	; 0x3003
 8005b56:	4293      	cmp	r3, r2
 8005b58:	f200 809c 	bhi.w	8005c94 <gos_queuePut+0x178>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8098 	beq.w	8005c94 <gos_queuePut+0x178>
        element                                          != NULL                 &&
 8005b64:	7b7b      	ldrb	r3, [r7, #13]
 8005b66:	2bc8      	cmp	r3, #200	; 0xc8
 8005b68:	f200 8094 	bhi.w	8005c94 <gos_queuePut+0x178>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 8005b6c:	89fb      	ldrh	r3, [r7, #14]
 8005b6e:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8005b72:	4a4d      	ldr	r2, [pc, #308]	; (8005ca8 <gos_queuePut+0x18c>)
 8005b74:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 8005b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b84:	f000 8086 	beq.w	8005c94 <gos_queuePut+0x178>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8005b88:	89fb      	ldrh	r3, [r7, #14]
 8005b8a:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8005b8c:	7dbb      	ldrb	r3, [r7, #22]
 8005b8e:	4a47      	ldr	r2, [pc, #284]	; (8005cac <gos_queuePut+0x190>)
 8005b90:	5cd3      	ldrb	r3, [r2, r3]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <gos_queuePut+0x8e>
 8005b96:	7dbb      	ldrb	r3, [r7, #22]
 8005b98:	4a45      	ldr	r2, [pc, #276]	; (8005cb0 <gos_queuePut+0x194>)
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	7dbb      	ldrb	r3, [r7, #22]
 8005ba0:	4a42      	ldr	r2, [pc, #264]	; (8005cac <gos_queuePut+0x190>)
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	d109      	bne.n	8005bbe <gos_queuePut+0xa2>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8005baa:	7dbb      	ldrb	r3, [r7, #22]
 8005bac:	4a3f      	ldr	r2, [pc, #252]	; (8005cac <gos_queuePut+0x190>)
 8005bae:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d16f      	bne.n	8005c94 <gos_queuePut+0x178>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8005bb4:	7dbb      	ldrb	r3, [r7, #22]
 8005bb6:	4a3e      	ldr	r2, [pc, #248]	; (8005cb0 <gos_queuePut+0x194>)
 8005bb8:	5cd3      	ldrb	r3, [r2, r3]
 8005bba:	2b27      	cmp	r3, #39	; 0x27
 8005bbc:	d06a      	beq.n	8005c94 <gos_queuePut+0x178>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 8005bbe:	7dbb      	ldrb	r3, [r7, #22]
 8005bc0:	7dba      	ldrb	r2, [r7, #22]
 8005bc2:	493b      	ldr	r1, [pc, #236]	; (8005cb0 <gos_queuePut+0x194>)
 8005bc4:	5c8a      	ldrb	r2, [r1, r2]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	22c9      	movs	r2, #201	; 0xc9
 8005bca:	fb01 f202 	mul.w	r2, r1, r2
 8005bce:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005bd2:	fb01 f303 	mul.w	r3, r1, r3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3318      	adds	r3, #24
 8005bda:	4a33      	ldr	r2, [pc, #204]	; (8005ca8 <gos_queuePut+0x18c>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	3302      	adds	r3, #2
            (void_t) memcpy(
 8005be0:	7b7a      	ldrb	r2, [r7, #13]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 fec1 	bl	800796c <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 8005bea:	7dbb      	ldrb	r3, [r7, #22]
 8005bec:	7dba      	ldrb	r2, [r7, #22]
 8005bee:	4930      	ldr	r1, [pc, #192]	; (8005cb0 <gos_queuePut+0x194>)
 8005bf0:	5c8a      	ldrb	r2, [r1, r2]
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	492c      	ldr	r1, [pc, #176]	; (8005ca8 <gos_queuePut+0x18c>)
 8005bf6:	22c9      	movs	r2, #201	; 0xc9
 8005bf8:	fb00 f202 	mul.w	r2, r0, r2
 8005bfc:	f641 7084 	movw	r0, #8068	; 0x1f84
 8005c00:	fb00 f303 	mul.w	r3, r0, r3
 8005c04:	4413      	add	r3, r2
 8005c06:	440b      	add	r3, r1
 8005c08:	33e2      	adds	r3, #226	; 0xe2
 8005c0a:	7b7a      	ldrb	r2, [r7, #13]
 8005c0c:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 8005c0e:	7dbb      	ldrb	r3, [r7, #22]
 8005c10:	4a27      	ldr	r2, [pc, #156]	; (8005cb0 <gos_queuePut+0x194>)
 8005c12:	5cd2      	ldrb	r2, [r2, r3]
 8005c14:	3201      	adds	r2, #1
 8005c16:	b2d1      	uxtb	r1, r2
 8005c18:	4a25      	ldr	r2, [pc, #148]	; (8005cb0 <gos_queuePut+0x194>)
 8005c1a:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 8005c1c:	7dba      	ldrb	r2, [r7, #22]
 8005c1e:	4922      	ldr	r1, [pc, #136]	; (8005ca8 <gos_queuePut+0x18c>)
 8005c20:	f641 7384 	movw	r3, #8068	; 0x1f84
 8005c24:	fb02 f303 	mul.w	r3, r2, r3
 8005c28:	440b      	add	r3, r1
 8005c2a:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8005c2e:	3302      	adds	r3, #2
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	b2d8      	uxtb	r0, r3
 8005c36:	491c      	ldr	r1, [pc, #112]	; (8005ca8 <gos_queuePut+0x18c>)
 8005c38:	f641 7384 	movw	r3, #8068	; 0x1f84
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	440b      	add	r3, r1
 8005c42:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8005c46:	3302      	adds	r3, #2
 8005c48:	4602      	mov	r2, r0
 8005c4a:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8005c4c:	7dbb      	ldrb	r3, [r7, #22]
 8005c4e:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <gos_queuePut+0x194>)
 8005c50:	5cd3      	ldrb	r3, [r2, r3]
 8005c52:	2b27      	cmp	r3, #39	; 0x27
 8005c54:	d903      	bls.n	8005c5e <gos_queuePut+0x142>
            {
                writeCounters[queueIndex] = 0u;
 8005c56:	7dbb      	ldrb	r3, [r7, #22]
 8005c58:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <gos_queuePut+0x194>)
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8005c5e:	7dbb      	ldrb	r3, [r7, #22]
 8005c60:	4a11      	ldr	r2, [pc, #68]	; (8005ca8 <gos_queuePut+0x18c>)
 8005c62:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8005c70:	3302      	adds	r3, #2
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b27      	cmp	r3, #39	; 0x27
 8005c76:	d10b      	bne.n	8005c90 <gos_queuePut+0x174>
                queueFullHook != NULL)
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <gos_queuePut+0x198>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <gos_queuePut+0x174>
            {
                gos_mutexUnlock(&queueMutex);
 8005c80:	4808      	ldr	r0, [pc, #32]	; (8005ca4 <gos_queuePut+0x188>)
 8005c82:	f7ff fe1f 	bl	80058c4 <gos_mutexUnlock>
                queueFullHook(queueId);
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <gos_queuePut+0x198>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	89fa      	ldrh	r2, [r7, #14]
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 8005c90:	2355      	movs	r3, #85	; 0x55
 8005c92:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    gos_mutexUnlock(&queueMutex);
 8005c94:	4803      	ldr	r0, [pc, #12]	; (8005ca4 <gos_queuePut+0x188>)
 8005c96:	f7ff fe15 	bl	80058c4 <gos_mutexUnlock>

    return queuePutResult;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20009a3c 	.word	0x20009a3c
 8005ca8:	20001c24 	.word	0x20001c24
 8005cac:	20009a34 	.word	0x20009a34
 8005cb0:	20009a38 	.word	0x20009a38
 8005cb4:	20009a40 	.word	0x20009a40

08005cb8 <gos_queueGet>:
 */
GOS_INLINE gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 8005cb8:	b590      	push	{r4, r7, lr}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607b      	str	r3, [r7, #4]
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	81fb      	strh	r3, [r7, #14]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 8005cca:	23ae      	movs	r3, #174	; 0xae
 8005ccc:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4864      	ldr	r0, [pc, #400]	; (8005e68 <gos_queueGet+0x1b0>)
 8005cd6:	f7ff fd4d 	bl	8005774 <gos_mutexLock>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b55      	cmp	r3, #85	; 0x55
 8005cde:	f040 80bb 	bne.w	8005e58 <gos_queueGet+0x1a0>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80b7 	beq.w	8005e58 <gos_queueGet+0x1a0>
        target                                           != NULL                 &&
 8005cea:	89fb      	ldrh	r3, [r7, #14]
 8005cec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cf0:	f0c0 80b2 	bcc.w	8005e58 <gos_queueGet+0x1a0>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8005cf4:	89fb      	ldrh	r3, [r7, #14]
 8005cf6:	f243 0203 	movw	r2, #12291	; 0x3003
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	f200 80ac 	bhi.w	8005e58 <gos_queueGet+0x1a0>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8005d00:	89fb      	ldrh	r3, [r7, #14]
 8005d02:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8005d06:	4a59      	ldr	r2, [pc, #356]	; (8005e6c <gos_queueGet+0x1b4>)
 8005d08:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	4413      	add	r3, r2
 8005d12:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8005d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d18:	f000 809e 	beq.w	8005e58 <gos_queueGet+0x1a0>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 8005d1c:	89fb      	ldrh	r3, [r7, #14]
 8005d1e:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8005d22:	89fa      	ldrh	r2, [r7, #14]
 8005d24:	f5a2 5240 	sub.w	r2, r2, #12288	; 0x3000
 8005d28:	4951      	ldr	r1, [pc, #324]	; (8005e70 <gos_queueGet+0x1b8>)
 8005d2a:	5c8a      	ldrb	r2, [r1, r2]
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	494f      	ldr	r1, [pc, #316]	; (8005e6c <gos_queueGet+0x1b4>)
 8005d30:	22c9      	movs	r2, #201	; 0xc9
 8005d32:	fb00 f202 	mul.w	r2, r0, r2
 8005d36:	f641 7084 	movw	r0, #8068	; 0x1f84
 8005d3a:	fb00 f303 	mul.w	r3, r0, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	440b      	add	r3, r1
 8005d42:	33e2      	adds	r3, #226	; 0xe2
 8005d44:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8005d46:	7b7a      	ldrb	r2, [r7, #13]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	f0c0 8085 	bcc.w	8005e58 <gos_queueGet+0x1a0>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8005d4e:	89fb      	ldrh	r3, [r7, #14]
 8005d50:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 8005d52:	7dbb      	ldrb	r3, [r7, #22]
 8005d54:	4a46      	ldr	r2, [pc, #280]	; (8005e70 <gos_queueGet+0x1b8>)
 8005d56:	5cd2      	ldrb	r2, [r2, r3]
 8005d58:	7dbb      	ldrb	r3, [r7, #22]
 8005d5a:	4946      	ldr	r1, [pc, #280]	; (8005e74 <gos_queueGet+0x1bc>)
 8005d5c:	5ccb      	ldrb	r3, [r1, r3]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d07a      	beq.n	8005e58 <gos_queueGet+0x1a0>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 8005d62:	7dbb      	ldrb	r3, [r7, #22]
 8005d64:	7dba      	ldrb	r2, [r7, #22]
 8005d66:	4942      	ldr	r1, [pc, #264]	; (8005e70 <gos_queueGet+0x1b8>)
 8005d68:	5c8a      	ldrb	r2, [r1, r2]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	22c9      	movs	r2, #201	; 0xc9
 8005d6e:	fb01 f202 	mul.w	r2, r1, r2
 8005d72:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3318      	adds	r3, #24
 8005d7e:	4a3b      	ldr	r2, [pc, #236]	; (8005e6c <gos_queueGet+0x1b4>)
 8005d80:	4413      	add	r3, r2
 8005d82:	1c99      	adds	r1, r3, #2
 8005d84:	7dbb      	ldrb	r3, [r7, #22]
 8005d86:	7dba      	ldrb	r2, [r7, #22]
 8005d88:	4839      	ldr	r0, [pc, #228]	; (8005e70 <gos_queueGet+0x1b8>)
 8005d8a:	5c82      	ldrb	r2, [r0, r2]
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	4837      	ldr	r0, [pc, #220]	; (8005e6c <gos_queueGet+0x1b4>)
 8005d90:	22c9      	movs	r2, #201	; 0xc9
 8005d92:	fb04 f202 	mul.w	r2, r4, r2
 8005d96:	f641 7484 	movw	r4, #8068	; 0x1f84
 8005d9a:	fb04 f303 	mul.w	r3, r4, r3
 8005d9e:	4413      	add	r3, r2
 8005da0:	4403      	add	r3, r0
 8005da2:	33e2      	adds	r3, #226	; 0xe2
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	68b8      	ldr	r0, [r7, #8]
 8005daa:	f001 fddf 	bl	800796c <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 8005dae:	7dbb      	ldrb	r3, [r7, #22]
 8005db0:	7dba      	ldrb	r2, [r7, #22]
 8005db2:	492f      	ldr	r1, [pc, #188]	; (8005e70 <gos_queueGet+0x1b8>)
 8005db4:	5c8a      	ldrb	r2, [r1, r2]
 8005db6:	4610      	mov	r0, r2
 8005db8:	492c      	ldr	r1, [pc, #176]	; (8005e6c <gos_queueGet+0x1b4>)
 8005dba:	22c9      	movs	r2, #201	; 0xc9
 8005dbc:	fb00 f202 	mul.w	r2, r0, r2
 8005dc0:	f641 7084 	movw	r0, #8068	; 0x1f84
 8005dc4:	fb00 f303 	mul.w	r3, r0, r3
 8005dc8:	4413      	add	r3, r2
 8005dca:	440b      	add	r3, r1
 8005dcc:	33e2      	adds	r3, #226	; 0xe2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	4a26      	ldr	r2, [pc, #152]	; (8005e70 <gos_queueGet+0x1b8>)
 8005dd6:	5cd2      	ldrb	r2, [r2, r3]
 8005dd8:	3201      	adds	r2, #1
 8005dda:	b2d1      	uxtb	r1, r2
 8005ddc:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <gos_queueGet+0x1b8>)
 8005dde:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 8005de0:	7dba      	ldrb	r2, [r7, #22]
 8005de2:	4922      	ldr	r1, [pc, #136]	; (8005e6c <gos_queueGet+0x1b4>)
 8005de4:	f641 7384 	movw	r3, #8068	; 0x1f84
 8005de8:	fb02 f303 	mul.w	r3, r2, r3
 8005dec:	440b      	add	r3, r1
 8005dee:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8005df2:	3302      	adds	r3, #2
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b2d8      	uxtb	r0, r3
 8005dfa:	491c      	ldr	r1, [pc, #112]	; (8005e6c <gos_queueGet+0x1b4>)
 8005dfc:	f641 7384 	movw	r3, #8068	; 0x1f84
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	440b      	add	r3, r1
 8005e06:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8005e0a:	3302      	adds	r3, #2
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8005e10:	7dbb      	ldrb	r3, [r7, #22]
 8005e12:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <gos_queueGet+0x1b8>)
 8005e14:	5cd3      	ldrb	r3, [r2, r3]
 8005e16:	2b27      	cmp	r3, #39	; 0x27
 8005e18:	d903      	bls.n	8005e22 <gos_queueGet+0x16a>
            {
                readCounters[queueIndex] = 0u;
 8005e1a:	7dbb      	ldrb	r3, [r7, #22]
 8005e1c:	4a14      	ldr	r2, [pc, #80]	; (8005e70 <gos_queueGet+0x1b8>)
 8005e1e:	2100      	movs	r1, #0
 8005e20:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 8005e22:	7dbb      	ldrb	r3, [r7, #22]
 8005e24:	4a11      	ldr	r2, [pc, #68]	; (8005e6c <gos_queueGet+0x1b4>)
 8005e26:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8005e34:	3302      	adds	r3, #2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <gos_queueGet+0x19c>
                queueEmptyHook != NULL)
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <gos_queueGet+0x1c0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <gos_queueGet+0x19c>
            {
                gos_mutexUnlock(&queueMutex);
 8005e44:	4808      	ldr	r0, [pc, #32]	; (8005e68 <gos_queueGet+0x1b0>)
 8005e46:	f7ff fd3d 	bl	80058c4 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <gos_queueGet+0x1c0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	89fa      	ldrh	r2, [r7, #14]
 8005e50:	4610      	mov	r0, r2
 8005e52:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 8005e54:	2355      	movs	r3, #85	; 0x55
 8005e56:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    gos_mutexUnlock(&queueMutex);
 8005e58:	4803      	ldr	r0, [pc, #12]	; (8005e68 <gos_queueGet+0x1b0>)
 8005e5a:	f7ff fd33 	bl	80058c4 <gos_mutexUnlock>

    return queueGetResult;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd90      	pop	{r4, r7, pc}
 8005e68:	20009a3c 	.word	0x20009a3c
 8005e6c:	20001c24 	.word	0x20001c24
 8005e70:	20009a34 	.word	0x20009a34
 8005e74:	20009a38 	.word	0x20009a38
 8005e78:	20009a44 	.word	0x20009a44

08005e7c <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 8005e82:	2300      	movs	r3, #0
 8005e84:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 8005e86:	4826      	ldr	r0, [pc, #152]	; (8005f20 <gos_queueDump+0xa4>)
 8005e88:	f001 fbfc 	bl	8007684 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8005e8c:	4825      	ldr	r0, [pc, #148]	; (8005f24 <gos_queueDump+0xa8>)
 8005e8e:	f001 fbf9 	bl	8007684 <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 8005e92:	4b25      	ldr	r3, [pc, #148]	; (8005f28 <gos_queueDump+0xac>)
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <gos_queueDump+0xb0>)
 8005e96:	4926      	ldr	r1, [pc, #152]	; (8005f30 <gos_queueDump+0xb4>)
 8005e98:	4826      	ldr	r0, [pc, #152]	; (8005f34 <gos_queueDump+0xb8>)
 8005e9a:	f001 fbf3 	bl	8007684 <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8005e9e:	4821      	ldr	r0, [pc, #132]	; (8005f24 <gos_queueDump+0xa8>)
 8005ea0:	f001 fbf0 	bl	8007684 <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	71fb      	strb	r3, [r7, #7]
 8005ea8:	e02d      	b.n	8005f06 <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	4a22      	ldr	r2, [pc, #136]	; (8005f38 <gos_queueDump+0xbc>)
 8005eae:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebe:	d026      	beq.n	8005f0e <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <gos_queueDump+0xbc>)
 8005ec4:	f641 7184 	movw	r1, #8068	; 0x1f84
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8005ed0:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	f641 7284 	movw	r2, #8068	; 0x1f84
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <gos_queueDump+0xbc>)
 8005ede:	4413      	add	r3, r2
 8005ee0:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	4914      	ldr	r1, [pc, #80]	; (8005f38 <gos_queueDump+0xbc>)
 8005ee6:	f641 7084 	movw	r0, #8068	; 0x1f84
 8005eea:	fb00 f303 	mul.w	r3, r0, r3
 8005eee:	440b      	add	r3, r1
 8005ef0:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4810      	ldr	r0, [pc, #64]	; (8005f3c <gos_queueDump+0xc0>)
 8005efc:	f001 fbc2 	bl	8007684 <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	3301      	adds	r3, #1
 8005f04:	71fb      	strb	r3, [r7, #7]
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d9ce      	bls.n	8005eaa <gos_queueDump+0x2e>
 8005f0c:	e000      	b.n	8005f10 <gos_queueDump+0x94>
            break;
 8005f0e:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 8005f10:	480b      	ldr	r0, [pc, #44]	; (8005f40 <gos_queueDump+0xc4>)
 8005f12:	f001 fbb7 	bl	8007684 <gos_shellDriverTransmitString>
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	08008d8c 	.word	0x08008d8c
 8005f24:	08008d9c 	.word	0x08008d9c
 8005f28:	08008dd8 	.word	0x08008dd8
 8005f2c:	08008de4 	.word	0x08008de4
 8005f30:	08008dec 	.word	0x08008dec
 8005f34:	08008df0 	.word	0x08008df0
 8005f38:	20001c24 	.word	0x20001c24
 8005f3c:	08008e08 	.word	0x08008e08
 8005f40:	08008e24 	.word	0x08008e24

08005f44 <gos_shellInit>:

/*
 * Function: gos_shellInit
 */
gos_result_t gos_shellInit (void_t)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            shellInitResult = GOS_ERROR;
 8005f4a:	23ae      	movs	r3, #174	; 0xae
 8005f4c:	71fb      	strb	r3, [r7, #7]
    gos_shellCommandIndex_t index           = 0u;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <gos_shellInit+0x64>)
 8005f54:	2236      	movs	r2, #54	; 0x36
 8005f56:	701a      	strb	r2, [r3, #0]

    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	71bb      	strb	r3, [r7, #6]
 8005f5c:	e00c      	b.n	8005f78 <gos_shellInit+0x34>
    {
        shellCommands[index].commandHandler = NULL;
 8005f5e:	79ba      	ldrb	r2, [r7, #6]
 8005f60:	4912      	ldr	r1, [pc, #72]	; (8005fac <gos_shellInit+0x68>)
 8005f62:	4613      	mov	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3314      	adds	r3, #20
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8005f72:	79bb      	ldrb	r3, [r7, #6]
 8005f74:	3301      	adds	r3, #1
 8005f76:	71bb      	strb	r3, [r7, #6]
 8005f78:	79bb      	ldrb	r3, [r7, #6]
 8005f7a:	2b0f      	cmp	r3, #15
 8005f7c:	d9ef      	bls.n	8005f5e <gos_shellInit+0x1a>
    }

    if (gos_kernelTaskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 8005f7e:	490c      	ldr	r1, [pc, #48]	; (8005fb0 <gos_shellInit+0x6c>)
 8005f80:	480c      	ldr	r0, [pc, #48]	; (8005fb4 <gos_shellInit+0x70>)
 8005f82:	f7fc fcd9 	bl	8002938 <gos_kernelTaskRegister>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b55      	cmp	r3, #85	; 0x55
 8005f8a:	d107      	bne.n	8005f9c <gos_shellInit+0x58>
        gos_shellRegisterCommand(&shellCommand) == GOS_SUCCESS)
 8005f8c:	480a      	ldr	r0, [pc, #40]	; (8005fb8 <gos_shellInit+0x74>)
 8005f8e:	f000 f815 	bl	8005fbc <gos_shellRegisterCommand>
 8005f92:	4603      	mov	r3, r0
    if (gos_kernelTaskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 8005f94:	2b55      	cmp	r3, #85	; 0x55
 8005f96:	d101      	bne.n	8005f9c <gos_shellInit+0x58>
    {
        shellInitResult = GOS_SUCCESS;
 8005f98:	2355      	movs	r3, #85	; 0x55
 8005f9a:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellInitResult;
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20009cd6 	.word	0x20009cd6
 8005fac:	20009a48 	.word	0x20009a48
 8005fb0:	20009c08 	.word	0x20009c08
 8005fb4:	2000143c 	.word	0x2000143c
 8005fb8:	200014ac 	.word	0x200014ac

08005fbc <gos_shellRegisterCommand>:

/*
 * Function: gos_shellRegisterCommand
 */
gos_result_t gos_shellRegisterCommand (gos_shellCommand_t* command)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            shellRegisterCommandResult = GOS_ERROR;
 8005fc4:	23ae      	movs	r3, #174	; 0xae
 8005fc6:	73fb      	strb	r3, [r7, #15]
    gos_shellCommandIndex_t index                      = 0u;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (command->commandHandler != NULL && command->command != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d03c      	beq.n	800604e <gos_shellRegisterCommand+0x92>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d039      	beq.n	800604e <gos_shellRegisterCommand+0x92>
    {
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73bb      	strb	r3, [r7, #14]
 8005fde:	e033      	b.n	8006048 <gos_shellRegisterCommand+0x8c>
        {
            if (shellCommands[index].commandHandler == NULL)
 8005fe0:	7bba      	ldrb	r2, [r7, #14]
 8005fe2:	491d      	ldr	r1, [pc, #116]	; (8006058 <gos_shellRegisterCommand+0x9c>)
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	3314      	adds	r3, #20
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d125      	bne.n	8006042 <gos_shellRegisterCommand+0x86>
            {
                shellCommands[index].commandHandler = command->commandHandler;
 8005ff6:	7bba      	ldrb	r2, [r7, #14]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6959      	ldr	r1, [r3, #20]
 8005ffc:	4816      	ldr	r0, [pc, #88]	; (8006058 <gos_shellRegisterCommand+0x9c>)
 8005ffe:	4613      	mov	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4403      	add	r3, r0
 8006008:	3314      	adds	r3, #20
 800600a:	6019      	str	r1, [r3, #0]
                shellCommands[index].commandHandlerPrivileges = command->commandHandlerPrivileges;
 800600c:	7bba      	ldrb	r2, [r7, #14]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8b18      	ldrh	r0, [r3, #24]
 8006012:	4911      	ldr	r1, [pc, #68]	; (8006058 <gos_shellRegisterCommand+0x9c>)
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	3318      	adds	r3, #24
 8006020:	4602      	mov	r2, r0
 8006022:	801a      	strh	r2, [r3, #0]
                (void_t) strcpy(shellCommands[index].command, command->command);
 8006024:	7bba      	ldrb	r2, [r7, #14]
 8006026:	4613      	mov	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <gos_shellRegisterCommand+0x9c>)
 8006030:	4413      	add	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fc90 	bl	800795c <strcpy>
                shellRegisterCommandResult = GOS_SUCCESS;
 800603c:	2355      	movs	r3, #85	; 0x55
 800603e:	73fb      	strb	r3, [r7, #15]
                break;
 8006040:	e005      	b.n	800604e <gos_shellRegisterCommand+0x92>
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8006042:	7bbb      	ldrb	r3, [r7, #14]
 8006044:	3301      	adds	r3, #1
 8006046:	73bb      	strb	r3, [r7, #14]
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	2b0f      	cmp	r3, #15
 800604c:	d9c8      	bls.n	8005fe0 <gos_shellRegisterCommand+0x24>
            {
                // Nothing to do.
            }
        }
    }
    return shellRegisterCommandResult;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20009a48 	.word	0x20009a48

0800605c <gos_shellDaemonTask>:
 *          a string.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellDaemonTask (void_t)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_shellCommandIndex_t index              = 0u;
 8006062:	2300      	movs	r3, #0
 8006064:	71fb      	strb	r3, [r7, #7]
    u16_t                   actualCommandIndex = 0u;
 8006066:	2300      	movs	r3, #0
 8006068:	80bb      	strh	r3, [r7, #4]
    u16_t                   paramIndex         = 0u;
 800606a:	2300      	movs	r3, #0
 800606c:	807b      	strh	r3, [r7, #2]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 800606e:	4b70      	ldr	r3, [pc, #448]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	4b6f      	ldr	r3, [pc, #444]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 8006076:	4413      	add	r3, r2
 8006078:	4618      	mov	r0, r3
 800607a:	f001 faeb 	bl	8007654 <gos_shellDriverReceiveChar>
 800607e:	4603      	mov	r3, r0
 8006080:	2b55      	cmp	r3, #85	; 0x55
 8006082:	f040 80d0 	bne.w	8006226 <gos_shellDaemonTask+0x1ca>
        {
            if (useEcho == GOS_TRUE)
 8006086:	4b6c      	ldr	r3, [pc, #432]	; (8006238 <gos_shellDaemonTask+0x1dc>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b36      	cmp	r3, #54	; 0x36
 800608c:	d107      	bne.n	800609e <gos_shellDaemonTask+0x42>
            {
                (void_t) gos_shellDriverTransmitString(&commandBuffer[commandBufferIndex]);
 800608e:	4b68      	ldr	r3, [pc, #416]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	4b67      	ldr	r3, [pc, #412]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 8006096:	4413      	add	r3, r2
 8006098:	4618      	mov	r0, r3
 800609a:	f001 faf3 	bl	8007684 <gos_shellDriverTransmitString>
            }

            /*
             * Backspace character check
             */
            if (commandBuffer[commandBufferIndex] == '\177')
 800609e:	4b64      	ldr	r3, [pc, #400]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	4b63      	ldr	r3, [pc, #396]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 80060a6:	5c9b      	ldrb	r3, [r3, r2]
 80060a8:	2b7f      	cmp	r3, #127	; 0x7f
 80060aa:	d10c      	bne.n	80060c6 <gos_shellDaemonTask+0x6a>
            {
                commandBuffer[commandBufferIndex] = '\0';
 80060ac:	4b60      	ldr	r3, [pc, #384]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	4b60      	ldr	r3, [pc, #384]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 80060b4:	2100      	movs	r1, #0
 80060b6:	5499      	strb	r1, [r3, r2]
                commandBufferIndex--;
 80060b8:	4b5d      	ldr	r3, [pc, #372]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	4b5b      	ldr	r3, [pc, #364]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	e0af      	b.n	8006226 <gos_shellDaemonTask+0x1ca>
            }
            /*
             * Enter character check
             */
            else if (commandBuffer[commandBufferIndex] == '\r')
 80060c6:	4b5a      	ldr	r3, [pc, #360]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b59      	ldr	r3, [pc, #356]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 80060ce:	5c9b      	ldrb	r3, [r3, r2]
 80060d0:	2b0d      	cmp	r3, #13
 80060d2:	f040 8096 	bne.w	8006202 <gos_shellDaemonTask+0x1a6>
            {
                if (useEcho == GOS_TRUE)
 80060d6:	4b58      	ldr	r3, [pc, #352]	; (8006238 <gos_shellDaemonTask+0x1dc>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b36      	cmp	r3, #54	; 0x36
 80060dc:	d102      	bne.n	80060e4 <gos_shellDaemonTask+0x88>
                {
                    (void_t) gos_shellDriverTransmitString("\n");
 80060de:	4857      	ldr	r0, [pc, #348]	; (800623c <gos_shellDaemonTask+0x1e0>)
 80060e0:	f001 fad0 	bl	8007684 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                commandBuffer[commandBufferIndex] = '\0';
 80060e4:	4b52      	ldr	r3, [pc, #328]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	4b52      	ldr	r3, [pc, #328]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 80060ec:	2100      	movs	r1, #0
 80060ee:	5499      	strb	r1, [r3, r2]
                actualCommandIndex = 0u;
 80060f0:	2300      	movs	r3, #0
 80060f2:	80bb      	strh	r3, [r7, #4]
                paramIndex = 0u;
 80060f4:	2300      	movs	r3, #0
 80060f6:	807b      	strh	r3, [r7, #2]

                // Get command.
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 80060f8:	e008      	b.n	800610c <gos_shellDaemonTask+0xb0>
                {
                    actualCommand[actualCommandIndex] = commandBuffer[actualCommandIndex];
 80060fa:	88ba      	ldrh	r2, [r7, #4]
 80060fc:	88bb      	ldrh	r3, [r7, #4]
 80060fe:	494d      	ldr	r1, [pc, #308]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 8006100:	5c89      	ldrb	r1, [r1, r2]
 8006102:	4a4f      	ldr	r2, [pc, #316]	; (8006240 <gos_shellDaemonTask+0x1e4>)
 8006104:	54d1      	strb	r1, [r2, r3]
                    actualCommandIndex++;
 8006106:	88bb      	ldrh	r3, [r7, #4]
 8006108:	3301      	adds	r3, #1
 800610a:	80bb      	strh	r3, [r7, #4]
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 800610c:	88bb      	ldrh	r3, [r7, #4]
 800610e:	4a49      	ldr	r2, [pc, #292]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 8006110:	5cd3      	ldrb	r3, [r2, r3]
 8006112:	2b20      	cmp	r3, #32
 8006114:	d004      	beq.n	8006120 <gos_shellDaemonTask+0xc4>
 8006116:	88bb      	ldrh	r3, [r7, #4]
 8006118:	4a46      	ldr	r2, [pc, #280]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 800611a:	5cd3      	ldrb	r3, [r2, r3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1ec      	bne.n	80060fa <gos_shellDaemonTask+0x9e>
                }
                actualCommand[actualCommandIndex] = '\0';
 8006120:	88bb      	ldrh	r3, [r7, #4]
 8006122:	4a47      	ldr	r2, [pc, #284]	; (8006240 <gos_shellDaemonTask+0x1e4>)
 8006124:	2100      	movs	r1, #0
 8006126:	54d1      	strb	r1, [r2, r3]
                actualCommandIndex++;
 8006128:	88bb      	ldrh	r3, [r7, #4]
 800612a:	3301      	adds	r3, #1
 800612c:	80bb      	strh	r3, [r7, #4]

                // Get parameters.
                while (commandBuffer[actualCommandIndex] != '\0')
 800612e:	e00b      	b.n	8006148 <gos_shellDaemonTask+0xec>
                {
                    commandParams[paramIndex++] = commandBuffer[actualCommandIndex++];
 8006130:	88bb      	ldrh	r3, [r7, #4]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	80ba      	strh	r2, [r7, #4]
 8006136:	4619      	mov	r1, r3
 8006138:	887b      	ldrh	r3, [r7, #2]
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	807a      	strh	r2, [r7, #2]
 800613e:	461a      	mov	r2, r3
 8006140:	4b3c      	ldr	r3, [pc, #240]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 8006142:	5c59      	ldrb	r1, [r3, r1]
 8006144:	4b3f      	ldr	r3, [pc, #252]	; (8006244 <gos_shellDaemonTask+0x1e8>)
 8006146:	5499      	strb	r1, [r3, r2]
                while (commandBuffer[actualCommandIndex] != '\0')
 8006148:	88bb      	ldrh	r3, [r7, #4]
 800614a:	4a3a      	ldr	r2, [pc, #232]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 800614c:	5cd3      	ldrb	r3, [r2, r3]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1ee      	bne.n	8006130 <gos_shellDaemonTask+0xd4>
                }
                commandParams[paramIndex] = '\0';
 8006152:	887b      	ldrh	r3, [r7, #2]
 8006154:	4a3b      	ldr	r2, [pc, #236]	; (8006244 <gos_shellDaemonTask+0x1e8>)
 8006156:	2100      	movs	r1, #0
 8006158:	54d1      	strb	r1, [r2, r3]

                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800615a:	2300      	movs	r3, #0
 800615c:	71fb      	strb	r3, [r7, #7]
 800615e:	e03c      	b.n	80061da <gos_shellDaemonTask+0x17e>
                {
                    if (strcmp(shellCommands[index].command, actualCommand) == 0)
 8006160:	79fa      	ldrb	r2, [r7, #7]
 8006162:	4613      	mov	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	1a9b      	subs	r3, r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4a37      	ldr	r2, [pc, #220]	; (8006248 <gos_shellDaemonTask+0x1ec>)
 800616c:	4413      	add	r3, r2
 800616e:	4934      	ldr	r1, [pc, #208]	; (8006240 <gos_shellDaemonTask+0x1e4>)
 8006170:	4618      	mov	r0, r3
 8006172:	f7fa f84d 	bl	8000210 <strcmp>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d12b      	bne.n	80061d4 <gos_shellDaemonTask+0x178>
                    {
                        if (shellCommands[index].commandHandler != NULL)
 800617c:	79fa      	ldrb	r2, [r7, #7]
 800617e:	4932      	ldr	r1, [pc, #200]	; (8006248 <gos_shellDaemonTask+0x1ec>)
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	3314      	adds	r3, #20
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d027      	beq.n	80061e2 <gos_shellDaemonTask+0x186>
                        {
                            (void_t) gos_kernelTaskSetPrivileges(shellDaemonTaskId, shellCommands[index].commandHandlerPrivileges);
 8006192:	4b2e      	ldr	r3, [pc, #184]	; (800624c <gos_shellDaemonTask+0x1f0>)
 8006194:	8818      	ldrh	r0, [r3, #0]
 8006196:	79fa      	ldrb	r2, [r7, #7]
 8006198:	492b      	ldr	r1, [pc, #172]	; (8006248 <gos_shellDaemonTask+0x1ec>)
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	3318      	adds	r3, #24
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	4619      	mov	r1, r3
 80061aa:	f7fd fc51 	bl	8003a50 <gos_kernelTaskSetPrivileges>
                            shellCommands[index].commandHandler(commandParams);
 80061ae:	79fa      	ldrb	r2, [r7, #7]
 80061b0:	4925      	ldr	r1, [pc, #148]	; (8006248 <gos_shellDaemonTask+0x1ec>)
 80061b2:	4613      	mov	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	3314      	adds	r3, #20
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4820      	ldr	r0, [pc, #128]	; (8006244 <gos_shellDaemonTask+0x1e8>)
 80061c2:	4798      	blx	r3
                            (void_t) gos_kernelTaskSetPrivileges(shellDaemonTaskId, GOS_TASK_PRIVILEGE_KERNEL);
 80061c4:	4b21      	ldr	r3, [pc, #132]	; (800624c <gos_shellDaemonTask+0x1f0>)
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fd fc3f 	bl	8003a50 <gos_kernelTaskSetPrivileges>
                        }
                        else
                        {
                            // Nothing to do.
                        }
                        break;
 80061d2:	e006      	b.n	80061e2 <gos_shellDaemonTask+0x186>
                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	3301      	adds	r3, #1
 80061d8:	71fb      	strb	r3, [r7, #7]
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	2b0f      	cmp	r3, #15
 80061de:	d9bf      	bls.n	8006160 <gos_shellDaemonTask+0x104>
 80061e0:	e000      	b.n	80061e4 <gos_shellDaemonTask+0x188>
                        break;
 80061e2:	bf00      	nop
                        // Nothing to do.
                    }
                }

                // If command not found.
                if (index == CFG_SHELL_MAX_COMMAND_NUMBER)
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	2b10      	cmp	r3, #16
 80061e8:	d102      	bne.n	80061f0 <gos_shellDaemonTask+0x194>
                {
                    (void_t) gos_shellDriverTransmitString("Unrecognized command!\r\n");
 80061ea:	4819      	ldr	r0, [pc, #100]	; (8006250 <gos_shellDaemonTask+0x1f4>)
 80061ec:	f001 fa4a 	bl	8007684 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 80061f0:	22c8      	movs	r2, #200	; 0xc8
 80061f2:	2100      	movs	r1, #0
 80061f4:	480f      	ldr	r0, [pc, #60]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 80061f6:	f001 fb7d 	bl	80078f4 <memset>
                commandBufferIndex = 0u;
 80061fa:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	e011      	b.n	8006226 <gos_shellDaemonTask+0x1ca>
            }
            else
            {
                commandBufferIndex++;
 8006202:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 800620c:	801a      	strh	r2, [r3, #0]

                if (commandBufferIndex >= CFG_SHELL_COMMAND_BUFFER_SIZE)
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	2bc7      	cmp	r3, #199	; 0xc7
 8006214:	d907      	bls.n	8006226 <gos_shellDaemonTask+0x1ca>
                {
                    (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 8006216:	22c8      	movs	r2, #200	; 0xc8
 8006218:	2100      	movs	r1, #0
 800621a:	4806      	ldr	r0, [pc, #24]	; (8006234 <gos_shellDaemonTask+0x1d8>)
 800621c:	f001 fb6a 	bl	80078f4 <memset>
                    commandBufferIndex = 0u;
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <gos_shellDaemonTask+0x1d4>)
 8006222:	2200      	movs	r2, #0
 8006224:	801a      	strh	r2, [r3, #0]
                {
                    // Nothing to do.
                }
            }
        }
        (void_t) gos_kernelTaskSleep(GOS_SHELL_DAEMON_POLL_TIME_MS);
 8006226:	2032      	movs	r0, #50	; 0x32
 8006228:	f7fc fd12 	bl	8002c50 <gos_kernelTaskSleep>
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 800622c:	e71f      	b.n	800606e <gos_shellDaemonTask+0x12>
 800622e:	bf00      	nop
 8006230:	20009cd4 	.word	0x20009cd4
 8006234:	20009c0c 	.word	0x20009c0c
 8006238:	20009cd6 	.word	0x20009cd6
 800623c:	08008e64 	.word	0x08008e64
 8006240:	20009cd8 	.word	0x20009cd8
 8006244:	20009cec 	.word	0x20009cec
 8006248:	20009a48 	.word	0x20009a48
 800624c:	20009c08 	.word	0x20009c08
 8006250:	08008e68 	.word	0x08008e68

08006254 <gos_shellCommandHandler>:
 * @details Handles the built-in shell command.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellCommandHandler (char_t* params)
{
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b089      	sub	sp, #36	; 0x24
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t                    index        = 0u;
 800625c:	2300      	movs	r3, #0
 800625e:	75fb      	strb	r3, [r7, #23]
    gos_shellCommandIndex_t commandIndex = 0u;
 8006260:	2300      	movs	r3, #0
 8006262:	75bb      	strb	r3, [r7, #22]
    gos_tid_t               taskId       = GOS_INVALID_TASK_ID;
 8006264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006268:	82bb      	strh	r3, [r7, #20]
    gos_runtime_t           totalRunTime = {0};
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	605a      	str	r2, [r3, #4]

    /*
     * Function code.
     */
    if (strcmp(params, "dump") == 0)
 8006274:	499e      	ldr	r1, [pc, #632]	; (80064f0 <gos_shellCommandHandler+0x29c>)
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7f9 ffca 	bl	8000210 <strcmp>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <gos_shellCommandHandler+0x34>
    {
        gos_Dump();
 8006282:	f7fe ff21 	bl	80050c8 <gos_Dump>
        else
        {
            // Nothing to do.
        }
    }
}
 8006286:	e1d1      	b.n	800662c <gos_shellCommandHandler+0x3d8>
    else if (strcmp(params, "reset") == 0)
 8006288:	499a      	ldr	r1, [pc, #616]	; (80064f4 <gos_shellCommandHandler+0x2a0>)
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7f9 ffc0 	bl	8000210 <strcmp>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <gos_shellCommandHandler+0x48>
        gos_kernelReset();
 8006296:	f7fd fd83 	bl	8003da0 <gos_kernelReset>
}
 800629a:	e1c7      	b.n	800662c <gos_shellCommandHandler+0x3d8>
    else if (strcmp(params, "help") == 0)
 800629c:	4996      	ldr	r1, [pc, #600]	; (80064f8 <gos_shellCommandHandler+0x2a4>)
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7f9 ffb6 	bl	8000210 <strcmp>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d137      	bne.n	800631a <gos_shellCommandHandler+0xc6>
        (void_t) gos_shellDriverTransmitString("List of registered shell commands: \r\n");
 80062aa:	4894      	ldr	r0, [pc, #592]	; (80064fc <gos_shellCommandHandler+0x2a8>)
 80062ac:	f001 f9ea 	bl	8007684 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	75bb      	strb	r3, [r7, #22]
 80062b4:	e02a      	b.n	800630c <gos_shellCommandHandler+0xb8>
            if (strcmp(shellCommands[commandIndex].command, "") == 0)
 80062b6:	7dba      	ldrb	r2, [r7, #22]
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4a8f      	ldr	r2, [pc, #572]	; (8006500 <gos_shellCommandHandler+0x2ac>)
 80062c2:	4413      	add	r3, r2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 81af 	beq.w	800662a <gos_shellCommandHandler+0x3d6>
            else if (strcmp(shellCommands[commandIndex].command, "shell") == 0)
 80062cc:	7dba      	ldrb	r2, [r7, #22]
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4a8a      	ldr	r2, [pc, #552]	; (8006500 <gos_shellCommandHandler+0x2ac>)
 80062d8:	4413      	add	r3, r2
 80062da:	498a      	ldr	r1, [pc, #552]	; (8006504 <gos_shellCommandHandler+0x2b0>)
 80062dc:	4618      	mov	r0, r3
 80062de:	f7f9 ff97 	bl	8000210 <strcmp>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d103      	bne.n	80062f0 <gos_shellCommandHandler+0x9c>
                (void_t) gos_shellDriverTransmitString("\t"
 80062e8:	4887      	ldr	r0, [pc, #540]	; (8006508 <gos_shellCommandHandler+0x2b4>)
 80062ea:	f001 f9cb 	bl	8007684 <gos_shellDriverTransmitString>
 80062ee:	e00a      	b.n	8006306 <gos_shellCommandHandler+0xb2>
                (void_t) gos_shellDriverTransmitString("\t- %s\r\n", shellCommands[commandIndex].command);
 80062f0:	7dba      	ldrb	r2, [r7, #22]
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4a81      	ldr	r2, [pc, #516]	; (8006500 <gos_shellCommandHandler+0x2ac>)
 80062fc:	4413      	add	r3, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	4882      	ldr	r0, [pc, #520]	; (800650c <gos_shellCommandHandler+0x2b8>)
 8006302:	f001 f9bf 	bl	8007684 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 8006306:	7dbb      	ldrb	r3, [r7, #22]
 8006308:	3301      	adds	r3, #1
 800630a:	75bb      	strb	r3, [r7, #22]
 800630c:	7dbb      	ldrb	r3, [r7, #22]
 800630e:	2b0f      	cmp	r3, #15
 8006310:	d9d1      	bls.n	80062b6 <gos_shellCommandHandler+0x62>
}
 8006312:	e18b      	b.n	800662c <gos_shellCommandHandler+0x3d8>
            index++;
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	3301      	adds	r3, #1
 8006318:	75fb      	strb	r3, [r7, #23]
        while (params[index] != ' ' && params[index])
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b20      	cmp	r3, #32
 8006324:	d005      	beq.n	8006332 <gos_shellCommandHandler+0xde>
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4413      	add	r3, r2
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f0      	bne.n	8006314 <gos_shellCommandHandler+0xc0>
        params[index] = '\0';
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	4413      	add	r3, r2
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
        if (strcmp(params, "delete_tid") == 0)
 800633c:	4974      	ldr	r1, [pc, #464]	; (8006510 <gos_shellCommandHandler+0x2bc>)
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7f9 ff66 	bl	8000210 <strcmp>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d120      	bne.n	800638c <gos_shellCommandHandler+0x138>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	3301      	adds	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	4413      	add	r3, r2
 8006356:	2210      	movs	r2, #16
 8006358:	2100      	movs	r1, #0
 800635a:	4618      	mov	r0, r3
 800635c:	f001 fa80 	bl	8007860 <strtol>
 8006360:	4603      	mov	r3, r0
 8006362:	b29b      	uxth	r3, r3
 8006364:	82bb      	strh	r3, [r7, #20]
            if (gos_kernelTaskDelete(taskId) == GOS_SUCCESS)
 8006366:	8abb      	ldrh	r3, [r7, #20]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fd f83d 	bl	80033e8 <gos_kernelTaskDelete>
 800636e:	4603      	mov	r3, r0
 8006370:	2b55      	cmp	r3, #85	; 0x55
 8006372:	d105      	bne.n	8006380 <gos_shellCommandHandler+0x12c>
                (void_t) gos_shellDriverTransmitString("0x%X task has been deleted.\r\n", taskId);
 8006374:	8abb      	ldrh	r3, [r7, #20]
 8006376:	4619      	mov	r1, r3
 8006378:	4866      	ldr	r0, [pc, #408]	; (8006514 <gos_shellCommandHandler+0x2c0>)
 800637a:	f001 f983 	bl	8007684 <gos_shellDriverTransmitString>
}
 800637e:	e155      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be deleted.\r\n", taskId);
 8006380:	8abb      	ldrh	r3, [r7, #20]
 8006382:	4619      	mov	r1, r3
 8006384:	4864      	ldr	r0, [pc, #400]	; (8006518 <gos_shellCommandHandler+0x2c4>)
 8006386:	f001 f97d 	bl	8007684 <gos_shellDriverTransmitString>
}
 800638a:	e14f      	b.n	800662c <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "delete") == 0)
 800638c:	4963      	ldr	r1, [pc, #396]	; (800651c <gos_shellCommandHandler+0x2c8>)
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7f9 ff3e 	bl	8000210 <strcmp>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d129      	bne.n	80063ee <gos_shellCommandHandler+0x19a>
            if (gos_kernelTaskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	3301      	adds	r3, #1
 800639e:	75fb      	strb	r3, [r7, #23]
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4413      	add	r3, r2
 80063a6:	f107 0214 	add.w	r2, r7, #20
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fd fbdd 	bl	8003b6c <gos_kernelTaskGetId>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b55      	cmp	r3, #85	; 0x55
 80063b6:	d116      	bne.n	80063e6 <gos_shellCommandHandler+0x192>
                if (gos_kernelTaskDelete(taskId) == GOS_SUCCESS)
 80063b8:	8abb      	ldrh	r3, [r7, #20]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd f814 	bl	80033e8 <gos_kernelTaskDelete>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b55      	cmp	r3, #85	; 0x55
 80063c4:	d107      	bne.n	80063d6 <gos_shellCommandHandler+0x182>
                    (void_t) gos_shellDriverTransmitString("%s has been deleted.\r\n", &params[index]);
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	4413      	add	r3, r2
 80063cc:	4619      	mov	r1, r3
 80063ce:	4854      	ldr	r0, [pc, #336]	; (8006520 <gos_shellCommandHandler+0x2cc>)
 80063d0:	f001 f958 	bl	8007684 <gos_shellDriverTransmitString>
}
 80063d4:	e12a      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                    (void_t) gos_shellDriverTransmitString("%s could not be deleted.\r\n", &params[index]);
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	4413      	add	r3, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4851      	ldr	r0, [pc, #324]	; (8006524 <gos_shellCommandHandler+0x2d0>)
 80063e0:	f001 f950 	bl	8007684 <gos_shellDriverTransmitString>
}
 80063e4:	e122      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 80063e6:	4850      	ldr	r0, [pc, #320]	; (8006528 <gos_shellCommandHandler+0x2d4>)
 80063e8:	f001 f94c 	bl	8007684 <gos_shellDriverTransmitString>
}
 80063ec:	e11e      	b.n	800662c <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "suspend_tid") == 0)
 80063ee:	494f      	ldr	r1, [pc, #316]	; (800652c <gos_shellCommandHandler+0x2d8>)
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7f9 ff0d 	bl	8000210 <strcmp>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d120      	bne.n	800643e <gos_shellCommandHandler+0x1ea>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	3301      	adds	r3, #1
 8006400:	75fb      	strb	r3, [r7, #23]
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	2210      	movs	r2, #16
 800640a:	2100      	movs	r1, #0
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fa27 	bl	8007860 <strtol>
 8006412:	4603      	mov	r3, r0
 8006414:	b29b      	uxth	r3, r3
 8006416:	82bb      	strh	r3, [r7, #20]
            if (gos_kernelTaskSuspend(taskId) == GOS_SUCCESS)
 8006418:	8abb      	ldrh	r3, [r7, #20]
 800641a:	4618      	mov	r0, r3
 800641c:	f7fc fd0e 	bl	8002e3c <gos_kernelTaskSuspend>
 8006420:	4603      	mov	r3, r0
 8006422:	2b55      	cmp	r3, #85	; 0x55
 8006424:	d105      	bne.n	8006432 <gos_shellCommandHandler+0x1de>
                (void_t) gos_shellDriverTransmitString("0x%X task has been suspended.\r\n", taskId);
 8006426:	8abb      	ldrh	r3, [r7, #20]
 8006428:	4619      	mov	r1, r3
 800642a:	4841      	ldr	r0, [pc, #260]	; (8006530 <gos_shellCommandHandler+0x2dc>)
 800642c:	f001 f92a 	bl	8007684 <gos_shellDriverTransmitString>
}
 8006430:	e0fc      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be suspended.\r\n", taskId);
 8006432:	8abb      	ldrh	r3, [r7, #20]
 8006434:	4619      	mov	r1, r3
 8006436:	483f      	ldr	r0, [pc, #252]	; (8006534 <gos_shellCommandHandler+0x2e0>)
 8006438:	f001 f924 	bl	8007684 <gos_shellDriverTransmitString>
}
 800643c:	e0f6      	b.n	800662c <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "suspend") == 0)
 800643e:	493e      	ldr	r1, [pc, #248]	; (8006538 <gos_shellCommandHandler+0x2e4>)
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7f9 fee5 	bl	8000210 <strcmp>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d129      	bne.n	80064a0 <gos_shellCommandHandler+0x24c>
            if (gos_kernelTaskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800644c:	7dfb      	ldrb	r3, [r7, #23]
 800644e:	3301      	adds	r3, #1
 8006450:	75fb      	strb	r3, [r7, #23]
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4413      	add	r3, r2
 8006458:	f107 0214 	add.w	r2, r7, #20
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f7fd fb84 	bl	8003b6c <gos_kernelTaskGetId>
 8006464:	4603      	mov	r3, r0
 8006466:	2b55      	cmp	r3, #85	; 0x55
 8006468:	d116      	bne.n	8006498 <gos_shellCommandHandler+0x244>
                if (gos_kernelTaskSuspend(taskId) == GOS_SUCCESS)
 800646a:	8abb      	ldrh	r3, [r7, #20]
 800646c:	4618      	mov	r0, r3
 800646e:	f7fc fce5 	bl	8002e3c <gos_kernelTaskSuspend>
 8006472:	4603      	mov	r3, r0
 8006474:	2b55      	cmp	r3, #85	; 0x55
 8006476:	d107      	bne.n	8006488 <gos_shellCommandHandler+0x234>
                    (void_t) gos_shellDriverTransmitString("%s has been suspended.\r\n", &params[index]);
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	4619      	mov	r1, r3
 8006480:	482e      	ldr	r0, [pc, #184]	; (800653c <gos_shellCommandHandler+0x2e8>)
 8006482:	f001 f8ff 	bl	8007684 <gos_shellDriverTransmitString>
}
 8006486:	e0d1      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                    (void_t) gos_shellDriverTransmitString("%s could not be suspended.\r\n", &params[index]);
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	4619      	mov	r1, r3
 8006490:	482b      	ldr	r0, [pc, #172]	; (8006540 <gos_shellCommandHandler+0x2ec>)
 8006492:	f001 f8f7 	bl	8007684 <gos_shellDriverTransmitString>
}
 8006496:	e0c9      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 8006498:	4823      	ldr	r0, [pc, #140]	; (8006528 <gos_shellCommandHandler+0x2d4>)
 800649a:	f001 f8f3 	bl	8007684 <gos_shellDriverTransmitString>
}
 800649e:	e0c5      	b.n	800662c <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "resume_tid") == 0)
 80064a0:	4928      	ldr	r1, [pc, #160]	; (8006544 <gos_shellCommandHandler+0x2f0>)
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7f9 feb4 	bl	8000210 <strcmp>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d150      	bne.n	8006550 <gos_shellCommandHandler+0x2fc>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	3301      	adds	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	2210      	movs	r2, #16
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 f9ce 	bl	8007860 <strtol>
 80064c4:	4603      	mov	r3, r0
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	82bb      	strh	r3, [r7, #20]
            if (gos_kernelTaskResume(taskId) == GOS_SUCCESS)
 80064ca:	8abb      	ldrh	r3, [r7, #20]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fc fd8f 	bl	8002ff0 <gos_kernelTaskResume>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b55      	cmp	r3, #85	; 0x55
 80064d6:	d105      	bne.n	80064e4 <gos_shellCommandHandler+0x290>
                (void_t) gos_shellDriverTransmitString("0x%X task has been resumed.\r\n", taskId);
 80064d8:	8abb      	ldrh	r3, [r7, #20]
 80064da:	4619      	mov	r1, r3
 80064dc:	481a      	ldr	r0, [pc, #104]	; (8006548 <gos_shellCommandHandler+0x2f4>)
 80064de:	f001 f8d1 	bl	8007684 <gos_shellDriverTransmitString>
}
 80064e2:	e0a3      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be resumed.\r\n", taskId);
 80064e4:	8abb      	ldrh	r3, [r7, #20]
 80064e6:	4619      	mov	r1, r3
 80064e8:	4818      	ldr	r0, [pc, #96]	; (800654c <gos_shellCommandHandler+0x2f8>)
 80064ea:	f001 f8cb 	bl	8007684 <gos_shellDriverTransmitString>
}
 80064ee:	e09d      	b.n	800662c <gos_shellCommandHandler+0x3d8>
 80064f0:	08008e80 	.word	0x08008e80
 80064f4:	08008e88 	.word	0x08008e88
 80064f8:	08008e90 	.word	0x08008e90
 80064fc:	08008e98 	.word	0x08008e98
 8006500:	20009a48 	.word	0x20009a48
 8006504:	08008ec0 	.word	0x08008ec0
 8006508:	08008ec8 	.word	0x08008ec8
 800650c:	08008f54 	.word	0x08008f54
 8006510:	08008f5c 	.word	0x08008f5c
 8006514:	08008f68 	.word	0x08008f68
 8006518:	08008f88 	.word	0x08008f88
 800651c:	08008fac 	.word	0x08008fac
 8006520:	08008fb4 	.word	0x08008fb4
 8006524:	08008fcc 	.word	0x08008fcc
 8006528:	08008fe8 	.word	0x08008fe8
 800652c:	08009004 	.word	0x08009004
 8006530:	08009010 	.word	0x08009010
 8006534:	08009030 	.word	0x08009030
 8006538:	08009054 	.word	0x08009054
 800653c:	0800905c 	.word	0x0800905c
 8006540:	08009078 	.word	0x08009078
 8006544:	08009098 	.word	0x08009098
 8006548:	080090a4 	.word	0x080090a4
 800654c:	080090c4 	.word	0x080090c4
        else if (strcmp(params, "resume") == 0)
 8006550:	4938      	ldr	r1, [pc, #224]	; (8006634 <gos_shellCommandHandler+0x3e0>)
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7f9 fe5c 	bl	8000210 <strcmp>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d129      	bne.n	80065b2 <gos_shellCommandHandler+0x35e>
            if (gos_kernelTaskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	3301      	adds	r3, #1
 8006562:	75fb      	strb	r3, [r7, #23]
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	f107 0214 	add.w	r2, r7, #20
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd fafb 	bl	8003b6c <gos_kernelTaskGetId>
 8006576:	4603      	mov	r3, r0
 8006578:	2b55      	cmp	r3, #85	; 0x55
 800657a:	d116      	bne.n	80065aa <gos_shellCommandHandler+0x356>
                if (gos_kernelTaskResume(taskId) == GOS_SUCCESS)
 800657c:	8abb      	ldrh	r3, [r7, #20]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fc fd36 	bl	8002ff0 <gos_kernelTaskResume>
 8006584:	4603      	mov	r3, r0
 8006586:	2b55      	cmp	r3, #85	; 0x55
 8006588:	d107      	bne.n	800659a <gos_shellCommandHandler+0x346>
                    (void_t) gos_shellDriverTransmitString("%s has been resumed.\r\n", &params[index]);
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	4413      	add	r3, r2
 8006590:	4619      	mov	r1, r3
 8006592:	4829      	ldr	r0, [pc, #164]	; (8006638 <gos_shellCommandHandler+0x3e4>)
 8006594:	f001 f876 	bl	8007684 <gos_shellDriverTransmitString>
}
 8006598:	e048      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                    (void_t) gos_shellDriverTransmitString("%s could not be resumed.\r\n", &params[index]);
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	4413      	add	r3, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	4826      	ldr	r0, [pc, #152]	; (800663c <gos_shellCommandHandler+0x3e8>)
 80065a4:	f001 f86e 	bl	8007684 <gos_shellDriverTransmitString>
}
 80065a8:	e040      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 80065aa:	4825      	ldr	r0, [pc, #148]	; (8006640 <gos_shellCommandHandler+0x3ec>)
 80065ac:	f001 f86a 	bl	8007684 <gos_shellDriverTransmitString>
}
 80065b0:	e03c      	b.n	800662c <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "cpu") == 0)
 80065b2:	4924      	ldr	r1, [pc, #144]	; (8006644 <gos_shellCommandHandler+0x3f0>)
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7f9 fe2b 	bl	8000210 <strcmp>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11b      	bne.n	80065f8 <gos_shellCommandHandler+0x3a4>
            (void_t) gos_shellDriverTransmitString("CPU usage: %u.%02u%%\r\n", (gos_kernelGetCpuUsage() / 100), (gos_kernelGetCpuUsage() % 100));
 80065c0:	f7fd fbde 	bl	8003d80 <gos_kernelGetCpuUsage>
 80065c4:	4603      	mov	r3, r0
 80065c6:	461a      	mov	r2, r3
 80065c8:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <gos_shellCommandHandler+0x3f4>)
 80065ca:	fba3 2302 	umull	r2, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	461c      	mov	r4, r3
 80065d4:	f7fd fbd4 	bl	8003d80 <gos_kernelGetCpuUsage>
 80065d8:	4603      	mov	r3, r0
 80065da:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <gos_shellCommandHandler+0x3f4>)
 80065dc:	fba2 1203 	umull	r1, r2, r2, r3
 80065e0:	0952      	lsrs	r2, r2, #5
 80065e2:	2164      	movs	r1, #100	; 0x64
 80065e4:	fb01 f202 	mul.w	r2, r1, r2
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	4621      	mov	r1, r4
 80065f0:	4816      	ldr	r0, [pc, #88]	; (800664c <gos_shellCommandHandler+0x3f8>)
 80065f2:	f001 f847 	bl	8007684 <gos_shellDriverTransmitString>
}
 80065f6:	e019      	b.n	800662c <gos_shellCommandHandler+0x3d8>
        else if (strcmp(params, "runtime") == 0)
 80065f8:	4915      	ldr	r1, [pc, #84]	; (8006650 <gos_shellCommandHandler+0x3fc>)
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7f9 fe08 	bl	8000210 <strcmp>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d112      	bne.n	800662c <gos_shellCommandHandler+0x3d8>
            (void_t) gos_runTimeGet(&totalRunTime);
 8006606:	f107 030c 	add.w	r3, r7, #12
 800660a:	4618      	mov	r0, r3
 800660c:	f000 f9ca 	bl	80069a4 <gos_runTimeGet>
                    totalRunTime.days,
 8006610:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) gos_shellDriverTransmitString(
 8006612:	4619      	mov	r1, r3
                    totalRunTime.hours,
 8006614:	7cbb      	ldrb	r3, [r7, #18]
            (void_t) gos_shellDriverTransmitString(
 8006616:	461a      	mov	r2, r3
                    totalRunTime.minutes,
 8006618:	7c7b      	ldrb	r3, [r7, #17]
            (void_t) gos_shellDriverTransmitString(
 800661a:	4618      	mov	r0, r3
                    totalRunTime.seconds
 800661c:	7c3b      	ldrb	r3, [r7, #16]
            (void_t) gos_shellDriverTransmitString(
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	4603      	mov	r3, r0
 8006622:	480c      	ldr	r0, [pc, #48]	; (8006654 <gos_shellCommandHandler+0x400>)
 8006624:	f001 f82e 	bl	8007684 <gos_shellDriverTransmitString>
}
 8006628:	e000      	b.n	800662c <gos_shellCommandHandler+0x3d8>
                break;
 800662a:	bf00      	nop
}
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	bd90      	pop	{r4, r7, pc}
 8006634:	080090e8 	.word	0x080090e8
 8006638:	080090f0 	.word	0x080090f0
 800663c:	08009108 	.word	0x08009108
 8006640:	08008fe8 	.word	0x08008fe8
 8006644:	08009124 	.word	0x08009124
 8006648:	51eb851f 	.word	0x51eb851f
 800664c:	08009128 	.word	0x08009128
 8006650:	08009140 	.word	0x08009140
 8006654:	08009148 	.word	0x08009148

08006658 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_SUCCESS;
 800665e:	2355      	movs	r3, #85	; 0x55
 8006660:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 8006662:	2300      	movs	r3, #0
 8006664:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8006666:	2300      	movs	r3, #0
 8006668:	71bb      	strb	r3, [r7, #6]
 800666a:	e00a      	b.n	8006682 <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 800666c:	79bb      	ldrb	r3, [r7, #6]
 800666e:	4a13      	ldr	r2, [pc, #76]	; (80066bc <gos_signalInit+0x64>)
 8006670:	212c      	movs	r1, #44	; 0x2c
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	2249      	movs	r2, #73	; 0x49
 800667a:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800667c:	79bb      	ldrb	r3, [r7, #6]
 800667e:	3301      	adds	r3, #1
 8006680:	71bb      	strb	r3, [r7, #6]
 8006682:	79bb      	ldrb	r3, [r7, #6]
 8006684:	2b05      	cmp	r3, #5
 8006686:	d9f1      	bls.n	800666c <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_kernelTaskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 8006688:	2100      	movs	r1, #0
 800668a:	480d      	ldr	r0, [pc, #52]	; (80066c0 <gos_signalInit+0x68>)
 800668c:	f7fc f954 	bl	8002938 <gos_kernelTaskRegister>
 8006690:	4603      	mov	r3, r0
 8006692:	2b55      	cmp	r3, #85	; 0x55
 8006694:	d10b      	bne.n	80066ae <gos_signalInit+0x56>
        gos_signalCreate(&kernelTaskDeleteSignal)                 != GOS_SUCCESS ||
 8006696:	480b      	ldr	r0, [pc, #44]	; (80066c4 <gos_signalInit+0x6c>)
 8006698:	f000 f818 	bl	80066cc <gos_signalCreate>
 800669c:	4603      	mov	r3, r0
    if (gos_kernelTaskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 800669e:	2b55      	cmp	r3, #85	; 0x55
 80066a0:	d105      	bne.n	80066ae <gos_signalInit+0x56>
        gos_signalCreate(&kernelDumpReadySignal)                  != GOS_SUCCESS
 80066a2:	4809      	ldr	r0, [pc, #36]	; (80066c8 <gos_signalInit+0x70>)
 80066a4:	f000 f812 	bl	80066cc <gos_signalCreate>
 80066a8:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)                 != GOS_SUCCESS ||
 80066aa:	2b55      	cmp	r3, #85	; 0x55
 80066ac:	d001      	beq.n	80066b2 <gos_signalInit+0x5a>
    )
    {
        signalInitResult = GOS_ERROR;
 80066ae:	23ae      	movs	r3, #174	; 0xae
 80066b0:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 80066b2:	79fb      	ldrb	r3, [r7, #7]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20009d6c 	.word	0x20009d6c
 80066c0:	200014c8 	.word	0x200014c8
 80066c4:	200018f9 	.word	0x200018f9
 80066c8:	200018f8 	.word	0x200018f8

080066cc <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 80066d4:	23ae      	movs	r3, #174	; 0xae
 80066d6:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 80066d8:	2300      	movs	r3, #0
 80066da:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80066dc:	2300      	movs	r3, #0
 80066de:	73bb      	strb	r3, [r7, #14]
 80066e0:	e025      	b.n	800672e <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	4a17      	ldr	r2, [pc, #92]	; (8006744 <gos_signalCreate+0x78>)
 80066e6:	212c      	movs	r1, #44	; 0x2c
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b49      	cmp	r3, #73	; 0x49
 80066f2:	d119      	bne.n	8006728 <gos_signalCreate+0x5c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d016      	beq.n	8006728 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7bba      	ldrb	r2, [r7, #14]
 80066fe:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	4a10      	ldr	r2, [pc, #64]	; (8006744 <gos_signalCreate+0x78>)
 8006704:	212c      	movs	r1, #44	; 0x2c
 8006706:	fb01 f303 	mul.w	r3, r1, r3
 800670a:	4413      	add	r3, r2
 800670c:	2236      	movs	r2, #54	; 0x36
 800670e:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	4a0c      	ldr	r2, [pc, #48]	; (8006744 <gos_signalCreate+0x78>)
 8006714:	212c      	movs	r1, #44	; 0x2c
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	3328      	adds	r3, #40	; 0x28
 800671e:	2249      	movs	r2, #73	; 0x49
 8006720:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 8006722:	2355      	movs	r3, #85	; 0x55
 8006724:	73fb      	strb	r3, [r7, #15]
            break;
 8006726:	e005      	b.n	8006734 <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	3301      	adds	r3, #1
 800672c:	73bb      	strb	r3, [r7, #14]
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b05      	cmp	r3, #5
 8006732:	d9d6      	bls.n	80066e2 <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20009d6c 	.word	0x20009d6c

08006748 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b0a2      	sub	sp, #136	; 0x88
 800674c:	af02      	add	r7, sp, #8
 800674e:	4603      	mov	r3, r0
 8006750:	460a      	mov	r2, r1
 8006752:	71fb      	strb	r3, [r7, #7]
 8006754:	4613      	mov	r3, r2
 8006756:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 8006758:	23ae      	movs	r3, #174	; 0xae
 800675a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 800675e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006762:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    gos_taskDescriptor_t callerTaskDesc     = {0};
 8006766:	f107 030c 	add.w	r3, r7, #12
 800676a:	226e      	movs	r2, #110	; 0x6e
 800676c:	2100      	movs	r1, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f001 f8c0 	bl	80078f4 <memset>

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	2b05      	cmp	r3, #5
 8006778:	d846      	bhi.n	8006808 <gos_signalInvoke+0xc0>
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	4a25      	ldr	r2, [pc, #148]	; (8006814 <gos_signalInvoke+0xcc>)
 800677e:	212c      	movs	r1, #44	; 0x2c
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	4413      	add	r3, r2
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b36      	cmp	r3, #54	; 0x36
 800678a:	d13d      	bne.n	8006808 <gos_signalInvoke+0xc0>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800678c:	f7fd ffb4 	bl	80046f8 <gos_kernelIsCallerIsr>
 8006790:	4603      	mov	r3, r0
 8006792:	2b36      	cmp	r3, #54	; 0x36
 8006794:	d017      	beq.n	80067c6 <gos_signalInvoke+0x7e>
            (gos_kernelTaskGetCurrentId(&callerTaskId)               == GOS_SUCCESS &&
 8006796:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800679a:	4618      	mov	r0, r3
 800679c:	f7fd fa1e 	bl	8003bdc <gos_kernelTaskGetCurrentId>
 80067a0:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 80067a2:	2b55      	cmp	r3, #85	; 0x55
 80067a4:	d125      	bne.n	80067f2 <gos_signalInvoke+0xaa>
            gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)     == GOS_SUCCESS &&
 80067a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80067aa:	f107 020c 	add.w	r2, r7, #12
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fd fa47 	bl	8003c44 <gos_kernelTaskGetData>
 80067b6:	4603      	mov	r3, r0
            (gos_kernelTaskGetCurrentId(&callerTaskId)               == GOS_SUCCESS &&
 80067b8:	2b55      	cmp	r3, #85	; 0x55
 80067ba:	d11a      	bne.n	80067f2 <gos_signalInvoke+0xaa>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 80067bc:	8abb      	ldrh	r3, [r7, #20]
 80067be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)     == GOS_SUCCESS &&
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d015      	beq.n	80067f2 <gos_signalInvoke+0xaa>
            )
        {
            signalArray[signalId].senderId       = senderId;
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	4a12      	ldr	r2, [pc, #72]	; (8006814 <gos_signalInvoke+0xcc>)
 80067ca:	212c      	movs	r1, #44	; 0x2c
 80067cc:	fb01 f303 	mul.w	r3, r1, r3
 80067d0:	4413      	add	r3, r2
 80067d2:	332a      	adds	r3, #42	; 0x2a
 80067d4:	88ba      	ldrh	r2, [r7, #4]
 80067d6:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	4a0e      	ldr	r2, [pc, #56]	; (8006814 <gos_signalInvoke+0xcc>)
 80067dc:	212c      	movs	r1, #44	; 0x2c
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	3328      	adds	r3, #40	; 0x28
 80067e6:	2236      	movs	r2, #54	; 0x36
 80067e8:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 80067ea:	2355      	movs	r3, #85	; 0x55
 80067ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80067f0:	e00a      	b.n	8006808 <gos_signalInvoke+0xc0>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 80067f2:	f107 030c 	add.w	r3, r7, #12
 80067f6:	330a      	adds	r3, #10
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <gos_signalInvoke+0xd0>)
 80067fc:	f240 120f 	movw	r2, #271	; 0x10f
 8006800:	4906      	ldr	r1, [pc, #24]	; (800681c <gos_signalInvoke+0xd4>)
 8006802:	202e      	movs	r0, #46	; 0x2e
 8006804:	f7fe fd5e 	bl	80052c4 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 8006808:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800680c:	4618      	mov	r0, r3
 800680e:	3780      	adds	r7, #128	; 0x80
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20009d6c 	.word	0x20009d6c
 8006818:	08009184 	.word	0x08009184
 800681c:	08009590 	.word	0x08009590

08006820 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 8006826:	2300      	movs	r3, #0
 8006828:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 800682a:	2300      	movs	r3, #0
 800682c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    for (;;)
    {
        for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800682e:	2300      	movs	r3, #0
 8006830:	71bb      	strb	r3, [r7, #6]
 8006832:	e05b      	b.n	80068ec <gos_signalDaemonTask+0xcc>
        {
            if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 8006834:	79bb      	ldrb	r3, [r7, #6]
 8006836:	4a31      	ldr	r2, [pc, #196]	; (80068fc <gos_signalDaemonTask+0xdc>)
 8006838:	212c      	movs	r1, #44	; 0x2c
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	3328      	adds	r3, #40	; 0x28
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b36      	cmp	r3, #54	; 0x36
 8006846:	d14e      	bne.n	80068e6 <gos_signalDaemonTask+0xc6>
            {
                for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 8006848:	2300      	movs	r3, #0
 800684a:	71fb      	strb	r3, [r7, #7]
 800684c:	e03d      	b.n	80068ca <gos_signalDaemonTask+0xaa>
                {
                    if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 800684e:	79ba      	ldrb	r2, [r7, #6]
 8006850:	79f9      	ldrb	r1, [r7, #7]
 8006852:	482a      	ldr	r0, [pc, #168]	; (80068fc <gos_signalDaemonTask+0xdc>)
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4413      	add	r3, r2
 800685e:	440b      	add	r3, r1
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4403      	add	r3, r0
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d033      	beq.n	80068d2 <gos_signalDaemonTask+0xb2>
                        break;
                    }
                    else
                    {
                        // Switch to signal handler privilege.
                        (void_t) gos_kernelTaskSetPrivileges(
 800686a:	4b25      	ldr	r3, [pc, #148]	; (8006900 <gos_signalDaemonTask+0xe0>)
 800686c:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 800686e:	79ba      	ldrb	r2, [r7, #6]
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	4922      	ldr	r1, [pc, #136]	; (80068fc <gos_signalDaemonTask+0xdc>)
 8006874:	2416      	movs	r4, #22
 8006876:	fb04 f202 	mul.w	r2, r4, r2
 800687a:	4413      	add	r3, r2
 800687c:	330c      	adds	r3, #12
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	440b      	add	r3, r1
 8006882:	889b      	ldrh	r3, [r3, #4]
 8006884:	4619      	mov	r1, r3
 8006886:	f7fd f8e3 	bl	8003a50 <gos_kernelTaskSetPrivileges>
                                signalDaemonTaskDescriptor.taskId,
                                signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                );
                        // Call signal handler.
                        signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 800688a:	79ba      	ldrb	r2, [r7, #6]
 800688c:	79f9      	ldrb	r1, [r7, #7]
 800688e:	481b      	ldr	r0, [pc, #108]	; (80068fc <gos_signalDaemonTask+0xdc>)
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	4413      	add	r3, r2
 800689a:	440b      	add	r3, r1
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4403      	add	r3, r0
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	79ba      	ldrb	r2, [r7, #6]
 80068a4:	4915      	ldr	r1, [pc, #84]	; (80068fc <gos_signalDaemonTask+0xdc>)
 80068a6:	202c      	movs	r0, #44	; 0x2c
 80068a8:	fb00 f202 	mul.w	r2, r0, r2
 80068ac:	440a      	add	r2, r1
 80068ae:	322a      	adds	r2, #42	; 0x2a
 80068b0:	8812      	ldrh	r2, [r2, #0]
 80068b2:	4610      	mov	r0, r2
 80068b4:	4798      	blx	r3

                        // Switch back to kernel privilege.
                        (void_t) gos_kernelTaskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 80068b6:	4b12      	ldr	r3, [pc, #72]	; (8006900 <gos_signalDaemonTask+0xe0>)
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ba:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fd f8c6 	bl	8003a50 <gos_kernelTaskSetPrivileges>
                for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	3301      	adds	r3, #1
 80068c8:	71fb      	strb	r3, [r7, #7]
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	2b05      	cmp	r3, #5
 80068ce:	d9be      	bls.n	800684e <gos_signalDaemonTask+0x2e>
 80068d0:	e000      	b.n	80068d4 <gos_signalDaemonTask+0xb4>
                        break;
 80068d2:	bf00      	nop
                    }
                }
                signalArray[signalIndex].invokeRequired = GOS_FALSE;
 80068d4:	79bb      	ldrb	r3, [r7, #6]
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <gos_signalDaemonTask+0xdc>)
 80068d8:	212c      	movs	r1, #44	; 0x2c
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	4413      	add	r3, r2
 80068e0:	3328      	adds	r3, #40	; 0x28
 80068e2:	2249      	movs	r2, #73	; 0x49
 80068e4:	701a      	strb	r2, [r3, #0]
        for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80068e6:	79bb      	ldrb	r3, [r7, #6]
 80068e8:	3301      	adds	r3, #1
 80068ea:	71bb      	strb	r3, [r7, #6]
 80068ec:	79bb      	ldrb	r3, [r7, #6]
 80068ee:	2b05      	cmp	r3, #5
 80068f0:	d9a0      	bls.n	8006834 <gos_signalDaemonTask+0x14>
            {
                // Nothing to do.
            }
        }

        (void_t) gos_kernelTaskSleep(GOS_SIGNAL_DAEMON_POLL_TIME_MS);
 80068f2:	2032      	movs	r0, #50	; 0x32
 80068f4:	f7fc f9ac 	bl	8002c50 <gos_kernelTaskSleep>
        for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80068f8:	e799      	b.n	800682e <gos_signalDaemonTask+0xe>
 80068fa:	bf00      	nop
 80068fc:	20009d6c 	.word	0x20009d6c
 8006900:	200014c8 	.word	0x200014c8

08006904 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_SUCCESS;
 800690a:	2355      	movs	r3, #85	; 0x55
 800690c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                                != GOS_SUCCESS ||
 800690e:	480a      	ldr	r0, [pc, #40]	; (8006938 <gos_timeInit+0x34>)
 8006910:	f7ff fedc 	bl	80066cc <gos_signalCreate>
 8006914:	4603      	mov	r3, r0
 8006916:	2b55      	cmp	r3, #85	; 0x55
 8006918:	d106      	bne.n	8006928 <gos_timeInit+0x24>
        gos_kernelTaskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) != GOS_SUCCESS
 800691a:	4908      	ldr	r1, [pc, #32]	; (800693c <gos_timeInit+0x38>)
 800691c:	4808      	ldr	r0, [pc, #32]	; (8006940 <gos_timeInit+0x3c>)
 800691e:	f7fc f80b 	bl	8002938 <gos_kernelTaskRegister>
 8006922:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                                != GOS_SUCCESS ||
 8006924:	2b55      	cmp	r3, #85	; 0x55
 8006926:	d001      	beq.n	800692c <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_ERROR;
 8006928:	23ae      	movs	r3, #174	; 0xae
 800692a:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 800692c:	79fb      	ldrb	r3, [r7, #7]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20009e7e 	.word	0x20009e7e
 800693c:	20009e7c 	.word	0x20009e7c
 8006940:	20001540 	.word	0x20001540

08006944 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 800694c:	23ae      	movs	r3, #174	; 0xae
 800694e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01c      	beq.n	8006990 <gos_timeGet+0x4c>
    {
        pTime->seconds  = systemTime.seconds;
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <gos_timeGet+0x5c>)
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	701a      	strb	r2, [r3, #0]
        pTime->minutes  = systemTime.minutes;
 800695e:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <gos_timeGet+0x5c>)
 8006960:	785a      	ldrb	r2, [r3, #1]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	705a      	strb	r2, [r3, #1]
        pTime->hours    = systemTime.hours;
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <gos_timeGet+0x5c>)
 8006968:	789a      	ldrb	r2, [r3, #2]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	709a      	strb	r2, [r3, #2]
        pTime->days     = systemTime.days;
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <gos_timeGet+0x5c>)
 8006970:	78da      	ldrb	r2, [r3, #3]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	70da      	strb	r2, [r3, #3]
        pTime->months   = systemTime.months;
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <gos_timeGet+0x5c>)
 8006978:	791a      	ldrb	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	711a      	strb	r2, [r3, #4]
        pTime->years    = systemTime.years;
 800697e:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <gos_timeGet+0x5c>)
 8006980:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8a3 2005 	strh.w	r2, [r3, #5]

        timeGetResult = GOS_SUCCESS;
 800698c:	2355      	movs	r3, #85	; 0x55
 800698e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	20001538 	.word	0x20001538

080069a4 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 80069ac:	23ae      	movs	r3, #174	; 0xae
 80069ae:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <gos_runTimeGet+0x36>
    {
        pRunTime->seconds = systemRunTime.seconds;
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <gos_runTimeGet+0x44>)
 80069b8:	791a      	ldrb	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	711a      	strb	r2, [r3, #4]
        pRunTime->minutes = systemRunTime.minutes;
 80069be:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <gos_runTimeGet+0x44>)
 80069c0:	795a      	ldrb	r2, [r3, #5]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	715a      	strb	r2, [r3, #5]
        pRunTime->hours   = systemRunTime.hours;
 80069c6:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <gos_runTimeGet+0x44>)
 80069c8:	799a      	ldrb	r2, [r3, #6]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	719a      	strb	r2, [r3, #6]
        pRunTime->days    = systemRunTime.days;
 80069ce:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <gos_runTimeGet+0x44>)
 80069d0:	79da      	ldrb	r2, [r3, #7]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	71da      	strb	r2, [r3, #7]

        runtimeGetResult = GOS_SUCCESS;
 80069d6:	2355      	movs	r3, #85	; 0x55
 80069d8:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	20009e74 	.word	0x20009e74

080069ec <gos_timeAddSeconds>:

/*
 * Function: gos_timeAddSeconds
 */
gos_result_t gos_timeAddSeconds (gos_time_t* pTime, u16_t seconds)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddSecondsResult = GOS_ERROR;
 80069f8:	23ae      	movs	r3, #174	; 0xae
 80069fa:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80b3 	beq.w	8006b6a <gos_timeAddSeconds+0x17e>
    {
        // 1. Raw increment.
        pTime->seconds += seconds;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	887b      	ldrh	r3, [r7, #2]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	701a      	strb	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->seconds >= 60u)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b3b      	cmp	r3, #59	; 0x3b
 8006a1a:	f240 80a4 	bls.w	8006b66 <gos_timeAddSeconds+0x17a>
        {
            pTime->minutes += pTime->seconds / 60;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	785a      	ldrb	r2, [r3, #1]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	4954      	ldr	r1, [pc, #336]	; (8006b78 <gos_timeAddSeconds+0x18c>)
 8006a28:	fba1 1303 	umull	r1, r3, r1, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	4413      	add	r3, r2
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	705a      	strb	r2, [r3, #1]
            pTime->seconds %= 60u;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	781a      	ldrb	r2, [r3, #0]
 8006a3c:	4b4e      	ldr	r3, [pc, #312]	; (8006b78 <gos_timeAddSeconds+0x18c>)
 8006a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a42:	0959      	lsrs	r1, r3, #5
 8006a44:	460b      	mov	r3, r1
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	1a5b      	subs	r3, r3, r1
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	701a      	strb	r2, [r3, #0]

            if (pTime->minutes >= 60u)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b3b      	cmp	r3, #59	; 0x3b
 8006a5a:	f240 8084 	bls.w	8006b66 <gos_timeAddSeconds+0x17a>
            {
                pTime->hours += pTime->minutes / 60;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	789a      	ldrb	r2, [r3, #2]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	4944      	ldr	r1, [pc, #272]	; (8006b78 <gos_timeAddSeconds+0x18c>)
 8006a68:	fba1 1303 	umull	r1, r3, r1, r3
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	709a      	strb	r2, [r3, #2]
                pTime->minutes %= 60u;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	785a      	ldrb	r2, [r3, #1]
 8006a7c:	4b3e      	ldr	r3, [pc, #248]	; (8006b78 <gos_timeAddSeconds+0x18c>)
 8006a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a82:	0959      	lsrs	r1, r3, #5
 8006a84:	460b      	mov	r3, r1
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	1a5b      	subs	r3, r3, r1
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	705a      	strb	r2, [r3, #1]

                if (pTime->hours >= 24u)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	789b      	ldrb	r3, [r3, #2]
 8006a98:	2b17      	cmp	r3, #23
 8006a9a:	d964      	bls.n	8006b66 <gos_timeAddSeconds+0x17a>
                {
                    pTime->days += pTime->hours / 24u;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	78da      	ldrb	r2, [r3, #3]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	789b      	ldrb	r3, [r3, #2]
 8006aa4:	4935      	ldr	r1, [pc, #212]	; (8006b7c <gos_timeAddSeconds+0x190>)
 8006aa6:	fba1 1303 	umull	r1, r3, r1, r3
 8006aaa:	091b      	lsrs	r3, r3, #4
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	4413      	add	r3, r2
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	70da      	strb	r2, [r3, #3]
                    pTime->hours %= 24u;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	789a      	ldrb	r2, [r3, #2]
 8006aba:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <gos_timeAddSeconds+0x190>)
 8006abc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac0:	0919      	lsrs	r1, r3, #4
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	440b      	add	r3, r1
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	709a      	strb	r2, [r3, #2]

                    // Check days.
                    if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d111      	bne.n	8006b08 <gos_timeAddSeconds+0x11c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	791b      	ldrb	r3, [r3, #4]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d10d      	bne.n	8006b08 <gos_timeAddSeconds+0x11c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	78db      	ldrb	r3, [r3, #3]
 8006af0:	2b1d      	cmp	r3, #29
 8006af2:	d909      	bls.n	8006b08 <gos_timeAddSeconds+0x11c>
                    {
                        pTime->days = 1u;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	70da      	strb	r2, [r3, #3]
                        pTime->months++;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	791b      	ldrb	r3, [r3, #4]
 8006afe:	3301      	adds	r3, #1
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	711a      	strb	r2, [r3, #4]
 8006b06:	e01e      	b.n	8006b46 <gos_timeAddSeconds+0x15a>
                    }
                    else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <gos_timeAddSeconds+0x136>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	791b      	ldrb	r3, [r3, #4]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d011      	beq.n	8006b46 <gos_timeAddSeconds+0x15a>
                    {
                        // Wait.
                    }
                    else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	791b      	ldrb	r3, [r3, #4]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <gos_timeAddSeconds+0x194>)
 8006b2a:	5cd2      	ldrb	r2, [r2, r3]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	78db      	ldrb	r3, [r3, #3]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d208      	bcs.n	8006b46 <gos_timeAddSeconds+0x15a>
                    {
                        pTime->days = 1u;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	70da      	strb	r2, [r3, #3]
                        pTime->months++;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	791b      	ldrb	r3, [r3, #4]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	711a      	strb	r2, [r3, #4]
                    {
                        // Nothing to do.
                    }

                    // Check months.
                    if (pTime->months == 13)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	791b      	ldrb	r3, [r3, #4]
 8006b4a:	2b0d      	cmp	r3, #13
 8006b4c:	d10b      	bne.n	8006b66 <gos_timeAddSeconds+0x17a>
                    {
                        pTime->months = 1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	711a      	strb	r2, [r3, #4]
                        pTime->years++;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8a3 2005 	strh.w	r2, [r3, #5]
        else
        {
            // Nothing to do.
        }

        timeAddSecondsResult = GOS_SUCCESS;
 8006b66:	2355      	movs	r3, #85	; 0x55
 8006b68:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddSecondsResult;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	88888889 	.word	0x88888889
 8006b7c:	aaaaaaab 	.word	0xaaaaaaab
 8006b80:	080095a4 	.word	0x080095a4

08006b84 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 8006b92:	23ae      	movs	r3, #174	; 0xae
 8006b94:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d060      	beq.n	8006c5e <gos_runTimeAddMicroseconds+0xda>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bb6:	d352      	bcc.n	8006c5e <gos_runTimeAddMicroseconds+0xda>
        {
            pRunTime1->microseconds -= 1000u;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	885b      	ldrh	r3, [r3, #2]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006be0:	d33d      	bcc.n	8006c5e <gos_runTimeAddMicroseconds+0xda>
            {
                pRunTime1->milliseconds -= 1000u;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	885b      	ldrh	r3, [r3, #2]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	791b      	ldrb	r3, [r3, #4]
 8006c02:	2b3b      	cmp	r3, #59	; 0x3b
 8006c04:	d92b      	bls.n	8006c5e <gos_runTimeAddMicroseconds+0xda>
                {
                    pRunTime1->seconds -= 60u;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	791b      	ldrb	r3, [r3, #4]
 8006c0a:	3b3c      	subs	r3, #60	; 0x3c
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	795b      	ldrb	r3, [r3, #5]
 8006c16:	3301      	adds	r3, #1
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	795b      	ldrb	r3, [r3, #5]
 8006c22:	2b3b      	cmp	r3, #59	; 0x3b
 8006c24:	d91b      	bls.n	8006c5e <gos_runTimeAddMicroseconds+0xda>
                    {
                        pRunTime1->minutes -= 60u;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	795b      	ldrb	r3, [r3, #5]
 8006c2a:	3b3c      	subs	r3, #60	; 0x3c
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	799b      	ldrb	r3, [r3, #6]
 8006c36:	3301      	adds	r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	799b      	ldrb	r3, [r3, #6]
 8006c42:	2b17      	cmp	r3, #23
 8006c44:	d90b      	bls.n	8006c5e <gos_runTimeAddMicroseconds+0xda>
                        {
                            pRunTime1->hours -= 24u;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	799b      	ldrb	r3, [r3, #6]
 8006c4a:	3b18      	subs	r3, #24
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	79db      	ldrb	r3, [r3, #7]
 8006c56:	3301      	adds	r3, #1
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	71da      	strb	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d060      	beq.n	8006d26 <gos_runTimeAddMicroseconds+0x1a2>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c7e:	d352      	bcc.n	8006d26 <gos_runTimeAddMicroseconds+0x1a2>
        {
            pRunTime2->microseconds -= 1000u;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	885b      	ldrh	r3, [r3, #2]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3301      	adds	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	885b      	ldrh	r3, [r3, #2]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ca8:	d33d      	bcc.n	8006d26 <gos_runTimeAddMicroseconds+0x1a2>
            {
                pRunTime2->milliseconds -= 1000u;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	885b      	ldrh	r3, [r3, #2]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	791b      	ldrb	r3, [r3, #4]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	791b      	ldrb	r3, [r3, #4]
 8006cca:	2b3b      	cmp	r3, #59	; 0x3b
 8006ccc:	d92b      	bls.n	8006d26 <gos_runTimeAddMicroseconds+0x1a2>
                {
                    pRunTime2->seconds -= 60u;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	791b      	ldrb	r3, [r3, #4]
 8006cd2:	3b3c      	subs	r3, #60	; 0x3c
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	795b      	ldrb	r3, [r3, #5]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	795b      	ldrb	r3, [r3, #5]
 8006cea:	2b3b      	cmp	r3, #59	; 0x3b
 8006cec:	d91b      	bls.n	8006d26 <gos_runTimeAddMicroseconds+0x1a2>
                    {
                        pRunTime2->minutes -= 60u;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	795b      	ldrb	r3, [r3, #5]
 8006cf2:	3b3c      	subs	r3, #60	; 0x3c
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	799b      	ldrb	r3, [r3, #6]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	799b      	ldrb	r3, [r3, #6]
 8006d0a:	2b17      	cmp	r3, #23
 8006d0c:	d90b      	bls.n	8006d26 <gos_runTimeAddMicroseconds+0x1a2>
                        {
                            pRunTime2->hours -= 24u;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	799b      	ldrb	r3, [r3, #6]
 8006d12:	3b18      	subs	r3, #24
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	79db      	ldrb	r3, [r3, #7]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	71da      	strb	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 8006d26:	2355      	movs	r3, #85	; 0x55
 8006d28:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 8006d44:	23ae      	movs	r3, #174	; 0xae
 8006d46:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 808b 	beq.w	8006e66 <gos_runTimeAddMilliseconds+0x12e>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	885b      	ldrh	r3, [r3, #2]
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	887b      	ldrh	r3, [r7, #2]
 8006d58:	4413      	add	r3, r2
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	885b      	ldrh	r3, [r3, #2]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d6a:	d37a      	bcc.n	8006e62 <gos_runTimeAddMilliseconds+0x12a>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	791a      	ldrb	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	493f      	ldr	r1, [pc, #252]	; (8006e74 <gos_runTimeAddMilliseconds+0x13c>)
 8006d78:	fba1 1303 	umull	r1, r3, r1, r3
 8006d7c:	099b      	lsrs	r3, r3, #6
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	4413      	add	r3, r2
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	885b      	ldrh	r3, [r3, #2]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	4a38      	ldr	r2, [pc, #224]	; (8006e74 <gos_runTimeAddMilliseconds+0x13c>)
 8006d92:	fba2 1203 	umull	r1, r2, r2, r3
 8006d96:	0992      	lsrs	r2, r2, #6
 8006d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d9c:	fb01 f202 	mul.w	r2, r1, r2
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	791b      	ldrb	r3, [r3, #4]
 8006dac:	2b3b      	cmp	r3, #59	; 0x3b
 8006dae:	d958      	bls.n	8006e62 <gos_runTimeAddMilliseconds+0x12a>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	795a      	ldrb	r2, [r3, #5]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	791b      	ldrb	r3, [r3, #4]
 8006db8:	492f      	ldr	r1, [pc, #188]	; (8006e78 <gos_runTimeAddMilliseconds+0x140>)
 8006dba:	fba1 1303 	umull	r1, r3, r1, r3
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	791a      	ldrb	r2, [r3, #4]
 8006dce:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <gos_runTimeAddMilliseconds+0x140>)
 8006dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd4:	0959      	lsrs	r1, r3, #5
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	795b      	ldrb	r3, [r3, #5]
 8006dea:	2b3b      	cmp	r3, #59	; 0x3b
 8006dec:	d939      	bls.n	8006e62 <gos_runTimeAddMilliseconds+0x12a>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	799a      	ldrb	r2, [r3, #6]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	795b      	ldrb	r3, [r3, #5]
 8006df6:	4920      	ldr	r1, [pc, #128]	; (8006e78 <gos_runTimeAddMilliseconds+0x140>)
 8006df8:	fba1 1303 	umull	r1, r3, r1, r3
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	4413      	add	r3, r2
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	795a      	ldrb	r2, [r3, #5]
 8006e0c:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <gos_runTimeAddMilliseconds+0x140>)
 8006e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e12:	0959      	lsrs	r1, r3, #5
 8006e14:	460b      	mov	r3, r1
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	1a5b      	subs	r3, r3, r1
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	799b      	ldrb	r3, [r3, #6]
 8006e28:	2b17      	cmp	r3, #23
 8006e2a:	d91a      	bls.n	8006e62 <gos_runTimeAddMilliseconds+0x12a>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	79da      	ldrb	r2, [r3, #7]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	799b      	ldrb	r3, [r3, #6]
 8006e34:	4911      	ldr	r1, [pc, #68]	; (8006e7c <gos_runTimeAddMilliseconds+0x144>)
 8006e36:	fba1 1303 	umull	r1, r3, r1, r3
 8006e3a:	091b      	lsrs	r3, r3, #4
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	4413      	add	r3, r2
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	71da      	strb	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	799a      	ldrb	r2, [r3, #6]
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <gos_runTimeAddMilliseconds+0x144>)
 8006e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e50:	0919      	lsrs	r1, r3, #4
 8006e52:	460b      	mov	r3, r1
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	440b      	add	r3, r1
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 8006e62:	2355      	movs	r3, #85	; 0x55
 8006e64:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	10624dd3 	.word	0x10624dd3
 8006e78:	88888889 	.word	0x88888889
 8006e7c:	aaaaaaab 	.word	0xaaaaaaab

08006e80 <gos_runTimeAddSeconds>:

/*
 * Function: gos_runTimeAddSeconds
 */
gos_result_t gos_runTimeAddSeconds (gos_runtime_t* pRunTime, u32_t seconds)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddSecondsResult = GOS_ERROR;
 8006e8a:	23ae      	movs	r3, #174	; 0xae
 8006e8c:	73fb      	strb	r3, [r7, #15]
    u32_t        secondCounter           = 0u;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d035      	beq.n	8006f04 <gos_runTimeAddSeconds+0x84>
    {
        while (secondCounter++ < seconds)
 8006e98:	e02c      	b.n	8006ef4 <gos_runTimeAddSeconds+0x74>
        {
            pRunTime->seconds++;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	711a      	strb	r2, [r3, #4]
            if (pRunTime->seconds >= 60)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	2b3b      	cmp	r3, #59	; 0x3b
 8006eac:	d922      	bls.n	8006ef4 <gos_runTimeAddSeconds+0x74>
            {
                pRunTime->seconds = 0U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	711a      	strb	r2, [r3, #4]
                pRunTime->minutes++;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	795b      	ldrb	r3, [r3, #5]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	715a      	strb	r2, [r3, #5]

                // Check minutes.
                if (pRunTime->minutes >= 60)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	795b      	ldrb	r3, [r3, #5]
 8006ec4:	2b3b      	cmp	r3, #59	; 0x3b
 8006ec6:	d915      	bls.n	8006ef4 <gos_runTimeAddSeconds+0x74>
                {
                    pRunTime->minutes = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	715a      	strb	r2, [r3, #5]
                    pRunTime->hours++;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	799b      	ldrb	r3, [r3, #6]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	719a      	strb	r2, [r3, #6]

                    // Check hours.
                    if (pRunTime->hours >= 24)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	799b      	ldrb	r3, [r3, #6]
 8006ede:	2b17      	cmp	r3, #23
 8006ee0:	d908      	bls.n	8006ef4 <gos_runTimeAddSeconds+0x74>
                    {
                        pRunTime->hours = 0U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	719a      	strb	r2, [r3, #6]
                        pRunTime->days++;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	79db      	ldrb	r3, [r3, #7]
 8006eec:	3301      	adds	r3, #1
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	71da      	strb	r2, [r3, #7]
        while (secondCounter++ < seconds)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	60ba      	str	r2, [r7, #8]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d8cc      	bhi.n	8006e9a <gos_runTimeAddSeconds+0x1a>
            else
            {
                // Nothing to do.
            }
        }
        runtimeAddSecondsResult = GOS_SUCCESS;
 8006f00:	2355      	movs	r3, #85	; 0x55
 8006f02:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddSecondsResult;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f8c3 2003 	str.w	r2, [r3, #3]
     * Function code.
     */
    for (;;)
    {
        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 8006f24:	463b      	mov	r3, r7
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fd0c 	bl	8006944 <gos_timeGet>

        // Increase time by 1 second.
        (void_t) gos_timeAddSeconds(&systemTime, 1);
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	4829      	ldr	r0, [pc, #164]	; (8006fd4 <gos_timeDaemonTask+0xc0>)
 8006f30:	f7ff fd5c 	bl	80069ec <gos_timeAddSeconds>

        // Increase run-time by 1 second.
        (void_t) gos_runTimeAddSeconds(&systemRunTime, 1);
 8006f34:	2101      	movs	r1, #1
 8006f36:	4828      	ldr	r0, [pc, #160]	; (8006fd8 <gos_timeDaemonTask+0xc4>)
 8006f38:	f7ff ffa2 	bl	8006e80 <gos_runTimeAddSeconds>

        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 8006f3c:	4b25      	ldr	r3, [pc, #148]	; (8006fd4 <gos_timeDaemonTask+0xc0>)
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	783b      	ldrb	r3, [r7, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d905      	bls.n	8006f52 <gos_timeDaemonTask+0x3e>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 8006f46:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <gos_timeDaemonTask+0xc8>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff fbfb 	bl	8006748 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 8006f52:	4b20      	ldr	r3, [pc, #128]	; (8006fd4 <gos_timeDaemonTask+0xc0>)
 8006f54:	785a      	ldrb	r2, [r3, #1]
 8006f56:	787b      	ldrb	r3, [r7, #1]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d905      	bls.n	8006f68 <gos_timeDaemonTask+0x54>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 8006f5c:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <gos_timeDaemonTask+0xc8>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2101      	movs	r1, #1
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff fbf0 	bl	8006748 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 8006f68:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <gos_timeDaemonTask+0xc0>)
 8006f6a:	789a      	ldrb	r2, [r3, #2]
 8006f6c:	78bb      	ldrb	r3, [r7, #2]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d905      	bls.n	8006f7e <gos_timeDaemonTask+0x6a>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 8006f72:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <gos_timeDaemonTask+0xc8>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2102      	movs	r1, #2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff fbe5 	bl	8006748 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 8006f7e:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <gos_timeDaemonTask+0xc0>)
 8006f80:	78da      	ldrb	r2, [r3, #3]
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d905      	bls.n	8006f94 <gos_timeDaemonTask+0x80>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 8006f88:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <gos_timeDaemonTask+0xc8>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2103      	movs	r1, #3
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fbda 	bl	8006748 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <gos_timeDaemonTask+0xc0>)
 8006f96:	791a      	ldrb	r2, [r3, #4]
 8006f98:	793b      	ldrb	r3, [r7, #4]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d905      	bls.n	8006faa <gos_timeDaemonTask+0x96>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <gos_timeDaemonTask+0xc8>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2104      	movs	r1, #4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fbcf 	bl	8006748 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 8006faa:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <gos_timeDaemonTask+0xc0>)
 8006fac:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	f8b7 3005 	ldrh.w	r3, [r7, #5]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d905      	bls.n	8006fc8 <gos_timeDaemonTask+0xb4>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 8006fbc:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <gos_timeDaemonTask+0xc8>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2105      	movs	r1, #5
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff fbc0 	bl	8006748 <gos_signalInvoke>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_kernelTaskSleep(TIME_SLEEP_TIME_MS);
 8006fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fcc:	f7fb fe40 	bl	8002c50 <gos_kernelTaskSleep>
        (void_t) gos_timeGet(&previousTime);
 8006fd0:	e7a8      	b.n	8006f24 <gos_timeDaemonTask+0x10>
 8006fd2:	bf00      	nop
 8006fd4:	20001538 	.word	0x20001538
 8006fd8:	20009e74 	.word	0x20009e74
 8006fdc:	20009e7e 	.word	0x20009e7e

08006fe0 <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_SUCCESS;
 8006fe6:	2355      	movs	r3, #85	; 0x55
 8006fe8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                       != GOS_SUCCESS ||
 8006fea:	480d      	ldr	r0, [pc, #52]	; (8007020 <gos_traceInit+0x40>)
 8006fec:	f7fe fd3a 	bl	8005a64 <gos_queueCreate>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b55      	cmp	r3, #85	; 0x55
 8006ff4:	d10c      	bne.n	8007010 <gos_traceInit+0x30>
        gos_kernelTaskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	480a      	ldr	r0, [pc, #40]	; (8007024 <gos_traceInit+0x44>)
 8006ffa:	f7fb fc9d 	bl	8002938 <gos_kernelTaskRegister>
 8006ffe:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                       != GOS_SUCCESS ||
 8007000:	2b55      	cmp	r3, #85	; 0x55
 8007002:	d105      	bne.n	8007010 <gos_traceInit+0x30>
        gos_mutexInit(&traceMutex) != GOS_SUCCESS
 8007004:	4808      	ldr	r0, [pc, #32]	; (8007028 <gos_traceInit+0x48>)
 8007006:	f7fe fb9b 	bl	8005740 <gos_mutexInit>
 800700a:	4603      	mov	r3, r0
        gos_kernelTaskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 800700c:	2b55      	cmp	r3, #85	; 0x55
 800700e:	d001      	beq.n	8007014 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_ERROR;
 8007010:	23ae      	movs	r3, #174	; 0xae
 8007012:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 8007014:	79fb      	ldrb	r3, [r7, #7]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200015b0 	.word	0x200015b0
 8007024:	200015cc 	.word	0x200015cc
 8007028:	2000a03c 	.word	0x2000a03c

0800702c <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 800702c:	b5b0      	push	{r4, r5, r7, lr}
 800702e:	b0a6      	sub	sp, #152	; 0x98
 8007030:	af04      	add	r7, sp, #16
 8007032:	4603      	mov	r3, r0
 8007034:	6039      	str	r1, [r7, #0]
 8007036:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 8007038:	2355      	movs	r3, #85	; 0x55
 800703a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800703e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007042:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8007046:	f107 0314 	add.w	r3, r7, #20
 800704a:	226e      	movs	r2, #110	; 0x6e
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fc50 	bl	80078f4 <memset>
    gos_time_t               sysTime        = {0};
 8007054:	f107 030c 	add.w	r3, r7, #12
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	f8c3 2003 	str.w	r2, [r3, #3]
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8007060:	2300      	movs	r3, #0
 8007062:	817b      	strh	r3, [r7, #10]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 80bd 	beq.w	80071e6 <gos_traceTrace+0x1ba>
        (gos_kernelTaskGetCurrentId(&callerTaskId)             == GOS_SUCCESS    ) &&
 800706c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007070:	4618      	mov	r0, r3
 8007072:	f7fc fdb3 	bl	8003bdc <gos_kernelTaskGetCurrentId>
 8007076:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 8007078:	2b55      	cmp	r3, #85	; 0x55
 800707a:	f040 80b4 	bne.w	80071e6 <gos_traceTrace+0x1ba>
        (gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)  == GOS_SUCCESS    ) &&
 800707e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007082:	f107 0214 	add.w	r2, r7, #20
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f7fc fddb 	bl	8003c44 <gos_kernelTaskGetData>
 800708e:	4603      	mov	r3, r0
        (gos_kernelTaskGetCurrentId(&callerTaskId)             == GOS_SUCCESS    ) &&
 8007090:	2b55      	cmp	r3, #85	; 0x55
 8007092:	f040 80a8 	bne.w	80071e6 <gos_traceTrace+0x1ba>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8007096:	8bbb      	ldrh	r3, [r7, #28]
 8007098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)  == GOS_SUCCESS    ) &&
 800709c:	2b00      	cmp	r3, #0
 800709e:	d105      	bne.n	80070ac <gos_traceTrace+0x80>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 80070a0:	f7fd fb2a 	bl	80046f8 <gos_kernelIsCallerIsr>
 80070a4:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 80070a6:	2b36      	cmp	r3, #54	; 0x36
 80070a8:	f040 809d 	bne.w	80071e6 <gos_traceTrace+0x1ba>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 80070ac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80070b0:	4850      	ldr	r0, [pc, #320]	; (80071f4 <gos_traceTrace+0x1c8>)
 80070b2:	f7fe fb5f 	bl	8005774 <gos_mutexLock>
 80070b6:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 80070b8:	2b55      	cmp	r3, #85	; 0x55
 80070ba:	f040 8094 	bne.w	80071e6 <gos_traceTrace+0x1ba>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	2b36      	cmp	r3, #54	; 0x36
 80070c2:	d135      	bne.n	8007130 <gos_traceTrace+0x104>
        {
            traceResult &= gos_timeGet(&sysTime);
 80070c4:	f107 030c 	add.w	r3, r7, #12
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff fc3b 	bl	8006944 <gos_timeGet>
 80070ce:	4603      	mov	r3, r0
 80070d0:	461a      	mov	r2, r3
 80070d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80070d6:	4013      	ands	r3, r2
 80070d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 80070dc:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80070e0:	b29b      	uxth	r3, r3
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 80070e2:	461c      	mov	r4, r3
                    sysTime.months,
 80070e4:	7c3b      	ldrb	r3, [r7, #16]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 80070e6:	461d      	mov	r5, r3
                    sysTime.days,
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
                    sysTime.hours,
 80070ea:	7bba      	ldrb	r2, [r7, #14]
                    sysTime.minutes,
 80070ec:	7b79      	ldrb	r1, [r7, #13]
                    sysTime.seconds
 80070ee:	7b38      	ldrb	r0, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 80070f0:	9003      	str	r0, [sp, #12]
 80070f2:	9102      	str	r1, [sp, #8]
 80070f4:	9201      	str	r2, [sp, #4]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	462b      	mov	r3, r5
 80070fa:	4622      	mov	r2, r4
 80070fc:	493e      	ldr	r1, [pc, #248]	; (80071f8 <gos_traceTrace+0x1cc>)
 80070fe:	483f      	ldr	r0, [pc, #252]	; (80071fc <gos_traceTrace+0x1d0>)
 8007100:	f000 fbb8 	bl	8007874 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 8007104:	4b3e      	ldr	r3, [pc, #248]	; (8007200 <gos_traceTrace+0x1d4>)
 8007106:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 8007108:	483c      	ldr	r0, [pc, #240]	; (80071fc <gos_traceTrace+0x1d0>)
 800710a:	f7f9 f88b 	bl	8000224 <strlen>
 800710e:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 8007110:	b2db      	uxtb	r3, r3
 8007112:	3301      	adds	r3, #1
 8007114:	b2da      	uxtb	r2, r3
 8007116:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800711a:	4938      	ldr	r1, [pc, #224]	; (80071fc <gos_traceTrace+0x1d0>)
 800711c:	4620      	mov	r0, r4
 800711e:	f7fe fcfd 	bl	8005b1c <gos_queuePut>
 8007122:	4603      	mov	r3, r0
 8007124:	461a      	mov	r2, r3
 8007126:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800712a:	4013      	ands	r3, r2
 800712c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        traceResult &= gos_queuePut(
 8007130:	4b33      	ldr	r3, [pc, #204]	; (8007200 <gos_traceTrace+0x1d4>)
 8007132:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
 8007134:	6838      	ldr	r0, [r7, #0]
 8007136:	f7f9 f875 	bl	8000224 <strlen>
 800713a:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 800713c:	b2db      	uxtb	r3, r3
 800713e:	3301      	adds	r3, #1
 8007140:	b2da      	uxtb	r2, r3
 8007142:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	4620      	mov	r0, r4
 800714a:	f7fe fce7 	bl	8005b1c <gos_queuePut>
 800714e:	4603      	mov	r3, r0
 8007150:	461a      	mov	r2, r3
 8007152:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007156:	4013      	ands	r3, r2
 8007158:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 800715c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007160:	2b55      	cmp	r3, #85	; 0x55
 8007162:	d002      	beq.n	800716a <gos_traceTrace+0x13e>
        {
            traceResult = GOS_ERROR;
 8007164:	23ae      	movs	r3, #174	; 0xae
 8007166:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 800716a:	4b26      	ldr	r3, [pc, #152]	; (8007204 <gos_traceTrace+0x1d8>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	3301      	adds	r3, #1
 8007170:	b2da      	uxtb	r2, r3
 8007172:	4b24      	ldr	r3, [pc, #144]	; (8007204 <gos_traceTrace+0x1d8>)
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	b672      	cpsid	i
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy

        // Get task privileges.
        (void_t) gos_kernelTaskGetPrivileges(callerTaskId, &privileges);
 8007180:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007184:	f107 020a 	add.w	r2, r7, #10
 8007188:	4611      	mov	r1, r2
 800718a:	4618      	mov	r0, r3
 800718c:	f7fc fca6 	bl	8003adc <gos_kernelTaskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8007190:	897b      	ldrh	r3, [r7, #10]
 8007192:	b21b      	sxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	db13      	blt.n	80071c0 <gos_traceTrace+0x194>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_kernelTaskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8007198:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800719c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fc fbaf 	bl	8003904 <gos_kernelTaskAddPrivilege>
            (void_t) gos_kernelTaskResume(traceDaemonTaskDesc.taskId);
 80071a6:	4b18      	ldr	r3, [pc, #96]	; (8007208 <gos_traceTrace+0x1dc>)
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fb ff20 	bl	8002ff0 <gos_kernelTaskResume>
            (void_t) gos_kernelTaskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 80071b0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80071b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fc fbf3 	bl	80039a4 <gos_kernelTaskRemovePrivilege>
 80071be:	e004      	b.n	80071ca <gos_traceTrace+0x19e>
        }
        else
        {
            (void_t) gos_kernelTaskResume(traceDaemonTaskDesc.taskId);
 80071c0:	4b11      	ldr	r3, [pc, #68]	; (8007208 <gos_traceTrace+0x1dc>)
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fb ff13 	bl	8002ff0 <gos_kernelTaskResume>
        }
        GOS_ATOMIC_EXIT
 80071ca:	b662      	cpsie	i
 80071cc:	4b0d      	ldr	r3, [pc, #52]	; (8007204 <gos_traceTrace+0x1d8>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <gos_traceTrace+0x1b4>
 80071d4:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <gos_traceTrace+0x1d8>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	3b01      	subs	r3, #1
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <gos_traceTrace+0x1d8>)
 80071de:	701a      	strb	r2, [r3, #0]

        gos_mutexUnlock(&traceMutex);
 80071e0:	4804      	ldr	r0, [pc, #16]	; (80071f4 <gos_traceTrace+0x1c8>)
 80071e2:	f7fe fb6f 	bl	80058c4 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 80071e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3788      	adds	r7, #136	; 0x88
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bdb0      	pop	{r4, r5, r7, pc}
 80071f2:	bf00      	nop
 80071f4:	2000a03c 	.word	0x2000a03c
 80071f8:	080091b0 	.word	0x080091b0
 80071fc:	2000a010 	.word	0x2000a010
 8007200:	200015b0 	.word	0x200015b0
 8007204:	200018fa 	.word	0x200018fa
 8007208:	200015cc 	.word	0x200015cc

0800720c <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 800720c:	b40e      	push	{r1, r2, r3}
 800720e:	b5b0      	push	{r4, r5, r7, lr}
 8007210:	b0a9      	sub	sp, #164	; 0xa4
 8007212:	af04      	add	r7, sp, #16
 8007214:	4603      	mov	r3, r0
 8007216:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 8007218:	2355      	movs	r3, #85	; 0x55
 800721a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800721e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007222:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8007226:	f107 031c 	add.w	r3, r7, #28
 800722a:	226e      	movs	r2, #110	; 0x6e
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fb60 	bl	80078f4 <memset>
    gos_time_t               sysTime        = {0};
 8007234:	f107 0314 	add.w	r3, r7, #20
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f8c3 2003 	str.w	r2, [r3, #3]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8007240:	2300      	movs	r3, #0
 8007242:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 8007244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80c7 	beq.w	80073dc <gos_traceTraceFormatted+0x1d0>
        (gos_kernelTaskGetCurrentId(&callerTaskId)             == GOS_SUCCESS    ) &&
 800724e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007252:	4618      	mov	r0, r3
 8007254:	f7fc fcc2 	bl	8003bdc <gos_kernelTaskGetCurrentId>
 8007258:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 800725a:	2b55      	cmp	r3, #85	; 0x55
 800725c:	f040 80be 	bne.w	80073dc <gos_traceTraceFormatted+0x1d0>
        (gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)  == GOS_SUCCESS    ) &&
 8007260:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007264:	f107 021c 	add.w	r2, r7, #28
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7fc fcea 	bl	8003c44 <gos_kernelTaskGetData>
 8007270:	4603      	mov	r3, r0
        (gos_kernelTaskGetCurrentId(&callerTaskId)             == GOS_SUCCESS    ) &&
 8007272:	2b55      	cmp	r3, #85	; 0x55
 8007274:	f040 80b2 	bne.w	80073dc <gos_traceTraceFormatted+0x1d0>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8007278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800727a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_kernelTaskGetData(callerTaskId, &callerTaskDesc)  == GOS_SUCCESS    ) &&
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8007282:	f7fd fa39 	bl	80046f8 <gos_kernelIsCallerIsr>
 8007286:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8007288:	2b36      	cmp	r3, #54	; 0x36
 800728a:	f040 80a7 	bne.w	80073dc <gos_traceTraceFormatted+0x1d0>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800728e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007292:	4858      	ldr	r0, [pc, #352]	; (80073f4 <gos_traceTraceFormatted+0x1e8>)
 8007294:	f7fe fa6e 	bl	8005774 <gos_mutexLock>
 8007298:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800729a:	2b55      	cmp	r3, #85	; 0x55
 800729c:	f040 809e 	bne.w	80073dc <gos_traceTraceFormatted+0x1d0>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b36      	cmp	r3, #54	; 0x36
 80072a4:	d135      	bne.n	8007312 <gos_traceTraceFormatted+0x106>
        {
            traceResult &= gos_timeGet(&sysTime);
 80072a6:	f107 0314 	add.w	r3, r7, #20
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fb4a 	bl	8006944 <gos_timeGet>
 80072b0:	4603      	mov	r3, r0
 80072b2:	461a      	mov	r2, r3
 80072b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80072b8:	4013      	ands	r3, r2
 80072ba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 80072be:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80072c2:	b29b      	uxth	r3, r3
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 80072c4:	461c      	mov	r4, r3
                    sysTime.months,
 80072c6:	7e3b      	ldrb	r3, [r7, #24]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 80072c8:	461d      	mov	r5, r3
                    sysTime.days,
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
                    sysTime.hours,
 80072cc:	7dba      	ldrb	r2, [r7, #22]
                    sysTime.minutes,
 80072ce:	7d79      	ldrb	r1, [r7, #21]
                    sysTime.seconds
 80072d0:	7d38      	ldrb	r0, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 80072d2:	9003      	str	r0, [sp, #12]
 80072d4:	9102      	str	r1, [sp, #8]
 80072d6:	9201      	str	r2, [sp, #4]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	462b      	mov	r3, r5
 80072dc:	4622      	mov	r2, r4
 80072de:	4946      	ldr	r1, [pc, #280]	; (80073f8 <gos_traceTraceFormatted+0x1ec>)
 80072e0:	4846      	ldr	r0, [pc, #280]	; (80073fc <gos_traceTraceFormatted+0x1f0>)
 80072e2:	f000 fac7 	bl	8007874 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 80072e6:	4b46      	ldr	r3, [pc, #280]	; (8007400 <gos_traceTraceFormatted+0x1f4>)
 80072e8:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 80072ea:	4844      	ldr	r0, [pc, #272]	; (80073fc <gos_traceTraceFormatted+0x1f0>)
 80072ec:	f7f8 ff9a 	bl	8000224 <strlen>
 80072f0:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	3301      	adds	r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80072fc:	493f      	ldr	r1, [pc, #252]	; (80073fc <gos_traceTraceFormatted+0x1f0>)
 80072fe:	4620      	mov	r0, r4
 8007300:	f7fe fc0c 	bl	8005b1c <gos_queuePut>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800730c:	4013      	ands	r3, r2
 800730e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 8007312:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007316:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800731e:	4839      	ldr	r0, [pc, #228]	; (8007404 <gos_traceTraceFormatted+0x1f8>)
 8007320:	f000 fade 	bl	80078e0 <vsiprintf>
        va_end(args);
        traceResult &= gos_queuePut(
 8007324:	4b36      	ldr	r3, [pc, #216]	; (8007400 <gos_traceTraceFormatted+0x1f4>)
 8007326:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
 8007328:	4836      	ldr	r0, [pc, #216]	; (8007404 <gos_traceTraceFormatted+0x1f8>)
 800732a:	f7f8 ff7b 	bl	8000224 <strlen>
 800732e:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3301      	adds	r3, #1
 8007334:	b2da      	uxtb	r2, r3
 8007336:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800733a:	4932      	ldr	r1, [pc, #200]	; (8007404 <gos_traceTraceFormatted+0x1f8>)
 800733c:	4620      	mov	r0, r4
 800733e:	f7fe fbed 	bl	8005b1c <gos_queuePut>
 8007342:	4603      	mov	r3, r0
 8007344:	461a      	mov	r2, r3
 8007346:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800734a:	4013      	ands	r3, r2
 800734c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 8007350:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8007354:	2b55      	cmp	r3, #85	; 0x55
 8007356:	d002      	beq.n	800735e <gos_traceTraceFormatted+0x152>
        {
            traceResult = GOS_ERROR;
 8007358:	23ae      	movs	r3, #174	; 0xae
 800735a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 800735e:	4b2a      	ldr	r3, [pc, #168]	; (8007408 <gos_traceTraceFormatted+0x1fc>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	b2da      	uxtb	r2, r3
 8007366:	4b28      	ldr	r3, [pc, #160]	; (8007408 <gos_traceTraceFormatted+0x1fc>)
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	b672      	cpsid	i
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	f3bf 8f6f 	isb	sy

        // Get task privileges.
        (void_t) gos_kernelTaskGetPrivileges(callerTaskId, &privileges);
 8007374:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007378:	f107 020e 	add.w	r2, r7, #14
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f7fc fbac 	bl	8003adc <gos_kernelTaskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8007384:	89fb      	ldrh	r3, [r7, #14]
 8007386:	b21b      	sxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	db13      	blt.n	80073b4 <gos_traceTraceFormatted+0x1a8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_kernelTaskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800738c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007394:	4618      	mov	r0, r3
 8007396:	f7fc fab5 	bl	8003904 <gos_kernelTaskAddPrivilege>
            (void_t) gos_kernelTaskResume(traceDaemonTaskDesc.taskId);
 800739a:	4b1c      	ldr	r3, [pc, #112]	; (800740c <gos_traceTraceFormatted+0x200>)
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fb fe26 	bl	8002ff0 <gos_kernelTaskResume>
            (void_t) gos_kernelTaskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 80073a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80073a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fc faf9 	bl	80039a4 <gos_kernelTaskRemovePrivilege>
 80073b2:	e004      	b.n	80073be <gos_traceTraceFormatted+0x1b2>
        }
        else
        {
            (void_t) gos_kernelTaskResume(traceDaemonTaskDesc.taskId);
 80073b4:	4b15      	ldr	r3, [pc, #84]	; (800740c <gos_traceTraceFormatted+0x200>)
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fb fe19 	bl	8002ff0 <gos_kernelTaskResume>
        }
        GOS_ATOMIC_EXIT
 80073be:	b662      	cpsie	i
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <gos_traceTraceFormatted+0x1fc>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <gos_traceTraceFormatted+0x1c8>
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <gos_traceTraceFormatted+0x1fc>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <gos_traceTraceFormatted+0x1fc>)
 80073d2:	701a      	strb	r2, [r3, #0]

        gos_mutexUnlock(&traceMutex);
 80073d4:	4807      	ldr	r0, [pc, #28]	; (80073f4 <gos_traceTraceFormatted+0x1e8>)
 80073d6:	f7fe fa75 	bl	80058c4 <gos_mutexUnlock>
 80073da:	e002      	b.n	80073e2 <gos_traceTraceFormatted+0x1d6>
    }
    else
    {
        traceResult = GOS_ERROR;
 80073dc:	23ae      	movs	r3, #174	; 0xae
 80073de:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return traceResult;
 80073e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3794      	adds	r7, #148	; 0x94
 80073ea:	46bd      	mov	sp, r7
 80073ec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80073f0:	b003      	add	sp, #12
 80073f2:	4770      	bx	lr
 80073f4:	2000a03c 	.word	0x2000a03c
 80073f8:	080091b0 	.word	0x080091b0
 80073fc:	2000a010 	.word	0x2000a010
 8007400:	200015b0 	.word	0x200015b0
 8007404:	20009f48 	.word	0x20009f48
 8007408:	200018fa 	.word	0x200018fa
 800740c:	200015cc 	.word	0x200015cc

08007410 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 8007410:	b40f      	push	{r0, r1, r2, r3}
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 8007418:	23ae      	movs	r3, #174	; 0xae
 800741a:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01c      	beq.n	800745c <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 8007422:	4b12      	ldr	r3, [pc, #72]	; (800746c <gos_traceTraceFormattedUnsafe+0x5c>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	4b10      	ldr	r3, [pc, #64]	; (800746c <gos_traceTraceFormattedUnsafe+0x5c>)
 800742c:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 800742e:	f107 0314 	add.w	r3, r7, #20
 8007432:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	6939      	ldr	r1, [r7, #16]
 8007438:	480d      	ldr	r0, [pc, #52]	; (8007470 <gos_traceTraceFormattedUnsafe+0x60>)
 800743a:	f000 fa51 	bl	80078e0 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 800743e:	480c      	ldr	r0, [pc, #48]	; (8007470 <gos_traceTraceFormattedUnsafe+0x60>)
 8007440:	f000 f974 	bl	800772c <gos_traceDriverTransmitString_Unsafe>
 8007444:	4603      	mov	r3, r0
 8007446:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 8007448:	4b08      	ldr	r3, [pc, #32]	; (800746c <gos_traceTraceFormattedUnsafe+0x5c>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <gos_traceTraceFormattedUnsafe+0x4c>
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <gos_traceTraceFormattedUnsafe+0x5c>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	3b01      	subs	r3, #1
 8007456:	b2da      	uxtb	r2, r3
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <gos_traceTraceFormattedUnsafe+0x5c>)
 800745a:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800745c:	79fb      	ldrb	r3, [r7, #7]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007468:	b004      	add	sp, #16
 800746a:	4770      	bx	lr
 800746c:	200018fa 	.word	0x200018fa
 8007470:	20009f48 	.word	0x20009f48

08007474 <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8007478:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800747c:	480e      	ldr	r0, [pc, #56]	; (80074b8 <gos_traceDaemonTask+0x44>)
 800747e:	f7fe f979 	bl	8005774 <gos_mutexLock>
 8007482:	4603      	mov	r3, r0
 8007484:	2b55      	cmp	r3, #85	; 0x55
 8007486:	d10e      	bne.n	80074a6 <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 8007488:	e002      	b.n	8007490 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 800748a:	480c      	ldr	r0, [pc, #48]	; (80074bc <gos_traceDaemonTask+0x48>)
 800748c:	f000 f936 	bl	80076fc <gos_traceDriverTransmitString>
            while (gos_queueGet(
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <gos_traceDaemonTask+0x4c>)
 8007492:	8818      	ldrh	r0, [r3, #0]
 8007494:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007498:	22c8      	movs	r2, #200	; 0xc8
 800749a:	4908      	ldr	r1, [pc, #32]	; (80074bc <gos_traceDaemonTask+0x48>)
 800749c:	f7fe fc0c 	bl	8005cb8 <gos_queueGet>
 80074a0:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 80074a2:	2b55      	cmp	r3, #85	; 0x55
 80074a4:	d0f1      	beq.n	800748a <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        gos_mutexUnlock(&traceMutex);
 80074a6:	4804      	ldr	r0, [pc, #16]	; (80074b8 <gos_traceDaemonTask+0x44>)
 80074a8:	f7fe fa0c 	bl	80058c4 <gos_mutexUnlock>
        (void_t) gos_kernelTaskSuspend(traceDaemonTaskDesc.taskId);
 80074ac:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <gos_traceDaemonTask+0x50>)
 80074ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fb fcc3 	bl	8002e3c <gos_kernelTaskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 80074b6:	e7df      	b.n	8007478 <gos_traceDaemonTask+0x4>
 80074b8:	2000a03c 	.word	0x2000a03c
 80074bc:	20009e80 	.word	0x20009e80
 80074c0:	200015b0 	.word	0x200015b0
 80074c4:	200015cc 	.word	0x200015cc

080074c8 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 80074d0:	23ae      	movs	r3, #174	; 0xae
 80074d2:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */

    // Null pointer check.
    if (pTrigger != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <gos_triggerInit+0x20>
    {
        triggerInitResult = gos_mutexInit(&pTrigger->triggerMutex);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	330a      	adds	r3, #10
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f92e 	bl	8005740 <gos_mutexInit>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE void_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */

    // Null pointer check.
    if (pTrigger != NULL &&
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d014      	beq.n	800752a <gos_triggerReset+0x38>
        gos_mutexLock(&pTrigger->triggerMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	330a      	adds	r3, #10
 8007504:	f04f 31ff 	mov.w	r1, #4294967295
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe f933 	bl	8005774 <gos_mutexLock>
 800750e:	4603      	mov	r3, r0
    if (pTrigger != NULL &&
 8007510:	2b55      	cmp	r3, #85	; 0x55
 8007512:	d10a      	bne.n	800752a <gos_triggerReset+0x38>
    {
        pTrigger->valueCounter = 0u;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	605a      	str	r2, [r3, #4]

        gos_mutexUnlock(&pTrigger->triggerMutex);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	330a      	adds	r3, #10
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe f9cd 	bl	80058c4 <gos_mutexUnlock>
    }
    else
    {
        // Nothing to do.
    }
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 800753e:	23ae      	movs	r3, #174	; 0xae
 8007540:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 8007542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007546:	82bb      	strh	r3, [r7, #20]
    /*
     * Function code.
     */

    // Null pointer check.
    if (pTrigger != NULL)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d039      	beq.n	80075c2 <gos_triggerWait+0x90>
    {
        // Set owner task ID.
        (void_t) gos_mutexLock(&pTrigger->triggerMutex, GOS_MUTEX_ENDLESS_TMO);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	330a      	adds	r3, #10
 8007552:	f04f 31ff 	mov.w	r1, #4294967295
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe f90c 	bl	8005774 <gos_mutexLock>
        (void_t) gos_kernelTaskGetCurrentId(&currentId);
 800755c:	f107 0314 	add.w	r3, r7, #20
 8007560:	4618      	mov	r0, r3
 8007562:	f7fc fb3b 	bl	8003bdc <gos_kernelTaskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 8007566:	8aba      	ldrh	r2, [r7, #20]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	605a      	str	r2, [r3, #4]
        gos_mutexUnlock(&pTrigger->triggerMutex);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	330a      	adds	r3, #10
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe f9a4 	bl	80058c4 <gos_mutexUnlock>

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	429a      	cmp	r2, r3
 8007586:	d204      	bcs.n	8007592 <gos_triggerWait+0x60>
        {
            (void_t) gos_kernelTaskBlock(currentId, timeout);
 8007588:	8abb      	ldrh	r3, [r7, #20]
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	f7fb fdb5 	bl	80030fc <gos_kernelTaskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        (void_t) gos_mutexLock(&pTrigger->triggerMutex, GOS_MUTEX_ENDLESS_TMO);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	330a      	adds	r3, #10
 8007596:	f04f 31ff 	mov.w	r1, #4294967295
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe f8ea 	bl	8005774 <gos_mutexLock>
        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d305      	bcc.n	80075b8 <gos_triggerWait+0x86>
        {
            triggerWaitResult      = GOS_SUCCESS;
 80075ac:	2355      	movs	r3, #85	; 0x55
 80075ae:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075b6:	811a      	strh	r2, [r3, #8]
        }
        else
        {
            // Nothing to do.
        }
        gos_mutexUnlock(&pTrigger->triggerMutex);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	330a      	adds	r3, #10
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe f981 	bl	80058c4 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE void_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_taskPrivilegeLevel_t originalPrivileges = GOS_TASK_PRIVILEGE_USER;
 80075d4:	23ff      	movs	r3, #255	; 0xff
 80075d6:	81fb      	strh	r3, [r7, #14]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 80075d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075dc:	81bb      	strh	r3, [r7, #12]
    /*
     * Function code.
     */

    // Null pointer check.
    if (pTrigger != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d033      	beq.n	800764c <gos_triggerIncrement+0x80>
    {
        (void_t) gos_mutexLock(&pTrigger->triggerMutex, GOS_MUTEX_ENDLESS_TMO);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	330a      	adds	r3, #10
 80075e8:	f04f 31ff 	mov.w	r1, #4294967295
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe f8c1 	bl	8005774 <gos_mutexLock>

        // Increment trigger value.
        pTrigger->valueCounter++;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	601a      	str	r2, [r3, #0]

        // If desired value is reached, unblock waiter.
        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	429a      	cmp	r2, r3
 8007606:	d31c      	bcc.n	8007642 <gos_triggerIncrement+0x76>
        {
            // Get current task ID.
            (void_t) gos_kernelTaskGetCurrentId(&currentTaskId);
 8007608:	f107 030c 	add.w	r3, r7, #12
 800760c:	4618      	mov	r0, r3
 800760e:	f7fc fae5 	bl	8003bdc <gos_kernelTaskGetCurrentId>

            // Get original privileges.
            (void_t) gos_kernelTaskGetPrivileges(currentTaskId, &originalPrivileges);
 8007612:	89bb      	ldrh	r3, [r7, #12]
 8007614:	f107 020e 	add.w	r2, r7, #14
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f7fc fa5e 	bl	8003adc <gos_kernelTaskGetPrivileges>

            // Add necessary privilege.
            (void_t) gos_kernelTaskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8007620:	89bb      	ldrh	r3, [r7, #12]
 8007622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007626:	4618      	mov	r0, r3
 8007628:	f7fc f96c 	bl	8003904 <gos_kernelTaskAddPrivilege>

            // Unblock owner task.
            (void_t) gos_kernelTaskUnblock(pTrigger->waiterTaskId);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	891b      	ldrh	r3, [r3, #8]
 8007630:	4618      	mov	r0, r3
 8007632:	f7fb fe2f 	bl	8003294 <gos_kernelTaskUnblock>

            // Restore privileges.
            (void_t) gos_kernelTaskSetPrivileges(currentTaskId, originalPrivileges);
 8007636:	89bb      	ldrh	r3, [r7, #12]
 8007638:	89fa      	ldrh	r2, [r7, #14]
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f7fc fa07 	bl	8003a50 <gos_kernelTaskSetPrivileges>
        else
        {
            // Trigger value not reached yet.
        }

        gos_mutexUnlock(&pTrigger->triggerMutex);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	330a      	adds	r3, #10
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe f93c 	bl	80058c4 <gos_mutexUnlock>
    }
    else
    {
        // Nothing to do.
    }
}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <gos_shellDriverReceiveChar>:

/*
 * Function: gos_shellDriverReceiveChar
 */
gos_result_t gos_shellDriverReceiveChar (char_t* pChar)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t shellDriverReceiveResult = GOS_ERROR;
 800765c:	23ae      	movs	r3, #174	; 0xae
 800765e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.shellDriverReceiveChar != NULL)
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <gos_shellDriverReceiveChar+0x2c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <gos_shellDriverReceiveChar+0x20>
    {
        shellDriverReceiveResult = driverFunctions.shellDriverReceiveChar(pChar);
 8007668:	4b05      	ldr	r3, [pc, #20]	; (8007680 <gos_shellDriverReceiveChar+0x2c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
    }

    return shellDriverReceiveResult;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	200018dc 	.word	0x200018dc

08007684 <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 8007684:	b40f      	push	{r0, r1, r2, r3}
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 800768c:	23ae      	movs	r3, #174	; 0xae
 800768e:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 8007690:	f107 0314 	add.w	r3, r7, #20
 8007694:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	6939      	ldr	r1, [r7, #16]
 800769a:	480a      	ldr	r0, [pc, #40]	; (80076c4 <gos_shellDriverTransmitString+0x40>)
 800769c:	f000 f920 	bl	80078e0 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 80076a0:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <gos_shellDriverTransmitString+0x44>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <gos_shellDriverTransmitString+0x44>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4805      	ldr	r0, [pc, #20]	; (80076c4 <gos_shellDriverTransmitString+0x40>)
 80076ae:	4798      	blx	r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	71fb      	strb	r3, [r7, #7]
    }

    return shellDriverTransmitResult;
 80076b4:	79fb      	ldrb	r3, [r7, #7]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076c0:	b004      	add	sp, #16
 80076c2:	4770      	bx	lr
 80076c4:	2000a040 	.word	0x2000a040
 80076c8:	200018dc 	.word	0x200018dc

080076cc <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 80076d4:	23ae      	movs	r3, #174	; 0xae
 80076d6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 80076d8:	4b07      	ldr	r3, [pc, #28]	; (80076f8 <gos_timerDriverSysTimerGet+0x2c>)
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <gos_timerDriverSysTimerGet+0x2c>)
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]
    }

    return timerDriverSysTimerGetResult;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	200018dc 	.word	0x200018dc

080076fc <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8007704:	23ae      	movs	r3, #174	; 0xae
 8007706:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 8007708:	4b07      	ldr	r3, [pc, #28]	; (8007728 <gos_traceDriverTransmitString+0x2c>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 8007710:	4b05      	ldr	r3, [pc, #20]	; (8007728 <gos_traceDriverTransmitString+0x2c>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	4798      	blx	r3
 8007718:	4603      	mov	r3, r0
 800771a:	73fb      	strb	r3, [r7, #15]
    }

    return traceDriverTransmitResult;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200018dc 	.word	0x200018dc

0800772c <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8007734:	23ae      	movs	r3, #174	; 0xae
 8007736:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 8007738:	4b07      	ldr	r3, [pc, #28]	; (8007758 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	4798      	blx	r3
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
    }

    return traceDriverTransmitResult;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200018dc 	.word	0x200018dc

0800775c <_strtol_l.constprop.0>:
 800775c:	2b01      	cmp	r3, #1
 800775e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007762:	d001      	beq.n	8007768 <_strtol_l.constprop.0+0xc>
 8007764:	2b24      	cmp	r3, #36	; 0x24
 8007766:	d906      	bls.n	8007776 <_strtol_l.constprop.0+0x1a>
 8007768:	f000 f8cc 	bl	8007904 <__errno>
 800776c:	2316      	movs	r3, #22
 800776e:	6003      	str	r3, [r0, #0]
 8007770:	2000      	movs	r0, #0
 8007772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007776:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800785c <_strtol_l.constprop.0+0x100>
 800777a:	460d      	mov	r5, r1
 800777c:	462e      	mov	r6, r5
 800777e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007782:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007786:	f017 0708 	ands.w	r7, r7, #8
 800778a:	d1f7      	bne.n	800777c <_strtol_l.constprop.0+0x20>
 800778c:	2c2d      	cmp	r4, #45	; 0x2d
 800778e:	d132      	bne.n	80077f6 <_strtol_l.constprop.0+0x9a>
 8007790:	782c      	ldrb	r4, [r5, #0]
 8007792:	2701      	movs	r7, #1
 8007794:	1cb5      	adds	r5, r6, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d05b      	beq.n	8007852 <_strtol_l.constprop.0+0xf6>
 800779a:	2b10      	cmp	r3, #16
 800779c:	d109      	bne.n	80077b2 <_strtol_l.constprop.0+0x56>
 800779e:	2c30      	cmp	r4, #48	; 0x30
 80077a0:	d107      	bne.n	80077b2 <_strtol_l.constprop.0+0x56>
 80077a2:	782c      	ldrb	r4, [r5, #0]
 80077a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077a8:	2c58      	cmp	r4, #88	; 0x58
 80077aa:	d14d      	bne.n	8007848 <_strtol_l.constprop.0+0xec>
 80077ac:	786c      	ldrb	r4, [r5, #1]
 80077ae:	2310      	movs	r3, #16
 80077b0:	3502      	adds	r5, #2
 80077b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80077b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80077ba:	f04f 0e00 	mov.w	lr, #0
 80077be:	fbb8 f9f3 	udiv	r9, r8, r3
 80077c2:	4676      	mov	r6, lr
 80077c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80077c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80077cc:	f1bc 0f09 	cmp.w	ip, #9
 80077d0:	d816      	bhi.n	8007800 <_strtol_l.constprop.0+0xa4>
 80077d2:	4664      	mov	r4, ip
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	dd24      	ble.n	8007822 <_strtol_l.constprop.0+0xc6>
 80077d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80077dc:	d008      	beq.n	80077f0 <_strtol_l.constprop.0+0x94>
 80077de:	45b1      	cmp	r9, r6
 80077e0:	d31c      	bcc.n	800781c <_strtol_l.constprop.0+0xc0>
 80077e2:	d101      	bne.n	80077e8 <_strtol_l.constprop.0+0x8c>
 80077e4:	45a2      	cmp	sl, r4
 80077e6:	db19      	blt.n	800781c <_strtol_l.constprop.0+0xc0>
 80077e8:	fb06 4603 	mla	r6, r6, r3, r4
 80077ec:	f04f 0e01 	mov.w	lr, #1
 80077f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077f4:	e7e8      	b.n	80077c8 <_strtol_l.constprop.0+0x6c>
 80077f6:	2c2b      	cmp	r4, #43	; 0x2b
 80077f8:	bf04      	itt	eq
 80077fa:	782c      	ldrbeq	r4, [r5, #0]
 80077fc:	1cb5      	addeq	r5, r6, #2
 80077fe:	e7ca      	b.n	8007796 <_strtol_l.constprop.0+0x3a>
 8007800:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007804:	f1bc 0f19 	cmp.w	ip, #25
 8007808:	d801      	bhi.n	800780e <_strtol_l.constprop.0+0xb2>
 800780a:	3c37      	subs	r4, #55	; 0x37
 800780c:	e7e2      	b.n	80077d4 <_strtol_l.constprop.0+0x78>
 800780e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007812:	f1bc 0f19 	cmp.w	ip, #25
 8007816:	d804      	bhi.n	8007822 <_strtol_l.constprop.0+0xc6>
 8007818:	3c57      	subs	r4, #87	; 0x57
 800781a:	e7db      	b.n	80077d4 <_strtol_l.constprop.0+0x78>
 800781c:	f04f 3eff 	mov.w	lr, #4294967295
 8007820:	e7e6      	b.n	80077f0 <_strtol_l.constprop.0+0x94>
 8007822:	f1be 3fff 	cmp.w	lr, #4294967295
 8007826:	d105      	bne.n	8007834 <_strtol_l.constprop.0+0xd8>
 8007828:	2322      	movs	r3, #34	; 0x22
 800782a:	6003      	str	r3, [r0, #0]
 800782c:	4646      	mov	r6, r8
 800782e:	b942      	cbnz	r2, 8007842 <_strtol_l.constprop.0+0xe6>
 8007830:	4630      	mov	r0, r6
 8007832:	e79e      	b.n	8007772 <_strtol_l.constprop.0+0x16>
 8007834:	b107      	cbz	r7, 8007838 <_strtol_l.constprop.0+0xdc>
 8007836:	4276      	negs	r6, r6
 8007838:	2a00      	cmp	r2, #0
 800783a:	d0f9      	beq.n	8007830 <_strtol_l.constprop.0+0xd4>
 800783c:	f1be 0f00 	cmp.w	lr, #0
 8007840:	d000      	beq.n	8007844 <_strtol_l.constprop.0+0xe8>
 8007842:	1e69      	subs	r1, r5, #1
 8007844:	6011      	str	r1, [r2, #0]
 8007846:	e7f3      	b.n	8007830 <_strtol_l.constprop.0+0xd4>
 8007848:	2430      	movs	r4, #48	; 0x30
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1b1      	bne.n	80077b2 <_strtol_l.constprop.0+0x56>
 800784e:	2308      	movs	r3, #8
 8007850:	e7af      	b.n	80077b2 <_strtol_l.constprop.0+0x56>
 8007852:	2c30      	cmp	r4, #48	; 0x30
 8007854:	d0a5      	beq.n	80077a2 <_strtol_l.constprop.0+0x46>
 8007856:	230a      	movs	r3, #10
 8007858:	e7ab      	b.n	80077b2 <_strtol_l.constprop.0+0x56>
 800785a:	bf00      	nop
 800785c:	080095b1 	.word	0x080095b1

08007860 <strtol>:
 8007860:	4613      	mov	r3, r2
 8007862:	460a      	mov	r2, r1
 8007864:	4601      	mov	r1, r0
 8007866:	4802      	ldr	r0, [pc, #8]	; (8007870 <strtol+0x10>)
 8007868:	6800      	ldr	r0, [r0, #0]
 800786a:	f7ff bf77 	b.w	800775c <_strtol_l.constprop.0>
 800786e:	bf00      	nop
 8007870:	20001688 	.word	0x20001688

08007874 <siprintf>:
 8007874:	b40e      	push	{r1, r2, r3}
 8007876:	b500      	push	{lr}
 8007878:	b09c      	sub	sp, #112	; 0x70
 800787a:	ab1d      	add	r3, sp, #116	; 0x74
 800787c:	9002      	str	r0, [sp, #8]
 800787e:	9006      	str	r0, [sp, #24]
 8007880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007884:	4809      	ldr	r0, [pc, #36]	; (80078ac <siprintf+0x38>)
 8007886:	9107      	str	r1, [sp, #28]
 8007888:	9104      	str	r1, [sp, #16]
 800788a:	4909      	ldr	r1, [pc, #36]	; (80078b0 <siprintf+0x3c>)
 800788c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007890:	9105      	str	r1, [sp, #20]
 8007892:	6800      	ldr	r0, [r0, #0]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	a902      	add	r1, sp, #8
 8007898:	f000 f9c8 	bl	8007c2c <_svfiprintf_r>
 800789c:	9b02      	ldr	r3, [sp, #8]
 800789e:	2200      	movs	r2, #0
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	b01c      	add	sp, #112	; 0x70
 80078a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a8:	b003      	add	sp, #12
 80078aa:	4770      	bx	lr
 80078ac:	20001688 	.word	0x20001688
 80078b0:	ffff0208 	.word	0xffff0208

080078b4 <_vsiprintf_r>:
 80078b4:	b500      	push	{lr}
 80078b6:	b09b      	sub	sp, #108	; 0x6c
 80078b8:	9100      	str	r1, [sp, #0]
 80078ba:	9104      	str	r1, [sp, #16]
 80078bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078c0:	9105      	str	r1, [sp, #20]
 80078c2:	9102      	str	r1, [sp, #8]
 80078c4:	4905      	ldr	r1, [pc, #20]	; (80078dc <_vsiprintf_r+0x28>)
 80078c6:	9103      	str	r1, [sp, #12]
 80078c8:	4669      	mov	r1, sp
 80078ca:	f000 f9af 	bl	8007c2c <_svfiprintf_r>
 80078ce:	9b00      	ldr	r3, [sp, #0]
 80078d0:	2200      	movs	r2, #0
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	b01b      	add	sp, #108	; 0x6c
 80078d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80078da:	bf00      	nop
 80078dc:	ffff0208 	.word	0xffff0208

080078e0 <vsiprintf>:
 80078e0:	4613      	mov	r3, r2
 80078e2:	460a      	mov	r2, r1
 80078e4:	4601      	mov	r1, r0
 80078e6:	4802      	ldr	r0, [pc, #8]	; (80078f0 <vsiprintf+0x10>)
 80078e8:	6800      	ldr	r0, [r0, #0]
 80078ea:	f7ff bfe3 	b.w	80078b4 <_vsiprintf_r>
 80078ee:	bf00      	nop
 80078f0:	20001688 	.word	0x20001688

080078f4 <memset>:
 80078f4:	4402      	add	r2, r0
 80078f6:	4603      	mov	r3, r0
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d100      	bne.n	80078fe <memset+0xa>
 80078fc:	4770      	bx	lr
 80078fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007902:	e7f9      	b.n	80078f8 <memset+0x4>

08007904 <__errno>:
 8007904:	4b01      	ldr	r3, [pc, #4]	; (800790c <__errno+0x8>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	20001688 	.word	0x20001688

08007910 <__libc_init_array>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4d0d      	ldr	r5, [pc, #52]	; (8007948 <__libc_init_array+0x38>)
 8007914:	4c0d      	ldr	r4, [pc, #52]	; (800794c <__libc_init_array+0x3c>)
 8007916:	1b64      	subs	r4, r4, r5
 8007918:	10a4      	asrs	r4, r4, #2
 800791a:	2600      	movs	r6, #0
 800791c:	42a6      	cmp	r6, r4
 800791e:	d109      	bne.n	8007934 <__libc_init_array+0x24>
 8007920:	4d0b      	ldr	r5, [pc, #44]	; (8007950 <__libc_init_array+0x40>)
 8007922:	4c0c      	ldr	r4, [pc, #48]	; (8007954 <__libc_init_array+0x44>)
 8007924:	f000 fc72 	bl	800820c <_init>
 8007928:	1b64      	subs	r4, r4, r5
 800792a:	10a4      	asrs	r4, r4, #2
 800792c:	2600      	movs	r6, #0
 800792e:	42a6      	cmp	r6, r4
 8007930:	d105      	bne.n	800793e <__libc_init_array+0x2e>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	f855 3b04 	ldr.w	r3, [r5], #4
 8007938:	4798      	blx	r3
 800793a:	3601      	adds	r6, #1
 800793c:	e7ee      	b.n	800791c <__libc_init_array+0xc>
 800793e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007942:	4798      	blx	r3
 8007944:	3601      	adds	r6, #1
 8007946:	e7f2      	b.n	800792e <__libc_init_array+0x1e>
 8007948:	080096ec 	.word	0x080096ec
 800794c:	080096ec 	.word	0x080096ec
 8007950:	080096ec 	.word	0x080096ec
 8007954:	080096f0 	.word	0x080096f0

08007958 <__retarget_lock_acquire_recursive>:
 8007958:	4770      	bx	lr

0800795a <__retarget_lock_release_recursive>:
 800795a:	4770      	bx	lr

0800795c <strcpy>:
 800795c:	4603      	mov	r3, r0
 800795e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007962:	f803 2b01 	strb.w	r2, [r3], #1
 8007966:	2a00      	cmp	r2, #0
 8007968:	d1f9      	bne.n	800795e <strcpy+0x2>
 800796a:	4770      	bx	lr

0800796c <memcpy>:
 800796c:	440a      	add	r2, r1
 800796e:	4291      	cmp	r1, r2
 8007970:	f100 33ff 	add.w	r3, r0, #4294967295
 8007974:	d100      	bne.n	8007978 <memcpy+0xc>
 8007976:	4770      	bx	lr
 8007978:	b510      	push	{r4, lr}
 800797a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800797e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007982:	4291      	cmp	r1, r2
 8007984:	d1f9      	bne.n	800797a <memcpy+0xe>
 8007986:	bd10      	pop	{r4, pc}

08007988 <_free_r>:
 8007988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800798a:	2900      	cmp	r1, #0
 800798c:	d044      	beq.n	8007a18 <_free_r+0x90>
 800798e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007992:	9001      	str	r0, [sp, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f1a1 0404 	sub.w	r4, r1, #4
 800799a:	bfb8      	it	lt
 800799c:	18e4      	addlt	r4, r4, r3
 800799e:	f000 f8df 	bl	8007b60 <__malloc_lock>
 80079a2:	4a1e      	ldr	r2, [pc, #120]	; (8007a1c <_free_r+0x94>)
 80079a4:	9801      	ldr	r0, [sp, #4]
 80079a6:	6813      	ldr	r3, [r2, #0]
 80079a8:	b933      	cbnz	r3, 80079b8 <_free_r+0x30>
 80079aa:	6063      	str	r3, [r4, #4]
 80079ac:	6014      	str	r4, [r2, #0]
 80079ae:	b003      	add	sp, #12
 80079b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079b4:	f000 b8da 	b.w	8007b6c <__malloc_unlock>
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	d908      	bls.n	80079ce <_free_r+0x46>
 80079bc:	6825      	ldr	r5, [r4, #0]
 80079be:	1961      	adds	r1, r4, r5
 80079c0:	428b      	cmp	r3, r1
 80079c2:	bf01      	itttt	eq
 80079c4:	6819      	ldreq	r1, [r3, #0]
 80079c6:	685b      	ldreq	r3, [r3, #4]
 80079c8:	1949      	addeq	r1, r1, r5
 80079ca:	6021      	streq	r1, [r4, #0]
 80079cc:	e7ed      	b.n	80079aa <_free_r+0x22>
 80079ce:	461a      	mov	r2, r3
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	b10b      	cbz	r3, 80079d8 <_free_r+0x50>
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	d9fa      	bls.n	80079ce <_free_r+0x46>
 80079d8:	6811      	ldr	r1, [r2, #0]
 80079da:	1855      	adds	r5, r2, r1
 80079dc:	42a5      	cmp	r5, r4
 80079de:	d10b      	bne.n	80079f8 <_free_r+0x70>
 80079e0:	6824      	ldr	r4, [r4, #0]
 80079e2:	4421      	add	r1, r4
 80079e4:	1854      	adds	r4, r2, r1
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	6011      	str	r1, [r2, #0]
 80079ea:	d1e0      	bne.n	80079ae <_free_r+0x26>
 80079ec:	681c      	ldr	r4, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	6053      	str	r3, [r2, #4]
 80079f2:	440c      	add	r4, r1
 80079f4:	6014      	str	r4, [r2, #0]
 80079f6:	e7da      	b.n	80079ae <_free_r+0x26>
 80079f8:	d902      	bls.n	8007a00 <_free_r+0x78>
 80079fa:	230c      	movs	r3, #12
 80079fc:	6003      	str	r3, [r0, #0]
 80079fe:	e7d6      	b.n	80079ae <_free_r+0x26>
 8007a00:	6825      	ldr	r5, [r4, #0]
 8007a02:	1961      	adds	r1, r4, r5
 8007a04:	428b      	cmp	r3, r1
 8007a06:	bf04      	itt	eq
 8007a08:	6819      	ldreq	r1, [r3, #0]
 8007a0a:	685b      	ldreq	r3, [r3, #4]
 8007a0c:	6063      	str	r3, [r4, #4]
 8007a0e:	bf04      	itt	eq
 8007a10:	1949      	addeq	r1, r1, r5
 8007a12:	6021      	streq	r1, [r4, #0]
 8007a14:	6054      	str	r4, [r2, #4]
 8007a16:	e7ca      	b.n	80079ae <_free_r+0x26>
 8007a18:	b003      	add	sp, #12
 8007a1a:	bd30      	pop	{r4, r5, pc}
 8007a1c:	2000a248 	.word	0x2000a248

08007a20 <sbrk_aligned>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	4e0e      	ldr	r6, [pc, #56]	; (8007a5c <sbrk_aligned+0x3c>)
 8007a24:	460c      	mov	r4, r1
 8007a26:	6831      	ldr	r1, [r6, #0]
 8007a28:	4605      	mov	r5, r0
 8007a2a:	b911      	cbnz	r1, 8007a32 <sbrk_aligned+0x12>
 8007a2c:	f000 fba6 	bl	800817c <_sbrk_r>
 8007a30:	6030      	str	r0, [r6, #0]
 8007a32:	4621      	mov	r1, r4
 8007a34:	4628      	mov	r0, r5
 8007a36:	f000 fba1 	bl	800817c <_sbrk_r>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	d00a      	beq.n	8007a54 <sbrk_aligned+0x34>
 8007a3e:	1cc4      	adds	r4, r0, #3
 8007a40:	f024 0403 	bic.w	r4, r4, #3
 8007a44:	42a0      	cmp	r0, r4
 8007a46:	d007      	beq.n	8007a58 <sbrk_aligned+0x38>
 8007a48:	1a21      	subs	r1, r4, r0
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 fb96 	bl	800817c <_sbrk_r>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d101      	bne.n	8007a58 <sbrk_aligned+0x38>
 8007a54:	f04f 34ff 	mov.w	r4, #4294967295
 8007a58:	4620      	mov	r0, r4
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	2000a24c 	.word	0x2000a24c

08007a60 <_malloc_r>:
 8007a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a64:	1ccd      	adds	r5, r1, #3
 8007a66:	f025 0503 	bic.w	r5, r5, #3
 8007a6a:	3508      	adds	r5, #8
 8007a6c:	2d0c      	cmp	r5, #12
 8007a6e:	bf38      	it	cc
 8007a70:	250c      	movcc	r5, #12
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	4607      	mov	r7, r0
 8007a76:	db01      	blt.n	8007a7c <_malloc_r+0x1c>
 8007a78:	42a9      	cmp	r1, r5
 8007a7a:	d905      	bls.n	8007a88 <_malloc_r+0x28>
 8007a7c:	230c      	movs	r3, #12
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	2600      	movs	r6, #0
 8007a82:	4630      	mov	r0, r6
 8007a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b5c <_malloc_r+0xfc>
 8007a8c:	f000 f868 	bl	8007b60 <__malloc_lock>
 8007a90:	f8d8 3000 	ldr.w	r3, [r8]
 8007a94:	461c      	mov	r4, r3
 8007a96:	bb5c      	cbnz	r4, 8007af0 <_malloc_r+0x90>
 8007a98:	4629      	mov	r1, r5
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f7ff ffc0 	bl	8007a20 <sbrk_aligned>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	d155      	bne.n	8007b52 <_malloc_r+0xf2>
 8007aa6:	f8d8 4000 	ldr.w	r4, [r8]
 8007aaa:	4626      	mov	r6, r4
 8007aac:	2e00      	cmp	r6, #0
 8007aae:	d145      	bne.n	8007b3c <_malloc_r+0xdc>
 8007ab0:	2c00      	cmp	r4, #0
 8007ab2:	d048      	beq.n	8007b46 <_malloc_r+0xe6>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4638      	mov	r0, r7
 8007aba:	eb04 0903 	add.w	r9, r4, r3
 8007abe:	f000 fb5d 	bl	800817c <_sbrk_r>
 8007ac2:	4581      	cmp	r9, r0
 8007ac4:	d13f      	bne.n	8007b46 <_malloc_r+0xe6>
 8007ac6:	6821      	ldr	r1, [r4, #0]
 8007ac8:	1a6d      	subs	r5, r5, r1
 8007aca:	4629      	mov	r1, r5
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7ff ffa7 	bl	8007a20 <sbrk_aligned>
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d037      	beq.n	8007b46 <_malloc_r+0xe6>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	442b      	add	r3, r5
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d038      	beq.n	8007b56 <_malloc_r+0xf6>
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	42a2      	cmp	r2, r4
 8007ae8:	d12b      	bne.n	8007b42 <_malloc_r+0xe2>
 8007aea:	2200      	movs	r2, #0
 8007aec:	605a      	str	r2, [r3, #4]
 8007aee:	e00f      	b.n	8007b10 <_malloc_r+0xb0>
 8007af0:	6822      	ldr	r2, [r4, #0]
 8007af2:	1b52      	subs	r2, r2, r5
 8007af4:	d41f      	bmi.n	8007b36 <_malloc_r+0xd6>
 8007af6:	2a0b      	cmp	r2, #11
 8007af8:	d917      	bls.n	8007b2a <_malloc_r+0xca>
 8007afa:	1961      	adds	r1, r4, r5
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	6025      	str	r5, [r4, #0]
 8007b00:	bf18      	it	ne
 8007b02:	6059      	strne	r1, [r3, #4]
 8007b04:	6863      	ldr	r3, [r4, #4]
 8007b06:	bf08      	it	eq
 8007b08:	f8c8 1000 	streq.w	r1, [r8]
 8007b0c:	5162      	str	r2, [r4, r5]
 8007b0e:	604b      	str	r3, [r1, #4]
 8007b10:	4638      	mov	r0, r7
 8007b12:	f104 060b 	add.w	r6, r4, #11
 8007b16:	f000 f829 	bl	8007b6c <__malloc_unlock>
 8007b1a:	f026 0607 	bic.w	r6, r6, #7
 8007b1e:	1d23      	adds	r3, r4, #4
 8007b20:	1af2      	subs	r2, r6, r3
 8007b22:	d0ae      	beq.n	8007a82 <_malloc_r+0x22>
 8007b24:	1b9b      	subs	r3, r3, r6
 8007b26:	50a3      	str	r3, [r4, r2]
 8007b28:	e7ab      	b.n	8007a82 <_malloc_r+0x22>
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	6862      	ldr	r2, [r4, #4]
 8007b2e:	d1dd      	bne.n	8007aec <_malloc_r+0x8c>
 8007b30:	f8c8 2000 	str.w	r2, [r8]
 8007b34:	e7ec      	b.n	8007b10 <_malloc_r+0xb0>
 8007b36:	4623      	mov	r3, r4
 8007b38:	6864      	ldr	r4, [r4, #4]
 8007b3a:	e7ac      	b.n	8007a96 <_malloc_r+0x36>
 8007b3c:	4634      	mov	r4, r6
 8007b3e:	6876      	ldr	r6, [r6, #4]
 8007b40:	e7b4      	b.n	8007aac <_malloc_r+0x4c>
 8007b42:	4613      	mov	r3, r2
 8007b44:	e7cc      	b.n	8007ae0 <_malloc_r+0x80>
 8007b46:	230c      	movs	r3, #12
 8007b48:	603b      	str	r3, [r7, #0]
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	f000 f80e 	bl	8007b6c <__malloc_unlock>
 8007b50:	e797      	b.n	8007a82 <_malloc_r+0x22>
 8007b52:	6025      	str	r5, [r4, #0]
 8007b54:	e7dc      	b.n	8007b10 <_malloc_r+0xb0>
 8007b56:	605b      	str	r3, [r3, #4]
 8007b58:	deff      	udf	#255	; 0xff
 8007b5a:	bf00      	nop
 8007b5c:	2000a248 	.word	0x2000a248

08007b60 <__malloc_lock>:
 8007b60:	4801      	ldr	r0, [pc, #4]	; (8007b68 <__malloc_lock+0x8>)
 8007b62:	f7ff bef9 	b.w	8007958 <__retarget_lock_acquire_recursive>
 8007b66:	bf00      	nop
 8007b68:	2000a244 	.word	0x2000a244

08007b6c <__malloc_unlock>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <__malloc_unlock+0x8>)
 8007b6e:	f7ff bef4 	b.w	800795a <__retarget_lock_release_recursive>
 8007b72:	bf00      	nop
 8007b74:	2000a244 	.word	0x2000a244

08007b78 <__ssputs_r>:
 8007b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7c:	688e      	ldr	r6, [r1, #8]
 8007b7e:	461f      	mov	r7, r3
 8007b80:	42be      	cmp	r6, r7
 8007b82:	680b      	ldr	r3, [r1, #0]
 8007b84:	4682      	mov	sl, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	4690      	mov	r8, r2
 8007b8a:	d82c      	bhi.n	8007be6 <__ssputs_r+0x6e>
 8007b8c:	898a      	ldrh	r2, [r1, #12]
 8007b8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b92:	d026      	beq.n	8007be2 <__ssputs_r+0x6a>
 8007b94:	6965      	ldr	r5, [r4, #20]
 8007b96:	6909      	ldr	r1, [r1, #16]
 8007b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b9c:	eba3 0901 	sub.w	r9, r3, r1
 8007ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ba4:	1c7b      	adds	r3, r7, #1
 8007ba6:	444b      	add	r3, r9
 8007ba8:	106d      	asrs	r5, r5, #1
 8007baa:	429d      	cmp	r5, r3
 8007bac:	bf38      	it	cc
 8007bae:	461d      	movcc	r5, r3
 8007bb0:	0553      	lsls	r3, r2, #21
 8007bb2:	d527      	bpl.n	8007c04 <__ssputs_r+0x8c>
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	f7ff ff53 	bl	8007a60 <_malloc_r>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	b360      	cbz	r0, 8007c18 <__ssputs_r+0xa0>
 8007bbe:	6921      	ldr	r1, [r4, #16]
 8007bc0:	464a      	mov	r2, r9
 8007bc2:	f7ff fed3 	bl	800796c <memcpy>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	6126      	str	r6, [r4, #16]
 8007bd4:	6165      	str	r5, [r4, #20]
 8007bd6:	444e      	add	r6, r9
 8007bd8:	eba5 0509 	sub.w	r5, r5, r9
 8007bdc:	6026      	str	r6, [r4, #0]
 8007bde:	60a5      	str	r5, [r4, #8]
 8007be0:	463e      	mov	r6, r7
 8007be2:	42be      	cmp	r6, r7
 8007be4:	d900      	bls.n	8007be8 <__ssputs_r+0x70>
 8007be6:	463e      	mov	r6, r7
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	4632      	mov	r2, r6
 8007bec:	4641      	mov	r1, r8
 8007bee:	f000 faab 	bl	8008148 <memmove>
 8007bf2:	68a3      	ldr	r3, [r4, #8]
 8007bf4:	1b9b      	subs	r3, r3, r6
 8007bf6:	60a3      	str	r3, [r4, #8]
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	4433      	add	r3, r6
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	2000      	movs	r0, #0
 8007c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c04:	462a      	mov	r2, r5
 8007c06:	f000 fac9 	bl	800819c <_realloc_r>
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d1e0      	bne.n	8007bd2 <__ssputs_r+0x5a>
 8007c10:	6921      	ldr	r1, [r4, #16]
 8007c12:	4650      	mov	r0, sl
 8007c14:	f7ff feb8 	bl	8007988 <_free_r>
 8007c18:	230c      	movs	r3, #12
 8007c1a:	f8ca 3000 	str.w	r3, [sl]
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2a:	e7e9      	b.n	8007c00 <__ssputs_r+0x88>

08007c2c <_svfiprintf_r>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	4698      	mov	r8, r3
 8007c32:	898b      	ldrh	r3, [r1, #12]
 8007c34:	061b      	lsls	r3, r3, #24
 8007c36:	b09d      	sub	sp, #116	; 0x74
 8007c38:	4607      	mov	r7, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	d50e      	bpl.n	8007c5e <_svfiprintf_r+0x32>
 8007c40:	690b      	ldr	r3, [r1, #16]
 8007c42:	b963      	cbnz	r3, 8007c5e <_svfiprintf_r+0x32>
 8007c44:	2140      	movs	r1, #64	; 0x40
 8007c46:	f7ff ff0b 	bl	8007a60 <_malloc_r>
 8007c4a:	6028      	str	r0, [r5, #0]
 8007c4c:	6128      	str	r0, [r5, #16]
 8007c4e:	b920      	cbnz	r0, 8007c5a <_svfiprintf_r+0x2e>
 8007c50:	230c      	movs	r3, #12
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	e0d0      	b.n	8007dfc <_svfiprintf_r+0x1d0>
 8007c5a:	2340      	movs	r3, #64	; 0x40
 8007c5c:	616b      	str	r3, [r5, #20]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24
 8007c62:	2320      	movs	r3, #32
 8007c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c6c:	2330      	movs	r3, #48	; 0x30
 8007c6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e14 <_svfiprintf_r+0x1e8>
 8007c72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c76:	f04f 0901 	mov.w	r9, #1
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	469a      	mov	sl, r3
 8007c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c82:	b10a      	cbz	r2, 8007c88 <_svfiprintf_r+0x5c>
 8007c84:	2a25      	cmp	r2, #37	; 0x25
 8007c86:	d1f9      	bne.n	8007c7c <_svfiprintf_r+0x50>
 8007c88:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8c:	d00b      	beq.n	8007ca6 <_svfiprintf_r+0x7a>
 8007c8e:	465b      	mov	r3, fp
 8007c90:	4622      	mov	r2, r4
 8007c92:	4629      	mov	r1, r5
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff ff6f 	bl	8007b78 <__ssputs_r>
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	f000 80a9 	beq.w	8007df2 <_svfiprintf_r+0x1c6>
 8007ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca2:	445a      	add	r2, fp
 8007ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 80a1 	beq.w	8007df2 <_svfiprintf_r+0x1c6>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cba:	f10a 0a01 	add.w	sl, sl, #1
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	9307      	str	r3, [sp, #28]
 8007cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cc8:	4654      	mov	r4, sl
 8007cca:	2205      	movs	r2, #5
 8007ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd0:	4850      	ldr	r0, [pc, #320]	; (8007e14 <_svfiprintf_r+0x1e8>)
 8007cd2:	f7f8 fab5 	bl	8000240 <memchr>
 8007cd6:	9a04      	ldr	r2, [sp, #16]
 8007cd8:	b9d8      	cbnz	r0, 8007d12 <_svfiprintf_r+0xe6>
 8007cda:	06d0      	lsls	r0, r2, #27
 8007cdc:	bf44      	itt	mi
 8007cde:	2320      	movmi	r3, #32
 8007ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ce4:	0711      	lsls	r1, r2, #28
 8007ce6:	bf44      	itt	mi
 8007ce8:	232b      	movmi	r3, #43	; 0x2b
 8007cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cee:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf4:	d015      	beq.n	8007d22 <_svfiprintf_r+0xf6>
 8007cf6:	9a07      	ldr	r2, [sp, #28]
 8007cf8:	4654      	mov	r4, sl
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f04f 0c0a 	mov.w	ip, #10
 8007d00:	4621      	mov	r1, r4
 8007d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d06:	3b30      	subs	r3, #48	; 0x30
 8007d08:	2b09      	cmp	r3, #9
 8007d0a:	d94d      	bls.n	8007da8 <_svfiprintf_r+0x17c>
 8007d0c:	b1b0      	cbz	r0, 8007d3c <_svfiprintf_r+0x110>
 8007d0e:	9207      	str	r2, [sp, #28]
 8007d10:	e014      	b.n	8007d3c <_svfiprintf_r+0x110>
 8007d12:	eba0 0308 	sub.w	r3, r0, r8
 8007d16:	fa09 f303 	lsl.w	r3, r9, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	46a2      	mov	sl, r4
 8007d20:	e7d2      	b.n	8007cc8 <_svfiprintf_r+0x9c>
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	9103      	str	r1, [sp, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfbb      	ittet	lt
 8007d2e:	425b      	neglt	r3, r3
 8007d30:	f042 0202 	orrlt.w	r2, r2, #2
 8007d34:	9307      	strge	r3, [sp, #28]
 8007d36:	9307      	strlt	r3, [sp, #28]
 8007d38:	bfb8      	it	lt
 8007d3a:	9204      	strlt	r2, [sp, #16]
 8007d3c:	7823      	ldrb	r3, [r4, #0]
 8007d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d40:	d10c      	bne.n	8007d5c <_svfiprintf_r+0x130>
 8007d42:	7863      	ldrb	r3, [r4, #1]
 8007d44:	2b2a      	cmp	r3, #42	; 0x2a
 8007d46:	d134      	bne.n	8007db2 <_svfiprintf_r+0x186>
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	1d1a      	adds	r2, r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	9203      	str	r2, [sp, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfb8      	it	lt
 8007d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d58:	3402      	adds	r4, #2
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e24 <_svfiprintf_r+0x1f8>
 8007d60:	7821      	ldrb	r1, [r4, #0]
 8007d62:	2203      	movs	r2, #3
 8007d64:	4650      	mov	r0, sl
 8007d66:	f7f8 fa6b 	bl	8000240 <memchr>
 8007d6a:	b138      	cbz	r0, 8007d7c <_svfiprintf_r+0x150>
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	eba0 000a 	sub.w	r0, r0, sl
 8007d72:	2240      	movs	r2, #64	; 0x40
 8007d74:	4082      	lsls	r2, r0
 8007d76:	4313      	orrs	r3, r2
 8007d78:	3401      	adds	r4, #1
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d80:	4825      	ldr	r0, [pc, #148]	; (8007e18 <_svfiprintf_r+0x1ec>)
 8007d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d86:	2206      	movs	r2, #6
 8007d88:	f7f8 fa5a 	bl	8000240 <memchr>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d038      	beq.n	8007e02 <_svfiprintf_r+0x1d6>
 8007d90:	4b22      	ldr	r3, [pc, #136]	; (8007e1c <_svfiprintf_r+0x1f0>)
 8007d92:	bb1b      	cbnz	r3, 8007ddc <_svfiprintf_r+0x1b0>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	3307      	adds	r3, #7
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	9303      	str	r3, [sp, #12]
 8007da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da2:	4433      	add	r3, r6
 8007da4:	9309      	str	r3, [sp, #36]	; 0x24
 8007da6:	e768      	b.n	8007c7a <_svfiprintf_r+0x4e>
 8007da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dac:	460c      	mov	r4, r1
 8007dae:	2001      	movs	r0, #1
 8007db0:	e7a6      	b.n	8007d00 <_svfiprintf_r+0xd4>
 8007db2:	2300      	movs	r3, #0
 8007db4:	3401      	adds	r4, #1
 8007db6:	9305      	str	r3, [sp, #20]
 8007db8:	4619      	mov	r1, r3
 8007dba:	f04f 0c0a 	mov.w	ip, #10
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc4:	3a30      	subs	r2, #48	; 0x30
 8007dc6:	2a09      	cmp	r2, #9
 8007dc8:	d903      	bls.n	8007dd2 <_svfiprintf_r+0x1a6>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0c6      	beq.n	8007d5c <_svfiprintf_r+0x130>
 8007dce:	9105      	str	r1, [sp, #20]
 8007dd0:	e7c4      	b.n	8007d5c <_svfiprintf_r+0x130>
 8007dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e7f0      	b.n	8007dbe <_svfiprintf_r+0x192>
 8007ddc:	ab03      	add	r3, sp, #12
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	462a      	mov	r2, r5
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <_svfiprintf_r+0x1f4>)
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	4638      	mov	r0, r7
 8007de8:	f3af 8000 	nop.w
 8007dec:	1c42      	adds	r2, r0, #1
 8007dee:	4606      	mov	r6, r0
 8007df0:	d1d6      	bne.n	8007da0 <_svfiprintf_r+0x174>
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	065b      	lsls	r3, r3, #25
 8007df6:	f53f af2d 	bmi.w	8007c54 <_svfiprintf_r+0x28>
 8007dfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dfc:	b01d      	add	sp, #116	; 0x74
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	ab03      	add	r3, sp, #12
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	462a      	mov	r2, r5
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <_svfiprintf_r+0x1f4>)
 8007e0a:	a904      	add	r1, sp, #16
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f000 f879 	bl	8007f04 <_printf_i>
 8007e12:	e7eb      	b.n	8007dec <_svfiprintf_r+0x1c0>
 8007e14:	080096b1 	.word	0x080096b1
 8007e18:	080096bb 	.word	0x080096bb
 8007e1c:	00000000 	.word	0x00000000
 8007e20:	08007b79 	.word	0x08007b79
 8007e24:	080096b7 	.word	0x080096b7

08007e28 <_printf_common>:
 8007e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2c:	4616      	mov	r6, r2
 8007e2e:	4699      	mov	r9, r3
 8007e30:	688a      	ldr	r2, [r1, #8]
 8007e32:	690b      	ldr	r3, [r1, #16]
 8007e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	bfb8      	it	lt
 8007e3c:	4613      	movlt	r3, r2
 8007e3e:	6033      	str	r3, [r6, #0]
 8007e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e44:	4607      	mov	r7, r0
 8007e46:	460c      	mov	r4, r1
 8007e48:	b10a      	cbz	r2, 8007e4e <_printf_common+0x26>
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	6033      	str	r3, [r6, #0]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	0699      	lsls	r1, r3, #26
 8007e52:	bf42      	ittt	mi
 8007e54:	6833      	ldrmi	r3, [r6, #0]
 8007e56:	3302      	addmi	r3, #2
 8007e58:	6033      	strmi	r3, [r6, #0]
 8007e5a:	6825      	ldr	r5, [r4, #0]
 8007e5c:	f015 0506 	ands.w	r5, r5, #6
 8007e60:	d106      	bne.n	8007e70 <_printf_common+0x48>
 8007e62:	f104 0a19 	add.w	sl, r4, #25
 8007e66:	68e3      	ldr	r3, [r4, #12]
 8007e68:	6832      	ldr	r2, [r6, #0]
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	42ab      	cmp	r3, r5
 8007e6e:	dc26      	bgt.n	8007ebe <_printf_common+0x96>
 8007e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e74:	1e13      	subs	r3, r2, #0
 8007e76:	6822      	ldr	r2, [r4, #0]
 8007e78:	bf18      	it	ne
 8007e7a:	2301      	movne	r3, #1
 8007e7c:	0692      	lsls	r2, r2, #26
 8007e7e:	d42b      	bmi.n	8007ed8 <_printf_common+0xb0>
 8007e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e84:	4649      	mov	r1, r9
 8007e86:	4638      	mov	r0, r7
 8007e88:	47c0      	blx	r8
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	d01e      	beq.n	8007ecc <_printf_common+0xa4>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	6922      	ldr	r2, [r4, #16]
 8007e92:	f003 0306 	and.w	r3, r3, #6
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	bf02      	ittt	eq
 8007e9a:	68e5      	ldreq	r5, [r4, #12]
 8007e9c:	6833      	ldreq	r3, [r6, #0]
 8007e9e:	1aed      	subeq	r5, r5, r3
 8007ea0:	68a3      	ldr	r3, [r4, #8]
 8007ea2:	bf0c      	ite	eq
 8007ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ea8:	2500      	movne	r5, #0
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	bfc4      	itt	gt
 8007eae:	1a9b      	subgt	r3, r3, r2
 8007eb0:	18ed      	addgt	r5, r5, r3
 8007eb2:	2600      	movs	r6, #0
 8007eb4:	341a      	adds	r4, #26
 8007eb6:	42b5      	cmp	r5, r6
 8007eb8:	d11a      	bne.n	8007ef0 <_printf_common+0xc8>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e008      	b.n	8007ed0 <_printf_common+0xa8>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	47c0      	blx	r8
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d103      	bne.n	8007ed4 <_printf_common+0xac>
 8007ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	e7c6      	b.n	8007e66 <_printf_common+0x3e>
 8007ed8:	18e1      	adds	r1, r4, r3
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	2030      	movs	r0, #48	; 0x30
 8007ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ee2:	4422      	add	r2, r4
 8007ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007eec:	3302      	adds	r3, #2
 8007eee:	e7c7      	b.n	8007e80 <_printf_common+0x58>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	47c0      	blx	r8
 8007efa:	3001      	adds	r0, #1
 8007efc:	d0e6      	beq.n	8007ecc <_printf_common+0xa4>
 8007efe:	3601      	adds	r6, #1
 8007f00:	e7d9      	b.n	8007eb6 <_printf_common+0x8e>
	...

08007f04 <_printf_i>:
 8007f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	7e0f      	ldrb	r7, [r1, #24]
 8007f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f0c:	2f78      	cmp	r7, #120	; 0x78
 8007f0e:	4691      	mov	r9, r2
 8007f10:	4680      	mov	r8, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	469a      	mov	sl, r3
 8007f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f1a:	d807      	bhi.n	8007f2c <_printf_i+0x28>
 8007f1c:	2f62      	cmp	r7, #98	; 0x62
 8007f1e:	d80a      	bhi.n	8007f36 <_printf_i+0x32>
 8007f20:	2f00      	cmp	r7, #0
 8007f22:	f000 80d4 	beq.w	80080ce <_printf_i+0x1ca>
 8007f26:	2f58      	cmp	r7, #88	; 0x58
 8007f28:	f000 80c0 	beq.w	80080ac <_printf_i+0x1a8>
 8007f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f34:	e03a      	b.n	8007fac <_printf_i+0xa8>
 8007f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f3a:	2b15      	cmp	r3, #21
 8007f3c:	d8f6      	bhi.n	8007f2c <_printf_i+0x28>
 8007f3e:	a101      	add	r1, pc, #4	; (adr r1, 8007f44 <_printf_i+0x40>)
 8007f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f44:	08007f9d 	.word	0x08007f9d
 8007f48:	08007fb1 	.word	0x08007fb1
 8007f4c:	08007f2d 	.word	0x08007f2d
 8007f50:	08007f2d 	.word	0x08007f2d
 8007f54:	08007f2d 	.word	0x08007f2d
 8007f58:	08007f2d 	.word	0x08007f2d
 8007f5c:	08007fb1 	.word	0x08007fb1
 8007f60:	08007f2d 	.word	0x08007f2d
 8007f64:	08007f2d 	.word	0x08007f2d
 8007f68:	08007f2d 	.word	0x08007f2d
 8007f6c:	08007f2d 	.word	0x08007f2d
 8007f70:	080080b5 	.word	0x080080b5
 8007f74:	08007fdd 	.word	0x08007fdd
 8007f78:	0800806f 	.word	0x0800806f
 8007f7c:	08007f2d 	.word	0x08007f2d
 8007f80:	08007f2d 	.word	0x08007f2d
 8007f84:	080080d7 	.word	0x080080d7
 8007f88:	08007f2d 	.word	0x08007f2d
 8007f8c:	08007fdd 	.word	0x08007fdd
 8007f90:	08007f2d 	.word	0x08007f2d
 8007f94:	08007f2d 	.word	0x08007f2d
 8007f98:	08008077 	.word	0x08008077
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	1d1a      	adds	r2, r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	602a      	str	r2, [r5, #0]
 8007fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fac:	2301      	movs	r3, #1
 8007fae:	e09f      	b.n	80080f0 <_printf_i+0x1ec>
 8007fb0:	6820      	ldr	r0, [r4, #0]
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	0607      	lsls	r7, r0, #24
 8007fb6:	f103 0104 	add.w	r1, r3, #4
 8007fba:	6029      	str	r1, [r5, #0]
 8007fbc:	d501      	bpl.n	8007fc2 <_printf_i+0xbe>
 8007fbe:	681e      	ldr	r6, [r3, #0]
 8007fc0:	e003      	b.n	8007fca <_printf_i+0xc6>
 8007fc2:	0646      	lsls	r6, r0, #25
 8007fc4:	d5fb      	bpl.n	8007fbe <_printf_i+0xba>
 8007fc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	da03      	bge.n	8007fd6 <_printf_i+0xd2>
 8007fce:	232d      	movs	r3, #45	; 0x2d
 8007fd0:	4276      	negs	r6, r6
 8007fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd6:	485a      	ldr	r0, [pc, #360]	; (8008140 <_printf_i+0x23c>)
 8007fd8:	230a      	movs	r3, #10
 8007fda:	e012      	b.n	8008002 <_printf_i+0xfe>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	6820      	ldr	r0, [r4, #0]
 8007fe0:	1d19      	adds	r1, r3, #4
 8007fe2:	6029      	str	r1, [r5, #0]
 8007fe4:	0605      	lsls	r5, r0, #24
 8007fe6:	d501      	bpl.n	8007fec <_printf_i+0xe8>
 8007fe8:	681e      	ldr	r6, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <_printf_i+0xee>
 8007fec:	0641      	lsls	r1, r0, #25
 8007fee:	d5fb      	bpl.n	8007fe8 <_printf_i+0xe4>
 8007ff0:	881e      	ldrh	r6, [r3, #0]
 8007ff2:	4853      	ldr	r0, [pc, #332]	; (8008140 <_printf_i+0x23c>)
 8007ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ff6:	bf0c      	ite	eq
 8007ff8:	2308      	moveq	r3, #8
 8007ffa:	230a      	movne	r3, #10
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008002:	6865      	ldr	r5, [r4, #4]
 8008004:	60a5      	str	r5, [r4, #8]
 8008006:	2d00      	cmp	r5, #0
 8008008:	bfa2      	ittt	ge
 800800a:	6821      	ldrge	r1, [r4, #0]
 800800c:	f021 0104 	bicge.w	r1, r1, #4
 8008010:	6021      	strge	r1, [r4, #0]
 8008012:	b90e      	cbnz	r6, 8008018 <_printf_i+0x114>
 8008014:	2d00      	cmp	r5, #0
 8008016:	d04b      	beq.n	80080b0 <_printf_i+0x1ac>
 8008018:	4615      	mov	r5, r2
 800801a:	fbb6 f1f3 	udiv	r1, r6, r3
 800801e:	fb03 6711 	mls	r7, r3, r1, r6
 8008022:	5dc7      	ldrb	r7, [r0, r7]
 8008024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008028:	4637      	mov	r7, r6
 800802a:	42bb      	cmp	r3, r7
 800802c:	460e      	mov	r6, r1
 800802e:	d9f4      	bls.n	800801a <_printf_i+0x116>
 8008030:	2b08      	cmp	r3, #8
 8008032:	d10b      	bne.n	800804c <_printf_i+0x148>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	07de      	lsls	r6, r3, #31
 8008038:	d508      	bpl.n	800804c <_printf_i+0x148>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	6861      	ldr	r1, [r4, #4]
 800803e:	4299      	cmp	r1, r3
 8008040:	bfde      	ittt	le
 8008042:	2330      	movle	r3, #48	; 0x30
 8008044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800804c:	1b52      	subs	r2, r2, r5
 800804e:	6122      	str	r2, [r4, #16]
 8008050:	f8cd a000 	str.w	sl, [sp]
 8008054:	464b      	mov	r3, r9
 8008056:	aa03      	add	r2, sp, #12
 8008058:	4621      	mov	r1, r4
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff fee4 	bl	8007e28 <_printf_common>
 8008060:	3001      	adds	r0, #1
 8008062:	d14a      	bne.n	80080fa <_printf_i+0x1f6>
 8008064:	f04f 30ff 	mov.w	r0, #4294967295
 8008068:	b004      	add	sp, #16
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	f043 0320 	orr.w	r3, r3, #32
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	4833      	ldr	r0, [pc, #204]	; (8008144 <_printf_i+0x240>)
 8008078:	2778      	movs	r7, #120	; 0x78
 800807a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	6829      	ldr	r1, [r5, #0]
 8008082:	061f      	lsls	r7, r3, #24
 8008084:	f851 6b04 	ldr.w	r6, [r1], #4
 8008088:	d402      	bmi.n	8008090 <_printf_i+0x18c>
 800808a:	065f      	lsls	r7, r3, #25
 800808c:	bf48      	it	mi
 800808e:	b2b6      	uxthmi	r6, r6
 8008090:	07df      	lsls	r7, r3, #31
 8008092:	bf48      	it	mi
 8008094:	f043 0320 	orrmi.w	r3, r3, #32
 8008098:	6029      	str	r1, [r5, #0]
 800809a:	bf48      	it	mi
 800809c:	6023      	strmi	r3, [r4, #0]
 800809e:	b91e      	cbnz	r6, 80080a8 <_printf_i+0x1a4>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	f023 0320 	bic.w	r3, r3, #32
 80080a6:	6023      	str	r3, [r4, #0]
 80080a8:	2310      	movs	r3, #16
 80080aa:	e7a7      	b.n	8007ffc <_printf_i+0xf8>
 80080ac:	4824      	ldr	r0, [pc, #144]	; (8008140 <_printf_i+0x23c>)
 80080ae:	e7e4      	b.n	800807a <_printf_i+0x176>
 80080b0:	4615      	mov	r5, r2
 80080b2:	e7bd      	b.n	8008030 <_printf_i+0x12c>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	6826      	ldr	r6, [r4, #0]
 80080b8:	6961      	ldr	r1, [r4, #20]
 80080ba:	1d18      	adds	r0, r3, #4
 80080bc:	6028      	str	r0, [r5, #0]
 80080be:	0635      	lsls	r5, r6, #24
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	d501      	bpl.n	80080c8 <_printf_i+0x1c4>
 80080c4:	6019      	str	r1, [r3, #0]
 80080c6:	e002      	b.n	80080ce <_printf_i+0x1ca>
 80080c8:	0670      	lsls	r0, r6, #25
 80080ca:	d5fb      	bpl.n	80080c4 <_printf_i+0x1c0>
 80080cc:	8019      	strh	r1, [r3, #0]
 80080ce:	2300      	movs	r3, #0
 80080d0:	6123      	str	r3, [r4, #16]
 80080d2:	4615      	mov	r5, r2
 80080d4:	e7bc      	b.n	8008050 <_printf_i+0x14c>
 80080d6:	682b      	ldr	r3, [r5, #0]
 80080d8:	1d1a      	adds	r2, r3, #4
 80080da:	602a      	str	r2, [r5, #0]
 80080dc:	681d      	ldr	r5, [r3, #0]
 80080de:	6862      	ldr	r2, [r4, #4]
 80080e0:	2100      	movs	r1, #0
 80080e2:	4628      	mov	r0, r5
 80080e4:	f7f8 f8ac 	bl	8000240 <memchr>
 80080e8:	b108      	cbz	r0, 80080ee <_printf_i+0x1ea>
 80080ea:	1b40      	subs	r0, r0, r5
 80080ec:	6060      	str	r0, [r4, #4]
 80080ee:	6863      	ldr	r3, [r4, #4]
 80080f0:	6123      	str	r3, [r4, #16]
 80080f2:	2300      	movs	r3, #0
 80080f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f8:	e7aa      	b.n	8008050 <_printf_i+0x14c>
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	462a      	mov	r2, r5
 80080fe:	4649      	mov	r1, r9
 8008100:	4640      	mov	r0, r8
 8008102:	47d0      	blx	sl
 8008104:	3001      	adds	r0, #1
 8008106:	d0ad      	beq.n	8008064 <_printf_i+0x160>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	079b      	lsls	r3, r3, #30
 800810c:	d413      	bmi.n	8008136 <_printf_i+0x232>
 800810e:	68e0      	ldr	r0, [r4, #12]
 8008110:	9b03      	ldr	r3, [sp, #12]
 8008112:	4298      	cmp	r0, r3
 8008114:	bfb8      	it	lt
 8008116:	4618      	movlt	r0, r3
 8008118:	e7a6      	b.n	8008068 <_printf_i+0x164>
 800811a:	2301      	movs	r3, #1
 800811c:	4632      	mov	r2, r6
 800811e:	4649      	mov	r1, r9
 8008120:	4640      	mov	r0, r8
 8008122:	47d0      	blx	sl
 8008124:	3001      	adds	r0, #1
 8008126:	d09d      	beq.n	8008064 <_printf_i+0x160>
 8008128:	3501      	adds	r5, #1
 800812a:	68e3      	ldr	r3, [r4, #12]
 800812c:	9903      	ldr	r1, [sp, #12]
 800812e:	1a5b      	subs	r3, r3, r1
 8008130:	42ab      	cmp	r3, r5
 8008132:	dcf2      	bgt.n	800811a <_printf_i+0x216>
 8008134:	e7eb      	b.n	800810e <_printf_i+0x20a>
 8008136:	2500      	movs	r5, #0
 8008138:	f104 0619 	add.w	r6, r4, #25
 800813c:	e7f5      	b.n	800812a <_printf_i+0x226>
 800813e:	bf00      	nop
 8008140:	080096c2 	.word	0x080096c2
 8008144:	080096d3 	.word	0x080096d3

08008148 <memmove>:
 8008148:	4288      	cmp	r0, r1
 800814a:	b510      	push	{r4, lr}
 800814c:	eb01 0402 	add.w	r4, r1, r2
 8008150:	d902      	bls.n	8008158 <memmove+0x10>
 8008152:	4284      	cmp	r4, r0
 8008154:	4623      	mov	r3, r4
 8008156:	d807      	bhi.n	8008168 <memmove+0x20>
 8008158:	1e43      	subs	r3, r0, #1
 800815a:	42a1      	cmp	r1, r4
 800815c:	d008      	beq.n	8008170 <memmove+0x28>
 800815e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008166:	e7f8      	b.n	800815a <memmove+0x12>
 8008168:	4402      	add	r2, r0
 800816a:	4601      	mov	r1, r0
 800816c:	428a      	cmp	r2, r1
 800816e:	d100      	bne.n	8008172 <memmove+0x2a>
 8008170:	bd10      	pop	{r4, pc}
 8008172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800817a:	e7f7      	b.n	800816c <memmove+0x24>

0800817c <_sbrk_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4d06      	ldr	r5, [pc, #24]	; (8008198 <_sbrk_r+0x1c>)
 8008180:	2300      	movs	r3, #0
 8008182:	4604      	mov	r4, r0
 8008184:	4608      	mov	r0, r1
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	f7f8 fba6 	bl	80008d8 <_sbrk>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_sbrk_r+0x1a>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	b103      	cbz	r3, 8008196 <_sbrk_r+0x1a>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	2000a240 	.word	0x2000a240

0800819c <_realloc_r>:
 800819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a0:	4680      	mov	r8, r0
 80081a2:	4614      	mov	r4, r2
 80081a4:	460e      	mov	r6, r1
 80081a6:	b921      	cbnz	r1, 80081b2 <_realloc_r+0x16>
 80081a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081ac:	4611      	mov	r1, r2
 80081ae:	f7ff bc57 	b.w	8007a60 <_malloc_r>
 80081b2:	b92a      	cbnz	r2, 80081c0 <_realloc_r+0x24>
 80081b4:	f7ff fbe8 	bl	8007988 <_free_r>
 80081b8:	4625      	mov	r5, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c0:	f000 f81b 	bl	80081fa <_malloc_usable_size_r>
 80081c4:	4284      	cmp	r4, r0
 80081c6:	4607      	mov	r7, r0
 80081c8:	d802      	bhi.n	80081d0 <_realloc_r+0x34>
 80081ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081ce:	d812      	bhi.n	80081f6 <_realloc_r+0x5a>
 80081d0:	4621      	mov	r1, r4
 80081d2:	4640      	mov	r0, r8
 80081d4:	f7ff fc44 	bl	8007a60 <_malloc_r>
 80081d8:	4605      	mov	r5, r0
 80081da:	2800      	cmp	r0, #0
 80081dc:	d0ed      	beq.n	80081ba <_realloc_r+0x1e>
 80081de:	42bc      	cmp	r4, r7
 80081e0:	4622      	mov	r2, r4
 80081e2:	4631      	mov	r1, r6
 80081e4:	bf28      	it	cs
 80081e6:	463a      	movcs	r2, r7
 80081e8:	f7ff fbc0 	bl	800796c <memcpy>
 80081ec:	4631      	mov	r1, r6
 80081ee:	4640      	mov	r0, r8
 80081f0:	f7ff fbca 	bl	8007988 <_free_r>
 80081f4:	e7e1      	b.n	80081ba <_realloc_r+0x1e>
 80081f6:	4635      	mov	r5, r6
 80081f8:	e7df      	b.n	80081ba <_realloc_r+0x1e>

080081fa <_malloc_usable_size_r>:
 80081fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081fe:	1f18      	subs	r0, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	bfbc      	itt	lt
 8008204:	580b      	ldrlt	r3, [r1, r0]
 8008206:	18c0      	addlt	r0, r0, r3
 8008208:	4770      	bx	lr
	...

0800820c <_init>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr

08008218 <_fini>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr
