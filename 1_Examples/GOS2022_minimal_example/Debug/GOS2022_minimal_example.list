
GOS2022_minimal_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e83c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d4  0800ea10  0800ea10  0001ea10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffe4  0800ffe4  00020fb0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffe4  0800ffe4  0001ffe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffec  0800ffec  00020fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffec  0800ffec  0001ffec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fff0  0800fff0  0001fff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fb0  20000000  0800fff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c64  20000fb0  08010fa4  00020fb0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20009c14  08010fa4  00029c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020fb0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020fe0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185e2  00000000  00000000  00021023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005225  00000000  00000000  00039605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  0003e830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed4  00000000  00000000  0003fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00046b6e  00000000  00000000  00040b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000223a0  00000000  00000000  00087692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3d76  00000000  00000000  000a9a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dec  00000000  00000000  0018d7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00193594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000fb0 	.word	0x20000fb0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e9f4 	.word	0x0800e9f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000fb4 	.word	0x20000fb4
 800020c:	0800e9f4 	.word	0x0800e9f4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <APP_ButtonInit>:
 *
 * Registers the button task in the scheduler and initializes
 * the button trigger.
 */
gos_result_t APP_ButtonInit (void_t)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t buttonInitResult = GOS_ERROR;
 8000f0a:	23ae      	movs	r3, #174	; 0xae
 8000f0c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	if (gos_taskRegister(&buttonTaskDesc, NULL) == GOS_SUCCESS &&
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <APP_ButtonInit+0x34>)
 8000f12:	f006 fbfd 	bl	8007710 <gos_taskRegister>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b55      	cmp	r3, #85	; 0x55
 8000f1a:	d107      	bne.n	8000f2c <APP_ButtonInit+0x28>
		gos_triggerInit(&buttonTrigger) == GOS_SUCCESS)
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <APP_ButtonInit+0x38>)
 8000f1e:	f00a fbff 	bl	800b720 <gos_triggerInit>
 8000f22:	4603      	mov	r3, r0
	if (gos_taskRegister(&buttonTaskDesc, NULL) == GOS_SUCCESS &&
 8000f24:	2b55      	cmp	r3, #85	; 0x55
 8000f26:	d101      	bne.n	8000f2c <APP_ButtonInit+0x28>
	{
		buttonInitResult = GOS_SUCCESS;
 8000f28:	2355      	movs	r3, #85	; 0x55
 8000f2a:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Error.
	}

	return buttonInitResult;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000fcc 	.word	0x20000fcc

08000f40 <APP_ButtonPressedInterruptCallback>:
 * Called by HW interrupt.
 * Only effective when the debounce-flag is not set.
 * It sets the debounce-flag and increments the button trigger.
 */
void_t APP_ButtonPressedInterruptCallback (void_t)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    if (buttonBlocked == GOS_FALSE)
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <APP_ButtonPressedInterruptCallback+0x1c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b49      	cmp	r3, #73	; 0x49
 8000f4a:	d105      	bne.n	8000f58 <APP_ButtonPressedInterruptCallback+0x18>
    {
        buttonBlocked = GOS_TRUE;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <APP_ButtonPressedInterruptCallback+0x1c>)
 8000f4e:	2236      	movs	r2, #54	; 0x36
 8000f50:	701a      	strb	r2, [r3, #0]
        (void_t) gos_triggerIncrement(&buttonTrigger);
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <APP_ButtonPressedInterruptCallback+0x20>)
 8000f54:	f00a fd08 	bl	800b968 <gos_triggerIncrement>
    }
    else
    {
    	// Button is blocked (software debouncing).
    }
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000fd8 	.word	0x20000fd8
 8000f60:	20000fcc 	.word	0x20000fcc

08000f64 <APP_ButtonTask>:
 * with no other activities in the meantime).
 * When the trigger is received, it resets it, traces a message on the trace output,
 * invokes a kernel dump, and resets the debounce-flag.
 */
GOS_STATIC void_t APP_ButtonTask (void_t)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    buttonBlocked = GOS_FALSE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <APP_ButtonTask+0x44>)
 8000f6a:	2249      	movs	r2, #73	; 0x49
 8000f6c:	701a      	strb	r2, [r3, #0]

    for (;;)
    {
        if (gos_triggerWait(&buttonTrigger, 1, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f72:	2101      	movs	r1, #1
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <APP_ButtonTask+0x48>)
 8000f76:	f00a fc47 	bl	800b808 <gos_triggerWait>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b55      	cmp	r3, #85	; 0x55
 8000f7e:	d10c      	bne.n	8000f9a <APP_ButtonTask+0x36>
        {
            gos_triggerReset(&buttonTrigger);
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <APP_ButtonTask+0x48>)
 8000f82:	f00a fbe9 	bl	800b758 <gos_triggerReset>
            (void_t) gos_traceTrace(GOS_TRUE, "User button pressed.\r\n");
 8000f86:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <APP_ButtonTask+0x4c>)
 8000f88:	2036      	movs	r0, #54	; 0x36
 8000f8a:	f00a f925 	bl	800b1d8 <gos_traceTrace>
            gos_kernelDump();
 8000f8e:	f005 fd5f 	bl	8006a50 <gos_kernelDump>
            buttonBlocked = GOS_FALSE;
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <APP_ButtonTask+0x44>)
 8000f94:	2249      	movs	r2, #73	; 0x49
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e7e9      	b.n	8000f6e <APP_ButtonTask+0xa>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_USER_FATAL, NULL, 0, "Button task trigger error.");
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <APP_ButtonTask+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	201a      	movs	r0, #26
 8000fa2:	f008 f9f7 	bl	8009394 <gos_errorHandler>
        if (gos_triggerWait(&buttonTrigger, 1, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8000fa6:	e7e2      	b.n	8000f6e <APP_ButtonTask+0xa>
 8000fa8:	20000fd8 	.word	0x20000fd8
 8000fac:	20000fcc 	.word	0x20000fcc
 8000fb0:	0800ea10 	.word	0x0800ea10
 8000fb4:	0800ea28 	.word	0x0800ea28

08000fb8 <APP_CpuInit>:
 * CPU initializer
 *
 * Registers the CPU task in the scheduler.
 */
gos_result_t APP_CpuInit (void_t)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t cpuInitResult = GOS_SUCCESS;
 8000fbe:	2355      	movs	r3, #85	; 0x55
 8000fc0:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	cpuInitResult = gos_taskRegister(&cpuTaskDesc, NULL);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <APP_CpuInit+0x20>)
 8000fc6:	f006 fba3 	bl	8007710 <gos_taskRegister>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]

	return cpuInitResult;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000006c 	.word	0x2000006c

08000fdc <APP_CpuTask>:
 * CPU task
 *
 * Every 10 milliseconds, it traces the current CPU load.
 */
GOS_STATIC void_t APP_CpuTask (void_t)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b08b      	sub	sp, #44	; 0x2c
 8000fe0:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u16_t cpuLoad = 0u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	84fb      	strh	r3, [r7, #38]	; 0x26
	u16_t loadArray [CPU_LOAD_SAMPLES];
	u8_t  measIndex = 0u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	/*
	 * Function code.
	 */
	for (;;)
	{
		loadArray[measIndex++ % CPU_LOAD_SAMPLES] = gos_kernelGetCpuUsage();
 8000fec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8000ff6:	f003 040f 	and.w	r4, r3, #15
 8000ffa:	f005 fb77 	bl	80066ec <gos_kernelGetCpuUsage>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	0063      	lsls	r3, r4, #1
 8001004:	3328      	adds	r3, #40	; 0x28
 8001006:	443b      	add	r3, r7
 8001008:	f823 2c24 	strh.w	r2, [r3, #-36]
		cpuLoad = 0u;
 800100c:	2300      	movs	r3, #0
 800100e:	84fb      	strh	r3, [r7, #38]	; 0x26

		for (u8_t idx = 0u; idx < CPU_LOAD_SAMPLES; idx++)
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001016:	e00e      	b.n	8001036 <APP_CpuTask+0x5a>
		{
			cpuLoad += loadArray[idx];
 8001018:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	3328      	adds	r3, #40	; 0x28
 8001020:	443b      	add	r3, r7
 8001022:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001028:	4413      	add	r3, r2
 800102a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (u8_t idx = 0u; idx < CPU_LOAD_SAMPLES; idx++)
 800102c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001036:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800103a:	2b0f      	cmp	r3, #15
 800103c:	d9ec      	bls.n	8001018 <APP_CpuTask+0x3c>
		}

		cpuLoad /= CPU_LOAD_SAMPLES;
 800103e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	84fb      	strh	r3, [r7, #38]	; 0x26

		(void_t) gos_traceTraceFormatted(GOS_TRUE, "CPU load: %3u.%02u%%\r", cpuLoad / 100, cpuLoad % 100);
 8001044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <APP_CpuTask+0x9c>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	b29b      	uxth	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <APP_CpuTask+0x9c>)
 8001056:	fba2 1203 	umull	r1, r2, r2, r3
 800105a:	0952      	lsrs	r2, r2, #5
 800105c:	2164      	movs	r1, #100	; 0x64
 800105e:	fb01 f202 	mul.w	r2, r1, r2
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	b29b      	uxth	r3, r3
 8001066:	4602      	mov	r2, r0
 8001068:	4904      	ldr	r1, [pc, #16]	; (800107c <APP_CpuTask+0xa0>)
 800106a:	2036      	movs	r0, #54	; 0x36
 800106c:	f00a f9d0 	bl	800b410 <gos_traceTraceFormatted>
		(void_t) gos_taskSleep(CPU_TASK_SLEEP_TIME_MS);
 8001070:	2080      	movs	r0, #128	; 0x80
 8001072:	f006 fcdf 	bl	8007a34 <gos_taskSleep>
		loadArray[measIndex++ % CPU_LOAD_SAMPLES] = gos_kernelGetCpuUsage();
 8001076:	e7b9      	b.n	8000fec <APP_CpuTask+0x10>
 8001078:	51eb851f 	.word	0x51eb851f
 800107c:	0800ea44 	.word	0x0800ea44

08001080 <gos_platformDriverInit>:
 *
 * This is to initialize the low-level drivers required by the OS, and it is called
 * during the OS startup.
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8001086:	2355      	movs	r3, #85	; 0x55
 8001088:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Low-level initialization.
    if (HAL_Init() != HAL_OK)
 800108a:	f000 fb11 	bl	80016b0 <HAL_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <gos_platformDriverInit+0x18>
    {
        platformDriverInitResult = GOS_ERROR;
 8001094:	23ae      	movs	r3, #174	; 0xae
 8001096:	71fb      	strb	r3, [r7, #7]
    }

    // Driver initialization.
    platformDriverInitResult = driver_init();
 8001098:	f000 f978 	bl	800138c <driver_init>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]

    // Register kernel drivers.
    platformDriverInitResult &= gos_driverInit(&driverFunctions);
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <gos_platformDriverInit+0x54>)
 80010a2:	f005 f97d 	bl	80063a0 <gos_driverInit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4013      	ands	r3, r2
 80010ae:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b55      	cmp	r3, #85	; 0x55
 80010b4:	d001      	beq.n	80010ba <gos_platformDriverInit+0x3a>
    {
        platformDriverInitResult = GOS_ERROR;
 80010b6:	23ae      	movs	r3, #174	; 0xae
 80010b8:	71fb      	strb	r3, [r7, #7]
    }

    // Systick initialization.
    SysTick->VAL = 0;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <gos_platformDriverInit+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <gos_platformDriverInit+0x58>)
 80010c2:	2207      	movs	r2, #7
 80010c4:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80010c6:	b662      	cpsie	i
}
 80010c8:	bf00      	nop

    __enable_irq();

    return platformDriverInitResult;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200000d8 	.word	0x200000d8
 80010d8:	e000e010 	.word	0xe000e010

080010dc <gos_userApplicationInit>:
 *
 * This is to initialize the user application before the kernel starts the scheduling.
 * This can be used to register user tasks and initialize application modules.
 */
gos_result_t gos_userApplicationInit (void_t)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t appInitResult = GOS_SUCCESS;
 80010e2:	2355      	movs	r3, #85	; 0x55
 80010e4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Register tasks.
    appInitResult &= gos_errorTraceInit("LED task initialization",    APP_LedInit());
 80010e6:	f000 f833 	bl	8001150 <APP_LedInit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4619      	mov	r1, r3
 80010ee:	4815      	ldr	r0, [pc, #84]	; (8001144 <gos_userApplicationInit+0x68>)
 80010f0:	f008 f9e6 	bl	80094c0 <gos_errorTraceInit>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4013      	ands	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
    appInitResult &= gos_errorTraceInit("Button task initialization", APP_ButtonInit());
 80010fe:	f7ff ff01 	bl	8000f04 <APP_ButtonInit>
 8001102:	4603      	mov	r3, r0
 8001104:	4619      	mov	r1, r3
 8001106:	4810      	ldr	r0, [pc, #64]	; (8001148 <gos_userApplicationInit+0x6c>)
 8001108:	f008 f9da 	bl	80094c0 <gos_errorTraceInit>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4013      	ands	r3, r2
 8001114:	71fb      	strb	r3, [r7, #7]
    appInitResult &= gos_errorTraceInit("CPU task initialization",    APP_CpuInit());
 8001116:	f7ff ff4f 	bl	8000fb8 <APP_CpuInit>
 800111a:	4603      	mov	r3, r0
 800111c:	4619      	mov	r1, r3
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <gos_userApplicationInit+0x70>)
 8001120:	f008 f9ce 	bl	80094c0 <gos_errorTraceInit>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4013      	ands	r3, r2
 800112c:	71fb      	strb	r3, [r7, #7]

    if (appInitResult != GOS_SUCCESS)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b55      	cmp	r3, #85	; 0x55
 8001132:	d001      	beq.n	8001138 <gos_userApplicationInit+0x5c>
    {
        appInitResult = GOS_ERROR;
 8001134:	23ae      	movs	r3, #174	; 0xae
 8001136:	71fb      	strb	r3, [r7, #7]
    else
    {
    	// Error.
    }

    return appInitResult;
 8001138:	79fb      	ldrb	r3, [r7, #7]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0800ea5c 	.word	0x0800ea5c
 8001148:	0800ea74 	.word	0x0800ea74
 800114c:	0800ea90 	.word	0x0800ea90

08001150 <APP_LedInit>:
 * LED initializer
 *
 * Registers the LED task in the scheduler.
 */
gos_result_t APP_LedInit (void_t)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t ledInitResult = GOS_SUCCESS;
 8001156:	2355      	movs	r3, #85	; 0x55
 8001158:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	ledInitResult = gos_taskRegister(&ledTaskDesc, NULL);
 800115a:	2100      	movs	r1, #0
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <APP_LedInit+0x20>)
 800115e:	f006 fad7 	bl	8007710 <gos_taskRegister>
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]

	return ledInitResult;
 8001166:	79fb      	ldrb	r3, [r7, #7]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200000f4 	.word	0x200000f4

08001174 <APP_LedTask>:
 * LED task
 *
 * Every 1 second, it toggles the user LED.
 */
GOS_STATIC void_t APP_LedTask (void_t)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	for (;;)
	{
		(void_t) drv_gpioTgglePin(IO_USER_LED);
 8001178:	2000      	movs	r0, #0
 800117a:	f004 fa0d 	bl	8005598 <drv_gpioTgglePin>
		(void_t) gos_taskSleep(LED_TASK_SLEEP_TIME_MS);
 800117e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001182:	f006 fc57 	bl	8007a34 <gos_taskSleep>
		(void_t) drv_gpioTgglePin(IO_USER_LED);
 8001186:	e7f7      	b.n	8001178 <APP_LedTask+0x4>

08001188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
	return 1;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_kill>:

int _kill(int pid, int sig)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011a2:	f00b fb79 	bl	800c898 <__errno>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2216      	movs	r2, #22
 80011aa:	601a      	str	r2, [r3, #0]
	return -1;
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_exit>:

void _exit (int status)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ffe7 	bl	8001198 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011ca:	e7fe      	b.n	80011ca <_exit+0x12>

080011cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e00a      	b.n	80011f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011de:	f3af 8000 	nop.w
 80011e2:	4601      	mov	r1, r0
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	60ba      	str	r2, [r7, #8]
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf0      	blt.n	80011de <_read+0x12>
	}

return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e009      	b.n	800122c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf1      	blt.n	8001218 <_write+0x12>
	}
	return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_close>:

int _close(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	return -1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001266:	605a      	str	r2, [r3, #4]
	return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <_isatty>:

int _isatty(int file)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
	return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <_sbrk+0x5c>)
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <_sbrk+0x60>)
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <_sbrk+0x64>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <_sbrk+0x68>)
 80012c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d207      	bcs.n	80012e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d8:	f00b fade 	bl	800c898 <__errno>
 80012dc:	4603      	mov	r3, r0
 80012de:	220c      	movs	r2, #12
 80012e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	e009      	b.n	80012fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <_sbrk+0x64>)
 80012f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20020000 	.word	0x20020000
 8001308:	00000400 	.word	0x00000400
 800130c:	20000fdc 	.word	0x20000fdc
 8001310:	20009c18 	.word	0x20009c18

08001314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <SystemInit+0x20>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <SystemInit+0x20>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  //SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
 //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001370 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800133c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800133e:	e003      	b.n	8001348 <LoopCopyDataInit>

08001340 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001342:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001344:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001346:	3104      	adds	r1, #4

08001348 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800134c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800134e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001350:	d3f6      	bcc.n	8001340 <CopyDataInit>
  ldr  r2, =_sbss
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001354:	e002      	b.n	800135c <LoopFillZerobss>

08001356 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001356:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001358:	f842 3b04 	str.w	r3, [r2], #4

0800135c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800135e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001360:	d3f9      	bcc.n	8001356 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001362:	f7ff ffd7 	bl	8001314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001366:	f00b fa9d 	bl	800c8a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136a:	f007 fec7 	bl	80090fc <main>
  bx  lr    
 800136e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001370:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001374:	0800fff4 	.word	0x0800fff4
  ldr  r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800137c:	20000fb0 	.word	0x20000fb0
  ldr  r2, =_sbss
 8001380:	20000fb0 	.word	0x20000fb0
  ldr  r3, = _ebss
 8001384:	20009c14 	.word	0x20009c14

08001388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC_IRQHandler>
	...

0800138c <driver_init>:

/*
 * Function: driver_init
 */
gos_result_t driver_init (void_t)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_SUCCESS;
 8001392:	2355      	movs	r3, #85	; 0x55
 8001394:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    driverInitResult &= rcc_driverInit();
 8001396:	f000 f843 	bl	8001420 <rcc_driverInit>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4013      	ands	r3, r2
 80013a2:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= timer_driverSystimerInit();
 80013a4:	f000 f92a 	bl	80015fc <timer_driverSystimerInit>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4013      	ands	r3, r2
 80013b0:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= drv_gpioInit();
 80013b2:	f004 f85f 	bl	8005474 <drv_gpioInit>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4013      	ands	r3, r2
 80013be:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= drv_dmaInit();
 80013c0:	f003 fbe8 	bl	8004b94 <drv_dmaInit>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4013      	ands	r3, r2
 80013cc:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= drv_uartInit();
 80013ce:	f004 fad9 	bl	8005984 <drv_uartInit>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4013      	ands	r3, r2
 80013da:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= drv_itInit();
 80013dc:	f004 f9f4 	bl	80057c8 <drv_itInit>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4013      	ands	r3, r2
 80013e8:	71fb      	strb	r3, [r7, #7]
    driverInitResult &= gos_kernelRegisterSysTickHook(sysTickHook);
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <driver_init+0x84>)
 80013ec:	f005 f91e 	bl	800662c <gos_kernelRegisterSysTickHook>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4013      	ands	r3, r2
 80013f8:	71fb      	strb	r3, [r7, #7]

    if (driverInitResult != GOS_SUCCESS)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b55      	cmp	r3, #85	; 0x55
 80013fe:	d001      	beq.n	8001404 <driver_init+0x78>
    {
        driverInitResult = GOS_ERROR;
 8001400:	23ae      	movs	r3, #174	; 0xae
 8001402:	71fb      	strb	r3, [r7, #7]
    else
    {
    	// Error.
    }

    return driverInitResult;
 8001404:	79fb      	ldrb	r3, [r7, #7]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	08001415 	.word	0x08001415

08001414 <sysTickHook>:
 * @details Increments the HAL tick.
 *
 * @return  -
 */
GOS_STATIC void_t sysTickHook (void_t)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	HAL_IncTick();
 8001418:	f000 f9a4 	bl	8001764 <HAL_IncTick>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <rcc_driverInit>:

/*
 * Function: rcc_driverInit
 */
gos_result_t rcc_driverInit (void_t)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b09e      	sub	sp, #120	; 0x78
 8001424:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t       initResult        = GOS_ERROR;
 8001426:	23ae      	movs	r3, #174	; 0xae
 8001428:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001430:	2234      	movs	r2, #52	; 0x34
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f00b f9dd 	bl	800c7f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
 800144e:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a68      	ldr	r2, [pc, #416]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <rcc_driverInit+0x1d4>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <rcc_driverInit+0x1d8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001472:	4a61      	ldr	r2, [pc, #388]	; (80015f8 <rcc_driverInit+0x1d8>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b5f      	ldr	r3, [pc, #380]	; (80015f8 <rcc_driverInit+0x1d8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001486:	2301      	movs	r3, #1
 8001488:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 800148a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8001490:	2302      	movs	r3, #2
 8001492:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8001494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001498:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLM       = 4;
 800149a:	2304      	movs	r3, #4
 800149c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLN       = 50;
 800149e:	2332      	movs	r3, #50	; 0x32
 80014a0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ       = 2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLR       = 2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	673b      	str	r3, [r7, #112]	; 0x70

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 80014ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fba8 	bl	8002c08 <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <rcc_driverInit+0xcc>
	{
		RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80014c2:	2302      	movs	r3, #2
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
		RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) == HAL_OK)
 80014d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d8:	2101      	movs	r1, #1
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 f84a 	bl	8002574 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <rcc_driverInit+0xcc>
		{
			initResult = GOS_SUCCESS;
 80014e6:	2355      	movs	r3, #85	; 0x55
 80014e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	{
		// Error.
	}

	// Enable peripheral clocks.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <rcc_driverInit+0x1d4>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a3f      	ldr	r2, [pc, #252]	; (80015f4 <rcc_driverInit+0x1d4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <rcc_driverInit+0x1d4>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	623b      	str	r3, [r7, #32]
 8001506:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <rcc_driverInit+0x1d4>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a38      	ldr	r2, [pc, #224]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <rcc_driverInit+0x1d4>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <rcc_driverInit+0x1d4>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <rcc_driverInit+0x1d4>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a2a      	ldr	r2, [pc, #168]	; (80015f4 <rcc_driverInit+0x1d4>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <rcc_driverInit+0x1d4>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <rcc_driverInit+0x1d4>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <rcc_driverInit+0x1d4>)
 8001582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <rcc_driverInit+0x1d4>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM12_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <rcc_driverInit+0x1d4>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <rcc_driverInit+0x1d4>)
 800159e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <rcc_driverInit+0x1d4>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART1_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <rcc_driverInit+0x1d4>)
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <rcc_driverInit+0x1d4>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	6453      	str	r3, [r2, #68]	; 0x44
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <rcc_driverInit+0x1d4>)
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART2_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <rcc_driverInit+0x1d4>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <rcc_driverInit+0x1d4>)
 80015d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <rcc_driverInit+0x1d4>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]

    return initResult;
 80015e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3778      	adds	r7, #120	; 0x78
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <timer_driverSystimerInit>:

/*
 * Function: timer_driverSystimerInit
 */
gos_result_t timer_driverSystimerInit (void_t)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t systimerInitResult = GOS_ERROR;
 8001602:	23ae      	movs	r3, #174	; 0xae
 8001604:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <timer_driverSystimerInit+0x74>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <timer_driverSystimerInit+0x74>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <timer_driverSystimerInit+0x74>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

    htim12.Instance               = TIM12;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <timer_driverSystimerInit+0x78>)
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <timer_driverSystimerInit+0x7c>)
 8001626:	601a      	str	r2, [r3, #0]
    htim12.Init.Prescaler         = 84-1;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <timer_driverSystimerInit+0x78>)
 800162a:	2253      	movs	r2, #83	; 0x53
 800162c:	605a      	str	r2, [r3, #4]
    htim12.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <timer_driverSystimerInit+0x78>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    htim12.Init.Period            = 0xffffffff-1;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <timer_driverSystimerInit+0x78>)
 8001636:	f06f 0201 	mvn.w	r2, #1
 800163a:	60da      	str	r2, [r3, #12]
    htim12.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <timer_driverSystimerInit+0x78>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
    htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <timer_driverSystimerInit+0x78>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim12)  == HAL_OK &&
 8001648:	480a      	ldr	r0, [pc, #40]	; (8001674 <timer_driverSystimerInit+0x78>)
 800164a:	f001 fd37 	bl	80030bc <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <timer_driverSystimerInit+0x68>
        HAL_TIM_Base_Start(&htim12) == HAL_OK)
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <timer_driverSystimerInit+0x78>)
 8001656:	f001 fd66 	bl	8003126 <HAL_TIM_Base_Start>
 800165a:	4603      	mov	r3, r0
    if (HAL_TIM_Base_Init(&htim12)  == HAL_OK &&
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <timer_driverSystimerInit+0x68>
    {
        systimerInitResult = GOS_SUCCESS;
 8001660:	2355      	movs	r3, #85	; 0x55
 8001662:	71fb      	strb	r3, [r7, #7]
    }

    return systimerInitResult;
 8001664:	79fb      	ldrb	r3, [r7, #7]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	20000fe0 	.word	0x20000fe0
 8001678:	40001800 	.word	0x40001800

0800167c <timer_driverSystimerGet>:

/*
 * Function: timer_driverSystimerGet
 */
gos_result_t timer_driverSystimerGet (u16_t* pValue)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverGetResult = GOS_ERROR;
 8001684:	23ae      	movs	r3, #174	; 0xae
 8001686:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <timer_driverSystimerGet+0x22>
    {
        *pValue              = __HAL_TIM_GET_COUNTER(&htim12);
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <timer_driverSystimerGet+0x30>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	b29a      	uxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	801a      	strh	r2, [r3, #0]
        timerDriverGetResult = GOS_SUCCESS;
 800169a:	2355      	movs	r3, #85	; 0x55
 800169c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Target is NULL pointer.
    }

    return timerDriverGetResult;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20000fe0 	.word	0x20000fe0

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f933 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f810 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f000 f806 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f943 	bl	80019ae <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f90b 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000160 	.word	0x20000160
 800175c:	200002f8 	.word	0x200002f8
 8001760:	200002f4 	.word	0x200002f4

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	200002f8 	.word	0x200002f8
 8001788:	20001020 	.word	0x20001020

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20001020 	.word	0x20001020

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff feda 	bl	800178c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e099      	b.n	8001b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	e00f      	b.n	8001a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a06:	f7ff fec1 	bl	800178c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d908      	bls.n	8001a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e078      	b.n	8001b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e8      	bne.n	8001a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_DMA_Init+0x158>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d107      	bne.n	8001a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f023 0307 	bic.w	r3, r3, #7
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d117      	bne.n	8001aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fb0d 	bl	80020ec <DMA_CheckFifoParam>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e016      	b.n	8001b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fac4 	bl	8002080 <DMA_CalcBaseAndBitshift>
 8001af8:	4603      	mov	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	223f      	movs	r2, #63	; 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	f010803f 	.word	0xf010803f

08001b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_DMA_Start_IT+0x26>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e040      	b.n	8001bcc <HAL_DMA_Start_IT+0xa8>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d12f      	bne.n	8001bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fa56 	bl	8002024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	223f      	movs	r2, #63	; 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0216 	orr.w	r2, r2, #22
 8001b92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0208 	orr.w	r2, r2, #8
 8001baa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e005      	b.n	8001bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001be2:	f7ff fdd3 	bl	800178c <HAL_GetTick>
 8001be6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d008      	beq.n	8001c06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e052      	b.n	8001cac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0216 	bic.w	r2, r2, #22
 8001c14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d103      	bne.n	8001c36 <HAL_DMA_Abort+0x62>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0208 	bic.w	r2, r2, #8
 8001c44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c56:	e013      	b.n	8001c80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c58:	f7ff fd98 	bl	800178c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d90c      	bls.n	8001c80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e015      	b.n	8001cac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e4      	bne.n	8001c58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c92:	223f      	movs	r2, #63	; 0x3f
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d004      	beq.n	8001cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00c      	b.n	8001cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d04:	4b8e      	ldr	r3, [pc, #568]	; (8001f40 <HAL_DMA_IRQHandler+0x248>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a8e      	ldr	r2, [pc, #568]	; (8001f44 <HAL_DMA_IRQHandler+0x24c>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0a9b      	lsrs	r3, r3, #10
 8001d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	2208      	movs	r2, #8
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01a      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0204 	bic.w	r2, r2, #4
 8001d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	2208      	movs	r2, #8
 8001d52:	409a      	lsls	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	2201      	movs	r2, #1
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d012      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	2201      	movs	r2, #1
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	2204      	movs	r2, #4
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d012      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00b      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	f043 0204 	orr.w	r2, r3, #4
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d043      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03c      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2210      	movs	r2, #16
 8001df4:	409a      	lsls	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d018      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d108      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d024      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
 8001e26:	e01f      	b.n	8001e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
 8001e38:	e016      	b.n	8001e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d107      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0208 	bic.w	r2, r2, #8
 8001e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 808f 	beq.w	8001f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8087 	beq.w	8001f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	2220      	movs	r2, #32
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d136      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0216 	bic.w	r2, r2, #22
 8001eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_DMA_IRQHandler+0x1da>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0208 	bic.w	r2, r2, #8
 8001ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	223f      	movs	r2, #63	; 0x3f
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d07e      	beq.n	8002004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
        }
        return;
 8001f0e:	e079      	b.n	8002004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01d      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10d      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d031      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
 8001f3c:	e02c      	b.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
 8001f3e:	bf00      	nop
 8001f40:	20000160 	.word	0x20000160
 8001f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d023      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
 8001f58:	e01e      	b.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10f      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0210 	bic.w	r2, r2, #16
 8001f76:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d032      	beq.n	8002006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d022      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2205      	movs	r2, #5
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d307      	bcc.n	8001fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f2      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x2cc>
 8001fde:	e000      	b.n	8001fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fe0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
 8002002:	e000      	b.n	8002006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002004:	bf00      	nop
    }
  }
}
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d108      	bne.n	8002064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002062:	e007      	b.n	8002074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	3b10      	subs	r3, #16
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800209a:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <DMA_CalcBaseAndBitshift+0x68>)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d909      	bls.n	80020c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	1d1a      	adds	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	659a      	str	r2, [r3, #88]	; 0x58
 80020c0:	e007      	b.n	80020d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	aaaaaaab 	.word	0xaaaaaaab
 80020e8:	0800fba4 	.word	0x0800fba4

080020ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d11f      	bne.n	8002146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d856      	bhi.n	80021ba <DMA_CheckFifoParam+0xce>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <DMA_CheckFifoParam+0x28>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002125 	.word	0x08002125
 8002118:	08002137 	.word	0x08002137
 800211c:	08002125 	.word	0x08002125
 8002120:	080021bb 	.word	0x080021bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d046      	beq.n	80021be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002134:	e043      	b.n	80021be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800213e:	d140      	bne.n	80021c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002144:	e03d      	b.n	80021c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800214e:	d121      	bne.n	8002194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d837      	bhi.n	80021c6 <DMA_CheckFifoParam+0xda>
 8002156:	a201      	add	r2, pc, #4	; (adr r2, 800215c <DMA_CheckFifoParam+0x70>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	0800216d 	.word	0x0800216d
 8002160:	08002173 	.word	0x08002173
 8002164:	0800216d 	.word	0x0800216d
 8002168:	08002185 	.word	0x08002185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      break;
 8002170:	e030      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d025      	beq.n	80021ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002182:	e022      	b.n	80021ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800218c:	d11f      	bne.n	80021ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002192:	e01c      	b.n	80021ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d903      	bls.n	80021a2 <DMA_CheckFifoParam+0xb6>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d003      	beq.n	80021a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021a0:	e018      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      break;
 80021a6:	e015      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00e      	beq.n	80021d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e00b      	b.n	80021d2 <DMA_CheckFifoParam+0xe6>
      break;
 80021ba:	bf00      	nop
 80021bc:	e00a      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021be:	bf00      	nop
 80021c0:	e008      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
 80021c4:	e006      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e004      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e002      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ce:	bf00      	nop
 80021d0:	e000      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
    }
  } 
  
  return status; 
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e165      	b.n	80024cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	f040 8154 	bne.w	80024c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d00b      	beq.n	800223e <HAL_GPIO_Init+0x5a>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002232:	2b11      	cmp	r3, #17
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b12      	cmp	r3, #18
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0xfc>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b12      	cmp	r3, #18
 80022de:	d123      	bne.n	8002328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	69b9      	ldr	r1, [r7, #24]
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80ae 	beq.w	80024c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b5d      	ldr	r3, [pc, #372]	; (80024e4 <HAL_GPIO_Init+0x300>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a5c      	ldr	r2, [pc, #368]	; (80024e4 <HAL_GPIO_Init+0x300>)
 8002374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
 800237a:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <HAL_GPIO_Init+0x300>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002386:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <HAL_GPIO_Init+0x304>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4f      	ldr	r2, [pc, #316]	; (80024ec <HAL_GPIO_Init+0x308>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d025      	beq.n	80023fe <HAL_GPIO_Init+0x21a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4e      	ldr	r2, [pc, #312]	; (80024f0 <HAL_GPIO_Init+0x30c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01f      	beq.n	80023fa <HAL_GPIO_Init+0x216>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4d      	ldr	r2, [pc, #308]	; (80024f4 <HAL_GPIO_Init+0x310>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x212>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_GPIO_Init+0x314>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x20e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4b      	ldr	r2, [pc, #300]	; (80024fc <HAL_GPIO_Init+0x318>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x20a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_GPIO_Init+0x31c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x206>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a49      	ldr	r2, [pc, #292]	; (8002504 <HAL_GPIO_Init+0x320>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x202>
 80023e2:	2306      	movs	r3, #6
 80023e4:	e00c      	b.n	8002400 <HAL_GPIO_Init+0x21c>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00a      	b.n	8002400 <HAL_GPIO_Init+0x21c>
 80023ea:	2305      	movs	r3, #5
 80023ec:	e008      	b.n	8002400 <HAL_GPIO_Init+0x21c>
 80023ee:	2304      	movs	r3, #4
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x21c>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e004      	b.n	8002400 <HAL_GPIO_Init+0x21c>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_Init+0x21c>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x21c>
 80023fe:	2300      	movs	r3, #0
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	f002 0203 	and.w	r2, r2, #3
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	4093      	lsls	r3, r2
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002410:	4935      	ldr	r1, [pc, #212]	; (80024e8 <HAL_GPIO_Init+0x304>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_GPIO_Init+0x324>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002442:	4a31      	ldr	r2, [pc, #196]	; (8002508 <HAL_GPIO_Init+0x324>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_GPIO_Init+0x324>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246c:	4a26      	ldr	r2, [pc, #152]	; (8002508 <HAL_GPIO_Init+0x324>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002472:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_GPIO_Init+0x324>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002496:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <HAL_GPIO_Init+0x324>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_GPIO_Init+0x324>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c0:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_GPIO_Init+0x324>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3301      	adds	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	f67f ae96 	bls.w	8002200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40013800 	.word	0x40013800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020c00 	.word	0x40020c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40021400 	.word	0x40021400
 8002504:	40021800 	.word	0x40021800
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	401a      	ands	r2, r3
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	429a      	cmp	r2, r3
 8002524:	d104      	bne.n	8002530 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800252e:	e002      	b.n	8002536 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002530:	887a      	ldrh	r2, [r7, #2]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 f8d4 	bl	8005710 <HAL_GPIO_EXTI_Callback>
  }
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0cc      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d90c      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d044      	beq.n	8002694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d119      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d003      	beq.n	8002632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	2b03      	cmp	r3, #3
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e067      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4934      	ldr	r1, [pc, #208]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002664:	f7ff f892 	bl	800178c <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7ff f88e 	bl	800178c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e04f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d20c      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f855 	bl	80027a8 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fff2 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00
 8002730:	40023800 	.word	0x40023800
 8002734:	0800fa64 	.word	0x0800fa64
 8002738:	20000160 	.word	0x20000160
 800273c:	200002f4 	.word	0x200002f4

08002740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCC_GetHCLKFreq+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000160 	.word	0x20000160

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800275c:	f7ff fff0 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0a9b      	lsrs	r3, r3, #10
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	0800fa74 	.word	0x0800fa74

08002780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002784:	f7ff ffdc 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0b5b      	lsrs	r3, r3, #13
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	0800fa74 	.word	0x0800fa74

080027a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ac:	b0ae      	sub	sp, #184	; 0xb8
 80027ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ce:	4bcb      	ldr	r3, [pc, #812]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	f200 8206 	bhi.w	8002be8 <HAL_RCC_GetSysClockFreq+0x440>
 80027dc:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	08002819 	.word	0x08002819
 80027e8:	08002be9 	.word	0x08002be9
 80027ec:	08002be9 	.word	0x08002be9
 80027f0:	08002be9 	.word	0x08002be9
 80027f4:	08002821 	.word	0x08002821
 80027f8:	08002be9 	.word	0x08002be9
 80027fc:	08002be9 	.word	0x08002be9
 8002800:	08002be9 	.word	0x08002be9
 8002804:	08002829 	.word	0x08002829
 8002808:	08002be9 	.word	0x08002be9
 800280c:	08002be9 	.word	0x08002be9
 8002810:	08002be9 	.word	0x08002be9
 8002814:	08002a19 	.word	0x08002a19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4bb9      	ldr	r3, [pc, #740]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x358>)
 800281a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800281e:	e1e7      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4bb8      	ldr	r3, [pc, #736]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002826:	e1e3      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002828:	4bb4      	ldr	r3, [pc, #720]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002834:	4bb1      	ldr	r3, [pc, #708]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d071      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002840:	4bae      	ldr	r3, [pc, #696]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800284c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002866:	4622      	mov	r2, r4
 8002868:	462b      	mov	r3, r5
 800286a:	f04f 0000 	mov.w	r0, #0
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	0159      	lsls	r1, r3, #5
 8002874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002878:	0150      	lsls	r0, r2, #5
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4621      	mov	r1, r4
 8002880:	1a51      	subs	r1, r2, r1
 8002882:	6439      	str	r1, [r7, #64]	; 0x40
 8002884:	4629      	mov	r1, r5
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	647b      	str	r3, [r7, #68]	; 0x44
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002898:	4649      	mov	r1, r9
 800289a:	018b      	lsls	r3, r1, #6
 800289c:	4641      	mov	r1, r8
 800289e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a2:	4641      	mov	r1, r8
 80028a4:	018a      	lsls	r2, r1, #6
 80028a6:	4641      	mov	r1, r8
 80028a8:	1a51      	subs	r1, r2, r1
 80028aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80028ac:	4649      	mov	r1, r9
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80028c0:	4649      	mov	r1, r9
 80028c2:	00cb      	lsls	r3, r1, #3
 80028c4:	4641      	mov	r1, r8
 80028c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ca:	4641      	mov	r1, r8
 80028cc:	00ca      	lsls	r2, r1, #3
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	4622      	mov	r2, r4
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
 80028da:	462b      	mov	r3, r5
 80028dc:	460a      	mov	r2, r1
 80028de:	eb42 0303 	adc.w	r3, r2, r3
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028f0:	4629      	mov	r1, r5
 80028f2:	024b      	lsls	r3, r1, #9
 80028f4:	4621      	mov	r1, r4
 80028f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028fa:	4621      	mov	r1, r4
 80028fc:	024a      	lsls	r2, r1, #9
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800290c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002910:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002914:	f7fe f978 	bl	8000c08 <__aeabi_uldivmod>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4613      	mov	r3, r2
 800291e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002922:	e067      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002924:	4b75      	ldr	r3, [pc, #468]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	2200      	movs	r2, #0
 800292c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002930:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800293c:	67bb      	str	r3, [r7, #120]	; 0x78
 800293e:	2300      	movs	r3, #0
 8002940:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002942:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002946:	4622      	mov	r2, r4
 8002948:	462b      	mov	r3, r5
 800294a:	f04f 0000 	mov.w	r0, #0
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	0159      	lsls	r1, r3, #5
 8002954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002958:	0150      	lsls	r0, r2, #5
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4621      	mov	r1, r4
 8002960:	1a51      	subs	r1, r2, r1
 8002962:	62b9      	str	r1, [r7, #40]	; 0x28
 8002964:	4629      	mov	r1, r5
 8002966:	eb63 0301 	sbc.w	r3, r3, r1
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002978:	4649      	mov	r1, r9
 800297a:	018b      	lsls	r3, r1, #6
 800297c:	4641      	mov	r1, r8
 800297e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002982:	4641      	mov	r1, r8
 8002984:	018a      	lsls	r2, r1, #6
 8002986:	4641      	mov	r1, r8
 8002988:	ebb2 0a01 	subs.w	sl, r2, r1
 800298c:	4649      	mov	r1, r9
 800298e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800299e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a6:	4692      	mov	sl, r2
 80029a8:	469b      	mov	fp, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	eb1a 0303 	adds.w	r3, sl, r3
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	462b      	mov	r3, r5
 80029b4:	eb4b 0303 	adc.w	r3, fp, r3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029c6:	4629      	mov	r1, r5
 80029c8:	028b      	lsls	r3, r1, #10
 80029ca:	4621      	mov	r1, r4
 80029cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d0:	4621      	mov	r1, r4
 80029d2:	028a      	lsls	r2, r1, #10
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029dc:	2200      	movs	r2, #0
 80029de:	673b      	str	r3, [r7, #112]	; 0x70
 80029e0:	677a      	str	r2, [r7, #116]	; 0x74
 80029e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029e6:	f7fe f90f 	bl	8000c08 <__aeabi_uldivmod>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4613      	mov	r3, r2
 80029f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a16:	e0eb      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a18:	4b38      	ldr	r3, [pc, #224]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a24:	4b35      	ldr	r3, [pc, #212]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d06b      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	2200      	movs	r2, #0
 8002a38:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a42:	663b      	str	r3, [r7, #96]	; 0x60
 8002a44:	2300      	movs	r3, #0
 8002a46:	667b      	str	r3, [r7, #100]	; 0x64
 8002a48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a4c:	4622      	mov	r2, r4
 8002a4e:	462b      	mov	r3, r5
 8002a50:	f04f 0000 	mov.w	r0, #0
 8002a54:	f04f 0100 	mov.w	r1, #0
 8002a58:	0159      	lsls	r1, r3, #5
 8002a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a5e:	0150      	lsls	r0, r2, #5
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4621      	mov	r1, r4
 8002a66:	1a51      	subs	r1, r2, r1
 8002a68:	61b9      	str	r1, [r7, #24]
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a7e:	4659      	mov	r1, fp
 8002a80:	018b      	lsls	r3, r1, #6
 8002a82:	4651      	mov	r1, sl
 8002a84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a88:	4651      	mov	r1, sl
 8002a8a:	018a      	lsls	r2, r1, #6
 8002a8c:	4651      	mov	r1, sl
 8002a8e:	ebb2 0801 	subs.w	r8, r2, r1
 8002a92:	4659      	mov	r1, fp
 8002a94:	eb63 0901 	sbc.w	r9, r3, r1
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aac:	4690      	mov	r8, r2
 8002aae:	4699      	mov	r9, r3
 8002ab0:	4623      	mov	r3, r4
 8002ab2:	eb18 0303 	adds.w	r3, r8, r3
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	462b      	mov	r3, r5
 8002aba:	eb49 0303 	adc.w	r3, r9, r3
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002acc:	4629      	mov	r1, r5
 8002ace:	024b      	lsls	r3, r1, #9
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	024a      	lsls	r2, r1, #9
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ae6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ae8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002aec:	f7fe f88c 	bl	8000c08 <__aeabi_uldivmod>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4613      	mov	r3, r2
 8002af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002afa:	e065      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x420>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b08:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	4611      	mov	r1, r2
 8002b14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b18:	653b      	str	r3, [r7, #80]	; 0x50
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8002b1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b22:	4642      	mov	r2, r8
 8002b24:	464b      	mov	r3, r9
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0159      	lsls	r1, r3, #5
 8002b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b34:	0150      	lsls	r0, r2, #5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	1a51      	subs	r1, r2, r1
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	4649      	mov	r1, r9
 8002b42:	eb63 0301 	sbc.w	r3, r3, r1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b54:	4659      	mov	r1, fp
 8002b56:	018b      	lsls	r3, r1, #6
 8002b58:	4651      	mov	r1, sl
 8002b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5e:	4651      	mov	r1, sl
 8002b60:	018a      	lsls	r2, r1, #6
 8002b62:	4651      	mov	r1, sl
 8002b64:	1a54      	subs	r4, r2, r1
 8002b66:	4659      	mov	r1, fp
 8002b68:	eb63 0501 	sbc.w	r5, r3, r1
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	464b      	mov	r3, r9
 8002b88:	eb45 0303 	adc.w	r3, r5, r3
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	028b      	lsls	r3, r1, #10
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	028a      	lsls	r2, r1, #10
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bba:	f7fe f825 	bl	8000c08 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0f1b      	lsrs	r3, r3, #28
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002be6:	e003      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	37b8      	adds	r7, #184	; 0xb8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	00f42400 	.word	0x00f42400

08002c08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8083 	beq.w	8002d28 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c22:	4b95      	ldr	r3, [pc, #596]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d019      	beq.n	8002c62 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c2e:	4b92      	ldr	r3, [pc, #584]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c3a:	4b8f      	ldr	r3, [pc, #572]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c46:	d00c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c48:	4b8b      	ldr	r3, [pc, #556]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d112      	bne.n	8002c7a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c54:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c60:	d10b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	4b85      	ldr	r3, [pc, #532]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d05b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x11e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d157      	bne.n	8002d26 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e216      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x8a>
 8002c84:	4b7c      	ldr	r3, [pc, #496]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a7b      	ldr	r2, [pc, #492]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e01d      	b.n	8002cce <HAL_RCC_OscConfig+0xc6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0xae>
 8002c9c:	4b76      	ldr	r3, [pc, #472]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a75      	ldr	r2, [pc, #468]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b73      	ldr	r3, [pc, #460]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a72      	ldr	r2, [pc, #456]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0xc6>
 8002cb6:	4b70      	ldr	r3, [pc, #448]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6f      	ldr	r2, [pc, #444]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b6d      	ldr	r3, [pc, #436]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6c      	ldr	r2, [pc, #432]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d013      	beq.n	8002cfe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fd59 	bl	800178c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cde:	f7fe fd55 	bl	800178c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	; 0x64
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1db      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf0:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0xd6>
 8002cfc:	e014      	b.n	8002d28 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fd45 	bl	800178c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d06:	f7fe fd41 	bl	800178c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b64      	cmp	r3, #100	; 0x64
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1c7      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d18:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0xfe>
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d06f      	beq.n	8002e14 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d34:	4b50      	ldr	r3, [pc, #320]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d40:	4b4d      	ldr	r3, [pc, #308]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d4c:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d58:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d11c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d64:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d116      	bne.n	8002d9e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d70:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_OscConfig+0x180>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e18f      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4938      	ldr	r1, [pc, #224]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9c:	e03a      	b.n	8002e14 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d020      	beq.n	8002de8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da6:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <HAL_RCC_OscConfig+0x274>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fcee 	bl	800178c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db4:	f7fe fcea 	bl	800178c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e170      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4925      	ldr	r1, [pc, #148]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
 8002de6:	e015      	b.n	8002e14 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCC_OscConfig+0x274>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe fccd 	bl	800178c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fe fcc9 	bl	800178c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e14f      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d037      	beq.n	8002e90 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d016      	beq.n	8002e56 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_RCC_OscConfig+0x278>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fcad 	bl	800178c <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fe fca9 	bl	800178c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e12f      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x22e>
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_OscConfig+0x278>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe fc96 	bl	800178c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e62:	e00f      	b.n	8002e84 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe fc92 	bl	800178c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d908      	bls.n	8002e84 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e118      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	42470000 	.word	0x42470000
 8002e80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	4b8a      	ldr	r3, [pc, #552]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e9      	bne.n	8002e64 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8097 	beq.w	8002fcc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4b83      	ldr	r3, [pc, #524]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b7f      	ldr	r3, [pc, #508]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a7e      	ldr	r2, [pc, #504]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ebe:	4b7c      	ldr	r3, [pc, #496]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4b79      	ldr	r3, [pc, #484]	; (80030b4 <HAL_RCC_OscConfig+0x4ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d118      	bne.n	8002f0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a75      	ldr	r2, [pc, #468]	; (80030b4 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fc51 	bl	800178c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7fe fc4d 	bl	800178c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0d3      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x31a>
 8002f14:	4b66      	ldr	r3, [pc, #408]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f20:	e01c      	b.n	8002f5c <HAL_RCC_OscConfig+0x354>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x33c>
 8002f2a:	4b61      	ldr	r3, [pc, #388]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a60      	ldr	r2, [pc, #384]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a5d      	ldr	r2, [pc, #372]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0x354>
 8002f44:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a59      	ldr	r2, [pc, #356]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	4b57      	ldr	r3, [pc, #348]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a56      	ldr	r2, [pc, #344]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d015      	beq.n	8002f90 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fc12 	bl	800178c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fc0e 	bl	800178c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e092      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f82:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ee      	beq.n	8002f6c <HAL_RCC_OscConfig+0x364>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fbfc 	bl	800178c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fbf8 	bl	800178c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e07c      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fae:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ee      	bne.n	8002f98 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	4a3a      	ldr	r2, [pc, #232]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d068      	beq.n	80030a6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd4:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d060      	beq.n	80030a2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d145      	bne.n	8003074 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCC_OscConfig+0x4b0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe fbcd 	bl	800178c <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe fbc9 	bl	800178c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e04f      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003008:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	019b      	lsls	r3, r3, #6
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	061b      	lsls	r3, r3, #24
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	071b      	lsls	r3, r3, #28
 8003040:	491b      	ldr	r1, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_RCC_OscConfig+0x4b0>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fb9e 	bl	800178c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe fb9a 	bl	800178c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e020      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x44c>
 8003072:	e018      	b.n	80030a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_RCC_OscConfig+0x4b0>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe fb87 	bl	800178c <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe fb83 	bl	800178c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e009      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_OscConfig+0x4a8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x47a>
 80030a0:	e001      	b.n	80030a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000
 80030b8:	42470060 	.word	0x42470060

080030bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e01d      	b.n	800310a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f815 	bl	8003112 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f000 f838 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b06      	cmp	r3, #6
 8003146:	d007      	beq.n	8003158 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a40      	ldr	r2, [pc, #256]	; (8003284 <TIM_Base_SetConfig+0x114>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d013      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d00f      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3d      	ldr	r2, [pc, #244]	; (8003288 <TIM_Base_SetConfig+0x118>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00b      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3c      	ldr	r2, [pc, #240]	; (800328c <TIM_Base_SetConfig+0x11c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3b      	ldr	r2, [pc, #236]	; (8003290 <TIM_Base_SetConfig+0x120>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <TIM_Base_SetConfig+0x124>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d108      	bne.n	80031c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <TIM_Base_SetConfig+0x114>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d027      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <TIM_Base_SetConfig+0x118>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d023      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <TIM_Base_SetConfig+0x11c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2a      	ldr	r2, [pc, #168]	; (8003290 <TIM_Base_SetConfig+0x120>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a29      	ldr	r2, [pc, #164]	; (8003294 <TIM_Base_SetConfig+0x124>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d017      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <TIM_Base_SetConfig+0x128>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <TIM_Base_SetConfig+0x12c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00f      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <TIM_Base_SetConfig+0x130>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <TIM_Base_SetConfig+0x134>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <TIM_Base_SetConfig+0x138>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a23      	ldr	r2, [pc, #140]	; (80032ac <TIM_Base_SetConfig+0x13c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <TIM_Base_SetConfig+0x114>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0xf8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <TIM_Base_SetConfig+0x124>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d103      	bne.n	8003270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	615a      	str	r2, [r3, #20]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40010400 	.word	0x40010400
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800
 80032a4:	40001800 	.word	0x40001800
 80032a8:	40001c00 	.word	0x40001c00
 80032ac:	40002000 	.word	0x40002000

080032b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e03f      	b.n	8003342 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f002 ffdc 	bl	8006294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f001 f9d9 	bl	80046ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b08a      	sub	sp, #40	; 0x28
 800334e:	af02      	add	r7, sp, #8
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b20      	cmp	r3, #32
 8003368:	d17c      	bne.n	8003464 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_UART_Transmit+0x2c>
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e075      	b.n	8003466 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_UART_Transmit+0x3e>
 8003384:	2302      	movs	r3, #2
 8003386:	e06e      	b.n	8003466 <HAL_UART_Transmit+0x11c>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2221      	movs	r2, #33	; 0x21
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fe f9f5 	bl	800178c <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	88fa      	ldrh	r2, [r7, #6]
 80033ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b8:	d108      	bne.n	80033cc <HAL_UART_Transmit+0x82>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e003      	b.n	80033d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033dc:	e02a      	b.n	8003434 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fe90 	bl	800410e <UART_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e036      	b.n	8003466 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10b      	bne.n	8003416 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	3302      	adds	r3, #2
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	e007      	b.n	8003426 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	3301      	adds	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1cf      	bne.n	80033de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	2140      	movs	r1, #64	; 0x40
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fe60 	bl	800410e <UART_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e006      	b.n	8003466 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	4613      	mov	r3, r2
 800347a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b20      	cmp	r3, #32
 8003486:	d130      	bne.n	80034ea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Transmit_IT+0x26>
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e029      	b.n	80034ec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Transmit_IT+0x38>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e022      	b.n	80034ec <HAL_UART_Transmit_IT+0x7e>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2221      	movs	r2, #33	; 0x21
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e000      	b.n	80034ec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80034ea:	2302      	movs	r3, #2
  }
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b20      	cmp	r3, #32
 8003510:	d11d      	bne.n	800354e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_UART_Receive_IT+0x26>
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e016      	b.n	8003550 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_UART_Receive_IT+0x38>
 800352c:	2302      	movs	r3, #2
 800352e:	e00f      	b.n	8003550 <HAL_UART_Receive_IT+0x58>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	461a      	mov	r2, r3
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fe50 	bl	80041ea <UART_Start_Receive_IT>
 800354a:	4603      	mov	r3, r0
 800354c:	e000      	b.n	8003550 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b20      	cmp	r3, #32
 8003570:	d165      	bne.n	800363e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_UART_Transmit_DMA+0x26>
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e05e      	b.n	8003640 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit_DMA+0x38>
 800358c:	2302      	movs	r3, #2
 800358e:	e057      	b.n	8003640 <HAL_UART_Transmit_DMA+0xe8>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2221      	movs	r2, #33	; 0x21
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035bc:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_UART_Transmit_DMA+0xf0>)
 80035be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	4a21      	ldr	r2, [pc, #132]	; (800364c <HAL_UART_Transmit_DMA+0xf4>)
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	4a20      	ldr	r2, [pc, #128]	; (8003650 <HAL_UART_Transmit_DMA+0xf8>)
 80035ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	2200      	movs	r2, #0
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80035d8:	f107 0308 	add.w	r3, r7, #8
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3304      	adds	r3, #4
 80035ec:	461a      	mov	r2, r3
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	f7fe fa98 	bl	8001b24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	617b      	str	r3, [r7, #20]
   return(result);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3314      	adds	r3, #20
 8003624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003626:	627a      	str	r2, [r7, #36]	; 0x24
 8003628:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6a39      	ldr	r1, [r7, #32]
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	61fb      	str	r3, [r7, #28]
   return(result);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e5      	bne.n	8003606 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
  }
}
 8003640:	4618      	mov	r0, r3
 8003642:	3730      	adds	r7, #48	; 0x30
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	08003fc5 	.word	0x08003fc5
 800364c:	0800405f 	.word	0x0800405f
 8003650:	0800407b 	.word	0x0800407b

08003654 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0a0      	sub	sp, #128	; 0x80
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800366c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800366e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003672:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800367c:	66ba      	str	r2, [r7, #104]	; 0x68
 800367e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003682:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800368a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80036a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3314      	adds	r3, #20
 80036ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036b0:	657a      	str	r2, [r7, #84]	; 0x54
 80036b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80036b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d119      	bne.n	8003700 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	f023 0310 	bic.w	r3, r3, #16
 80036e2:	677b      	str	r3, [r7, #116]	; 0x74
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036ec:	643a      	str	r2, [r7, #64]	; 0x40
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d136      	bne.n	800377c <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3314      	adds	r3, #20
 8003714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	61fb      	str	r3, [r7, #28]
   return(result);
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003724:	673b      	str	r3, [r7, #112]	; 0x70
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800372e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e5      	bne.n	800370e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	2200      	movs	r2, #0
 8003750:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fa3c 	bl	8001bd4 <HAL_DMA_Abort>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00c      	beq.n	800377c <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe fc50 	bl	800200c <HAL_DMA_GetError>
 800376c:	4603      	mov	r3, r0
 800376e:	2b20      	cmp	r3, #32
 8003770:	d104      	bne.n	800377c <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2210      	movs	r2, #16
 8003776:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e052      	b.n	8003822 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d136      	bne.n	80037f8 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3314      	adds	r3, #20
 8003790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	60bb      	str	r3, [r7, #8]
   return(result);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3314      	adds	r3, #20
 80037a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037aa:	61ba      	str	r2, [r7, #24]
 80037ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6979      	ldr	r1, [r7, #20]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	613b      	str	r3, [r7, #16]
   return(result);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e5      	bne.n	800378a <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d018      	beq.n	80037f8 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	2200      	movs	r2, #0
 80037cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe f9fe 	bl	8001bd4 <HAL_DMA_Abort>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00c      	beq.n	80037f8 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fc12 	bl	800200c <HAL_DMA_GetError>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d104      	bne.n	80037f8 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2210      	movs	r2, #16
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e014      	b.n	8003822 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3780      	adds	r7, #128	; 0x80
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b0a2      	sub	sp, #136	; 0x88
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8003834:	2301      	movs	r3, #1
 8003836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800384a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800384c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800385e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003864:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800386c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e3      	bne.n	800383a <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3314      	adds	r3, #20
 8003878:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	67fb      	str	r3, [r7, #124]	; 0x7c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3314      	adds	r3, #20
 8003890:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003892:	65ba      	str	r2, [r7, #88]	; 0x58
 8003894:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e5      	bne.n	8003872 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d119      	bne.n	80038e2 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	f023 0310 	bic.w	r3, r3, #16
 80038c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038ce:	647a      	str	r2, [r7, #68]	; 0x44
 80038d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e5      	bne.n	80038ae <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00f      	beq.n	800390a <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d104      	bne.n	8003902 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	4a53      	ldr	r2, [pc, #332]	; (8003a4c <HAL_UART_Abort_IT+0x220>)
 80038fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003900:	e003      	b.n	800390a <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003906:	2200      	movs	r2, #0
 8003908:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00f      	beq.n	8003932 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d104      	bne.n	800392a <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <HAL_UART_Abort_IT+0x224>)
 8003926:	651a      	str	r2, [r3, #80]	; 0x50
 8003928:	e003      	b.n	8003932 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	2200      	movs	r2, #0
 8003930:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d12d      	bne.n	800399c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3314      	adds	r3, #20
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	623b      	str	r3, [r7, #32]
   return(result);
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003956:	677b      	str	r3, [r7, #116]	; 0x74
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003960:	633a      	str	r2, [r7, #48]	; 0x30
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e5      	bne.n	8003940 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00f      	beq.n	800399c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe f997 	bl	8001cb4 <HAL_DMA_Abort_IT>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	2200      	movs	r2, #0
 8003992:	651a      	str	r2, [r3, #80]	; 0x50
 8003994:	e002      	b.n	800399c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d130      	bne.n	8003a0c <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c0:	673b      	str	r3, [r7, #112]	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3314      	adds	r3, #20
 80039c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80039ca:	61fa      	str	r2, [r7, #28]
 80039cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	617b      	str	r3, [r7, #20]
   return(result);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e5      	bne.n	80039aa <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d012      	beq.n	8003a0c <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f962 	bl	8001cb4 <HAL_DMA_Abort_IT>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	2200      	movs	r2, #0
 80039fc:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a04:	e002      	b.n	8003a0c <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8003a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d116      	bne.n	8003a42 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 faab 	bl	8003f98 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3788      	adds	r7, #136	; 0x88
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	080043a5 	.word	0x080043a5
 8003a50:	08004405 	.word	0x08004405

08003a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b0ba      	sub	sp, #232	; 0xe8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_UART_IRQHandler+0x66>
 8003aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fd3e 	bl	8004534 <UART_Receive_IT>
      return;
 8003ab8:	e256      	b.n	8003f68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80de 	beq.w	8003c80 <HAL_UART_IRQHandler+0x22c>
 8003ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80d1 	beq.w	8003c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <HAL_UART_IRQHandler+0xae>
 8003aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f043 0201 	orr.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_UART_IRQHandler+0xd2>
 8003b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0202 	orr.w	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_UART_IRQHandler+0xf6>
 8003b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0204 	orr.w	r2, r3, #4
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d011      	beq.n	8003b7a <HAL_UART_IRQHandler+0x126>
 8003b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0208 	orr.w	r2, r3, #8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 81ed 	beq.w	8003f5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x14e>
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fcc9 	bl	8004534 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <HAL_UART_IRQHandler+0x17a>
 8003bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d04f      	beq.n	8003c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fb71 	bl	80042b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	d141      	bne.n	8003c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3314      	adds	r3, #20
 8003be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1d9      	bne.n	8003be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d013      	beq.n	8003c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	4a7d      	ldr	r2, [pc, #500]	; (8003e30 <HAL_UART_IRQHandler+0x3dc>)
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe f836 	bl	8001cb4 <HAL_DMA_Abort_IT>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d016      	beq.n	8003c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	e00e      	b.n	8003c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f990 	bl	8003f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	e00a      	b.n	8003c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f98c 	bl	8003f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e006      	b.n	8003c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f988 	bl	8003f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c7a:	e170      	b.n	8003f5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	bf00      	nop
    return;
 8003c7e:	e16e      	b.n	8003f5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	f040 814a 	bne.w	8003f1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8143 	beq.w	8003f1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 813c 	beq.w	8003f1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	f040 80b4 	bne.w	8003e34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8140 	beq.w	8003f62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cea:	429a      	cmp	r2, r3
 8003cec:	f080 8139 	bcs.w	8003f62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	f000 8088 	beq.w	8003e16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1d9      	bne.n	8003d06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e1      	bne.n	8003d52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3314      	adds	r3, #20
 8003d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de6:	f023 0310 	bic.w	r3, r3, #16
 8003dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003df8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e3      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd fedf 	bl	8001bd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8c0 	bl	8003fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e2c:	e099      	b.n	8003f62 <HAL_UART_IRQHandler+0x50e>
 8003e2e:	bf00      	nop
 8003e30:	0800437d 	.word	0x0800437d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 808b 	beq.w	8003f66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8086 	beq.w	8003f66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e3      	bne.n	8003e5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3314      	adds	r3, #20
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e3      	bne.n	8003e92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0310 	bic.w	r3, r3, #16
 8003eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003efc:	61fa      	str	r2, [r7, #28]
 8003efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	69b9      	ldr	r1, [r7, #24]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	617b      	str	r3, [r7, #20]
   return(result);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e3      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f848 	bl	8003fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f1c:	e023      	b.n	8003f66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_UART_IRQHandler+0x4ea>
 8003f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fa94 	bl	8004464 <UART_Transmit_IT>
    return;
 8003f3c:	e014      	b.n	8003f68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <HAL_UART_IRQHandler+0x514>
 8003f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fad4 	bl	8004504 <UART_EndTransmit_IT>
    return;
 8003f5c:	e004      	b.n	8003f68 <HAL_UART_IRQHandler+0x514>
    return;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <HAL_UART_IRQHandler+0x514>
      return;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <HAL_UART_IRQHandler+0x514>
      return;
 8003f66:	bf00      	nop
  }
}
 8003f68:	37e8      	adds	r7, #232	; 0xe8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop

08003f70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b090      	sub	sp, #64	; 0x40
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d137      	bne.n	8004050 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
 8004004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004006:	633a      	str	r2, [r7, #48]	; 0x30
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e5      	bne.n	8003fe6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800401a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	60fb      	str	r3, [r7, #12]
   return(result);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800403a:	61fa      	str	r2, [r7, #28]
 800403c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	69b9      	ldr	r1, [r7, #24]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	617b      	str	r3, [r7, #20]
   return(result);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e5      	bne.n	800401a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800404e:	e002      	b.n	8004056 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004050:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004052:	f002 f8c7 	bl	80061e4 <HAL_UART_TxCpltCallback>
}
 8004056:	bf00      	nop
 8004058:	3740      	adds	r7, #64	; 0x40
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff ff7f 	bl	8003f70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b21      	cmp	r3, #33	; 0x21
 80040ac:	d108      	bne.n	80040c0 <UART_DMAError+0x46>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80040ba:	68b8      	ldr	r0, [r7, #8]
 80040bc:	f000 f8d3 	bl	8004266 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	bf0c      	ite	eq
 80040ce:	2301      	moveq	r3, #1
 80040d0:	2300      	movne	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b22      	cmp	r3, #34	; 0x22
 80040e0:	d108      	bne.n	80040f4 <UART_DMAError+0x7a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040ee:	68b8      	ldr	r0, [r7, #8]
 80040f0:	f000 f8e1 	bl	80042b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0210 	orr.w	r2, r3, #16
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	f7ff ff3f 	bl	8003f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b090      	sub	sp, #64	; 0x40
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	4613      	mov	r3, r2
 800411c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411e:	e050      	b.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d04c      	beq.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0x30>
 800412e:	f7fd fb2d 	bl	800178c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800413a:	429a      	cmp	r2, r3
 800413c:	d241      	bcs.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800415e:	637a      	str	r2, [r7, #52]	; 0x34
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	613b      	str	r3, [r7, #16]
   return(result);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004192:	623a      	str	r2, [r7, #32]
 8004194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	69f9      	ldr	r1, [r7, #28]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e00f      	b.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4013      	ands	r3, r2
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	bf0c      	ite	eq
 80041d2:	2301      	moveq	r3, #1
 80041d4:	2300      	movne	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d09f      	beq.n	8004120 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3740      	adds	r7, #64	; 0x40
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	4613      	mov	r3, r2
 80041f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2222      	movs	r2, #34	; 0x22
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004236:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0220 	orr.w	r2, r2, #32
 8004256:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004266:	b480      	push	{r7}
 8004268:	b089      	sub	sp, #36	; 0x24
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	60bb      	str	r3, [r7, #8]
   return(result);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	61ba      	str	r2, [r7, #24]
 8004290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	613b      	str	r3, [r7, #16]
   return(result);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e5      	bne.n	800426e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80042aa:	bf00      	nop
 80042ac:	3724      	adds	r7, #36	; 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b095      	sub	sp, #84	; 0x54
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042de:	643a      	str	r2, [r7, #64]	; 0x40
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3314      	adds	r3, #20
 80042f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	61fb      	str	r3, [r7, #28]
   return(result);
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	64bb      	str	r3, [r7, #72]	; 0x48
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	2b01      	cmp	r3, #1
 800432c:	d119      	bne.n	8004362 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	60bb      	str	r3, [r7, #8]
   return(result);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	647b      	str	r3, [r7, #68]	; 0x44
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800434e:	61ba      	str	r2, [r7, #24]
 8004350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	613b      	str	r3, [r7, #16]
   return(result);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004370:	bf00      	nop
 8004372:	3754      	adds	r7, #84	; 0x54
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff fdf4 	bl	8003f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	2200      	movs	r2, #0
 80043b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d117      	bne.n	80043fc <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff fdcf 	bl	8003f98 <HAL_UART_AbortCpltCallback>
 80043fa:	e000      	b.n	80043fe <UART_DMATxAbortCallback+0x5a>
      return;
 80043fc:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	2200      	movs	r2, #0
 8004418:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	2b00      	cmp	r3, #0
 800442a:	d117      	bne.n	800445c <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff fd9f 	bl	8003f98 <HAL_UART_AbortCpltCallback>
 800445a:	e000      	b.n	800445e <UART_DMARxAbortCallback+0x5a>
      return;
 800445c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b21      	cmp	r3, #33	; 0x21
 8004476:	d13e      	bne.n	80044f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d114      	bne.n	80044ac <UART_Transmit_IT+0x48>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d110      	bne.n	80044ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	1c9a      	adds	r2, r3, #2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]
 80044aa:	e008      	b.n	80044be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	1c59      	adds	r1, r3, #1
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6211      	str	r1, [r2, #32]
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4619      	mov	r1, r3
 80044cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
  }
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800451a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f001 fe5d 	bl	80061e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b22      	cmp	r3, #34	; 0x22
 8004546:	f040 80ab 	bne.w	80046a0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	d117      	bne.n	8004584 <UART_Receive_IT+0x50>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d113      	bne.n	8004584 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004572:	b29a      	uxth	r2, r3
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	629a      	str	r2, [r3, #40]	; 0x28
 8004582:	e026      	b.n	80045d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	d007      	beq.n	80045a8 <UART_Receive_IT+0x74>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <UART_Receive_IT+0x82>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e008      	b.n	80045c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4619      	mov	r1, r3
 80045e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d15a      	bne.n	800469c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0220 	bic.w	r2, r2, #32
 80045f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004604:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	2b01      	cmp	r3, #1
 8004624:	d135      	bne.n	8004692 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	613b      	str	r3, [r7, #16]
   return(result);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 0310 	bic.w	r3, r3, #16
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	623a      	str	r2, [r7, #32]
 800464e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	69f9      	ldr	r1, [r7, #28]
 8004652:	6a3a      	ldr	r2, [r7, #32]
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	61bb      	str	r3, [r7, #24]
   return(result);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e5      	bne.n	800462c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b10      	cmp	r3, #16
 800466c:	d10a      	bne.n	8004684 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fc8e 	bl	8003fac <HAL_UARTEx_RxEventCallback>
 8004690:	e002      	b.n	8004698 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 fdd2 	bl	800623c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e002      	b.n	80046a2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3730      	adds	r7, #48	; 0x30
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b0:	b0c0      	sub	sp, #256	; 0x100
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	68d9      	ldr	r1, [r3, #12]
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	ea40 0301 	orr.w	r3, r0, r1
 80046d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004704:	f021 010c 	bic.w	r1, r1, #12
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004712:	430b      	orrs	r3, r1
 8004714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004726:	6999      	ldr	r1, [r3, #24]
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	ea40 0301 	orr.w	r3, r0, r1
 8004732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b8f      	ldr	r3, [pc, #572]	; (8004978 <UART_SetConfig+0x2cc>)
 800473c:	429a      	cmp	r2, r3
 800473e:	d005      	beq.n	800474c <UART_SetConfig+0xa0>
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b8d      	ldr	r3, [pc, #564]	; (800497c <UART_SetConfig+0x2d0>)
 8004748:	429a      	cmp	r2, r3
 800474a:	d104      	bne.n	8004756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800474c:	f7fe f818 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 8004750:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004754:	e003      	b.n	800475e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004756:	f7fd ffff 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 800475a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004768:	f040 810c 	bne.w	8004984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800476c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004776:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800477a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800477e:	4622      	mov	r2, r4
 8004780:	462b      	mov	r3, r5
 8004782:	1891      	adds	r1, r2, r2
 8004784:	65b9      	str	r1, [r7, #88]	; 0x58
 8004786:	415b      	adcs	r3, r3
 8004788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800478a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800478e:	4621      	mov	r1, r4
 8004790:	eb12 0801 	adds.w	r8, r2, r1
 8004794:	4629      	mov	r1, r5
 8004796:	eb43 0901 	adc.w	r9, r3, r1
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ae:	4690      	mov	r8, r2
 80047b0:	4699      	mov	r9, r3
 80047b2:	4623      	mov	r3, r4
 80047b4:	eb18 0303 	adds.w	r3, r8, r3
 80047b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047bc:	462b      	mov	r3, r5
 80047be:	eb49 0303 	adc.w	r3, r9, r3
 80047c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047da:	460b      	mov	r3, r1
 80047dc:	18db      	adds	r3, r3, r3
 80047de:	653b      	str	r3, [r7, #80]	; 0x50
 80047e0:	4613      	mov	r3, r2
 80047e2:	eb42 0303 	adc.w	r3, r2, r3
 80047e6:	657b      	str	r3, [r7, #84]	; 0x54
 80047e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047f0:	f7fc fa0a 	bl	8000c08 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4b61      	ldr	r3, [pc, #388]	; (8004980 <UART_SetConfig+0x2d4>)
 80047fa:	fba3 2302 	umull	r2, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	011c      	lsls	r4, r3, #4
 8004802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004806:	2200      	movs	r2, #0
 8004808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800480c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004814:	4642      	mov	r2, r8
 8004816:	464b      	mov	r3, r9
 8004818:	1891      	adds	r1, r2, r2
 800481a:	64b9      	str	r1, [r7, #72]	; 0x48
 800481c:	415b      	adcs	r3, r3
 800481e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004824:	4641      	mov	r1, r8
 8004826:	eb12 0a01 	adds.w	sl, r2, r1
 800482a:	4649      	mov	r1, r9
 800482c:	eb43 0b01 	adc.w	fp, r3, r1
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800483c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004844:	4692      	mov	sl, r2
 8004846:	469b      	mov	fp, r3
 8004848:	4643      	mov	r3, r8
 800484a:	eb1a 0303 	adds.w	r3, sl, r3
 800484e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004852:	464b      	mov	r3, r9
 8004854:	eb4b 0303 	adc.w	r3, fp, r3
 8004858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004868:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800486c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004870:	460b      	mov	r3, r1
 8004872:	18db      	adds	r3, r3, r3
 8004874:	643b      	str	r3, [r7, #64]	; 0x40
 8004876:	4613      	mov	r3, r2
 8004878:	eb42 0303 	adc.w	r3, r2, r3
 800487c:	647b      	str	r3, [r7, #68]	; 0x44
 800487e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004886:	f7fc f9bf 	bl	8000c08 <__aeabi_uldivmod>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4611      	mov	r1, r2
 8004890:	4b3b      	ldr	r3, [pc, #236]	; (8004980 <UART_SetConfig+0x2d4>)
 8004892:	fba3 2301 	umull	r2, r3, r3, r1
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2264      	movs	r2, #100	; 0x64
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	1acb      	subs	r3, r1, r3
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <UART_SetConfig+0x2d4>)
 80048a8:	fba3 2302 	umull	r2, r3, r3, r2
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048b4:	441c      	add	r4, r3
 80048b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	1891      	adds	r1, r2, r2
 80048ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80048d0:	415b      	adcs	r3, r3
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048d8:	4641      	mov	r1, r8
 80048da:	1851      	adds	r1, r2, r1
 80048dc:	6339      	str	r1, [r7, #48]	; 0x30
 80048de:	4649      	mov	r1, r9
 80048e0:	414b      	adcs	r3, r1
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048f0:	4659      	mov	r1, fp
 80048f2:	00cb      	lsls	r3, r1, #3
 80048f4:	4651      	mov	r1, sl
 80048f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fa:	4651      	mov	r1, sl
 80048fc:	00ca      	lsls	r2, r1, #3
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	4603      	mov	r3, r0
 8004904:	4642      	mov	r2, r8
 8004906:	189b      	adds	r3, r3, r2
 8004908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800490c:	464b      	mov	r3, r9
 800490e:	460a      	mov	r2, r1
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004924:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800492c:	460b      	mov	r3, r1
 800492e:	18db      	adds	r3, r3, r3
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
 8004932:	4613      	mov	r3, r2
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800493e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004942:	f7fc f961 	bl	8000c08 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <UART_SetConfig+0x2d4>)
 800494c:	fba3 1302 	umull	r1, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	2164      	movs	r1, #100	; 0x64
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	3332      	adds	r3, #50	; 0x32
 800495e:	4a08      	ldr	r2, [pc, #32]	; (8004980 <UART_SetConfig+0x2d4>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	f003 0207 	and.w	r2, r3, #7
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4422      	add	r2, r4
 8004972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004974:	e106      	b.n	8004b84 <UART_SetConfig+0x4d8>
 8004976:	bf00      	nop
 8004978:	40011000 	.word	0x40011000
 800497c:	40011400 	.word	0x40011400
 8004980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004988:	2200      	movs	r2, #0
 800498a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800498e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004996:	4642      	mov	r2, r8
 8004998:	464b      	mov	r3, r9
 800499a:	1891      	adds	r1, r2, r2
 800499c:	6239      	str	r1, [r7, #32]
 800499e:	415b      	adcs	r3, r3
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
 80049a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049a6:	4641      	mov	r1, r8
 80049a8:	1854      	adds	r4, r2, r1
 80049aa:	4649      	mov	r1, r9
 80049ac:	eb43 0501 	adc.w	r5, r3, r1
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	00eb      	lsls	r3, r5, #3
 80049ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049be:	00e2      	lsls	r2, r4, #3
 80049c0:	4614      	mov	r4, r2
 80049c2:	461d      	mov	r5, r3
 80049c4:	4643      	mov	r3, r8
 80049c6:	18e3      	adds	r3, r4, r3
 80049c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049cc:	464b      	mov	r3, r9
 80049ce:	eb45 0303 	adc.w	r3, r5, r3
 80049d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049f2:	4629      	mov	r1, r5
 80049f4:	008b      	lsls	r3, r1, #2
 80049f6:	4621      	mov	r1, r4
 80049f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fc:	4621      	mov	r1, r4
 80049fe:	008a      	lsls	r2, r1, #2
 8004a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a04:	f7fc f900 	bl	8000c08 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4b60      	ldr	r3, [pc, #384]	; (8004b90 <UART_SetConfig+0x4e4>)
 8004a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	011c      	lsls	r4, r3, #4
 8004a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	1891      	adds	r1, r2, r2
 8004a2e:	61b9      	str	r1, [r7, #24]
 8004a30:	415b      	adcs	r3, r3
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a38:	4641      	mov	r1, r8
 8004a3a:	1851      	adds	r1, r2, r1
 8004a3c:	6139      	str	r1, [r7, #16]
 8004a3e:	4649      	mov	r1, r9
 8004a40:	414b      	adcs	r3, r1
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a50:	4659      	mov	r1, fp
 8004a52:	00cb      	lsls	r3, r1, #3
 8004a54:	4651      	mov	r1, sl
 8004a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	00ca      	lsls	r2, r1, #3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	4642      	mov	r2, r8
 8004a66:	189b      	adds	r3, r3, r2
 8004a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	460a      	mov	r2, r1
 8004a70:	eb42 0303 	adc.w	r3, r2, r3
 8004a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a90:	4649      	mov	r1, r9
 8004a92:	008b      	lsls	r3, r1, #2
 8004a94:	4641      	mov	r1, r8
 8004a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	008a      	lsls	r2, r1, #2
 8004a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004aa2:	f7fc f8b1 	bl	8000c08 <__aeabi_uldivmod>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4b38      	ldr	r3, [pc, #224]	; (8004b90 <UART_SetConfig+0x4e4>)
 8004aae:	fba3 2301 	umull	r2, r3, r3, r1
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2264      	movs	r2, #100	; 0x64
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	1acb      	subs	r3, r1, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	; 0x32
 8004ac0:	4a33      	ldr	r2, [pc, #204]	; (8004b90 <UART_SetConfig+0x4e4>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004acc:	441c      	add	r4, r3
 8004ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ad6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ad8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004adc:	4642      	mov	r2, r8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	1891      	adds	r1, r2, r2
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	415b      	adcs	r3, r3
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aec:	4641      	mov	r1, r8
 8004aee:	1851      	adds	r1, r2, r1
 8004af0:	6039      	str	r1, [r7, #0]
 8004af2:	4649      	mov	r1, r9
 8004af4:	414b      	adcs	r3, r1
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b04:	4659      	mov	r1, fp
 8004b06:	00cb      	lsls	r3, r1, #3
 8004b08:	4651      	mov	r1, sl
 8004b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0e:	4651      	mov	r1, sl
 8004b10:	00ca      	lsls	r2, r1, #3
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	4642      	mov	r2, r8
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b1e:	464b      	mov	r3, r9
 8004b20:	460a      	mov	r2, r1
 8004b22:	eb42 0303 	adc.w	r3, r2, r3
 8004b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	663b      	str	r3, [r7, #96]	; 0x60
 8004b32:	667a      	str	r2, [r7, #100]	; 0x64
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b40:	4649      	mov	r1, r9
 8004b42:	008b      	lsls	r3, r1, #2
 8004b44:	4641      	mov	r1, r8
 8004b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	008a      	lsls	r2, r1, #2
 8004b4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b52:	f7fc f859 	bl	8000c08 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <UART_SetConfig+0x4e4>)
 8004b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	2164      	movs	r1, #100	; 0x64
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	3332      	adds	r3, #50	; 0x32
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <UART_SetConfig+0x4e4>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	f003 020f 	and.w	r2, r3, #15
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4422      	add	r2, r4
 8004b82:	609a      	str	r2, [r3, #8]
}
 8004b84:	bf00      	nop
 8004b86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b90:	51eb851f 	.word	0x51eb851f

08004b94 <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 8004b9a:	2355      	movs	r3, #85	; 0x55
 8004b9c:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	71bb      	strb	r3, [r7, #6]
 8004ba6:	e0c9      	b.n	8004d3c <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 8004ba8:	79ba      	ldrb	r2, [r7, #6]
 8004baa:	496c      	ldr	r1, [pc, #432]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	79ba      	ldrb	r2, [r7, #6]
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <drv_dmaInit+0x1cc>)
 8004bbe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004bc2:	4866      	ldr	r0, [pc, #408]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	4413      	add	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4403      	add	r3, r0
 8004bce:	3304      	adds	r3, #4
 8004bd0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 8004bd2:	79b9      	ldrb	r1, [r7, #6]
 8004bd4:	79ba      	ldrb	r2, [r7, #6]
 8004bd6:	4861      	ldr	r0, [pc, #388]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004bd8:	460b      	mov	r3, r1
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	440b      	add	r3, r1
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4403      	add	r3, r0
 8004be2:	3364      	adds	r3, #100	; 0x64
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	485d      	ldr	r0, [pc, #372]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004be8:	4613      	mov	r3, r2
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	4413      	add	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4403      	add	r3, r0
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 8004bf6:	79b9      	ldrb	r1, [r7, #6]
 8004bf8:	79ba      	ldrb	r2, [r7, #6]
 8004bfa:	4858      	ldr	r0, [pc, #352]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	440b      	add	r3, r1
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4403      	add	r3, r0
 8004c06:	3368      	adds	r3, #104	; 0x68
 8004c08:	6819      	ldr	r1, [r3, #0]
 8004c0a:	4854      	ldr	r0, [pc, #336]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	4413      	add	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4403      	add	r3, r0
 8004c16:	330c      	adds	r3, #12
 8004c18:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 8004c1a:	79b9      	ldrb	r1, [r7, #6]
 8004c1c:	79ba      	ldrb	r2, [r7, #6]
 8004c1e:	484f      	ldr	r0, [pc, #316]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c20:	460b      	mov	r3, r1
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	440b      	add	r3, r1
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4403      	add	r3, r0
 8004c2a:	336c      	adds	r3, #108	; 0x6c
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	484b      	ldr	r0, [pc, #300]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c30:	4613      	mov	r3, r2
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	4413      	add	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4403      	add	r3, r0
 8004c3a:	3310      	adds	r3, #16
 8004c3c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 8004c3e:	79b9      	ldrb	r1, [r7, #6]
 8004c40:	79ba      	ldrb	r2, [r7, #6]
 8004c42:	4846      	ldr	r0, [pc, #280]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c44:	460b      	mov	r3, r1
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	440b      	add	r3, r1
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4403      	add	r3, r0
 8004c4e:	3370      	adds	r3, #112	; 0x70
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	4842      	ldr	r0, [pc, #264]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	4413      	add	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4403      	add	r3, r0
 8004c5e:	3314      	adds	r3, #20
 8004c60:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 8004c62:	79b9      	ldrb	r1, [r7, #6]
 8004c64:	79ba      	ldrb	r2, [r7, #6]
 8004c66:	483d      	ldr	r0, [pc, #244]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c68:	460b      	mov	r3, r1
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	440b      	add	r3, r1
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4403      	add	r3, r0
 8004c72:	3374      	adds	r3, #116	; 0x74
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	4839      	ldr	r0, [pc, #228]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c78:	4613      	mov	r3, r2
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	4413      	add	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4403      	add	r3, r0
 8004c82:	3318      	adds	r3, #24
 8004c84:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 8004c86:	79b9      	ldrb	r1, [r7, #6]
 8004c88:	79ba      	ldrb	r2, [r7, #6]
 8004c8a:	4834      	ldr	r0, [pc, #208]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	440b      	add	r3, r1
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4403      	add	r3, r0
 8004c96:	3378      	adds	r3, #120	; 0x78
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	4830      	ldr	r0, [pc, #192]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	4413      	add	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4403      	add	r3, r0
 8004ca6:	331c      	adds	r3, #28
 8004ca8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 8004caa:	79b9      	ldrb	r1, [r7, #6]
 8004cac:	79ba      	ldrb	r2, [r7, #6]
 8004cae:	482b      	ldr	r0, [pc, #172]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	440b      	add	r3, r1
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4403      	add	r3, r0
 8004cba:	337c      	adds	r3, #124	; 0x7c
 8004cbc:	6819      	ldr	r1, [r3, #0]
 8004cbe:	4827      	ldr	r0, [pc, #156]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4403      	add	r3, r0
 8004cca:	3320      	adds	r3, #32
 8004ccc:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 8004cce:	79b9      	ldrb	r1, [r7, #6]
 8004cd0:	79ba      	ldrb	r2, [r7, #6]
 8004cd2:	4822      	ldr	r0, [pc, #136]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	440b      	add	r3, r1
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4403      	add	r3, r0
 8004cde:	3380      	adds	r3, #128	; 0x80
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	481e      	ldr	r0, [pc, #120]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4403      	add	r3, r0
 8004cee:	3324      	adds	r3, #36	; 0x24
 8004cf0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 8004cf2:	79b9      	ldrb	r1, [r7, #6]
 8004cf4:	79ba      	ldrb	r2, [r7, #6]
 8004cf6:	4819      	ldr	r0, [pc, #100]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	440b      	add	r3, r1
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4403      	add	r3, r0
 8004d02:	3384      	adds	r3, #132	; 0x84
 8004d04:	6819      	ldr	r1, [r3, #0]
 8004d06:	4815      	ldr	r0, [pc, #84]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004d08:	4613      	mov	r3, r2
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	4413      	add	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4403      	add	r3, r0
 8004d12:	3328      	adds	r3, #40	; 0x28
 8004d14:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 8004d16:	79ba      	ldrb	r2, [r7, #6]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <drv_dmaInit+0x1c8>)
 8004d22:	4413      	add	r3, r2
 8004d24:	3304      	adds	r3, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fc fe4e 	bl	80019c8 <HAL_DMA_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 8004d32:	23ae      	movs	r3, #174	; 0xae
 8004d34:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8004d36:	79bb      	ldrb	r3, [r7, #6]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	71bb      	strb	r3, [r7, #6]
 8004d3c:	79ba      	ldrb	r2, [r7, #6]
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <drv_dmaInit+0x1d0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4909      	ldr	r1, [pc, #36]	; (8004d68 <drv_dmaInit+0x1d4>)
 8004d44:	fba1 1303 	umull	r1, r3, r1, r3
 8004d48:	09db      	lsrs	r3, r3, #7
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	f4ff af2c 	bcc.w	8004ba8 <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 8004d50:	79fb      	ldrb	r3, [r7, #7]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000164 	.word	0x20000164
 8004d60:	200002fc 	.word	0x200002fc
 8004d64:	20000274 	.word	0x20000274
 8004d68:	f0f0f0f1 	.word	0xf0f0f0f1

08004d6c <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <DMA1_Stream0_IRQHandler+0x18>
 8004d78:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <DMA1_Stream0_IRQHandler+0x70>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <DMA1_Stream0_IRQHandler+0x70>)
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8004d8e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <DMA1_Stream0_IRQHandler+0x74>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <DMA1_Stream0_IRQHandler+0x74>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fc ffaa 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <DMA1_Stream0_IRQHandler+0x4c>
 8004dac:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d109      	bne.n	8004dd4 <DMA1_Stream0_IRQHandler+0x68>
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <DMA1_Stream0_IRQHandler+0x70>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <DMA1_Stream0_IRQHandler+0x68>
 8004dc8:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <DMA1_Stream0_IRQHandler+0x70>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <DMA1_Stream0_IRQHandler+0x70>)
 8004dd2:	701a      	strb	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	2000129e 	.word	0x2000129e
 8004ddc:	2000129d 	.word	0x2000129d
 8004de0:	20000278 	.word	0x20000278

08004de4 <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d105      	bne.n	8004dfc <DMA1_Stream1_IRQHandler+0x18>
 8004df0:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <DMA1_Stream1_IRQHandler+0x70>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <DMA1_Stream1_IRQHandler+0x70>)
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	4b14      	ldr	r3, [pc, #80]	; (8004e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	3301      	adds	r3, #1
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8004e06:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 8004e08:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <DMA1_Stream1_IRQHandler+0x74>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 8004e10:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <DMA1_Stream1_IRQHandler+0x74>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fc ff6e 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <DMA1_Stream1_IRQHandler+0x4c>
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <DMA1_Stream1_IRQHandler+0x68>
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <DMA1_Stream1_IRQHandler+0x70>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <DMA1_Stream1_IRQHandler+0x68>
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <DMA1_Stream1_IRQHandler+0x70>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <DMA1_Stream1_IRQHandler+0x70>)
 8004e4a:	701a      	strb	r2, [r3, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	2000129e 	.word	0x2000129e
 8004e54:	2000129d 	.word	0x2000129d
 8004e58:	20000278 	.word	0x20000278

08004e5c <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <DMA1_Stream2_IRQHandler+0x18>
 8004e68:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <DMA1_Stream2_IRQHandler+0x70>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <DMA1_Stream2_IRQHandler+0x70>)
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8004e7e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <DMA1_Stream2_IRQHandler+0x74>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 8004e88:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <DMA1_Stream2_IRQHandler+0x74>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fc ff32 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <DMA1_Stream2_IRQHandler+0x4c>
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d109      	bne.n	8004ec4 <DMA1_Stream2_IRQHandler+0x68>
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <DMA1_Stream2_IRQHandler+0x70>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <DMA1_Stream2_IRQHandler+0x68>
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <DMA1_Stream2_IRQHandler+0x70>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	4b02      	ldr	r3, [pc, #8]	; (8004ecc <DMA1_Stream2_IRQHandler+0x70>)
 8004ec2:	701a      	strb	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	2000129e 	.word	0x2000129e
 8004ecc:	2000129d 	.word	0x2000129d
 8004ed0:	20000278 	.word	0x20000278

08004ed4 <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8004ed8:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <DMA1_Stream3_IRQHandler+0x18>
 8004ee0:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <DMA1_Stream3_IRQHandler+0x70>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <DMA1_Stream3_IRQHandler+0x70>)
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8004ef6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <DMA1_Stream3_IRQHandler+0x74>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 8004f00:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <DMA1_Stream3_IRQHandler+0x74>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fc fef6 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <DMA1_Stream3_IRQHandler+0x4c>
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <DMA1_Stream3_IRQHandler+0x68>
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <DMA1_Stream3_IRQHandler+0x70>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <DMA1_Stream3_IRQHandler+0x68>
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <DMA1_Stream3_IRQHandler+0x70>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	4b02      	ldr	r3, [pc, #8]	; (8004f44 <DMA1_Stream3_IRQHandler+0x70>)
 8004f3a:	701a      	strb	r2, [r3, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	2000129e 	.word	0x2000129e
 8004f44:	2000129d 	.word	0x2000129d
 8004f48:	20000278 	.word	0x20000278

08004f4c <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <DMA1_Stream4_IRQHandler+0x18>
 8004f58:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <DMA1_Stream4_IRQHandler+0x70>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <DMA1_Stream4_IRQHandler+0x70>)
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8004f6e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 8004f70:	4b13      	ldr	r3, [pc, #76]	; (8004fc0 <DMA1_Stream4_IRQHandler+0x74>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 8004f78:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <DMA1_Stream4_IRQHandler+0x74>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc feba 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <DMA1_Stream4_IRQHandler+0x4c>
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <DMA1_Stream4_IRQHandler+0x68>
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <DMA1_Stream4_IRQHandler+0x70>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <DMA1_Stream4_IRQHandler+0x68>
 8004fa8:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <DMA1_Stream4_IRQHandler+0x70>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	4b02      	ldr	r3, [pc, #8]	; (8004fbc <DMA1_Stream4_IRQHandler+0x70>)
 8004fb2:	701a      	strb	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	2000129e 	.word	0x2000129e
 8004fbc:	2000129d 	.word	0x2000129d
 8004fc0:	20000278 	.word	0x20000278

08004fc4 <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <DMA1_Stream6_IRQHandler+0x6c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <DMA1_Stream6_IRQHandler+0x18>
 8004fd0:	4b18      	ldr	r3, [pc, #96]	; (8005034 <DMA1_Stream6_IRQHandler+0x70>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	4b16      	ldr	r3, [pc, #88]	; (8005034 <DMA1_Stream6_IRQHandler+0x70>)
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	4b14      	ldr	r3, [pc, #80]	; (8005030 <DMA1_Stream6_IRQHandler+0x6c>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	4b12      	ldr	r3, [pc, #72]	; (8005030 <DMA1_Stream6_IRQHandler+0x6c>)
 8004fe6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <DMA1_Stream6_IRQHandler+0x74>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 8004ff0:	4b11      	ldr	r3, [pc, #68]	; (8005038 <DMA1_Stream6_IRQHandler+0x74>)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fc fe7e 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <DMA1_Stream6_IRQHandler+0x6c>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <DMA1_Stream6_IRQHandler+0x4c>
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <DMA1_Stream6_IRQHandler+0x6c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	3b01      	subs	r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <DMA1_Stream6_IRQHandler+0x6c>)
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <DMA1_Stream6_IRQHandler+0x6c>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <DMA1_Stream6_IRQHandler+0x68>
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <DMA1_Stream6_IRQHandler+0x70>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <DMA1_Stream6_IRQHandler+0x68>
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <DMA1_Stream6_IRQHandler+0x70>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	3b01      	subs	r3, #1
 8005026:	b2da      	uxtb	r2, r3
 8005028:	4b02      	ldr	r3, [pc, #8]	; (8005034 <DMA1_Stream6_IRQHandler+0x70>)
 800502a:	701a      	strb	r2, [r3, #0]
}
 800502c:	bf00      	nop
 800502e:	bd80      	pop	{r7, pc}
 8005030:	2000129e 	.word	0x2000129e
 8005034:	2000129d 	.word	0x2000129d
 8005038:	20000278 	.word	0x20000278

0800503c <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005040:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <DMA1_Stream7_IRQHandler+0x6c>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <DMA1_Stream7_IRQHandler+0x18>
 8005048:	4b18      	ldr	r3, [pc, #96]	; (80050ac <DMA1_Stream7_IRQHandler+0x70>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	b2da      	uxtb	r2, r3
 8005050:	4b16      	ldr	r3, [pc, #88]	; (80050ac <DMA1_Stream7_IRQHandler+0x70>)
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <DMA1_Stream7_IRQHandler+0x6c>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	b2da      	uxtb	r2, r3
 800505c:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <DMA1_Stream7_IRQHandler+0x6c>)
 800505e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 8005060:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <DMA1_Stream7_IRQHandler+0x74>)
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 8005068:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <DMA1_Stream7_IRQHandler+0x74>)
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	3304      	adds	r3, #4
 800506e:	4618      	mov	r0, r3
 8005070:	f7fc fe42 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <DMA1_Stream7_IRQHandler+0x6c>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <DMA1_Stream7_IRQHandler+0x4c>
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <DMA1_Stream7_IRQHandler+0x6c>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	3b01      	subs	r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <DMA1_Stream7_IRQHandler+0x6c>)
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <DMA1_Stream7_IRQHandler+0x6c>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <DMA1_Stream7_IRQHandler+0x68>
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <DMA1_Stream7_IRQHandler+0x70>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <DMA1_Stream7_IRQHandler+0x68>
 8005098:	4b04      	ldr	r3, [pc, #16]	; (80050ac <DMA1_Stream7_IRQHandler+0x70>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	4b02      	ldr	r3, [pc, #8]	; (80050ac <DMA1_Stream7_IRQHandler+0x70>)
 80050a2:	701a      	strb	r2, [r3, #0]
}
 80050a4:	bf00      	nop
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	2000129e 	.word	0x2000129e
 80050ac:	2000129d 	.word	0x2000129d
 80050b0:	20000278 	.word	0x20000278

080050b4 <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <DMA2_Stream0_IRQHandler+0x6c>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <DMA2_Stream0_IRQHandler+0x18>
 80050c0:	4b18      	ldr	r3, [pc, #96]	; (8005124 <DMA2_Stream0_IRQHandler+0x70>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	4b16      	ldr	r3, [pc, #88]	; (8005124 <DMA2_Stream0_IRQHandler+0x70>)
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	4b14      	ldr	r3, [pc, #80]	; (8005120 <DMA2_Stream0_IRQHandler+0x6c>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <DMA2_Stream0_IRQHandler+0x6c>)
 80050d6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 80050d8:	4b13      	ldr	r3, [pc, #76]	; (8005128 <DMA2_Stream0_IRQHandler+0x74>)
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 80050e0:	4b11      	ldr	r3, [pc, #68]	; (8005128 <DMA2_Stream0_IRQHandler+0x74>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fc fe06 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80050ec:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <DMA2_Stream0_IRQHandler+0x6c>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <DMA2_Stream0_IRQHandler+0x4c>
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <DMA2_Stream0_IRQHandler+0x6c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	4b08      	ldr	r3, [pc, #32]	; (8005120 <DMA2_Stream0_IRQHandler+0x6c>)
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <DMA2_Stream0_IRQHandler+0x6c>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <DMA2_Stream0_IRQHandler+0x68>
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <DMA2_Stream0_IRQHandler+0x70>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <DMA2_Stream0_IRQHandler+0x68>
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <DMA2_Stream0_IRQHandler+0x70>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	3b01      	subs	r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	4b02      	ldr	r3, [pc, #8]	; (8005124 <DMA2_Stream0_IRQHandler+0x70>)
 800511a:	701a      	strb	r2, [r3, #0]
}
 800511c:	bf00      	nop
 800511e:	bd80      	pop	{r7, pc}
 8005120:	2000129e 	.word	0x2000129e
 8005124:	2000129d 	.word	0x2000129d
 8005128:	20000278 	.word	0x20000278

0800512c <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005130:	4b19      	ldr	r3, [pc, #100]	; (8005198 <DMA2_Stream1_IRQHandler+0x6c>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <DMA2_Stream1_IRQHandler+0x18>
 8005138:	4b18      	ldr	r3, [pc, #96]	; (800519c <DMA2_Stream1_IRQHandler+0x70>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	b2da      	uxtb	r2, r3
 8005140:	4b16      	ldr	r3, [pc, #88]	; (800519c <DMA2_Stream1_IRQHandler+0x70>)
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	4b14      	ldr	r3, [pc, #80]	; (8005198 <DMA2_Stream1_IRQHandler+0x6c>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	3301      	adds	r3, #1
 800514a:	b2da      	uxtb	r2, r3
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <DMA2_Stream1_IRQHandler+0x6c>)
 800514e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 8005150:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <DMA2_Stream1_IRQHandler+0x74>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <DMA2_Stream1_IRQHandler+0x74>)
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	3304      	adds	r3, #4
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc fdca 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <DMA2_Stream1_IRQHandler+0x6c>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <DMA2_Stream1_IRQHandler+0x4c>
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <DMA2_Stream1_IRQHandler+0x6c>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	3b01      	subs	r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	4b08      	ldr	r3, [pc, #32]	; (8005198 <DMA2_Stream1_IRQHandler+0x6c>)
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <DMA2_Stream1_IRQHandler+0x6c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <DMA2_Stream1_IRQHandler+0x68>
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <DMA2_Stream1_IRQHandler+0x70>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <DMA2_Stream1_IRQHandler+0x68>
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <DMA2_Stream1_IRQHandler+0x70>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	3b01      	subs	r3, #1
 800518e:	b2da      	uxtb	r2, r3
 8005190:	4b02      	ldr	r3, [pc, #8]	; (800519c <DMA2_Stream1_IRQHandler+0x70>)
 8005192:	701a      	strb	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	bd80      	pop	{r7, pc}
 8005198:	2000129e 	.word	0x2000129e
 800519c:	2000129d 	.word	0x2000129d
 80051a0:	20000278 	.word	0x20000278

080051a4 <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <DMA2_Stream2_IRQHandler+0x6c>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <DMA2_Stream2_IRQHandler+0x18>
 80051b0:	4b18      	ldr	r3, [pc, #96]	; (8005214 <DMA2_Stream2_IRQHandler+0x70>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	4b16      	ldr	r3, [pc, #88]	; (8005214 <DMA2_Stream2_IRQHandler+0x70>)
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	4b14      	ldr	r3, [pc, #80]	; (8005210 <DMA2_Stream2_IRQHandler+0x6c>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <DMA2_Stream2_IRQHandler+0x6c>)
 80051c6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <DMA2_Stream2_IRQHandler+0x74>)
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <DMA2_Stream2_IRQHandler+0x74>)
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	3304      	adds	r3, #4
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fc fd8e 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <DMA2_Stream2_IRQHandler+0x6c>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <DMA2_Stream2_IRQHandler+0x4c>
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <DMA2_Stream2_IRQHandler+0x6c>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <DMA2_Stream2_IRQHandler+0x6c>)
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <DMA2_Stream2_IRQHandler+0x6c>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <DMA2_Stream2_IRQHandler+0x68>
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <DMA2_Stream2_IRQHandler+0x70>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <DMA2_Stream2_IRQHandler+0x68>
 8005200:	4b04      	ldr	r3, [pc, #16]	; (8005214 <DMA2_Stream2_IRQHandler+0x70>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	3b01      	subs	r3, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	4b02      	ldr	r3, [pc, #8]	; (8005214 <DMA2_Stream2_IRQHandler+0x70>)
 800520a:	701a      	strb	r2, [r3, #0]
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}
 8005210:	2000129e 	.word	0x2000129e
 8005214:	2000129d 	.word	0x2000129d
 8005218:	20000278 	.word	0x20000278

0800521c <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005220:	4b19      	ldr	r3, [pc, #100]	; (8005288 <DMA2_Stream3_IRQHandler+0x6c>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <DMA2_Stream3_IRQHandler+0x18>
 8005228:	4b18      	ldr	r3, [pc, #96]	; (800528c <DMA2_Stream3_IRQHandler+0x70>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	b2da      	uxtb	r2, r3
 8005230:	4b16      	ldr	r3, [pc, #88]	; (800528c <DMA2_Stream3_IRQHandler+0x70>)
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	4b14      	ldr	r3, [pc, #80]	; (8005288 <DMA2_Stream3_IRQHandler+0x6c>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	b2da      	uxtb	r2, r3
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <DMA2_Stream3_IRQHandler+0x6c>)
 800523e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 8005240:	4b13      	ldr	r3, [pc, #76]	; (8005290 <DMA2_Stream3_IRQHandler+0x74>)
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <DMA2_Stream3_IRQHandler+0x74>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	3304      	adds	r3, #4
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fd52 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <DMA2_Stream3_IRQHandler+0x6c>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <DMA2_Stream3_IRQHandler+0x4c>
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <DMA2_Stream3_IRQHandler+0x6c>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	3b01      	subs	r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	4b08      	ldr	r3, [pc, #32]	; (8005288 <DMA2_Stream3_IRQHandler+0x6c>)
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	4b07      	ldr	r3, [pc, #28]	; (8005288 <DMA2_Stream3_IRQHandler+0x6c>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <DMA2_Stream3_IRQHandler+0x68>
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <DMA2_Stream3_IRQHandler+0x70>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <DMA2_Stream3_IRQHandler+0x68>
 8005278:	4b04      	ldr	r3, [pc, #16]	; (800528c <DMA2_Stream3_IRQHandler+0x70>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	3b01      	subs	r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	4b02      	ldr	r3, [pc, #8]	; (800528c <DMA2_Stream3_IRQHandler+0x70>)
 8005282:	701a      	strb	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2000129e 	.word	0x2000129e
 800528c:	2000129d 	.word	0x2000129d
 8005290:	20000278 	.word	0x20000278

08005294 <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005298:	4b19      	ldr	r3, [pc, #100]	; (8005300 <DMA2_Stream4_IRQHandler+0x6c>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <DMA2_Stream4_IRQHandler+0x18>
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <DMA2_Stream4_IRQHandler+0x70>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	3301      	adds	r3, #1
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <DMA2_Stream4_IRQHandler+0x70>)
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	4b14      	ldr	r3, [pc, #80]	; (8005300 <DMA2_Stream4_IRQHandler+0x6c>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	4b12      	ldr	r3, [pc, #72]	; (8005300 <DMA2_Stream4_IRQHandler+0x6c>)
 80052b6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <DMA2_Stream4_IRQHandler+0x74>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <DMA2_Stream4_IRQHandler+0x74>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	3304      	adds	r3, #4
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fc fd16 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <DMA2_Stream4_IRQHandler+0x6c>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <DMA2_Stream4_IRQHandler+0x4c>
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <DMA2_Stream4_IRQHandler+0x6c>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	3b01      	subs	r3, #1
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <DMA2_Stream4_IRQHandler+0x6c>)
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <DMA2_Stream4_IRQHandler+0x6c>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d109      	bne.n	80052fc <DMA2_Stream4_IRQHandler+0x68>
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <DMA2_Stream4_IRQHandler+0x70>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <DMA2_Stream4_IRQHandler+0x68>
 80052f0:	4b04      	ldr	r3, [pc, #16]	; (8005304 <DMA2_Stream4_IRQHandler+0x70>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	4b02      	ldr	r3, [pc, #8]	; (8005304 <DMA2_Stream4_IRQHandler+0x70>)
 80052fa:	701a      	strb	r2, [r3, #0]
}
 80052fc:	bf00      	nop
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	2000129e 	.word	0x2000129e
 8005304:	2000129d 	.word	0x2000129d
 8005308:	20000278 	.word	0x20000278

0800530c <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <DMA2_Stream5_IRQHandler+0x6c>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d105      	bne.n	8005324 <DMA2_Stream5_IRQHandler+0x18>
 8005318:	4b18      	ldr	r3, [pc, #96]	; (800537c <DMA2_Stream5_IRQHandler+0x70>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	b2da      	uxtb	r2, r3
 8005320:	4b16      	ldr	r3, [pc, #88]	; (800537c <DMA2_Stream5_IRQHandler+0x70>)
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <DMA2_Stream5_IRQHandler+0x6c>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <DMA2_Stream5_IRQHandler+0x6c>)
 800532e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 8005330:	4b13      	ldr	r3, [pc, #76]	; (8005380 <DMA2_Stream5_IRQHandler+0x74>)
 8005332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 8005338:	4b11      	ldr	r3, [pc, #68]	; (8005380 <DMA2_Stream5_IRQHandler+0x74>)
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	3304      	adds	r3, #4
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc fcda 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <DMA2_Stream5_IRQHandler+0x6c>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <DMA2_Stream5_IRQHandler+0x4c>
 800534c:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <DMA2_Stream5_IRQHandler+0x6c>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	3b01      	subs	r3, #1
 8005352:	b2da      	uxtb	r2, r3
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <DMA2_Stream5_IRQHandler+0x6c>)
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <DMA2_Stream5_IRQHandler+0x6c>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <DMA2_Stream5_IRQHandler+0x68>
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <DMA2_Stream5_IRQHandler+0x70>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <DMA2_Stream5_IRQHandler+0x68>
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <DMA2_Stream5_IRQHandler+0x70>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	3b01      	subs	r3, #1
 800536e:	b2da      	uxtb	r2, r3
 8005370:	4b02      	ldr	r3, [pc, #8]	; (800537c <DMA2_Stream5_IRQHandler+0x70>)
 8005372:	701a      	strb	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	bd80      	pop	{r7, pc}
 8005378:	2000129e 	.word	0x2000129e
 800537c:	2000129d 	.word	0x2000129d
 8005380:	20000278 	.word	0x20000278

08005384 <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <DMA2_Stream6_IRQHandler+0x6c>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d105      	bne.n	800539c <DMA2_Stream6_IRQHandler+0x18>
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <DMA2_Stream6_IRQHandler+0x70>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <DMA2_Stream6_IRQHandler+0x70>)
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <DMA2_Stream6_IRQHandler+0x6c>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <DMA2_Stream6_IRQHandler+0x6c>)
 80053a6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 80053a8:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <DMA2_Stream6_IRQHandler+0x74>)
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <DMA2_Stream6_IRQHandler+0x74>)
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	3304      	adds	r3, #4
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc fc9e 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <DMA2_Stream6_IRQHandler+0x6c>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <DMA2_Stream6_IRQHandler+0x4c>
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <DMA2_Stream6_IRQHandler+0x6c>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <DMA2_Stream6_IRQHandler+0x6c>)
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <DMA2_Stream6_IRQHandler+0x6c>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <DMA2_Stream6_IRQHandler+0x68>
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <DMA2_Stream6_IRQHandler+0x70>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <DMA2_Stream6_IRQHandler+0x68>
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <DMA2_Stream6_IRQHandler+0x70>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b02      	ldr	r3, [pc, #8]	; (80053f4 <DMA2_Stream6_IRQHandler+0x70>)
 80053ea:	701a      	strb	r2, [r3, #0]
}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	2000129e 	.word	0x2000129e
 80053f4:	2000129d 	.word	0x2000129d
 80053f8:	20000278 	.word	0x20000278

080053fc <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005400:	4b19      	ldr	r3, [pc, #100]	; (8005468 <DMA2_Stream7_IRQHandler+0x6c>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d105      	bne.n	8005414 <DMA2_Stream7_IRQHandler+0x18>
 8005408:	4b18      	ldr	r3, [pc, #96]	; (800546c <DMA2_Stream7_IRQHandler+0x70>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	3301      	adds	r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <DMA2_Stream7_IRQHandler+0x70>)
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <DMA2_Stream7_IRQHandler+0x6c>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b12      	ldr	r3, [pc, #72]	; (8005468 <DMA2_Stream7_IRQHandler+0x6c>)
 800541e:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <DMA2_Stream7_IRQHandler+0x74>)
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <DMA2_Stream7_IRQHandler+0x74>)
 800542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542c:	3304      	adds	r3, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f7fc fc62 	bl	8001cf8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <DMA2_Stream7_IRQHandler+0x6c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <DMA2_Stream7_IRQHandler+0x4c>
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <DMA2_Stream7_IRQHandler+0x6c>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	3b01      	subs	r3, #1
 8005442:	b2da      	uxtb	r2, r3
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <DMA2_Stream7_IRQHandler+0x6c>)
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	4b07      	ldr	r3, [pc, #28]	; (8005468 <DMA2_Stream7_IRQHandler+0x6c>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <DMA2_Stream7_IRQHandler+0x68>
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <DMA2_Stream7_IRQHandler+0x70>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <DMA2_Stream7_IRQHandler+0x68>
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <DMA2_Stream7_IRQHandler+0x70>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	3b01      	subs	r3, #1
 800545e:	b2da      	uxtb	r2, r3
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <DMA2_Stream7_IRQHandler+0x70>)
 8005462:	701a      	strb	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	bd80      	pop	{r7, pc}
 8005468:	2000129e 	.word	0x2000129e
 800546c:	2000129d 	.word	0x2000129d
 8005470:	20000278 	.word	0x20000278

08005474 <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 800547a:	2355      	movs	r3, #85	; 0x55
 800547c:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 800547e:	2300      	movs	r3, #0
 8005480:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 8005482:	2300      	movs	r3, #0
 8005484:	71bb      	strb	r3, [r7, #6]
 8005486:	e00e      	b.n	80054a6 <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	2b55      	cmp	r3, #85	; 0x55
 800548c:	d106      	bne.n	800549c <drv_gpioInit+0x28>
 800548e:	79bb      	ldrb	r3, [r7, #6]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f81b 	bl	80054cc <drv_gpioInitPin>
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
 800549a:	e001      	b.n	80054a0 <drv_gpioInit+0x2c>
 800549c:	23ae      	movs	r3, #174	; 0xae
 800549e:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 80054a0:	79bb      	ldrb	r3, [r7, #6]
 80054a2:	3301      	adds	r3, #1
 80054a4:	71bb      	strb	r3, [r7, #6]
 80054a6:	79ba      	ldrb	r2, [r7, #6]
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <drv_gpioInit+0x50>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4906      	ldr	r1, [pc, #24]	; (80054c8 <drv_gpioInit+0x54>)
 80054ae:	fba1 1303 	umull	r1, r3, r1, r3
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d3e7      	bcc.n	8005488 <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 80054b8:	79fb      	ldrb	r3, [r7, #7]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200002b8 	.word	0x200002b8
 80054c8:	aaaaaaab 	.word	0xaaaaaaab

080054cc <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 80054d6:	23ae      	movs	r3, #174	; 0xae
 80054d8:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	609a      	str	r2, [r3, #8]
 80054e6:	60da      	str	r2, [r3, #12]
 80054e8:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 80054ea:	79fa      	ldrb	r2, [r7, #7]
 80054ec:	4b27      	ldr	r3, [pc, #156]	; (800558c <drv_gpioInitPin+0xc0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4927      	ldr	r1, [pc, #156]	; (8005590 <drv_gpioInitPin+0xc4>)
 80054f2:	fba1 1303 	umull	r1, r3, r1, r3
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d241      	bcs.n	8005580 <drv_gpioInitPin+0xb4>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 80054fc:	79fa      	ldrb	r2, [r7, #7]
 80054fe:	4925      	ldr	r1, [pc, #148]	; (8005594 <drv_gpioInitPin+0xc8>)
 8005500:	4613      	mov	r3, r2
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	3304      	adds	r3, #4
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 8005510:	79fa      	ldrb	r2, [r7, #7]
 8005512:	4920      	ldr	r1, [pc, #128]	; (8005594 <drv_gpioInitPin+0xc8>)
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	440b      	add	r3, r1
 800551e:	3308      	adds	r3, #8
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 8005524:	79fa      	ldrb	r2, [r7, #7]
 8005526:	491b      	ldr	r1, [pc, #108]	; (8005594 <drv_gpioInitPin+0xc8>)
 8005528:	4613      	mov	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4413      	add	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	440b      	add	r3, r1
 8005532:	3310      	adds	r3, #16
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 8005538:	79fa      	ldrb	r2, [r7, #7]
 800553a:	4916      	ldr	r1, [pc, #88]	; (8005594 <drv_gpioInitPin+0xc8>)
 800553c:	4613      	mov	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4413      	add	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	440b      	add	r3, r1
 8005546:	330c      	adds	r3, #12
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 800554c:	79fa      	ldrb	r2, [r7, #7]
 800554e:	4911      	ldr	r1, [pc, #68]	; (8005594 <drv_gpioInitPin+0xc8>)
 8005550:	4613      	mov	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	440b      	add	r3, r1
 800555a:	3314      	adds	r3, #20
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 8005560:	79fa      	ldrb	r2, [r7, #7]
 8005562:	490c      	ldr	r1, [pc, #48]	; (8005594 <drv_gpioInitPin+0xc8>)
 8005564:	4613      	mov	r3, r2
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	4413      	add	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	440b      	add	r3, r1
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f107 0208 	add.w	r2, r7, #8
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f7fc fe34 	bl	80021e4 <HAL_GPIO_Init>

        gpioInitPinResult = GOS_SUCCESS;
 800557c:	2355      	movs	r3, #85	; 0x55
 800557e:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 8005580:	7ffb      	ldrb	r3, [r7, #31]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	200002b8 	.word	0x200002b8
 8005590:	aaaaaaab 	.word	0xaaaaaaab
 8005594:	0800fa7c 	.word	0x0800fa7c

08005598 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 80055a2:	23ae      	movs	r3, #174	; 0xae
 80055a4:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 80055a6:	79fa      	ldrb	r2, [r7, #7]
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <drv_gpioTgglePin+0x58>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4911      	ldr	r1, [pc, #68]	; (80055f4 <drv_gpioTgglePin+0x5c>)
 80055ae:	fba1 1303 	umull	r1, r3, r1, r3
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d215      	bcs.n	80055e4 <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 80055b8:	79fa      	ldrb	r2, [r7, #7]
 80055ba:	490f      	ldr	r1, [pc, #60]	; (80055f8 <drv_gpioTgglePin+0x60>)
 80055bc:	4613      	mov	r3, r2
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4413      	add	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	440b      	add	r3, r1
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	79fa      	ldrb	r2, [r7, #7]
 80055ca:	490b      	ldr	r1, [pc, #44]	; (80055f8 <drv_gpioTgglePin+0x60>)
 80055cc:	4613      	mov	r3, r2
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	4413      	add	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	440b      	add	r3, r1
 80055d6:	3304      	adds	r3, #4
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	f7fc ff96 	bl	800250c <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 80055e0:	2355      	movs	r3, #85	; 0x55
 80055e2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	200002b8 	.word	0x200002b8
 80055f4:	aaaaaaab 	.word	0xaaaaaaab
 80055f8:	0800fa7c 	.word	0x0800fa7c

080055fc <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005600:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <EXTI9_5_IRQHandler+0x7c>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <EXTI9_5_IRQHandler+0x18>
 8005608:	4b1c      	ldr	r3, [pc, #112]	; (800567c <EXTI9_5_IRQHandler+0x80>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <EXTI9_5_IRQHandler+0x80>)
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	4b18      	ldr	r3, [pc, #96]	; (8005678 <EXTI9_5_IRQHandler+0x7c>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	b2da      	uxtb	r2, r3
 800561c:	4b16      	ldr	r3, [pc, #88]	; (8005678 <EXTI9_5_IRQHandler+0x7c>)
 800561e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005620:	2020      	movs	r0, #32
 8005622:	f7fc ff8f 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005626:	2040      	movs	r0, #64	; 0x40
 8005628:	f7fc ff8c 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800562c:	2080      	movs	r0, #128	; 0x80
 800562e:	f7fc ff89 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005632:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005636:	f7fc ff85 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800563a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800563e:	f7fc ff81 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <EXTI9_5_IRQHandler+0x7c>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <EXTI9_5_IRQHandler+0x5a>
 800564a:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <EXTI9_5_IRQHandler+0x7c>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	3b01      	subs	r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <EXTI9_5_IRQHandler+0x7c>)
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	4b08      	ldr	r3, [pc, #32]	; (8005678 <EXTI9_5_IRQHandler+0x7c>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <EXTI9_5_IRQHandler+0x76>
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <EXTI9_5_IRQHandler+0x80>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <EXTI9_5_IRQHandler+0x76>
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <EXTI9_5_IRQHandler+0x80>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	3b01      	subs	r3, #1
 800566c:	b2da      	uxtb	r2, r3
 800566e:	4b03      	ldr	r3, [pc, #12]	; (800567c <EXTI9_5_IRQHandler+0x80>)
 8005670:	701a      	strb	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	2000129e 	.word	0x2000129e
 800567c:	2000129d 	.word	0x2000129d

08005680 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005684:	4b20      	ldr	r3, [pc, #128]	; (8005708 <EXTI15_10_IRQHandler+0x88>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <EXTI15_10_IRQHandler+0x18>
 800568c:	4b1f      	ldr	r3, [pc, #124]	; (800570c <EXTI15_10_IRQHandler+0x8c>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	b2da      	uxtb	r2, r3
 8005694:	4b1d      	ldr	r3, [pc, #116]	; (800570c <EXTI15_10_IRQHandler+0x8c>)
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <EXTI15_10_IRQHandler+0x88>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <EXTI15_10_IRQHandler+0x88>)
 80056a2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80056a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80056a8:	f7fc ff4c 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80056ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056b0:	f7fc ff48 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80056b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80056b8:	f7fc ff44 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80056bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056c0:	f7fc ff40 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80056c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80056c8:	f7fc ff3c 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80056cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056d0:	f7fc ff38 	bl	8002544 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <EXTI15_10_IRQHandler+0x88>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <EXTI15_10_IRQHandler+0x68>
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <EXTI15_10_IRQHandler+0x88>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	4b08      	ldr	r3, [pc, #32]	; (8005708 <EXTI15_10_IRQHandler+0x88>)
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	4b07      	ldr	r3, [pc, #28]	; (8005708 <EXTI15_10_IRQHandler+0x88>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <EXTI15_10_IRQHandler+0x84>
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <EXTI15_10_IRQHandler+0x8c>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <EXTI15_10_IRQHandler+0x84>
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <EXTI15_10_IRQHandler+0x8c>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	4b02      	ldr	r3, [pc, #8]	; (800570c <EXTI15_10_IRQHandler+0x8c>)
 8005702:	701a      	strb	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2000129e 	.word	0x2000129e
 800570c:	2000129d 	.word	0x2000129d

08005710 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 800571a:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d105      	bne.n	800572e <HAL_GPIO_EXTI_Callback+0x1e>
 8005722:	4b26      	ldr	r3, [pc, #152]	; (80057bc <HAL_GPIO_EXTI_Callback+0xac>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4b24      	ldr	r3, [pc, #144]	; (80057bc <HAL_GPIO_EXTI_Callback+0xac>)
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005738:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
 8005742:	e016      	b.n	8005772 <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	4413      	add	r3, r2
 800574c:	889b      	ldrh	r3, [r3, #4]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	429a      	cmp	r2, r3
 8005752:	d10b      	bne.n	800576c <HAL_GPIO_EXTI_Callback+0x5c>
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8005758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8005764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005768:	4798      	blx	r3
                break;
 800576a:	e008      	b.n	800577e <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	3301      	adds	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
 8005772:	7bfa      	ldrb	r2, [r7, #15]
 8005774:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	429a      	cmp	r2, r3
 800577c:	d3e2      	bcc.n	8005744 <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 800577e:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_GPIO_EXTI_Callback+0x82>
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	3b01      	subs	r3, #1
 800578c:	b2da      	uxtb	r2, r3
 800578e:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <HAL_GPIO_EXTI_Callback+0x9e>
 800579a:	4b08      	ldr	r3, [pc, #32]	; (80057bc <HAL_GPIO_EXTI_Callback+0xac>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_GPIO_EXTI_Callback+0x9e>
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_GPIO_EXTI_Callback+0xac>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4b04      	ldr	r3, [pc, #16]	; (80057bc <HAL_GPIO_EXTI_Callback+0xac>)
 80057ac:	701a      	strb	r2, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	2000129e 	.word	0x2000129e
 80057bc:	2000129d 	.word	0x2000129d
 80057c0:	0800fb0c 	.word	0x0800fb0c
 80057c4:	200002bc 	.word	0x200002bc

080057c8 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 80057ce:	23ae      	movs	r3, #174	; 0xae
 80057d0:	71bb      	strb	r3, [r7, #6]
    u8_t         itIdx              = 0u;
 80057d2:	2300      	movs	r3, #0
 80057d4:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	71fb      	strb	r3, [r7, #7]
 80057da:	e02c      	b.n	8005836 <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 80057dc:	79fa      	ldrb	r2, [r7, #7]
 80057de:	491e      	ldr	r1, [pc, #120]	; (8005858 <drv_itInit+0x90>)
 80057e0:	4613      	mov	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	f993 0000 	ldrsb.w	r0, [r3]
 80057ee:	79fa      	ldrb	r2, [r7, #7]
 80057f0:	4919      	ldr	r1, [pc, #100]	; (8005858 <drv_itInit+0x90>)
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	3304      	adds	r3, #4
 80057fe:	6819      	ldr	r1, [r3, #0]
 8005800:	79fa      	ldrb	r2, [r7, #7]
 8005802:	4c15      	ldr	r4, [pc, #84]	; (8005858 <drv_itInit+0x90>)
 8005804:	4613      	mov	r3, r2
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4423      	add	r3, r4
 800580e:	3308      	adds	r3, #8
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	f7fc f8a1 	bl	800195a <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 8005818:	79fa      	ldrb	r2, [r7, #7]
 800581a:	490f      	ldr	r1, [pc, #60]	; (8005858 <drv_itInit+0x90>)
 800581c:	4613      	mov	r3, r2
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	f993 3000 	ldrsb.w	r3, [r3]
 800582a:	4618      	mov	r0, r3
 800582c:	f7fc f8b1 	bl	8001992 <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	3301      	adds	r3, #1
 8005834:	71fb      	strb	r3, [r7, #7]
 8005836:	79fa      	ldrb	r2, [r7, #7]
 8005838:	4b08      	ldr	r3, [pc, #32]	; (800585c <drv_itInit+0x94>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4908      	ldr	r1, [pc, #32]	; (8005860 <drv_itInit+0x98>)
 800583e:	fba1 1303 	umull	r1, r3, r1, r3
 8005842:	08db      	lsrs	r3, r3, #3
 8005844:	429a      	cmp	r2, r3
 8005846:	d3c9      	bcc.n	80057dc <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 8005848:	2355      	movs	r3, #85	; 0x55
 800584a:	71bb      	strb	r3, [r7, #6]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 800584c:	79bb      	ldrb	r3, [r7, #6]
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	bd90      	pop	{r4, r7, pc}
 8005856:	bf00      	nop
 8005858:	0800fb14 	.word	0x0800fb14
 800585c:	200002c0 	.word	0x200002c0
 8005860:	aaaaaaab 	.word	0xaaaaaaab

08005864 <drv_shellTransmitString>:

/*
 * Function: drv_shellTransmitString
 */
GOS_INLINE gos_result_t drv_shellTransmitString (char_t* pString)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af02      	add	r7, sp, #8
 800586a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800586c:	23ae      	movs	r3, #174	; 0xae
 800586e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8005870:	2300      	movs	r3, #0
 8005872:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <drv_shellTransmitString+0x44>)
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pString, strlen(pString),
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fa fd28 	bl	80002d0 <strlen>
 8005880:	4603      	mov	r3, r0
 8005882:	b29a      	uxth	r2, r3
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <drv_shellTransmitString+0x48>)
 8005886:	6959      	ldr	r1, [r3, #20]
 8005888:	4b08      	ldr	r3, [pc, #32]	; (80058ac <drv_shellTransmitString+0x48>)
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	7bb8      	ldrb	r0, [r7, #14]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	460b      	mov	r3, r1
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	f000 fa82 	bl	8005d9c <drv_uartTransmitIT>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	0800fba0 	.word	0x0800fba0
 80058ac:	200002c4 	.word	0x200002c4

080058b0 <drv_shellReceiveChar>:

/*
 * Function: drv_shellReceiveChar
 */
GOS_INLINE gos_result_t drv_shellReceiveChar (char_t* pBuffer)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 80058b8:	23ae      	movs	r3, #174	; 0xae
 80058ba:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 80058bc:	2300      	movs	r3, #0
 80058be:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <drv_shellReceiveChar+0x3c>)
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveIT(instance, (u8_t*)pBuffer, sizeof(char_t),
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <drv_shellReceiveChar+0x40>)
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <drv_shellReceiveChar+0x40>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	7bb8      	ldrb	r0, [r7, #14]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	4613      	mov	r3, r2
 80058d4:	2201      	movs	r2, #1
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	f000 fad0 	bl	8005e7c <drv_uartReceiveIT>
 80058dc:	4603      	mov	r3, r0
 80058de:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	0800fba0 	.word	0x0800fba0
 80058f0:	200002c4 	.word	0x200002c4

080058f4 <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 80058fc:	23ae      	movs	r3, #174	; 0xae
 80058fe:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8005900:	2300      	movs	r3, #0
 8005902:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <drv_traceTransmitUnsafe+0x3c>)
 8005906:	789b      	ldrb	r3, [r3, #2]
 8005908:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fa fce0 	bl	80002d0 <strlen>
 8005910:	4603      	mov	r3, r0
 8005912:	b29a      	uxth	r2, r3
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <drv_traceTransmitUnsafe+0x40>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	7bb8      	ldrb	r0, [r7, #14]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	f000 f982 	bl	8005c24 <drv_uartTransmitBlocking>
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	0800fba0 	.word	0x0800fba0
 8005934:	200002c4 	.word	0x200002c4

08005938 <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8005940:	23ae      	movs	r3, #174	; 0xae
 8005942:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8005944:	2300      	movs	r3, #0
 8005946:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <drv_traceTransmit+0x44>)
 800594a:	789b      	ldrb	r3, [r3, #2]
 800594c:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fa fcbe 	bl	80002d0 <strlen>
 8005954:	4603      	mov	r3, r0
 8005956:	b29a      	uxth	r2, r3
 8005958:	4b09      	ldr	r3, [pc, #36]	; (8005980 <drv_traceTransmit+0x48>)
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	4b08      	ldr	r3, [pc, #32]	; (8005980 <drv_traceTransmit+0x48>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	7bb8      	ldrb	r0, [r7, #14]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	460b      	mov	r3, r1
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	f000 f9a8 	bl	8005cbc <drv_uartTransmitDMA>
 800596c:	4603      	mov	r3, r0
 800596e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	0800fba0 	.word	0x0800fba0
 8005980:	200002c4 	.word	0x200002c4

08005984 <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 800598a:	2355      	movs	r3, #85	; 0x55
 800598c:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 800598e:	2300      	movs	r3, #0
 8005990:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 8005992:	2300      	movs	r3, #0
 8005994:	71bb      	strb	r3, [r7, #6]
 8005996:	e00e      	b.n	80059b6 <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	2b55      	cmp	r3, #85	; 0x55
 800599c:	d106      	bne.n	80059ac <drv_uartInit+0x28>
 800599e:	79bb      	ldrb	r3, [r7, #6]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 f81b 	bl	80059dc <drv_uartInitInstance>
 80059a6:	4603      	mov	r3, r0
 80059a8:	71fb      	strb	r3, [r7, #7]
 80059aa:	e001      	b.n	80059b0 <drv_uartInit+0x2c>
 80059ac:	23ae      	movs	r3, #174	; 0xae
 80059ae:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 80059b0:	79bb      	ldrb	r3, [r7, #6]
 80059b2:	3301      	adds	r3, #1
 80059b4:	71bb      	strb	r3, [r7, #6]
 80059b6:	79ba      	ldrb	r2, [r7, #6]
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <drv_uartInit+0x50>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4906      	ldr	r1, [pc, #24]	; (80059d8 <drv_uartInit+0x54>)
 80059be:	fba1 1303 	umull	r1, r3, r1, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d3e7      	bcc.n	8005998 <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 80059c8:	79fb      	ldrb	r3, [r7, #7]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	200002f0 	.word	0x200002f0
 80059d8:	cccccccd 	.word	0xcccccccd

080059dc <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 80059e6:	23ae      	movs	r3, #174	; 0xae
 80059e8:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 80059ee:	79fa      	ldrb	r2, [r7, #7]
 80059f0:	4b82      	ldr	r3, [pc, #520]	; (8005bfc <drv_uartInitInstance+0x220>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4982      	ldr	r1, [pc, #520]	; (8005c00 <drv_uartInitInstance+0x224>)
 80059f6:	fba1 1303 	umull	r1, r3, r1, r3
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	429a      	cmp	r2, r3
 80059fe:	f080 80f2 	bcs.w	8005be6 <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 8005a02:	79fa      	ldrb	r2, [r7, #7]
 8005a04:	497f      	ldr	r1, [pc, #508]	; (8005c04 <drv_uartInitInstance+0x228>)
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	440b      	add	r3, r1
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 8005a14:	7bbb      	ldrb	r3, [r7, #14]
 8005a16:	7bba      	ldrb	r2, [r7, #14]
 8005a18:	497b      	ldr	r1, [pc, #492]	; (8005c08 <drv_uartInitInstance+0x22c>)
 8005a1a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a1e:	487b      	ldr	r0, [pc, #492]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005a20:	4613      	mov	r3, r2
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4403      	add	r3, r0
 8005a2a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 8005a2c:	79f9      	ldrb	r1, [r7, #7]
 8005a2e:	7bba      	ldrb	r2, [r7, #14]
 8005a30:	4874      	ldr	r0, [pc, #464]	; (8005c04 <drv_uartInitInstance+0x228>)
 8005a32:	460b      	mov	r3, r1
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4403      	add	r3, r0
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	4872      	ldr	r0, [pc, #456]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005a42:	4613      	mov	r3, r2
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4403      	add	r3, r0
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 8005a50:	79f9      	ldrb	r1, [r7, #7]
 8005a52:	7bba      	ldrb	r2, [r7, #14]
 8005a54:	486b      	ldr	r0, [pc, #428]	; (8005c04 <drv_uartInitInstance+0x228>)
 8005a56:	460b      	mov	r3, r1
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4403      	add	r3, r0
 8005a60:	3308      	adds	r3, #8
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	4869      	ldr	r0, [pc, #420]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005a66:	4613      	mov	r3, r2
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4403      	add	r3, r0
 8005a70:	3308      	adds	r3, #8
 8005a72:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 8005a74:	79f9      	ldrb	r1, [r7, #7]
 8005a76:	7bba      	ldrb	r2, [r7, #14]
 8005a78:	4862      	ldr	r0, [pc, #392]	; (8005c04 <drv_uartInitInstance+0x228>)
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4403      	add	r3, r0
 8005a84:	330c      	adds	r3, #12
 8005a86:	6819      	ldr	r1, [r3, #0]
 8005a88:	4860      	ldr	r0, [pc, #384]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4403      	add	r3, r0
 8005a94:	330c      	adds	r3, #12
 8005a96:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 8005a98:	79f9      	ldrb	r1, [r7, #7]
 8005a9a:	7bba      	ldrb	r2, [r7, #14]
 8005a9c:	4859      	ldr	r0, [pc, #356]	; (8005c04 <drv_uartInitInstance+0x228>)
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4403      	add	r3, r0
 8005aa8:	3310      	adds	r3, #16
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	4857      	ldr	r0, [pc, #348]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005aae:	4613      	mov	r3, r2
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4403      	add	r3, r0
 8005ab8:	3310      	adds	r3, #16
 8005aba:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 8005abc:	79f9      	ldrb	r1, [r7, #7]
 8005abe:	7bba      	ldrb	r2, [r7, #14]
 8005ac0:	4850      	ldr	r0, [pc, #320]	; (8005c04 <drv_uartInitInstance+0x228>)
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4403      	add	r3, r0
 8005acc:	3314      	adds	r3, #20
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	484e      	ldr	r0, [pc, #312]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4403      	add	r3, r0
 8005adc:	3314      	adds	r3, #20
 8005ade:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 8005ae0:	79f9      	ldrb	r1, [r7, #7]
 8005ae2:	7bba      	ldrb	r2, [r7, #14]
 8005ae4:	4847      	ldr	r0, [pc, #284]	; (8005c04 <drv_uartInitInstance+0x228>)
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4403      	add	r3, r0
 8005af0:	3318      	adds	r3, #24
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	4845      	ldr	r0, [pc, #276]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005af6:	4613      	mov	r3, r2
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4403      	add	r3, r0
 8005b00:	3318      	adds	r3, #24
 8005b02:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 8005b04:	79f9      	ldrb	r1, [r7, #7]
 8005b06:	7bba      	ldrb	r2, [r7, #14]
 8005b08:	483e      	ldr	r0, [pc, #248]	; (8005c04 <drv_uartInitInstance+0x228>)
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4403      	add	r3, r0
 8005b14:	331c      	adds	r3, #28
 8005b16:	6819      	ldr	r1, [r3, #0]
 8005b18:	483c      	ldr	r0, [pc, #240]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4403      	add	r3, r0
 8005b24:	331c      	adds	r3, #28
 8005b26:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 8005b28:	7bba      	ldrb	r2, [r7, #14]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4a36      	ldr	r2, [pc, #216]	; (8005c0c <drv_uartInitInstance+0x230>)
 8005b34:	4413      	add	r3, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fd fbba 	bl	80032b0 <HAL_UART_Init>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d14a      	bne.n	8005bd8 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4a32      	ldr	r2, [pc, #200]	; (8005c10 <drv_uartInitInstance+0x234>)
 8005b48:	4413      	add	r3, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f003 fe72 	bl	8009834 <gos_mutexInit>
 8005b50:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 8005b52:	2b55      	cmp	r3, #85	; 0x55
 8005b54:	d140      	bne.n	8005bd8 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a2e      	ldr	r2, [pc, #184]	; (8005c14 <drv_uartInitInstance+0x238>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f003 fe68 	bl	8009834 <gos_mutexInit>
 8005b64:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 8005b66:	2b55      	cmp	r3, #85	; 0x55
 8005b68:	d136      	bne.n	8005bd8 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8005b6a:	7bba      	ldrb	r2, [r7, #14]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a28      	ldr	r2, [pc, #160]	; (8005c18 <drv_uartInitInstance+0x23c>)
 8005b76:	4413      	add	r3, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f005 fdd1 	bl	800b720 <gos_triggerInit>
 8005b7e:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 8005b80:	2b55      	cmp	r3, #85	; 0x55
 8005b82:	d129      	bne.n	8005bd8 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8005b84:	7bba      	ldrb	r2, [r7, #14]
 8005b86:	4613      	mov	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4a23      	ldr	r2, [pc, #140]	; (8005c1c <drv_uartInitInstance+0x240>)
 8005b90:	4413      	add	r3, r2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f005 fdc4 	bl	800b720 <gos_triggerInit>
 8005b98:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8005b9a:	2b55      	cmp	r3, #85	; 0x55
 8005b9c:	d11c      	bne.n	8005bd8 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8005b9e:	7bba      	ldrb	r2, [r7, #14]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <drv_uartInitInstance+0x23c>)
 8005baa:	4413      	add	r3, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f005 fdd3 	bl	800b758 <gos_triggerReset>
 8005bb2:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8005bb4:	2b55      	cmp	r3, #85	; 0x55
 8005bb6:	d10f      	bne.n	8005bd8 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 8005bb8:	7bba      	ldrb	r2, [r7, #14]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <drv_uartInitInstance+0x240>)
 8005bc4:	4413      	add	r3, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f005 fdc6 	bl	800b758 <gos_triggerReset>
 8005bcc:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8005bce:	2b55      	cmp	r3, #85	; 0x55
 8005bd0:	d102      	bne.n	8005bd8 <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 8005bd2:	2355      	movs	r3, #85	; 0x55
 8005bd4:	73fb      	strb	r3, [r7, #15]
 8005bd6:	e00c      	b.n	8005bf2 <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <drv_uartInitInstance+0x244>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f043 0304 	orr.w	r3, r3, #4
 8005be0:	4a0f      	ldr	r2, [pc, #60]	; (8005c20 <drv_uartInitInstance+0x244>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e005      	b.n	8005bf2 <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 8005be6:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <drv_uartInitInstance+0x244>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f043 0302 	orr.w	r3, r3, #2
 8005bee:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <drv_uartInitInstance+0x244>)
 8005bf0:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200002f0 	.word	0x200002f0
 8005c00:	cccccccd 	.word	0xcccccccd
 8005c04:	0800fb50 	.word	0x0800fb50
 8005c08:	2000033c 	.word	0x2000033c
 8005c0c:	20001028 	.word	0x20001028
 8005c10:	200011c0 	.word	0x200011c0
 8005c14:	200011d8 	.word	0x200011d8
 8005c18:	200011f0 	.word	0x200011f0
 8005c1c:	20001238 	.word	0x20001238
 8005c20:	20001024 	.word	0x20001024

08005c24 <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73fb      	strb	r3, [r7, #15]
 8005c32:	4613      	mov	r3, r2
 8005c34:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8005c36:	23ae      	movs	r3, #174	; 0xae
 8005c38:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8005c3a:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <drv_uartTransmitBlocking+0x8c>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <drv_uartTransmitBlocking+0x8c>)
 8005c44:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 8005c46:	7bfa      	ldrb	r2, [r7, #15]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <drv_uartTransmitBlocking+0x90>)
 8005c52:	4413      	add	r3, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fd fcfd 	bl	8003654 <HAL_UART_Abort>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d111      	bne.n	8005c84 <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 8005c60:	7bfa      	ldrb	r2, [r7, #15]
 8005c62:	4613      	mov	r3, r2
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4a12      	ldr	r2, [pc, #72]	; (8005cb4 <drv_uartTransmitBlocking+0x90>)
 8005c6c:	1898      	adds	r0, r3, r2
 8005c6e:	89ba      	ldrh	r2, [r7, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	f7fd fb69 	bl	800334a <HAL_UART_Transmit>
 8005c78:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 8005c7e:	2355      	movs	r3, #85	; 0x55
 8005c80:	75fb      	strb	r3, [r7, #23]
 8005c82:	e005      	b.n	8005c90 <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 8005c84:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <drv_uartTransmitBlocking+0x94>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f043 0310 	orr.w	r3, r3, #16
 8005c8c:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <drv_uartTransmitBlocking+0x94>)
 8005c8e:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <drv_uartTransmitBlocking+0x8c>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <drv_uartTransmitBlocking+0x80>
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <drv_uartTransmitBlocking+0x8c>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <drv_uartTransmitBlocking+0x8c>)
 8005ca2:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	2000129d 	.word	0x2000129d
 8005cb4:	20001028 	.word	0x20001028
 8005cb8:	20001024 	.word	0x20001024

08005cbc <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73fb      	strb	r3, [r7, #15]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8005cce:	23ae      	movs	r3, #174	; 0xae
 8005cd0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a2d      	ldr	r2, [pc, #180]	; (8005d8c <drv_uartTransmitDMA+0xd0>)
 8005cd8:	4413      	add	r3, r2
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f003 fdc3 	bl	8009868 <gos_mutexLock>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b55      	cmp	r3, #85	; 0x55
 8005ce6:	d13e      	bne.n	8005d66 <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 8005ce8:	7bfa      	ldrb	r2, [r7, #15]
 8005cea:	4613      	mov	r3, r2
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4a27      	ldr	r2, [pc, #156]	; (8005d90 <drv_uartTransmitDMA+0xd4>)
 8005cf4:	4413      	add	r3, r2
 8005cf6:	89ba      	ldrh	r2, [r7, #12]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fd fc2c 	bl	8003558 <HAL_UART_Transmit_DMA>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11e      	bne.n	8005d44 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4a20      	ldr	r2, [pc, #128]	; (8005d94 <drv_uartTransmitDMA+0xd8>)
 8005d12:	4413      	add	r3, r2
 8005d14:	6a3a      	ldr	r2, [r7, #32]
 8005d16:	2101      	movs	r1, #1
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f005 fd75 	bl	800b808 <gos_triggerWait>
 8005d1e:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 8005d20:	2b55      	cmp	r3, #85	; 0x55
 8005d22:	d10f      	bne.n	8005d44 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 8005d24:	7bfa      	ldrb	r2, [r7, #15]
 8005d26:	4613      	mov	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4a19      	ldr	r2, [pc, #100]	; (8005d94 <drv_uartTransmitDMA+0xd8>)
 8005d30:	4413      	add	r3, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f005 fd10 	bl	800b758 <gos_triggerReset>
 8005d38:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8005d3a:	2b55      	cmp	r3, #85	; 0x55
 8005d3c:	d102      	bne.n	8005d44 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 8005d3e:	2355      	movs	r3, #85	; 0x55
 8005d40:	75fb      	strb	r3, [r7, #23]
 8005d42:	e016      	b.n	8005d72 <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8005d44:	7bfa      	ldrb	r2, [r7, #15]
 8005d46:	4613      	mov	r3, r2
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4a10      	ldr	r2, [pc, #64]	; (8005d90 <drv_uartTransmitDMA+0xd4>)
 8005d50:	4413      	add	r3, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fd fd6a 	bl	800382c <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 8005d58:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <drv_uartTransmitDMA+0xdc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d60:	4a0d      	ldr	r2, [pc, #52]	; (8005d98 <drv_uartTransmitDMA+0xdc>)
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	e005      	b.n	8005d72 <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <drv_uartTransmitDMA+0xdc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f043 0320 	orr.w	r3, r3, #32
 8005d6e:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <drv_uartTransmitDMA+0xdc>)
 8005d70:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a05      	ldr	r2, [pc, #20]	; (8005d8c <drv_uartTransmitDMA+0xd0>)
 8005d78:	4413      	add	r3, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f003 fe7a 	bl	8009a74 <gos_mutexUnlock>

    return uartTransmitResult;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200011d8 	.word	0x200011d8
 8005d90:	20001028 	.word	0x20001028
 8005d94:	20001238 	.word	0x20001238
 8005d98:	20001024 	.word	0x20001024

08005d9c <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	4603      	mov	r3, r0
 8005da8:	73fb      	strb	r3, [r7, #15]
 8005daa:	4613      	mov	r3, r2
 8005dac:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8005dae:	23ae      	movs	r3, #174	; 0xae
 8005db0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a2d      	ldr	r2, [pc, #180]	; (8005e6c <drv_uartTransmitIT+0xd0>)
 8005db8:	4413      	add	r3, r2
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f003 fd53 	bl	8009868 <gos_mutexLock>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b55      	cmp	r3, #85	; 0x55
 8005dc6:	d13e      	bne.n	8005e46 <drv_uartTransmitIT+0xaa>
    {
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 8005dc8:	7bfa      	ldrb	r2, [r7, #15]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4a27      	ldr	r2, [pc, #156]	; (8005e70 <drv_uartTransmitIT+0xd4>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	89ba      	ldrh	r2, [r7, #12]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fd fb47 	bl	800346e <HAL_UART_Transmit_IT>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11e      	bne.n	8005e24 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8005de6:	7bfa      	ldrb	r2, [r7, #15]
 8005de8:	4613      	mov	r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <drv_uartTransmitIT+0xd8>)
 8005df2:	4413      	add	r3, r2
 8005df4:	6a3a      	ldr	r2, [r7, #32]
 8005df6:	2101      	movs	r1, #1
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f005 fd05 	bl	800b808 <gos_triggerWait>
 8005dfe:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 8005e00:	2b55      	cmp	r3, #85	; 0x55
 8005e02:	d10f      	bne.n	8005e24 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 8005e04:	7bfa      	ldrb	r2, [r7, #15]
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <drv_uartTransmitIT+0xd8>)
 8005e10:	4413      	add	r3, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f005 fca0 	bl	800b758 <gos_triggerReset>
 8005e18:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8005e1a:	2b55      	cmp	r3, #85	; 0x55
 8005e1c:	d102      	bne.n	8005e24 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 8005e1e:	2355      	movs	r3, #85	; 0x55
 8005e20:	75fb      	strb	r3, [r7, #23]
 8005e22:	e016      	b.n	8005e52 <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8005e24:	7bfa      	ldrb	r2, [r7, #15]
 8005e26:	4613      	mov	r3, r2
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4a10      	ldr	r2, [pc, #64]	; (8005e70 <drv_uartTransmitIT+0xd4>)
 8005e30:	4413      	add	r3, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fd fcfa 	bl	800382c <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <drv_uartTransmitIT+0xdc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e40:	4a0d      	ldr	r2, [pc, #52]	; (8005e78 <drv_uartTransmitIT+0xdc>)
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	e005      	b.n	8005e52 <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 8005e46:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <drv_uartTransmitIT+0xdc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <drv_uartTransmitIT+0xdc>)
 8005e50:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4a05      	ldr	r2, [pc, #20]	; (8005e6c <drv_uartTransmitIT+0xd0>)
 8005e58:	4413      	add	r3, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f003 fe0a 	bl	8009a74 <gos_mutexUnlock>

    return uartTransmitResult;
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	200011d8 	.word	0x200011d8
 8005e70:	20001028 	.word	0x20001028
 8005e74:	20001238 	.word	0x20001238
 8005e78:	20001024 	.word	0x20001024

08005e7c <drv_uartReceiveIT>:

/*
 * Function: drv_uartReceiveIT
 */
GOS_INLINE gos_result_t drv_uartReceiveIT (drv_uartPeriphInstance_t instance, u8_t* message, u16_t size, u32_t mutexTmo, u32_t triggerTmo)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	4603      	mov	r3, r0
 8005e88:	73fb      	strb	r3, [r7, #15]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult  = GOS_ERROR;
 8005e8e:	23ae      	movs	r3, #174	; 0xae
 8005e90:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4a2d      	ldr	r2, [pc, #180]	; (8005f4c <drv_uartReceiveIT+0xd0>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f003 fce3 	bl	8009868 <gos_mutexLock>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b55      	cmp	r3, #85	; 0x55
 8005ea6:	d13e      	bne.n	8005f26 <drv_uartReceiveIT+0xaa>
    {
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 8005ea8:	7bfa      	ldrb	r2, [r7, #15]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <drv_uartReceiveIT+0xd4>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	89ba      	ldrh	r2, [r7, #12]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fd fb1c 	bl	80034f8 <HAL_UART_Receive_IT>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d11e      	bne.n	8005f04 <drv_uartReceiveIT+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8005ec6:	7bfa      	ldrb	r2, [r7, #15]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a20      	ldr	r2, [pc, #128]	; (8005f54 <drv_uartReceiveIT+0xd8>)
 8005ed2:	4413      	add	r3, r2
 8005ed4:	6a3a      	ldr	r2, [r7, #32]
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f005 fc95 	bl	800b808 <gos_triggerWait>
 8005ede:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 8005ee0:	2b55      	cmp	r3, #85	; 0x55
 8005ee2:	d10f      	bne.n	8005f04 <drv_uartReceiveIT+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 8005ee4:	7bfa      	ldrb	r2, [r7, #15]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <drv_uartReceiveIT+0xd8>)
 8005ef0:	4413      	add	r3, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f005 fc30 	bl	800b758 <gos_triggerReset>
 8005ef8:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8005efa:	2b55      	cmp	r3, #85	; 0x55
 8005efc:	d102      	bne.n	8005f04 <drv_uartReceiveIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 8005efe:	2355      	movs	r3, #85	; 0x55
 8005f00:	75fb      	strb	r3, [r7, #23]
 8005f02:	e016      	b.n	8005f32 <drv_uartReceiveIT+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8005f04:	7bfa      	ldrb	r2, [r7, #15]
 8005f06:	4613      	mov	r3, r2
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4a10      	ldr	r2, [pc, #64]	; (8005f50 <drv_uartReceiveIT+0xd4>)
 8005f10:	4413      	add	r3, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fd fc8a 	bl	800382c <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_TRIG_HAL);
 8005f18:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <drv_uartReceiveIT+0xdc>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f20:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <drv_uartReceiveIT+0xdc>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e005      	b.n	8005f32 <drv_uartReceiveIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_MUTEX);
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <drv_uartReceiveIT+0xdc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	; (8005f58 <drv_uartReceiveIT+0xdc>)
 8005f30:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4a05      	ldr	r2, [pc, #20]	; (8005f4c <drv_uartReceiveIT+0xd0>)
 8005f38:	4413      	add	r3, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f003 fd9a 	bl	8009a74 <gos_mutexUnlock>

    return uartReceiveResult;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200011c0 	.word	0x200011c0
 8005f50:	20001028 	.word	0x20001028
 8005f54:	200011f0 	.word	0x200011f0
 8005f58:	20001024 	.word	0x20001024

08005f5c <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8005f60:	4b16      	ldr	r3, [pc, #88]	; (8005fbc <USART1_IRQHandler+0x60>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d105      	bne.n	8005f74 <USART1_IRQHandler+0x18>
 8005f68:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <USART1_IRQHandler+0x64>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <USART1_IRQHandler+0x64>)
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <USART1_IRQHandler+0x60>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <USART1_IRQHandler+0x60>)
 8005f7e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 8005f80:	4810      	ldr	r0, [pc, #64]	; (8005fc4 <USART1_IRQHandler+0x68>)
 8005f82:	f7fd fd67 	bl	8003a54 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <USART1_IRQHandler+0x60>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <USART1_IRQHandler+0x3e>
 8005f8e:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <USART1_IRQHandler+0x60>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <USART1_IRQHandler+0x60>)
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <USART1_IRQHandler+0x60>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <USART1_IRQHandler+0x5a>
 8005fa2:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <USART1_IRQHandler+0x64>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <USART1_IRQHandler+0x5a>
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <USART1_IRQHandler+0x64>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <USART1_IRQHandler+0x64>)
 8005fb4:	701a      	strb	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	2000129e 	.word	0x2000129e
 8005fc0:	2000129d 	.word	0x2000129d
 8005fc4:	20001028 	.word	0x20001028

08005fc8 <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8005fcc:	4b16      	ldr	r3, [pc, #88]	; (8006028 <USART2_IRQHandler+0x60>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <USART2_IRQHandler+0x18>
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <USART2_IRQHandler+0x64>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	4b13      	ldr	r3, [pc, #76]	; (800602c <USART2_IRQHandler+0x64>)
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	4b11      	ldr	r3, [pc, #68]	; (8006028 <USART2_IRQHandler+0x60>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <USART2_IRQHandler+0x60>)
 8005fea:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 8005fec:	4810      	ldr	r0, [pc, #64]	; (8006030 <USART2_IRQHandler+0x68>)
 8005fee:	f7fd fd31 	bl	8003a54 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <USART2_IRQHandler+0x60>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <USART2_IRQHandler+0x3e>
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <USART2_IRQHandler+0x60>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b2da      	uxtb	r2, r3
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <USART2_IRQHandler+0x60>)
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	4b08      	ldr	r3, [pc, #32]	; (8006028 <USART2_IRQHandler+0x60>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <USART2_IRQHandler+0x5a>
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <USART2_IRQHandler+0x64>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <USART2_IRQHandler+0x5a>
 8006016:	4b05      	ldr	r3, [pc, #20]	; (800602c <USART2_IRQHandler+0x64>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	3b01      	subs	r3, #1
 800601c:	b2da      	uxtb	r2, r3
 800601e:	4b03      	ldr	r3, [pc, #12]	; (800602c <USART2_IRQHandler+0x64>)
 8006020:	701a      	strb	r2, [r3, #0]
}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	2000129e 	.word	0x2000129e
 800602c:	2000129d 	.word	0x2000129d
 8006030:	2000106c 	.word	0x2000106c

08006034 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8006038:	4b16      	ldr	r3, [pc, #88]	; (8006094 <USART3_IRQHandler+0x60>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <USART3_IRQHandler+0x18>
 8006040:	4b15      	ldr	r3, [pc, #84]	; (8006098 <USART3_IRQHandler+0x64>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	b2da      	uxtb	r2, r3
 8006048:	4b13      	ldr	r3, [pc, #76]	; (8006098 <USART3_IRQHandler+0x64>)
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	4b11      	ldr	r3, [pc, #68]	; (8006094 <USART3_IRQHandler+0x60>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <USART3_IRQHandler+0x60>)
 8006056:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 8006058:	4810      	ldr	r0, [pc, #64]	; (800609c <USART3_IRQHandler+0x68>)
 800605a:	f7fd fcfb 	bl	8003a54 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <USART3_IRQHandler+0x60>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <USART3_IRQHandler+0x3e>
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <USART3_IRQHandler+0x60>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	3b01      	subs	r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <USART3_IRQHandler+0x60>)
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <USART3_IRQHandler+0x60>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <USART3_IRQHandler+0x5a>
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <USART3_IRQHandler+0x64>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <USART3_IRQHandler+0x5a>
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <USART3_IRQHandler+0x64>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	3b01      	subs	r3, #1
 8006088:	b2da      	uxtb	r2, r3
 800608a:	4b03      	ldr	r3, [pc, #12]	; (8006098 <USART3_IRQHandler+0x64>)
 800608c:	701a      	strb	r2, [r3, #0]
}
 800608e:	bf00      	nop
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	2000129e 	.word	0x2000129e
 8006098:	2000129d 	.word	0x2000129d
 800609c:	200010b0 	.word	0x200010b0

080060a0 <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <UART4_IRQHandler+0x60>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d105      	bne.n	80060b8 <UART4_IRQHandler+0x18>
 80060ac:	4b15      	ldr	r3, [pc, #84]	; (8006104 <UART4_IRQHandler+0x64>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	4b13      	ldr	r3, [pc, #76]	; (8006104 <UART4_IRQHandler+0x64>)
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <UART4_IRQHandler+0x60>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <UART4_IRQHandler+0x60>)
 80060c2:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 80060c4:	4810      	ldr	r0, [pc, #64]	; (8006108 <UART4_IRQHandler+0x68>)
 80060c6:	f7fd fcc5 	bl	8003a54 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <UART4_IRQHandler+0x60>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <UART4_IRQHandler+0x3e>
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <UART4_IRQHandler+0x60>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <UART4_IRQHandler+0x60>)
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	4b08      	ldr	r3, [pc, #32]	; (8006100 <UART4_IRQHandler+0x60>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <UART4_IRQHandler+0x5a>
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <UART4_IRQHandler+0x64>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <UART4_IRQHandler+0x5a>
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <UART4_IRQHandler+0x64>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	4b03      	ldr	r3, [pc, #12]	; (8006104 <UART4_IRQHandler+0x64>)
 80060f8:	701a      	strb	r2, [r3, #0]
}
 80060fa:	bf00      	nop
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	2000129e 	.word	0x2000129e
 8006104:	2000129d 	.word	0x2000129d
 8006108:	200010f4 	.word	0x200010f4

0800610c <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8006110:	4b16      	ldr	r3, [pc, #88]	; (800616c <UART5_IRQHandler+0x60>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d105      	bne.n	8006124 <UART5_IRQHandler+0x18>
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <UART5_IRQHandler+0x64>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	b2da      	uxtb	r2, r3
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <UART5_IRQHandler+0x64>)
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <UART5_IRQHandler+0x60>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	3301      	adds	r3, #1
 800612a:	b2da      	uxtb	r2, r3
 800612c:	4b0f      	ldr	r3, [pc, #60]	; (800616c <UART5_IRQHandler+0x60>)
 800612e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 8006130:	4810      	ldr	r0, [pc, #64]	; (8006174 <UART5_IRQHandler+0x68>)
 8006132:	f7fd fc8f 	bl	8003a54 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <UART5_IRQHandler+0x60>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <UART5_IRQHandler+0x3e>
 800613e:	4b0b      	ldr	r3, [pc, #44]	; (800616c <UART5_IRQHandler+0x60>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	3b01      	subs	r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <UART5_IRQHandler+0x60>)
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	4b08      	ldr	r3, [pc, #32]	; (800616c <UART5_IRQHandler+0x60>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <UART5_IRQHandler+0x5a>
 8006152:	4b07      	ldr	r3, [pc, #28]	; (8006170 <UART5_IRQHandler+0x64>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <UART5_IRQHandler+0x5a>
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <UART5_IRQHandler+0x64>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	3b01      	subs	r3, #1
 8006160:	b2da      	uxtb	r2, r3
 8006162:	4b03      	ldr	r3, [pc, #12]	; (8006170 <UART5_IRQHandler+0x64>)
 8006164:	701a      	strb	r2, [r3, #0]
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	2000129e 	.word	0x2000129e
 8006170:	2000129d 	.word	0x2000129d
 8006174:	20001138 	.word	0x20001138

08006178 <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800617c:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <USART6_IRQHandler+0x60>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <USART6_IRQHandler+0x18>
 8006184:	4b15      	ldr	r3, [pc, #84]	; (80061dc <USART6_IRQHandler+0x64>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	4b13      	ldr	r3, [pc, #76]	; (80061dc <USART6_IRQHandler+0x64>)
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <USART6_IRQHandler+0x60>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	b2da      	uxtb	r2, r3
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <USART6_IRQHandler+0x60>)
 800619a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 800619c:	4810      	ldr	r0, [pc, #64]	; (80061e0 <USART6_IRQHandler+0x68>)
 800619e:	f7fd fc59 	bl	8003a54 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 80061a2:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <USART6_IRQHandler+0x60>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <USART6_IRQHandler+0x3e>
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <USART6_IRQHandler+0x60>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <USART6_IRQHandler+0x60>)
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <USART6_IRQHandler+0x60>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <USART6_IRQHandler+0x5a>
 80061be:	4b07      	ldr	r3, [pc, #28]	; (80061dc <USART6_IRQHandler+0x64>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <USART6_IRQHandler+0x5a>
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <USART6_IRQHandler+0x64>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	4b03      	ldr	r3, [pc, #12]	; (80061dc <USART6_IRQHandler+0x64>)
 80061d0:	701a      	strb	r2, [r3, #0]
}
 80061d2:	bf00      	nop
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	2000129e 	.word	0x2000129e
 80061dc:	2000129d 	.word	0x2000129d
 80061e0:	2000117c 	.word	0x2000117c

080061e4 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 80061f0:	2300      	movs	r3, #0
 80061f2:	73fb      	strb	r3, [r7, #15]
 80061f4:	e015      	b.n	8006222 <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	4a0e      	ldr	r2, [pc, #56]	; (8006234 <HAL_UART_TxCpltCallback+0x50>)
 80061fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d10a      	bne.n	800621c <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 8006206:	7bfa      	ldrb	r2, [r7, #15]
 8006208:	4613      	mov	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4a09      	ldr	r2, [pc, #36]	; (8006238 <HAL_UART_TxCpltCallback+0x54>)
 8006212:	4413      	add	r3, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f005 fba7 	bl	800b968 <gos_triggerIncrement>
            break;
 800621a:	e006      	b.n	800622a <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	3301      	adds	r3, #1
 8006220:	73fb      	strb	r3, [r7, #15]
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	2b05      	cmp	r3, #5
 8006226:	d9e6      	bls.n	80061f6 <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	2000033c 	.word	0x2000033c
 8006238:	20001238 	.word	0x20001238

0800623c <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]
 800624c:	e015      	b.n	800627a <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	4a0e      	ldr	r2, [pc, #56]	; (800628c <HAL_UART_RxCpltCallback+0x50>)
 8006252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d10a      	bne.n	8006274 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 800625e:	7bfa      	ldrb	r2, [r7, #15]
 8006260:	4613      	mov	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <HAL_UART_RxCpltCallback+0x54>)
 800626a:	4413      	add	r3, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f005 fb7b 	bl	800b968 <gos_triggerIncrement>
            break;
 8006272:	e006      	b.n	8006282 <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	3301      	adds	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b05      	cmp	r3, #5
 800627e:	d9e6      	bls.n	800624e <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	2000033c 	.word	0x2000033c
 8006290:	200011f0 	.word	0x200011f0

08006294 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
 80062a8:	e068      	b.n	800637c <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	4a38      	ldr	r2, [pc, #224]	; (8006390 <HAL_UART_MspInit+0xfc>)
 80062ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d15d      	bne.n	8006376 <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 80062ba:	2300      	movs	r3, #0
 80062bc:	73bb      	strb	r3, [r7, #14]
 80062be:	e051      	b.n	8006364 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 80062c0:	7bba      	ldrb	r2, [r7, #14]
 80062c2:	4934      	ldr	r1, [pc, #208]	; (8006394 <HAL_UART_MspInit+0x100>)
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	440b      	add	r3, r1
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	7bfa      	ldrb	r2, [r7, #15]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d143      	bne.n	800635e <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 80062d6:	7bba      	ldrb	r2, [r7, #14]
 80062d8:	492e      	ldr	r1, [pc, #184]	; (8006394 <HAL_UART_MspInit+0x100>)
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	440b      	add	r3, r1
 80062e4:	3320      	adds	r3, #32
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 80062ec:	7bba      	ldrb	r2, [r7, #14]
 80062ee:	4929      	ldr	r1, [pc, #164]	; (8006394 <HAL_UART_MspInit+0x100>)
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	440b      	add	r3, r1
 80062fa:	3320      	adds	r3, #32
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	1d1a      	adds	r2, r3, #4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
 8006304:	7bba      	ldrb	r2, [r7, #14]
 8006306:	4923      	ldr	r1, [pc, #140]	; (8006394 <HAL_UART_MspInit+0x100>)
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	440b      	add	r3, r1
 8006312:	3320      	adds	r3, #32
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	63da      	str	r2, [r3, #60]	; 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 800631a:	7bba      	ldrb	r2, [r7, #14]
 800631c:	491d      	ldr	r1, [pc, #116]	; (8006394 <HAL_UART_MspInit+0x100>)
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	440b      	add	r3, r1
 8006328:	3324      	adds	r3, #36	; 0x24
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d016      	beq.n	800635e <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 8006330:	7bba      	ldrb	r2, [r7, #14]
 8006332:	4918      	ldr	r1, [pc, #96]	; (8006394 <HAL_UART_MspInit+0x100>)
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	440b      	add	r3, r1
 800633e:	3324      	adds	r3, #36	; 0x24
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	1d1a      	adds	r2, r3, #4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	635a      	str	r2, [r3, #52]	; 0x34
 8006348:	7bba      	ldrb	r2, [r7, #14]
 800634a:	4912      	ldr	r1, [pc, #72]	; (8006394 <HAL_UART_MspInit+0x100>)
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	440b      	add	r3, r1
 8006356:	3324      	adds	r3, #36	; 0x24
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	3301      	adds	r3, #1
 8006362:	73bb      	strb	r3, [r7, #14]
 8006364:	7bba      	ldrb	r2, [r7, #14]
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <HAL_UART_MspInit+0x104>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	490c      	ldr	r1, [pc, #48]	; (800639c <HAL_UART_MspInit+0x108>)
 800636c:	fba1 1303 	umull	r1, r3, r1, r3
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	429a      	cmp	r2, r3
 8006374:	d3a4      	bcc.n	80062c0 <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	3301      	adds	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b05      	cmp	r3, #5
 8006380:	d993      	bls.n	80062aa <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	2000033c 	.word	0x2000033c
 8006394:	0800fb50 	.word	0x0800fb50
 8006398:	200002f0 	.word	0x200002f0
 800639c:	cccccccd 	.word	0xcccccccd

080063a0 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 80063a8:	23ae      	movs	r3, #174	; 0xae
 80063aa:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d006      	beq.n	80063c0 <gos_driverInit+0x20>
    {
        memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 80063b2:	221c      	movs	r2, #28
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4805      	ldr	r0, [pc, #20]	; (80063cc <gos_driverInit+0x2c>)
 80063b8:	f006 faa3 	bl	800c902 <memcpy>
        driverInitResult = GOS_SUCCESS;
 80063bc:	2355      	movs	r3, #85	; 0x55
 80063be:	73fb      	strb	r3, [r7, #15]
    }

    return driverInitResult;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20001280 	.word	0x20001280

080063d0 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 80063d6:	23ae      	movs	r3, #174	; 0xae
 80063d8:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 80063da:	2301      	movs	r3, #1
 80063dc:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80063de:	2301      	movs	r3, #1
 80063e0:	80fb      	strh	r3, [r7, #6]
 80063e2:	e038      	b.n	8006456 <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	4a6b      	ldr	r2, [pc, #428]	; (8006594 <gos_kernelInit+0x1c4>)
 80063e8:	216a      	movs	r1, #106	; 0x6a
 80063ea:	fb01 f303 	mul.w	r3, r1, r3
 80063ee:	4413      	add	r3, r2
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	2200      	movs	r2, #0
 80063f6:	705a      	strb	r2, [r3, #1]
 80063f8:	2200      	movs	r2, #0
 80063fa:	709a      	strb	r2, [r3, #2]
 80063fc:	2200      	movs	r2, #0
 80063fe:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	4a64      	ldr	r2, [pc, #400]	; (8006594 <gos_kernelInit+0x1c4>)
 8006404:	216a      	movs	r1, #106	; 0x6a
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	4413      	add	r3, r2
 800640c:	3306      	adds	r3, #6
 800640e:	22ff      	movs	r2, #255	; 0xff
 8006410:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	4a5f      	ldr	r2, [pc, #380]	; (8006594 <gos_kernelInit+0x1c4>)
 8006416:	216a      	movs	r1, #106	; 0x6a
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	4413      	add	r3, r2
 800641e:	3307      	adds	r3, #7
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	4a5b      	ldr	r2, [pc, #364]	; (8006594 <gos_kernelInit+0x1c4>)
 8006428:	216a      	movs	r1, #106	; 0x6a
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	3304      	adds	r3, #4
 8006432:	2205      	movs	r2, #5
 8006434:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	4a56      	ldr	r2, [pc, #344]	; (8006594 <gos_kernelInit+0x1c4>)
 800643a:	216a      	movs	r1, #106	; 0x6a
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	4413      	add	r3, r2
 8006442:	3328      	adds	r3, #40	; 0x28
 8006444:	2200      	movs	r2, #0
 8006446:	709a      	strb	r2, [r3, #2]
 8006448:	2200      	movs	r2, #0
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006450:	88fb      	ldrh	r3, [r7, #6]
 8006452:	3301      	adds	r3, #1
 8006454:	80fb      	strh	r3, [r7, #6]
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	2b0f      	cmp	r3, #15
 800645a:	d9c3      	bls.n	80063e4 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 800645c:	4b4e      	ldr	r3, [pc, #312]	; (8006598 <gos_kernelInit+0x1c8>)
 800645e:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	3b04      	subs	r3, #4
 8006464:	603b      	str	r3, [r7, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800646c:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	3b04      	subs	r3, #4
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4a49      	ldr	r2, [pc, #292]	; (800659c <gos_kernelInit+0x1cc>)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	3b04      	subs	r3, #4
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	f06f 0202 	mvn.w	r2, #2
 8006486:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	3b04      	subs	r3, #4
 800648c:	603b      	str	r3, [r7, #0]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8006494:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	3b04      	subs	r3, #4
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80064a2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	3b04      	subs	r3, #4
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80064b0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	3b04      	subs	r3, #4
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80064be:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	3b04      	subs	r3, #4
 80064c4:	603b      	str	r3, [r7, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	3b04      	subs	r3, #4
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80064d8:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	3b04      	subs	r3, #4
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80064e6:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	3b04      	subs	r3, #4
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80064f4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	3b04      	subs	r3, #4
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8006502:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	3b04      	subs	r3, #4
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8006510:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	3b04      	subs	r3, #4
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800651e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	3b04      	subs	r3, #4
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800652c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	3b04      	subs	r3, #4
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800653a:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	4a15      	ldr	r2, [pc, #84]	; (8006594 <gos_kernelInit+0x1c4>)
 8006540:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 8006542:	4b14      	ldr	r3, [pc, #80]	; (8006594 <gos_kernelInit+0x1c4>)
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	4a13      	ldr	r2, [pc, #76]	; (8006594 <gos_kernelInit+0x1c4>)
 8006548:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800654c:	b292      	uxth	r2, r2
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	3340      	adds	r3, #64	; 0x40
 8006552:	4a10      	ldr	r2, [pc, #64]	; (8006594 <gos_kernelInit+0x1c4>)
 8006554:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 8006558:	4b11      	ldr	r3, [pc, #68]	; (80065a0 <gos_kernelInit+0x1d0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <gos_kernelInit+0x1d0>)
 800655e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <gos_kernelInit+0x1d0>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a0d      	ldr	r2, [pc, #52]	; (80065a0 <gos_kernelInit+0x1d0>)
 800656a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <gos_kernelInit+0x1d0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <gos_kernelInit+0x1d0>)
 8006576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800657a:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <gos_kernelInit+0x1d4>)
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 8006582:	2355      	movs	r3, #85	; 0x55
 8006584:	717b      	strb	r3, [r7, #5]

    return initResult;
 8006586:	797b      	ldrb	r3, [r7, #5]
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	2000035c 	.word	0x2000035c
 8006598:	2001ee00 	.word	0x2001ee00
 800659c:	080090b5 	.word	0x080090b5
 80065a0:	e000ed24 	.word	0xe000ed24
 80065a4:	2000129d 	.word	0x2000129d

080065a8 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 80065ae:	23ae      	movs	r3, #174	; 0xae
 80065b0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 80065b2:	4b19      	ldr	r3, [pc, #100]	; (8006618 <gos_kernelStart+0x70>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 80065b8:	f000 fe9c 	bl	80072f4 <gos_kernelGetCurrentPsp>
 80065bc:	f380 8809 	msr	PSP, r0
 80065c0:	f3ef 8014 	mrs	r0, CONTROL
 80065c4:	f040 0002 	orr.w	r0, r0, #2
 80065c8:	f380 8814 	msr	CONTROL, r0
 80065cc:	f3ef 8014 	mrs	r0, CONTROL
 80065d0:	f040 0001 	orr.w	r0, r0, #1
 80065d4:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <gos_kernelStart+0x70>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a0f      	ldr	r2, [pc, #60]	; (800661c <gos_kernelStart+0x74>)
 80065de:	216a      	movs	r1, #106	; 0x6a
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 80065ea:	480d      	ldr	r0, [pc, #52]	; (8006620 <gos_kernelStart+0x78>)
 80065ec:	f005 fa82 	bl	800baf4 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <gos_kernelStart+0x7c>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <gos_kernelStart+0x5c>
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <gos_kernelStart+0x7c>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	4b08      	ldr	r3, [pc, #32]	; (8006624 <gos_kernelStart+0x7c>)
 8006602:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 8006604:	4b08      	ldr	r3, [pc, #32]	; (8006628 <gos_kernelStart+0x80>)
 8006606:	2236      	movs	r2, #54	; 0x36
 8006608:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 800660e:	79fb      	ldrb	r3, [r7, #7]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	200012a4 	.word	0x200012a4
 800661c:	2000035c 	.word	0x2000035c
 8006620:	200012ac 	.word	0x200012ac
 8006624:	2000129d 	.word	0x2000129d
 8006628:	20000358 	.word	0x20000358

0800662c <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 8006634:	23ae      	movs	r3, #174	; 0xae
 8006636:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <gos_kernelRegisterSysTickHook+0x24>
 800663e:	4b08      	ldr	r3, [pc, #32]	; (8006660 <gos_kernelRegisterSysTickHook+0x34>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 8006646:	4a06      	ldr	r2, [pc, #24]	; (8006660 <gos_kernelRegisterSysTickHook+0x34>)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 800664c:	2355      	movs	r3, #85	; 0x55
 800664e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	200012c0 	.word	0x200012c0

08006664 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 800666a:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <SysTick_Handler+0x5c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	4a13      	ldr	r2, [pc, #76]	; (80066c0 <SysTick_Handler+0x5c>)
 8006672:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 8006674:	2001      	movs	r0, #1
 8006676:	f004 fd0b 	bl	800b090 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 800667a:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <SysTick_Handler+0x60>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b36      	cmp	r3, #54	; 0x36
 8006680:	d113      	bne.n	80066aa <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 8006682:	f000 fda7 	bl	80071d4 <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 8006686:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <SysTick_Handler+0x64>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10d      	bne.n	80066aa <SysTick_Handler+0x46>
 800668e:	2316      	movs	r3, #22
 8006690:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	2b16      	cmp	r3, #22
 8006696:	d106      	bne.n	80066a6 <SysTick_Handler+0x42>
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <SysTick_Handler+0x68>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a0b      	ldr	r2, [pc, #44]	; (80066cc <SysTick_Handler+0x68>)
 800669e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a2:	6013      	str	r3, [r2, #0]
}
 80066a4:	e000      	b.n	80066a8 <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 80066a6:	dfff      	svc	255	; 0xff
}
 80066a8:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <SysTick_Handler+0x6c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <SysTick_Handler+0x6c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4798      	blx	r3
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200012a8 	.word	0x200012a8
 80066c4:	20000358 	.word	0x20000358
 80066c8:	2000129d 	.word	0x2000129d
 80066cc:	e000ed04 	.word	0xe000ed04
 80066d0:	200012c0 	.word	0x200012c0

080066d4 <gos_kernelGetSysTicks>:
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
    return sysTicks;
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <gos_kernelGetSysTicks+0x14>)
 80066da:	681b      	ldr	r3, [r3, #0]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	200012a8 	.word	0x200012a8

080066ec <gos_kernelGetCpuUsage>:
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <gos_kernelGetCpuUsage+0x20>)
 80066f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80066fc:	3310      	adds	r3, #16
 80066fe:	b29b      	uxth	r3, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	2000035c 	.word	0x2000035c

08006710 <gos_kernelReset>:
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
    resetRequired = GOS_TRUE;
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <gos_kernelReset+0x34>)
 8006718:	2236      	movs	r2, #54	; 0x36
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	2309      	movs	r3, #9
 800671e:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	2b16      	cmp	r3, #22
 8006724:	d106      	bne.n	8006734 <gos_kernelReset+0x24>
 8006726:	4b08      	ldr	r3, [pc, #32]	; (8006748 <gos_kernelReset+0x38>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a07      	ldr	r2, [pc, #28]	; (8006748 <gos_kernelReset+0x38>)
 800672c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006730:	6013      	str	r3, [r2, #0]
}
 8006732:	e000      	b.n	8006736 <gos_kernelReset+0x26>
    gos_ported_reschedule(privilege);
 8006734:	dfff      	svc	255	; 0xff
}
 8006736:	bf00      	nop
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20000356 	.word	0x20000356
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <gos_kernelDelayMs>:
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <gos_kernelDelayMs+0x34>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 800675c:	bf00      	nop
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <gos_kernelDelayMs+0x34>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	b29b      	uxth	r3, r3
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	b29b      	uxth	r3, r3
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	429a      	cmp	r2, r3
 8006770:	d8f5      	bhi.n	800675e <gos_kernelDelayMs+0x12>
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	200012a8 	.word	0x200012a8

08006784 <gos_kernelCalculateTaskCpuUsages>:
{
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 800678e:	2300      	movs	r3, #0
 8006790:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800679a:	4ba9      	ldr	r3, [pc, #676]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800679c:	795b      	ldrb	r3, [r3, #5]
 800679e:	461a      	mov	r2, r3
 80067a0:	4ba8      	ldr	r3, [pc, #672]	; (8006a44 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 80067a2:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 80067a6:	4ba6      	ldr	r3, [pc, #664]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80067a8:	791b      	ldrb	r3, [r3, #4]
 80067aa:	4619      	mov	r1, r3
 80067ac:	4ba6      	ldr	r3, [pc, #664]	; (8006a48 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 80067b2:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 80067b4:	4ba2      	ldr	r3, [pc, #648]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80067b6:	885b      	ldrh	r3, [r3, #2]
 80067b8:	4619      	mov	r1, r3
 80067ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067be:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 80067c2:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 80067c4:	4a9e      	ldr	r2, [pc, #632]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80067c6:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 80067c8:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 80067ca:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80067cc:	2300      	movs	r3, #0
 80067ce:	82fb      	strh	r3, [r7, #22]
 80067d0:	e110      	b.n	80069f4 <gos_kernelCalculateTaskCpuUsages+0x270>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 80067d2:	8afb      	ldrh	r3, [r7, #22]
 80067d4:	4a9d      	ldr	r2, [pc, #628]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80067d6:	216a      	movs	r1, #106	; 0x6a
 80067d8:	fb01 f303 	mul.w	r3, r1, r3
 80067dc:	4413      	add	r3, r2
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 810c 	beq.w	80069fe <gos_kernelCalculateTaskCpuUsages+0x27a>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80067e6:	8afb      	ldrh	r3, [r7, #22]
 80067e8:	4a98      	ldr	r2, [pc, #608]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80067ea:	216a      	movs	r1, #106	; 0x6a
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	335a      	adds	r3, #90	; 0x5a
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	4b92      	ldr	r3, [pc, #584]	; (8006a44 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 80067fa:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80067fe:	8afb      	ldrh	r3, [r7, #22]
 8006800:	4992      	ldr	r1, [pc, #584]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8006802:	206a      	movs	r0, #106	; 0x6a
 8006804:	fb00 f303 	mul.w	r3, r0, r3
 8006808:	440b      	add	r3, r1
 800680a:	3359      	adds	r3, #89	; 0x59
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	4619      	mov	r1, r3
 8006810:	4b8d      	ldr	r3, [pc, #564]	; (8006a48 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8006812:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8006816:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8006818:	8afb      	ldrh	r3, [r7, #22]
 800681a:	498c      	ldr	r1, [pc, #560]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800681c:	206a      	movs	r0, #106	; 0x6a
 800681e:	fb00 f303 	mul.w	r3, r0, r3
 8006822:	440b      	add	r3, r1
 8006824:	3350      	adds	r3, #80	; 0x50
 8006826:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800682a:	b29b      	uxth	r3, r3
 800682c:	4619      	mov	r1, r3
 800682e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006832:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8006836:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 8006838:	8afa      	ldrh	r2, [r7, #22]
 800683a:	4984      	ldr	r1, [pc, #528]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800683c:	206a      	movs	r0, #106	; 0x6a
 800683e:	fb00 f202 	mul.w	r2, r0, r2
 8006842:	440a      	add	r2, r1
 8006844:	3250      	adds	r2, #80	; 0x50
 8006846:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 800684a:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 800684c:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 800684e:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80cb 	beq.w	80069ee <gos_kernelCalculateTaskCpuUsages+0x26a>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f242 7210 	movw	r2, #10000	; 0x2710
 800685e:	fb03 f202 	mul.w	r2, r3, r2
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	fbb2 f2f3 	udiv	r2, r2, r3
 8006868:	8afb      	ldrh	r3, [r7, #22]
 800686a:	b290      	uxth	r0, r2
 800686c:	4a77      	ldr	r2, [pc, #476]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800686e:	216a      	movs	r1, #106	; 0x6a
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	4413      	add	r3, r2
 8006876:	3360      	adds	r3, #96	; 0x60
 8006878:	4602      	mov	r2, r0
 800687a:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	2b36      	cmp	r3, #54	; 0x36
 8006880:	d004      	beq.n	800688c <gos_kernelCalculateTaskCpuUsages+0x108>
 8006882:	4b6f      	ldr	r3, [pc, #444]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8006884:	791b      	ldrb	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80b1 	beq.w	80069ee <gos_kernelCalculateTaskCpuUsages+0x26a>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006892:	fb03 f202 	mul.w	r2, r3, r2
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	fbb2 f2f3 	udiv	r2, r2, r3
 800689c:	8afb      	ldrh	r3, [r7, #22]
 800689e:	b290      	uxth	r0, r2
 80068a0:	4a6a      	ldr	r2, [pc, #424]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80068a2:	216a      	movs	r1, #106	; 0x6a
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	4413      	add	r3, r2
 80068aa:	3360      	adds	r3, #96	; 0x60
 80068ac:	4602      	mov	r2, r0
 80068ae:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 80068b0:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 80068b2:	226a      	movs	r2, #106	; 0x6a
 80068b4:	fb02 f303 	mul.w	r3, r2, r3
 80068b8:	3348      	adds	r3, #72	; 0x48
 80068ba:	4a64      	ldr	r2, [pc, #400]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80068bc:	4413      	add	r3, r2
 80068be:	1d18      	adds	r0, r3, #4
 80068c0:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 80068c2:	4a62      	ldr	r2, [pc, #392]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80068c4:	216a      	movs	r1, #106	; 0x6a
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	3350      	adds	r3, #80	; 0x50
 80068ce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80068d2:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 80068d4:	461a      	mov	r2, r3
 80068d6:	2100      	movs	r1, #0
 80068d8:	f004 fa52 	bl	800ad80 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 80068dc:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 80068de:	226a      	movs	r2, #106	; 0x6a
 80068e0:	fb02 f303 	mul.w	r3, r2, r3
 80068e4:	3348      	adds	r3, #72	; 0x48
 80068e6:	4a59      	ldr	r2, [pc, #356]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80068e8:	4413      	add	r3, r2
 80068ea:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 80068ec:	8afb      	ldrh	r3, [r7, #22]
 80068ee:	4a57      	ldr	r2, [pc, #348]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80068f0:	216a      	movs	r1, #106	; 0x6a
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	3350      	adds	r3, #80	; 0x50
 80068fa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80068fe:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 8006900:	8afb      	ldrh	r3, [r7, #22]
 8006902:	4952      	ldr	r1, [pc, #328]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8006904:	246a      	movs	r4, #106	; 0x6a
 8006906:	fb04 f303 	mul.w	r3, r4, r3
 800690a:	440b      	add	r3, r1
 800690c:	3359      	adds	r3, #89	; 0x59
 800690e:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 8006910:	b29b      	uxth	r3, r3
 8006912:	4619      	mov	r1, r3
 8006914:	0149      	lsls	r1, r1, #5
 8006916:	1ac9      	subs	r1, r1, r3
 8006918:	0089      	lsls	r1, r1, #2
 800691a:	440b      	add	r3, r1
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	b29b      	uxth	r3, r3
 8006920:	4413      	add	r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	4619      	mov	r1, r3
 8006926:	f004 fb0b 	bl	800af40 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 800692a:	8afb      	ldrh	r3, [r7, #22]
 800692c:	4a47      	ldr	r2, [pc, #284]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800692e:	216a      	movs	r1, #106	; 0x6a
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	4413      	add	r3, r2
 8006936:	3350      	adds	r3, #80	; 0x50
 8006938:	2200      	movs	r2, #0
 800693a:	731a      	strb	r2, [r3, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 8006940:	8afb      	ldrh	r3, [r7, #22]
 8006942:	4a42      	ldr	r2, [pc, #264]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8006944:	216a      	movs	r1, #106	; 0x6a
 8006946:	fb01 f303 	mul.w	r3, r1, r3
 800694a:	4413      	add	r3, r2
 800694c:	335b      	adds	r3, #91	; 0x5b
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8006952:	8afb      	ldrh	r3, [r7, #22]
 8006954:	4a3d      	ldr	r2, [pc, #244]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8006956:	216a      	movs	r1, #106	; 0x6a
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	4413      	add	r3, r2
 800695e:	335a      	adds	r3, #90	; 0x5a
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8006964:	8afb      	ldrh	r3, [r7, #22]
 8006966:	4a39      	ldr	r2, [pc, #228]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8006968:	216a      	movs	r1, #106	; 0x6a
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	3359      	adds	r3, #89	; 0x59
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8006976:	8afb      	ldrh	r3, [r7, #22]
 8006978:	4a34      	ldr	r2, [pc, #208]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800697a:	216a      	movs	r1, #106	; 0x6a
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	3350      	adds	r3, #80	; 0x50
 8006984:	2200      	movs	r2, #0
 8006986:	71da      	strb	r2, [r3, #7]
 8006988:	2200      	movs	r2, #0
 800698a:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 800698c:	8afb      	ldrh	r3, [r7, #22]
 800698e:	4a2f      	ldr	r2, [pc, #188]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8006990:	216a      	movs	r1, #106	; 0x6a
 8006992:	fb01 f303 	mul.w	r3, r1, r3
 8006996:	4413      	add	r3, r2
 8006998:	3350      	adds	r3, #80	; 0x50
 800699a:	2200      	movs	r2, #0
 800699c:	715a      	strb	r2, [r3, #5]
 800699e:	2200      	movs	r2, #0
 80069a0:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 80069a2:	8afb      	ldrh	r3, [r7, #22]
 80069a4:	4a29      	ldr	r2, [pc, #164]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80069a6:	216a      	movs	r1, #106	; 0x6a
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	4413      	add	r3, r2
 80069ae:	3360      	adds	r3, #96	; 0x60
 80069b0:	885b      	ldrh	r3, [r3, #2]
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	8afb      	ldrh	r3, [r7, #22]
 80069b6:	4925      	ldr	r1, [pc, #148]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80069b8:	206a      	movs	r0, #106	; 0x6a
 80069ba:	fb00 f303 	mul.w	r3, r0, r3
 80069be:	440b      	add	r3, r1
 80069c0:	3360      	adds	r3, #96	; 0x60
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d911      	bls.n	80069ee <gos_kernelCalculateTaskCpuUsages+0x26a>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 80069ca:	8afa      	ldrh	r2, [r7, #22]
 80069cc:	8afb      	ldrh	r3, [r7, #22]
 80069ce:	491f      	ldr	r1, [pc, #124]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80069d0:	206a      	movs	r0, #106	; 0x6a
 80069d2:	fb00 f202 	mul.w	r2, r0, r2
 80069d6:	440a      	add	r2, r1
 80069d8:	3260      	adds	r2, #96	; 0x60
 80069da:	8852      	ldrh	r2, [r2, #2]
 80069dc:	b290      	uxth	r0, r2
 80069de:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80069e0:	216a      	movs	r1, #106	; 0x6a
 80069e2:	fb01 f303 	mul.w	r3, r1, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	3360      	adds	r3, #96	; 0x60
 80069ea:	4602      	mov	r2, r0
 80069ec:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	3301      	adds	r3, #1
 80069f2:	82fb      	strh	r3, [r7, #22]
 80069f4:	8afb      	ldrh	r3, [r7, #22]
 80069f6:	2b0f      	cmp	r3, #15
 80069f8:	f67f aeeb 	bls.w	80067d2 <gos_kernelCalculateTaskCpuUsages+0x4e>
 80069fc:	e000      	b.n	8006a00 <gos_kernelCalculateTaskCpuUsages+0x27c>
            break;
 80069fe:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	2b36      	cmp	r3, #54	; 0x36
 8006a04:	d003      	beq.n	8006a0e <gos_kernelCalculateTaskCpuUsages+0x28a>
 8006a06:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8006a08:	791b      	ldrb	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d013      	beq.n	8006a36 <gos_kernelCalculateTaskCpuUsages+0x2b2>
        monitoringTime.days         = 0u;
 8006a0e:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	71da      	strb	r2, [r3, #7]
 8006a14:	2200      	movs	r2, #0
 8006a16:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 8006a2a:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 8006a30:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	801a      	strh	r2, [r3, #0]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd90      	pop	{r4, r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	200012b0 	.word	0x200012b0
 8006a44:	03938700 	.word	0x03938700
 8006a48:	000f4240 	.word	0x000f4240
 8006a4c:	2000035c 	.word	0x2000035c

08006a50 <gos_kernelDump>:
{
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	b0a6      	sub	sp, #152	; 0x98
 8006a56:	af14      	add	r7, sp, #80	; 0x50
    u16_t taskIndex = 0u;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 8006a5e:	48ae      	ldr	r0, [pc, #696]	; (8006d18 <gos_kernelDump+0x2c8>)
 8006a60:	f005 f824 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8006a64:	48ad      	ldr	r0, [pc, #692]	; (8006d1c <gos_kernelDump+0x2cc>)
 8006a66:	f005 f821 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8006a6a:	4bad      	ldr	r3, [pc, #692]	; (8006d20 <gos_kernelDump+0x2d0>)
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	4bad      	ldr	r3, [pc, #692]	; (8006d24 <gos_kernelDump+0x2d4>)
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	4bad      	ldr	r3, [pc, #692]	; (8006d28 <gos_kernelDump+0x2d8>)
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	4bad      	ldr	r3, [pc, #692]	; (8006d2c <gos_kernelDump+0x2dc>)
 8006a78:	4aad      	ldr	r2, [pc, #692]	; (8006d30 <gos_kernelDump+0x2e0>)
 8006a7a:	49ae      	ldr	r1, [pc, #696]	; (8006d34 <gos_kernelDump+0x2e4>)
 8006a7c:	48ae      	ldr	r0, [pc, #696]	; (8006d38 <gos_kernelDump+0x2e8>)
 8006a7e:	f005 f815 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8006a82:	48a6      	ldr	r0, [pc, #664]	; (8006d1c <gos_kernelDump+0x2cc>)
 8006a84:	f005 f812 	bl	800baac <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a8e:	e1cc      	b.n	8006e2a <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8006a90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a94:	4aa9      	ldr	r2, [pc, #676]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006a96:	216a      	movs	r1, #106	; 0x6a
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	4413      	add	r3, r2
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 81c8 	beq.w	8006e36 <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 8006aa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006aaa:	4aa4      	ldr	r2, [pc, #656]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006aac:	216a      	movs	r1, #106	; 0x6a
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3328      	adds	r3, #40	; 0x28
 8006ab6:	885b      	ldrh	r3, [r3, #2]
 8006ab8:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006aba:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 8006abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ac0:	226a      	movs	r2, #106	; 0x6a
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	4a9c      	ldr	r2, [pc, #624]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006aca:	4413      	add	r3, r2
 8006acc:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 8006ad0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ad4:	4a99      	ldr	r2, [pc, #612]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006ad6:	216a      	movs	r1, #106	; 0x6a
 8006ad8:	fb01 f303 	mul.w	r3, r1, r3
 8006adc:	4413      	add	r3, r2
 8006ade:	3306      	adds	r3, #6
 8006ae0:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8006ae2:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006ae4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ae8:	4a94      	ldr	r2, [pc, #592]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006aea:	216a      	movs	r1, #106	; 0x6a
 8006aec:	fb01 f303 	mul.w	r3, r1, r3
 8006af0:	4413      	add	r3, r2
 8006af2:	3308      	adds	r3, #8
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da02      	bge.n	8006b04 <gos_kernelDump+0xb4>
 8006afe:	4b90      	ldr	r3, [pc, #576]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b02:	e001      	b.n	8006b08 <gos_kernelDump+0xb8>
 8006b04:	4b8f      	ldr	r3, [pc, #572]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006b08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b0c:	4a8b      	ldr	r2, [pc, #556]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006b0e:	216a      	movs	r1, #106	; 0x6a
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	4413      	add	r3, r2
 8006b16:	3308      	adds	r3, #8
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
            (void_t) gos_shellDriverTransmitString(
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <gos_kernelDump+0xda>
 8006b24:	4b86      	ldr	r3, [pc, #536]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b28:	e001      	b.n	8006b2e <gos_kernelDump+0xde>
 8006b2a:	4b86      	ldr	r3, [pc, #536]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006b2c:	63bb      	str	r3, [r7, #56]	; 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006b2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b32:	4a82      	ldr	r2, [pc, #520]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006b34:	216a      	movs	r1, #106	; 0x6a
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
            (void_t) gos_shellDriverTransmitString(
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <gos_kernelDump+0x100>
 8006b4a:	4b7d      	ldr	r3, [pc, #500]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4e:	e001      	b.n	8006b54 <gos_kernelDump+0x104>
 8006b50:	4b7c      	ldr	r3, [pc, #496]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006b52:	637b      	str	r3, [r7, #52]	; 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006b54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b58:	4a78      	ldr	r2, [pc, #480]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006b5a:	216a      	movs	r1, #106	; 0x6a
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	4413      	add	r3, r2
 8006b62:	3308      	adds	r3, #8
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
            (void_t) gos_shellDriverTransmitString(
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <gos_kernelDump+0x126>
 8006b70:	4b73      	ldr	r3, [pc, #460]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30
 8006b74:	e001      	b.n	8006b7a <gos_kernelDump+0x12a>
 8006b76:	4b73      	ldr	r3, [pc, #460]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006b78:	633b      	str	r3, [r7, #48]	; 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006b7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b7e:	4a6f      	ldr	r2, [pc, #444]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006b80:	216a      	movs	r1, #106	; 0x6a
 8006b82:	fb01 f303 	mul.w	r3, r1, r3
 8006b86:	4413      	add	r3, r2
 8006b88:	3308      	adds	r3, #8
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            (void_t) gos_shellDriverTransmitString(
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <gos_kernelDump+0x14c>
 8006b96:	4b6a      	ldr	r3, [pc, #424]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b9a:	e001      	b.n	8006ba0 <gos_kernelDump+0x150>
 8006b9c:	4b69      	ldr	r3, [pc, #420]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006ba0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ba4:	4a65      	ldr	r2, [pc, #404]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006ba6:	216a      	movs	r1, #106	; 0x6a
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	3308      	adds	r3, #8
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            (void_t) gos_shellDriverTransmitString(
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <gos_kernelDump+0x172>
 8006bbc:	4b60      	ldr	r3, [pc, #384]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc0:	e001      	b.n	8006bc6 <gos_kernelDump+0x176>
 8006bc2:	4b60      	ldr	r3, [pc, #384]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006bc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006bca:	4a5c      	ldr	r2, [pc, #368]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006bcc:	216a      	movs	r1, #106	; 0x6a
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
            (void_t) gos_shellDriverTransmitString(
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <gos_kernelDump+0x198>
 8006be2:	4b57      	ldr	r3, [pc, #348]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
 8006be6:	e001      	b.n	8006bec <gos_kernelDump+0x19c>
 8006be8:	4b56      	ldr	r3, [pc, #344]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006bec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006bf0:	4a52      	ldr	r2, [pc, #328]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006bf2:	216a      	movs	r1, #106	; 0x6a
 8006bf4:	fb01 f303 	mul.w	r3, r1, r3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
            (void_t) gos_shellDriverTransmitString(
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <gos_kernelDump+0x1be>
 8006c08:	4b4d      	ldr	r3, [pc, #308]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	e001      	b.n	8006c12 <gos_kernelDump+0x1c2>
 8006c0e:	4b4d      	ldr	r3, [pc, #308]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006c10:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006c12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c16:	4a49      	ldr	r2, [pc, #292]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006c18:	216a      	movs	r1, #106	; 0x6a
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	4413      	add	r3, r2
 8006c20:	3308      	adds	r3, #8
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
            (void_t) gos_shellDriverTransmitString(
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <gos_kernelDump+0x1e4>
 8006c2e:	4b44      	ldr	r3, [pc, #272]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	e001      	b.n	8006c38 <gos_kernelDump+0x1e8>
 8006c34:	4b43      	ldr	r3, [pc, #268]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006c36:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006c38:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006c3c:	493f      	ldr	r1, [pc, #252]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006c3e:	236a      	movs	r3, #106	; 0x6a
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	440b      	add	r3, r1
 8006c46:	3308      	adds	r3, #8
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
            (void_t) gos_shellDriverTransmitString(
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <gos_kernelDump+0x20a>
 8006c54:	4b3a      	ldr	r3, [pc, #232]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e001      	b.n	8006c5e <gos_kernelDump+0x20e>
 8006c5a:	4b3a      	ldr	r3, [pc, #232]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006c5c:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006c5e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006c62:	4936      	ldr	r1, [pc, #216]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006c64:	236a      	movs	r3, #106	; 0x6a
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <gos_kernelDump+0x230>
 8006c7a:	4b31      	ldr	r3, [pc, #196]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	e001      	b.n	8006c84 <gos_kernelDump+0x234>
 8006c80:	4b30      	ldr	r3, [pc, #192]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006c82:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006c84:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006c88:	492c      	ldr	r1, [pc, #176]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006c8a:	236a      	movs	r3, #106	; 0x6a
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	440b      	add	r3, r1
 8006c92:	3308      	adds	r3, #8
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <gos_kernelDump+0x256>
 8006ca0:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006ca2:	613b      	str	r3, [r7, #16]
 8006ca4:	e001      	b.n	8006caa <gos_kernelDump+0x25a>
 8006ca6:	4b27      	ldr	r3, [pc, #156]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006ca8:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006caa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006cae:	4923      	ldr	r1, [pc, #140]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006cb0:	236a      	movs	r3, #106	; 0x6a
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	440b      	add	r3, r1
 8006cb8:	3308      	adds	r3, #8
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <gos_kernelDump+0x27c>
 8006cc6:	4b1e      	ldr	r3, [pc, #120]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e001      	b.n	8006cd0 <gos_kernelDump+0x280>
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006cce:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006cd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006cd4:	4919      	ldr	r1, [pc, #100]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006cd6:	236a      	movs	r3, #106	; 0x6a
 8006cd8:	fb02 f303 	mul.w	r3, r2, r3
 8006cdc:	440b      	add	r3, r1
 8006cde:	3308      	adds	r3, #8
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <gos_kernelDump+0x2a2>
 8006cec:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006cee:	60bb      	str	r3, [r7, #8]
 8006cf0:	e001      	b.n	8006cf6 <gos_kernelDump+0x2a6>
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <gos_kernelDump+0x2f4>)
 8006cf4:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006cf6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006cfa:	4910      	ldr	r1, [pc, #64]	; (8006d3c <gos_kernelDump+0x2ec>)
 8006cfc:	236a      	movs	r3, #106	; 0x6a
 8006cfe:	fb02 f303 	mul.w	r3, r2, r3
 8006d02:	440b      	add	r3, r1
 8006d04:	3308      	adds	r3, #8
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01a      	beq.n	8006d48 <gos_kernelDump+0x2f8>
 8006d12:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <gos_kernelDump+0x2f0>)
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	e019      	b.n	8006d4c <gos_kernelDump+0x2fc>
 8006d18:	0800eaa8 	.word	0x0800eaa8
 8006d1c:	0800eab8 	.word	0x0800eab8
 8006d20:	0800eb54 	.word	0x0800eb54
 8006d24:	0800eb5c 	.word	0x0800eb5c
 8006d28:	0800eb64 	.word	0x0800eb64
 8006d2c:	0800eb14 	.word	0x0800eb14
 8006d30:	0800eb1c 	.word	0x0800eb1c
 8006d34:	0800eb24 	.word	0x0800eb24
 8006d38:	0800eb28 	.word	0x0800eb28
 8006d3c:	2000035c 	.word	0x2000035c
 8006d40:	0800eb70 	.word	0x0800eb70
 8006d44:	0800eb78 	.word	0x0800eb78
 8006d48:	4b7d      	ldr	r3, [pc, #500]	; (8006f40 <gos_kernelDump+0x4f0>)
 8006d4a:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8006d4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006d50:	497c      	ldr	r1, [pc, #496]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006d52:	236a      	movs	r3, #106	; 0x6a
 8006d54:	fb02 f303 	mul.w	r3, r2, r3
 8006d58:	440b      	add	r3, r1
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <gos_kernelDump+0x31c>
 8006d68:	4d77      	ldr	r5, [pc, #476]	; (8006f48 <gos_kernelDump+0x4f8>)
 8006d6a:	e000      	b.n	8006d6e <gos_kernelDump+0x31e>
 8006d6c:	4d74      	ldr	r5, [pc, #464]	; (8006f40 <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 8006d6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006d72:	4974      	ldr	r1, [pc, #464]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006d74:	236a      	movs	r3, #106	; 0x6a
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3360      	adds	r3, #96	; 0x60
 8006d7e:	885b      	ldrh	r3, [r3, #2]
 8006d80:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 8006d82:	4b72      	ldr	r3, [pc, #456]	; (8006f4c <gos_kernelDump+0x4fc>)
 8006d84:	fba3 2302 	umull	r2, r3, r3, r2
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 8006d8e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006d92:	496c      	ldr	r1, [pc, #432]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006d94:	236a      	movs	r3, #106	; 0x6a
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3360      	adds	r3, #96	; 0x60
 8006d9e:	885b      	ldrh	r3, [r3, #2]
 8006da0:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 8006da2:	4b6a      	ldr	r3, [pc, #424]	; (8006f4c <gos_kernelDump+0x4fc>)
 8006da4:	fba3 2301 	umull	r2, r3, r3, r1
 8006da8:	095a      	lsrs	r2, r3, #5
 8006daa:	2364      	movs	r3, #100	; 0x64
 8006dac:	fb02 f303 	mul.w	r3, r2, r3
 8006db0:	1acb      	subs	r3, r1, r3
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461c      	mov	r4, r3
 8006db6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006dba:	4962      	ldr	r1, [pc, #392]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006dbc:	236a      	movs	r3, #106	; 0x6a
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fc25 	bl	8007618 <gos_kernelGetTaskStateString>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	9312      	str	r3, [sp, #72]	; 0x48
 8006dd2:	9411      	str	r4, [sp, #68]	; 0x44
 8006dd4:	9610      	str	r6, [sp, #64]	; 0x40
 8006dd6:	950f      	str	r5, [sp, #60]	; 0x3c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	930e      	str	r3, [sp, #56]	; 0x38
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	930d      	str	r3, [sp, #52]	; 0x34
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	930c      	str	r3, [sp, #48]	; 0x30
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	930a      	str	r3, [sp, #40]	; 0x28
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	9308      	str	r3, [sp, #32]
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	9307      	str	r3, [sp, #28]
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	9306      	str	r3, [sp, #24]
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	9305      	str	r3, [sp, #20]
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	9304      	str	r3, [sp, #16]
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	9303      	str	r3, [sp, #12]
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	9302      	str	r3, [sp, #8]
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4653      	mov	r3, sl
 8006e16:	4642      	mov	r2, r8
 8006e18:	4649      	mov	r1, r9
 8006e1a:	484d      	ldr	r0, [pc, #308]	; (8006f50 <gos_kernelDump+0x500>)
 8006e1c:	f004 fe46 	bl	800baac <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006e20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e24:	3301      	adds	r3, #1
 8006e26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006e2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	f67f ae2e 	bls.w	8006a90 <gos_kernelDump+0x40>
 8006e34:	e000      	b.n	8006e38 <gos_kernelDump+0x3e8>
            break;
 8006e36:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 8006e38:	4846      	ldr	r0, [pc, #280]	; (8006f54 <gos_kernelDump+0x504>)
 8006e3a:	f004 fe37 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 8006e3e:	4846      	ldr	r0, [pc, #280]	; (8006f58 <gos_kernelDump+0x508>)
 8006e40:	f004 fe34 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8006e44:	4845      	ldr	r0, [pc, #276]	; (8006f5c <gos_kernelDump+0x50c>)
 8006e46:	f004 fe31 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8006e4a:	4b45      	ldr	r3, [pc, #276]	; (8006f60 <gos_kernelDump+0x510>)
 8006e4c:	4a45      	ldr	r2, [pc, #276]	; (8006f64 <gos_kernelDump+0x514>)
 8006e4e:	4946      	ldr	r1, [pc, #280]	; (8006f68 <gos_kernelDump+0x518>)
 8006e50:	4846      	ldr	r0, [pc, #280]	; (8006f6c <gos_kernelDump+0x51c>)
 8006e52:	f004 fe2b 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8006e56:	4841      	ldr	r0, [pc, #260]	; (8006f5c <gos_kernelDump+0x50c>)
 8006e58:	f004 fe28 	bl	800baac <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006e62:	e04c      	b.n	8006efe <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8006e64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e68:	4a36      	ldr	r2, [pc, #216]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006e6a:	216a      	movs	r1, #106	; 0x6a
 8006e6c:	fb01 f303 	mul.w	r3, r1, r3
 8006e70:	4413      	add	r3, r2
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d047      	beq.n	8006f08 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 8006e78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e7c:	4a31      	ldr	r2, [pc, #196]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006e7e:	216a      	movs	r1, #106	; 0x6a
 8006e80:	fb01 f303 	mul.w	r3, r1, r3
 8006e84:	4413      	add	r3, r2
 8006e86:	3328      	adds	r3, #40	; 0x28
 8006e88:	885b      	ldrh	r3, [r3, #2]
 8006e8a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006e8c:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 8006e8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e92:	226a      	movs	r2, #106	; 0x6a
 8006e94:	fb02 f303 	mul.w	r3, r2, r3
 8006e98:	3308      	adds	r3, #8
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006e9c:	4413      	add	r3, r2
 8006e9e:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 8006ea0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ea4:	4a27      	ldr	r2, [pc, #156]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006ea6:	206a      	movs	r0, #106	; 0x6a
 8006ea8:	fb00 f303 	mul.w	r3, r0, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	3360      	adds	r3, #96	; 0x60
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006eb4:	4a25      	ldr	r2, [pc, #148]	; (8006f4c <gos_kernelDump+0x4fc>)
 8006eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 8006ec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ec4:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <gos_kernelDump+0x4f4>)
 8006ec6:	206a      	movs	r0, #106	; 0x6a
 8006ec8:	fb00 f303 	mul.w	r3, r0, r3
 8006ecc:	4413      	add	r3, r2
 8006ece:	3360      	adds	r3, #96	; 0x60
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <gos_kernelDump+0x4fc>)
 8006ed6:	fba2 0203 	umull	r0, r2, r2, r3
 8006eda:	0952      	lsrs	r2, r2, #5
 8006edc:	2064      	movs	r0, #100	; 0x64
 8006ede:	fb00 f202 	mul.w	r2, r0, r2
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	462b      	mov	r3, r5
 8006eea:	460a      	mov	r2, r1
 8006eec:	4621      	mov	r1, r4
 8006eee:	4820      	ldr	r0, [pc, #128]	; (8006f70 <gos_kernelDump+0x520>)
 8006ef0:	f004 fddc 	bl	800baac <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006ef4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ef8:	3301      	adds	r3, #1
 8006efa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006efe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	d9ae      	bls.n	8006e64 <gos_kernelDump+0x414>
 8006f06:	e000      	b.n	8006f0a <gos_kernelDump+0x4ba>
            break;
 8006f08:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 8006f0a:	481a      	ldr	r0, [pc, #104]	; (8006f74 <gos_kernelDump+0x524>)
 8006f0c:	f004 fdce 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 8006f10:	4819      	ldr	r0, [pc, #100]	; (8006f78 <gos_kernelDump+0x528>)
 8006f12:	f004 fdcb 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8006f16:	4819      	ldr	r0, [pc, #100]	; (8006f7c <gos_kernelDump+0x52c>)
 8006f18:	f004 fdc8 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8006f1c:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <gos_kernelDump+0x530>)
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	4b18      	ldr	r3, [pc, #96]	; (8006f84 <gos_kernelDump+0x534>)
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <gos_kernelDump+0x538>)
 8006f26:	4a0f      	ldr	r2, [pc, #60]	; (8006f64 <gos_kernelDump+0x514>)
 8006f28:	490f      	ldr	r1, [pc, #60]	; (8006f68 <gos_kernelDump+0x518>)
 8006f2a:	4818      	ldr	r0, [pc, #96]	; (8006f8c <gos_kernelDump+0x53c>)
 8006f2c:	f004 fdbe 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8006f30:	4812      	ldr	r0, [pc, #72]	; (8006f7c <gos_kernelDump+0x52c>)
 8006f32:	f004 fdbb 	bl	800baac <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f3c:	e0b1      	b.n	80070a2 <gos_kernelDump+0x652>
 8006f3e:	bf00      	nop
 8006f40:	0800eb78 	.word	0x0800eb78
 8006f44:	2000035c 	.word	0x2000035c
 8006f48:	0800eb70 	.word	0x0800eb70
 8006f4c:	51eb851f 	.word	0x51eb851f
 8006f50:	0800eb80 	.word	0x0800eb80
 8006f54:	0800ebd4 	.word	0x0800ebd4
 8006f58:	0800ec34 	.word	0x0800ec34
 8006f5c:	0800ec48 	.word	0x0800ec48
 8006f60:	0800ec84 	.word	0x0800ec84
 8006f64:	0800eb1c 	.word	0x0800eb1c
 8006f68:	0800eb24 	.word	0x0800eb24
 8006f6c:	0800ec90 	.word	0x0800ec90
 8006f70:	0800eca8 	.word	0x0800eca8
 8006f74:	0800ecc8 	.word	0x0800ecc8
 8006f78:	0800ed04 	.word	0x0800ed04
 8006f7c:	0800ed18 	.word	0x0800ed18
 8006f80:	0800ed98 	.word	0x0800ed98
 8006f84:	0800eda4 	.word	0x0800eda4
 8006f88:	0800ed6c 	.word	0x0800ed6c
 8006f8c:	0800ed74 	.word	0x0800ed74
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8006f90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f94:	4a4a      	ldr	r2, [pc, #296]	; (80070c0 <gos_kernelDump+0x670>)
 8006f96:	216a      	movs	r1, #106	; 0x6a
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8084 	beq.w	80070ae <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 8006fa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006faa:	4a45      	ldr	r2, [pc, #276]	; (80070c0 <gos_kernelDump+0x670>)
 8006fac:	216a      	movs	r1, #106	; 0x6a
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3328      	adds	r3, #40	; 0x28
 8006fb6:	885b      	ldrh	r3, [r3, #2]
 8006fb8:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006fba:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 8006fbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fc0:	226a      	movs	r2, #106	; 0x6a
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	4a3d      	ldr	r2, [pc, #244]	; (80070c0 <gos_kernelDump+0x670>)
 8006fca:	4413      	add	r3, r2
 8006fcc:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 8006fce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fd2:	4a3b      	ldr	r2, [pc, #236]	; (80070c0 <gos_kernelDump+0x670>)
 8006fd4:	216a      	movs	r1, #106	; 0x6a
 8006fd6:	fb01 f303 	mul.w	r3, r1, r3
 8006fda:	4413      	add	r3, r2
 8006fdc:	3348      	adds	r3, #72	; 0x48
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006fe2:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 8006fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fe8:	4a35      	ldr	r2, [pc, #212]	; (80070c0 <gos_kernelDump+0x670>)
 8006fea:	216a      	movs	r1, #106	; 0x6a
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3348      	adds	r3, #72	; 0x48
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006ff8:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 8006ffa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ffe:	4a30      	ldr	r2, [pc, #192]	; (80070c0 <gos_kernelDump+0x670>)
 8007000:	216a      	movs	r1, #106	; 0x6a
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	3348      	adds	r3, #72	; 0x48
 800700a:	885b      	ldrh	r3, [r3, #2]
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	f242 7310 	movw	r3, #10000	; 0x2710
 8007014:	fb02 f303 	mul.w	r3, r2, r3
 8007018:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800701c:	4928      	ldr	r1, [pc, #160]	; (80070c0 <gos_kernelDump+0x670>)
 800701e:	206a      	movs	r0, #106	; 0x6a
 8007020:	fb00 f202 	mul.w	r2, r0, r2
 8007024:	440a      	add	r2, r1
 8007026:	3248      	adds	r2, #72	; 0x48
 8007028:	8812      	ldrh	r2, [r2, #0]
 800702a:	b292      	uxth	r2, r2
 800702c:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8007030:	4a24      	ldr	r2, [pc, #144]	; (80070c4 <gos_kernelDump+0x674>)
 8007032:	fb82 1203 	smull	r1, r2, r2, r3
 8007036:	1152      	asrs	r2, r2, #5
 8007038:	17db      	asrs	r3, r3, #31
 800703a:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 800703c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007040:	4a1f      	ldr	r2, [pc, #124]	; (80070c0 <gos_kernelDump+0x670>)
 8007042:	206a      	movs	r0, #106	; 0x6a
 8007044:	fb00 f303 	mul.w	r3, r0, r3
 8007048:	4413      	add	r3, r2
 800704a:	3348      	adds	r3, #72	; 0x48
 800704c:	885b      	ldrh	r3, [r3, #2]
 800704e:	b29b      	uxth	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	f242 7310 	movw	r3, #10000	; 0x2710
 8007056:	fb02 f303 	mul.w	r3, r2, r3
 800705a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800705e:	4818      	ldr	r0, [pc, #96]	; (80070c0 <gos_kernelDump+0x670>)
 8007060:	256a      	movs	r5, #106	; 0x6a
 8007062:	fb05 f202 	mul.w	r2, r5, r2
 8007066:	4402      	add	r2, r0
 8007068:	3248      	adds	r2, #72	; 0x48
 800706a:	8812      	ldrh	r2, [r2, #0]
 800706c:	b292      	uxth	r2, r2
 800706e:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <gos_kernelDump+0x674>)
 8007074:	fb83 0302 	smull	r0, r3, r3, r2
 8007078:	1158      	asrs	r0, r3, #5
 800707a:	17d3      	asrs	r3, r2, #31
 800707c:	1ac3      	subs	r3, r0, r3
 800707e:	2064      	movs	r0, #100	; 0x64
 8007080:	fb00 f303 	mul.w	r3, r0, r3
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	9302      	str	r3, [sp, #8]
 8007088:	9101      	str	r1, [sp, #4]
 800708a:	9600      	str	r6, [sp, #0]
 800708c:	4673      	mov	r3, lr
 800708e:	4622      	mov	r2, r4
 8007090:	4661      	mov	r1, ip
 8007092:	480d      	ldr	r0, [pc, #52]	; (80070c8 <gos_kernelDump+0x678>)
 8007094:	f004 fd0a 	bl	800baac <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8007098:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800709c:	3301      	adds	r3, #1
 800709e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80070a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	f67f af72 	bls.w	8006f90 <gos_kernelDump+0x540>
 80070ac:	e000      	b.n	80070b0 <gos_kernelDump+0x660>
            break;
 80070ae:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 80070b0:	4806      	ldr	r0, [pc, #24]	; (80070cc <gos_kernelDump+0x67c>)
 80070b2:	f004 fcfb 	bl	800baac <gos_shellDriverTransmitString>
}
 80070b6:	bf00      	nop
 80070b8:	3748      	adds	r7, #72	; 0x48
 80070ba:	46bd      	mov	sp, r7
 80070bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c0:	2000035c 	.word	0x2000035c
 80070c4:	51eb851f 	.word	0x51eb851f
 80070c8:	0800edb4 	.word	0x0800edb4
 80070cc:	0800ede8 	.word	0x0800ede8

080070d0 <gos_kernelIsCallerIsr>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <gos_kernelIsCallerIsr+0x1c>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <gos_kernelIsCallerIsr+0x10>
 80070dc:	2336      	movs	r3, #54	; 0x36
 80070de:	e000      	b.n	80070e2 <gos_kernelIsCallerIsr+0x12>
 80070e0:	2349      	movs	r3, #73	; 0x49
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	2000129e 	.word	0x2000129e

080070f0 <SVC_Handler>:
    gos_ported_handleSVC();
 80070f0:	f01e 0f04 	tst.w	lr, #4
 80070f4:	bf0c      	ite	eq
 80070f6:	f3ef 8008 	mrseq	r0, MSP
 80070fa:	f3ef 8009 	mrsne	r0, PSP
 80070fe:	4b06      	ldr	r3, [pc, #24]	; (8007118 <SVC_Handler+0x28>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b36      	cmp	r3, #54	; 0x36
 8007104:	d104      	bne.n	8007110 <SVC_Handler+0x20>
 8007106:	4b04      	ldr	r3, [pc, #16]	; (8007118 <SVC_Handler+0x28>)
 8007108:	2249      	movs	r2, #73	; 0x49
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	f000 fad8 	bl	80076c0 <gos_kernelProcessorReset>
 8007110:	f000 b804 	b.w	800711c <gos_kernelSVC_HandlerMain>
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	20000356 	.word	0x20000356

0800711c <gos_kernelSVC_HandlerMain>:
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3318      	adds	r3, #24
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3b02      	subs	r3, #2
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	72fb      	strb	r3, [r7, #11]
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	2bff      	cmp	r3, #255	; 0xff
 800713c:	d105      	bne.n	800714a <gos_kernelSVC_HandlerMain+0x2e>
 800713e:	4b06      	ldr	r3, [pc, #24]	; (8007158 <gos_kernelSVC_HandlerMain+0x3c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a05      	ldr	r2, [pc, #20]	; (8007158 <gos_kernelSVC_HandlerMain+0x3c>)
 8007144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007148:	6013      	str	r3, [r2, #0]
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 800715c:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <PendSV_Handler+0x44>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b36      	cmp	r3, #54	; 0x36
 8007162:	d109      	bne.n	8007178 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 8007164:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 8007168:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 800716c:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <PendSV_Handler+0x44>)
 8007172:	2249      	movs	r2, #73	; 0x49
 8007174:	701a      	strb	r2, [r3, #0]
}
 8007176:	e011      	b.n	800719c <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 8007178:	b500      	push	{lr}
 800717a:	f3ef 8009 	mrs	r0, PSP
 800717e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007182:	f000 f8cb 	bl	800731c <gos_kernelSaveCurrentPsp>
 8007186:	f000 f8e1 	bl	800734c <gos_kernelSelectNextTask>
 800718a:	f000 f8b3 	bl	80072f4 <gos_kernelGetCurrentPsp>
 800718e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007192:	f380 8809 	msr	PSP, r0
 8007196:	f85d eb04 	ldr.w	lr, [sp], #4
 800719a:	4770      	bx	lr
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	20000357 	.word	0x20000357

080071a4 <gos_kernelReschedule>:
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	2b16      	cmp	r3, #22
 80071b2:	d106      	bne.n	80071c2 <gos_kernelReschedule+0x1e>
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <gos_kernelReschedule+0x2c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a05      	ldr	r2, [pc, #20]	; (80071d0 <gos_kernelReschedule+0x2c>)
 80071ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071be:	6013      	str	r3, [r2, #0]
}
 80071c0:	e000      	b.n	80071c4 <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 80071c2:	dfff      	svc	255	; 0xff
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	e000ed04 	.word	0xe000ed04

080071d4 <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 80071da:	2300      	movs	r3, #0
 80071dc:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 80071de:	f3ef 8309 	mrs	r3, PSP
 80071e2:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d02b      	beq.n	8007242 <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 80071ea:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3f      	ldr	r2, [pc, #252]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 80071f0:	216a      	movs	r1, #106	; 0x6a
 80071f2:	fb01 f303 	mul.w	r3, r1, r3
 80071f6:	4413      	add	r3, r2
 80071f8:	3360      	adds	r3, #96	; 0x60
 80071fa:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	d21e      	bcs.n	8007242 <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 8007204:	4b38      	ldr	r3, [pc, #224]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	226a      	movs	r2, #106	; 0x6a
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	3308      	adds	r3, #8
 8007210:	4a36      	ldr	r2, [pc, #216]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 8007212:	4413      	add	r3, r2
 8007214:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 8007216:	4a34      	ldr	r2, [pc, #208]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	4934      	ldr	r1, [pc, #208]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 800721c:	206a      	movs	r0, #106	; 0x6a
 800721e:	fb00 f202 	mul.w	r2, r0, r2
 8007222:	440a      	add	r2, r1
 8007224:	3260      	adds	r2, #96	; 0x60
 8007226:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	1a8a      	subs	r2, r1, r2
 800722e:	9202      	str	r2, [sp, #8]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	9201      	str	r2, [sp, #4]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	4b2e      	ldr	r3, [pc, #184]	; (80072f0 <gos_kernelCheckTaskStack+0x11c>)
 8007238:	2200      	movs	r2, #0
 800723a:	2100      	movs	r1, #0
 800723c:	2034      	movs	r0, #52	; 0x34
 800723e:	f002 f8a9 	bl	8009394 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d04a      	beq.n	80072de <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 8007248:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a27      	ldr	r2, [pc, #156]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 800724e:	216a      	movs	r1, #106	; 0x6a
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	4413      	add	r3, r2
 8007256:	3360      	adds	r3, #96	; 0x60
 8007258:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800725c:	4a22      	ldr	r2, [pc, #136]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	4922      	ldr	r1, [pc, #136]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 8007262:	206a      	movs	r0, #106	; 0x6a
 8007264:	fb00 f202 	mul.w	r2, r0, r2
 8007268:	440a      	add	r2, r1
 800726a:	3248      	adds	r2, #72	; 0x48
 800726c:	8812      	ldrh	r2, [r2, #0]
 800726e:	b292      	uxth	r2, r2
 8007270:	441a      	add	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	3b40      	subs	r3, #64	; 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 8007278:	4a1b      	ldr	r2, [pc, #108]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 800727a:	6812      	ldr	r2, [r2, #0]
 800727c:	491b      	ldr	r1, [pc, #108]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 800727e:	206a      	movs	r0, #106	; 0x6a
 8007280:	fb00 f202 	mul.w	r2, r0, r2
 8007284:	440a      	add	r2, r1
 8007286:	3248      	adds	r2, #72	; 0x48
 8007288:	8852      	ldrh	r2, [r2, #2]
 800728a:	b292      	uxth	r2, r2
    if (sp != 0 &&
 800728c:	4293      	cmp	r3, r2
 800728e:	d926      	bls.n	80072de <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 8007290:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a15      	ldr	r2, [pc, #84]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 8007296:	216a      	movs	r1, #106	; 0x6a
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	4413      	add	r3, r2
 800729e:	3360      	adds	r3, #96	; 0x60
 80072a0:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4910      	ldr	r1, [pc, #64]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 80072ac:	206a      	movs	r0, #106	; 0x6a
 80072ae:	fb00 f303 	mul.w	r3, r0, r3
 80072b2:	440b      	add	r3, r1
 80072b4:	3348      	adds	r3, #72	; 0x48
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4413      	add	r3, r2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <gos_kernelCheckTaskStack+0x114>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3a20      	subs	r2, #32
 80072cc:	b290      	uxth	r0, r2
 80072ce:	4a07      	ldr	r2, [pc, #28]	; (80072ec <gos_kernelCheckTaskStack+0x118>)
 80072d0:	216a      	movs	r1, #106	; 0x6a
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	3348      	adds	r3, #72	; 0x48
 80072da:	4602      	mov	r2, r0
 80072dc:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	200012a4 	.word	0x200012a4
 80072ec:	2000035c 	.word	0x2000035c
 80072f0:	0800ee3c 	.word	0x0800ee3c

080072f4 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <gos_kernelGetCurrentPsp+0x20>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a06      	ldr	r2, [pc, #24]	; (8007318 <gos_kernelGetCurrentPsp+0x24>)
 80072fe:	216a      	movs	r1, #106	; 0x6a
 8007300:	fb01 f303 	mul.w	r3, r1, r3
 8007304:	4413      	add	r3, r2
 8007306:	3338      	adds	r3, #56	; 0x38
 8007308:	685b      	ldr	r3, [r3, #4]
}
 800730a:	4618      	mov	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	200012a4 	.word	0x200012a4
 8007318:	2000035c 	.word	0x2000035c

0800731c <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <gos_kernelSaveCurrentPsp+0x28>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a07      	ldr	r2, [pc, #28]	; (8007348 <gos_kernelSaveCurrentPsp+0x2c>)
 800732a:	216a      	movs	r1, #106	; 0x6a
 800732c:	fb01 f303 	mul.w	r3, r1, r3
 8007330:	4413      	add	r3, r2
 8007332:	3338      	adds	r3, #56	; 0x38
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	200012a4 	.word	0x200012a4
 8007348:	2000035c 	.word	0x2000035c

0800734c <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 8007352:	2300      	movs	r3, #0
 8007354:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 8007356:	23ff      	movs	r3, #255	; 0xff
 8007358:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 800735a:	2300      	movs	r3, #0
 800735c:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 800735e:	2300      	movs	r3, #0
 8007360:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 8007362:	2300      	movs	r3, #0
 8007364:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 8007366:	4ba3      	ldr	r3, [pc, #652]	; (80075f4 <gos_kernelSelectNextTask+0x2a8>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4ba3      	ldr	r3, [pc, #652]	; (80075f8 <gos_kernelSelectNextTask+0x2ac>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 8007372:	f7ff ff2f 	bl	80071d4 <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 8007376:	4ba1      	ldr	r3, [pc, #644]	; (80075fc <gos_kernelSelectNextTask+0x2b0>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 8136 	bne.w	80075ec <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8007380:	2300      	movs	r3, #0
 8007382:	81fb      	strh	r3, [r7, #14]
 8007384:	e0d0      	b.n	8007528 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8007386:	89fb      	ldrh	r3, [r7, #14]
 8007388:	4a9d      	ldr	r2, [pc, #628]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 800738a:	216a      	movs	r1, #106	; 0x6a
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	4413      	add	r3, r2
 8007392:	3304      	adds	r3, #4
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b16      	cmp	r3, #22
 8007398:	d12c      	bne.n	80073f4 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 800739a:	89fb      	ldrh	r3, [r7, #14]
 800739c:	4a98      	ldr	r2, [pc, #608]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 800739e:	216a      	movs	r1, #106	; 0x6a
 80073a0:	fb01 f303 	mul.w	r3, r1, r3
 80073a4:	4413      	add	r3, r2
 80073a6:	3330      	adds	r3, #48	; 0x30
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	89fb      	ldrh	r3, [r7, #14]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	4411      	add	r1, r2
 80073b0:	4893      	ldr	r0, [pc, #588]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80073b2:	226a      	movs	r2, #106	; 0x6a
 80073b4:	fb03 f202 	mul.w	r2, r3, r2
 80073b8:	4402      	add	r2, r0
 80073ba:	3230      	adds	r2, #48	; 0x30
 80073bc:	6011      	str	r1, [r2, #0]
 80073be:	4a90      	ldr	r2, [pc, #576]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80073c0:	216a      	movs	r1, #106	; 0x6a
 80073c2:	fb01 f303 	mul.w	r3, r1, r3
 80073c6:	4413      	add	r3, r2
 80073c8:	3330      	adds	r3, #48	; 0x30
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	89fb      	ldrh	r3, [r7, #14]
 80073ce:	498c      	ldr	r1, [pc, #560]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80073d0:	206a      	movs	r0, #106	; 0x6a
 80073d2:	fb00 f303 	mul.w	r3, r0, r3
 80073d6:	440b      	add	r3, r1
 80073d8:	3328      	adds	r3, #40	; 0x28
 80073da:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 80073dc:	429a      	cmp	r2, r3
 80073de:	d309      	bcc.n	80073f4 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80073e0:	89fb      	ldrh	r3, [r7, #14]
 80073e2:	4a87      	ldr	r2, [pc, #540]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80073e4:	216a      	movs	r1, #106	; 0x6a
 80073e6:	fb01 f303 	mul.w	r3, r1, r3
 80073ea:	4413      	add	r3, r2
 80073ec:	3304      	adds	r3, #4
 80073ee:	220a      	movs	r2, #10
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	e040      	b.n	8007476 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 80073f4:	89fb      	ldrh	r3, [r7, #14]
 80073f6:	4a82      	ldr	r2, [pc, #520]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80073f8:	216a      	movs	r1, #106	; 0x6a
 80073fa:	fb01 f303 	mul.w	r3, r1, r3
 80073fe:	4413      	add	r3, r2
 8007400:	3304      	adds	r3, #4
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b19      	cmp	r3, #25
 8007406:	d136      	bne.n	8007476 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8007408:	89fb      	ldrh	r3, [r7, #14]
 800740a:	4a7d      	ldr	r2, [pc, #500]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 800740c:	216a      	movs	r1, #106	; 0x6a
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	4413      	add	r3, r2
 8007414:	3330      	adds	r3, #48	; 0x30
 8007416:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d02b      	beq.n	8007476 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 800741e:	89fb      	ldrh	r3, [r7, #14]
 8007420:	4a77      	ldr	r2, [pc, #476]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007422:	216a      	movs	r1, #106	; 0x6a
 8007424:	fb01 f303 	mul.w	r3, r1, r3
 8007428:	4413      	add	r3, r2
 800742a:	3338      	adds	r3, #56	; 0x38
 800742c:	6819      	ldr	r1, [r3, #0]
 800742e:	89fb      	ldrh	r3, [r7, #14]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4411      	add	r1, r2
 8007434:	4872      	ldr	r0, [pc, #456]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007436:	226a      	movs	r2, #106	; 0x6a
 8007438:	fb03 f202 	mul.w	r2, r3, r2
 800743c:	4402      	add	r2, r0
 800743e:	3238      	adds	r2, #56	; 0x38
 8007440:	6011      	str	r1, [r2, #0]
 8007442:	4a6f      	ldr	r2, [pc, #444]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007444:	216a      	movs	r1, #106	; 0x6a
 8007446:	fb01 f303 	mul.w	r3, r1, r3
 800744a:	4413      	add	r3, r2
 800744c:	3338      	adds	r3, #56	; 0x38
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	89fb      	ldrh	r3, [r7, #14]
 8007452:	496b      	ldr	r1, [pc, #428]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007454:	206a      	movs	r0, #106	; 0x6a
 8007456:	fb00 f303 	mul.w	r3, r0, r3
 800745a:	440b      	add	r3, r1
 800745c:	3330      	adds	r3, #48	; 0x30
 800745e:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8007460:	429a      	cmp	r2, r3
 8007462:	d308      	bcc.n	8007476 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8007464:	89fb      	ldrh	r3, [r7, #14]
 8007466:	4a66      	ldr	r2, [pc, #408]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007468:	216a      	movs	r1, #106	; 0x6a
 800746a:	fb01 f303 	mul.w	r3, r1, r3
 800746e:	4413      	add	r3, r2
 8007470:	3304      	adds	r3, #4
 8007472:	220a      	movs	r2, #10
 8007474:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 8007476:	89fa      	ldrh	r2, [r7, #14]
 8007478:	4b62      	ldr	r3, [pc, #392]	; (8007604 <gos_kernelSelectNextTask+0x2b8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d047      	beq.n	8007510 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8007480:	89fb      	ldrh	r3, [r7, #14]
 8007482:	4a5f      	ldr	r2, [pc, #380]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007484:	216a      	movs	r1, #106	; 0x6a
 8007486:	fb01 f303 	mul.w	r3, r1, r3
 800748a:	4413      	add	r3, r2
 800748c:	3304      	adds	r3, #4
 800748e:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 8007490:	2b0a      	cmp	r3, #10
 8007492:	d13d      	bne.n	8007510 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8007494:	89fb      	ldrh	r3, [r7, #14]
 8007496:	4a5a      	ldr	r2, [pc, #360]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007498:	216a      	movs	r1, #106	; 0x6a
 800749a:	fb01 f303 	mul.w	r3, r1, r3
 800749e:	4413      	add	r3, r2
 80074a0:	3306      	adds	r3, #6
 80074a2:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 80074a4:	7b7a      	ldrb	r2, [r7, #13]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d932      	bls.n	8007510 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 80074aa:	89fb      	ldrh	r3, [r7, #14]
 80074ac:	4a54      	ldr	r2, [pc, #336]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80074ae:	216a      	movs	r1, #106	; 0x6a
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	3360      	adds	r3, #96	; 0x60
 80074b8:	889b      	ldrh	r3, [r3, #4]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	89fb      	ldrh	r3, [r7, #14]
 80074be:	4950      	ldr	r1, [pc, #320]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80074c0:	206a      	movs	r0, #106	; 0x6a
 80074c2:	fb00 f303 	mul.w	r3, r0, r3
 80074c6:	440b      	add	r3, r1
 80074c8:	3358      	adds	r3, #88	; 0x58
 80074ca:	88db      	ldrh	r3, [r3, #6]
 80074cc:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d21e      	bcs.n	8007510 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 80074d2:	89fb      	ldrh	r3, [r7, #14]
 80074d4:	4a4a      	ldr	r2, [pc, #296]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80074d6:	216a      	movs	r1, #106	; 0x6a
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	4413      	add	r3, r2
 80074de:	3360      	adds	r3, #96	; 0x60
 80074e0:	885b      	ldrh	r3, [r3, #2]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	89fb      	ldrh	r3, [r7, #14]
 80074e6:	4946      	ldr	r1, [pc, #280]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80074e8:	206a      	movs	r0, #106	; 0x6a
 80074ea:	fb00 f303 	mul.w	r3, r0, r3
 80074ee:	440b      	add	r3, r1
 80074f0:	3358      	adds	r3, #88	; 0x58
 80074f2:	88db      	ldrh	r3, [r3, #6]
 80074f4:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d20a      	bcs.n	8007510 <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 80074fa:	89fb      	ldrh	r3, [r7, #14]
 80074fc:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 80074fe:	89fb      	ldrh	r3, [r7, #14]
 8007500:	4a3f      	ldr	r2, [pc, #252]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007502:	216a      	movs	r1, #106	; 0x6a
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	3306      	adds	r3, #6
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8007510:	89fb      	ldrh	r3, [r7, #14]
 8007512:	4a3b      	ldr	r2, [pc, #236]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007514:	216a      	movs	r1, #106	; 0x6a
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8007522:	89fb      	ldrh	r3, [r7, #14]
 8007524:	3301      	adds	r3, #1
 8007526:	81fb      	strh	r3, [r7, #14]
 8007528:	89fb      	ldrh	r3, [r7, #14]
 800752a:	2b0f      	cmp	r3, #15
 800752c:	f67f af2b 	bls.w	8007386 <gos_kernelSelectNextTask+0x3a>
 8007530:	e000      	b.n	8007534 <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 8007532:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 8007534:	f7ff f8da 	bl	80066ec <gos_kernelGetCpuUsage>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	4b32      	ldr	r3, [pc, #200]	; (8007608 <gos_kernelSelectNextTask+0x2bc>)
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d901      	bls.n	8007548 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 8007544:	2300      	movs	r3, #0
 8007546:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 8007548:	897a      	ldrh	r2, [r7, #10]
 800754a:	4b2e      	ldr	r3, [pc, #184]	; (8007604 <gos_kernelSelectNextTask+0x2b8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d02b      	beq.n	80075aa <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 8007552:	4b2e      	ldr	r3, [pc, #184]	; (800760c <gos_kernelSelectNextTask+0x2c0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d016      	beq.n	8007588 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 800755a:	4b2c      	ldr	r3, [pc, #176]	; (800760c <gos_kernelSelectNextTask+0x2c0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a29      	ldr	r2, [pc, #164]	; (8007604 <gos_kernelSelectNextTask+0x2b8>)
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	4927      	ldr	r1, [pc, #156]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007564:	206a      	movs	r0, #106	; 0x6a
 8007566:	fb00 f202 	mul.w	r2, r0, r2
 800756a:	440a      	add	r2, r1
 800756c:	3228      	adds	r2, #40	; 0x28
 800756e:	8852      	ldrh	r2, [r2, #2]
 8007570:	b290      	uxth	r0, r2
 8007572:	897a      	ldrh	r2, [r7, #10]
 8007574:	4922      	ldr	r1, [pc, #136]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 8007576:	246a      	movs	r4, #106	; 0x6a
 8007578:	fb04 f202 	mul.w	r2, r4, r2
 800757c:	440a      	add	r2, r1
 800757e:	3228      	adds	r2, #40	; 0x28
 8007580:	8852      	ldrh	r2, [r2, #2]
 8007582:	b292      	uxth	r2, r2
 8007584:	4611      	mov	r1, r2
 8007586:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 8007588:	4b1e      	ldr	r3, [pc, #120]	; (8007604 <gos_kernelSelectNextTask+0x2b8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	491c      	ldr	r1, [pc, #112]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 800758e:	226a      	movs	r2, #106	; 0x6a
 8007590:	fb03 f202 	mul.w	r2, r3, r2
 8007594:	440a      	add	r2, r1
 8007596:	3240      	adds	r2, #64	; 0x40
 8007598:	6852      	ldr	r2, [r2, #4]
 800759a:	3201      	adds	r2, #1
 800759c:	4918      	ldr	r1, [pc, #96]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 800759e:	206a      	movs	r0, #106	; 0x6a
 80075a0:	fb00 f303 	mul.w	r3, r0, r3
 80075a4:	440b      	add	r3, r1
 80075a6:	3340      	adds	r3, #64	; 0x40
 80075a8:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 80075aa:	1cbb      	adds	r3, r7, #2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f004 faa1 	bl	800baf4 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 80075b2:	887a      	ldrh	r2, [r7, #2]
 80075b4:	4b16      	ldr	r3, [pc, #88]	; (8007610 <gos_kernelSelectNextTask+0x2c4>)
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 80075bc:	4b11      	ldr	r3, [pc, #68]	; (8007604 <gos_kernelSelectNextTask+0x2b8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	226a      	movs	r2, #106	; 0x6a
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
 80075c6:	3350      	adds	r3, #80	; 0x50
 80075c8:	4a0d      	ldr	r2, [pc, #52]	; (8007600 <gos_kernelSelectNextTask+0x2b4>)
 80075ca:	4413      	add	r3, r2
 80075cc:	3305      	adds	r3, #5
 80075ce:	893a      	ldrh	r2, [r7, #8]
 80075d0:	4619      	mov	r1, r3
 80075d2:	4810      	ldr	r0, [pc, #64]	; (8007614 <gos_kernelSelectNextTask+0x2c8>)
 80075d4:	f003 fbd4 	bl	800ad80 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 80075d8:	480d      	ldr	r0, [pc, #52]	; (8007610 <gos_kernelSelectNextTask+0x2c4>)
 80075da:	f004 fa8b 	bl	800baf4 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 80075de:	897b      	ldrh	r3, [r7, #10]
 80075e0:	4a08      	ldr	r2, [pc, #32]	; (8007604 <gos_kernelSelectNextTask+0x2b8>)
 80075e2:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 80075e4:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <gos_kernelSelectNextTask+0x2a8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a03      	ldr	r2, [pc, #12]	; (80075f8 <gos_kernelSelectNextTask+0x2ac>)
 80075ea:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 80075ec:	bf00      	nop
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd90      	pop	{r4, r7, pc}
 80075f4:	200012a8 	.word	0x200012a8
 80075f8:	200012c4 	.word	0x200012c4
 80075fc:	2000129d 	.word	0x2000129d
 8007600:	2000035c 	.word	0x2000035c
 8007604:	200012a4 	.word	0x200012a4
 8007608:	20000354 	.word	0x20000354
 800760c:	200012bc 	.word	0x200012bc
 8007610:	200012ac 	.word	0x200012ac
 8007614:	200012b0 	.word	0x200012b0

08007618 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	3b05      	subs	r3, #5
 8007626:	2b14      	cmp	r3, #20
 8007628:	d836      	bhi.n	8007698 <gos_kernelGetTaskStateString+0x80>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <gos_kernelGetTaskStateString+0x18>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	0800768d 	.word	0x0800768d
 8007634:	08007699 	.word	0x08007699
 8007638:	08007699 	.word	0x08007699
 800763c:	08007699 	.word	0x08007699
 8007640:	08007699 	.word	0x08007699
 8007644:	08007685 	.word	0x08007685
 8007648:	08007699 	.word	0x08007699
 800764c:	08007699 	.word	0x08007699
 8007650:	08007695 	.word	0x08007695
 8007654:	08007699 	.word	0x08007699
 8007658:	08007699 	.word	0x08007699
 800765c:	08007699 	.word	0x08007699
 8007660:	08007699 	.word	0x08007699
 8007664:	08007699 	.word	0x08007699
 8007668:	08007699 	.word	0x08007699
 800766c:	08007699 	.word	0x08007699
 8007670:	08007699 	.word	0x08007699
 8007674:	08007689 	.word	0x08007689
 8007678:	08007699 	.word	0x08007699
 800767c:	08007699 	.word	0x08007699
 8007680:	08007691 	.word	0x08007691
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 8007684:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <gos_kernelGetTaskStateString+0x90>)
 8007686:	e008      	b.n	800769a <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 8007688:	4b08      	ldr	r3, [pc, #32]	; (80076ac <gos_kernelGetTaskStateString+0x94>)
 800768a:	e006      	b.n	800769a <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 800768c:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <gos_kernelGetTaskStateString+0x98>)
 800768e:	e004      	b.n	800769a <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 8007690:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <gos_kernelGetTaskStateString+0x9c>)
 8007692:	e002      	b.n	800769a <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 8007694:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <gos_kernelGetTaskStateString+0xa0>)
 8007696:	e000      	b.n	800769a <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 8007698:	4b08      	ldr	r3, [pc, #32]	; (80076bc <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 800769a:	4618      	mov	r0, r3
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	0800ee80 	.word	0x0800ee80
 80076ac:	0800ee90 	.word	0x0800ee90
 80076b0:	0800eea4 	.word	0x0800eea4
 80076b4:	0800eeb8 	.word	0x0800eeb8
 80076b8:	0800eecc 	.word	0x0800eecc
 80076bc:	0800eedc 	.word	0x0800eedc

080076c0 <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <gos_kernelProcessorReset+0x20>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076d0:	4903      	ldr	r1, [pc, #12]	; (80076e0 <gos_kernelProcessorReset+0x20>)
 80076d2:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <gos_kernelProcessorReset+0x24>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	600b      	str	r3, [r1, #0]
 80076d8:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <gos_kernelProcessorReset+0x1c>
 80076e0:	e000ed0c 	.word	0xe000ed0c
 80076e4:	05fa0004 	.word	0x05fa0004

080076e8 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <NMI_Handler+0x4>

080076f0 <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 80076f4:	bf00      	nop
 80076f6:	e7fd      	b.n	80076f4 <HardFault_Handler+0x4>

080076f8 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 80076fc:	bf00      	nop
 80076fe:	e7fd      	b.n	80076fc <MemManage_Handler+0x4>

08007700 <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <BusFault_Handler+0x4>

08007708 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <UsageFault_Handler+0x4>

08007710 <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 800771a:	2355      	movs	r3, #85	; 0x55
 800771c:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 800771e:	2300      	movs	r3, #0
 8007720:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 8007722:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8007726:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fc8b 	bl	8009048 <gos_taskCheckDescriptor>
 8007732:	4603      	mov	r3, r0
 8007734:	2bae      	cmp	r3, #174	; 0xae
 8007736:	d102      	bne.n	800773e <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 8007738:	23ae      	movs	r3, #174	; 0xae
 800773a:	75fb      	strb	r3, [r7, #23]
 800773c:	e173      	b.n	8007a26 <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 800773e:	23ae      	movs	r3, #174	; 0xae
 8007740:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8007742:	2300      	movs	r3, #0
 8007744:	82bb      	strh	r3, [r7, #20]
 8007746:	e01a      	b.n	800777e <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8007748:	8abb      	ldrh	r3, [r7, #20]
 800774a:	4a89      	ldr	r2, [pc, #548]	; (8007970 <gos_taskRegister+0x260>)
 800774c:	216a      	movs	r1, #106	; 0x6a
 800774e:	fb01 f303 	mul.w	r3, r1, r3
 8007752:	4413      	add	r3, r2
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d102      	bne.n	8007760 <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 800775a:	2355      	movs	r3, #85	; 0x55
 800775c:	75fb      	strb	r3, [r7, #23]
                break;
 800775e:	e011      	b.n	8007784 <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 8007760:	8abb      	ldrh	r3, [r7, #20]
 8007762:	4a83      	ldr	r2, [pc, #524]	; (8007970 <gos_taskRegister+0x260>)
 8007764:	216a      	movs	r1, #106	; 0x6a
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	4413      	add	r3, r2
 800776c:	3348      	adds	r3, #72	; 0x48
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	4413      	add	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8007778:	8abb      	ldrh	r3, [r7, #20]
 800777a:	3301      	adds	r3, #1
 800777c:	82bb      	strh	r3, [r7, #20]
 800777e:	8abb      	ldrh	r3, [r7, #20]
 8007780:	2b0f      	cmp	r3, #15
 8007782:	d9e1      	bls.n	8007748 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 8007784:	8abb      	ldrh	r3, [r7, #20]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	d902      	bls.n	8007790 <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 800778a:	23ae      	movs	r3, #174	; 0xae
 800778c:	75fb      	strb	r3, [r7, #23]
 800778e:	e14a      	b.n	8007a26 <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8007796:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800779a:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3b04      	subs	r3, #4
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077a8:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3b04      	subs	r3, #4
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3b04      	subs	r3, #4
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f06f 0202 	mvn.w	r2, #2
 80077c4:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80077d2:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3b04      	subs	r3, #4
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80077e0:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3b04      	subs	r3, #4
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80077ee:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3b04      	subs	r3, #4
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80077fc:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3b04      	subs	r3, #4
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3b04      	subs	r3, #4
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8007816:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3b04      	subs	r3, #4
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8007824:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3b04      	subs	r3, #4
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8007832:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3b04      	subs	r3, #4
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8007840:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3b04      	subs	r3, #4
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800784e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3b04      	subs	r3, #4
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800785c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3b04      	subs	r3, #4
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800786a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3b04      	subs	r3, #4
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8007878:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 800787a:	8abb      	ldrh	r3, [r7, #20]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	493c      	ldr	r1, [pc, #240]	; (8007970 <gos_taskRegister+0x260>)
 8007880:	206a      	movs	r0, #106	; 0x6a
 8007882:	fb00 f303 	mul.w	r3, r0, r3
 8007886:	440b      	add	r3, r1
 8007888:	333c      	adds	r3, #60	; 0x3c
 800788a:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 800788c:	8abb      	ldrh	r3, [r7, #20]
 800788e:	4a38      	ldr	r2, [pc, #224]	; (8007970 <gos_taskRegister+0x260>)
 8007890:	216a      	movs	r1, #106	; 0x6a
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	4413      	add	r3, r2
 8007898:	3304      	adds	r3, #4
 800789a:	220a      	movs	r2, #10
 800789c:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 800789e:	8abb      	ldrh	r3, [r7, #20]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	4932      	ldr	r1, [pc, #200]	; (8007970 <gos_taskRegister+0x260>)
 80078a6:	206a      	movs	r0, #106	; 0x6a
 80078a8:	fb00 f303 	mul.w	r3, r0, r3
 80078ac:	440b      	add	r3, r1
 80078ae:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 80078b0:	8abb      	ldrh	r3, [r7, #20]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	7990      	ldrb	r0, [r2, #6]
 80078b6:	4a2e      	ldr	r2, [pc, #184]	; (8007970 <gos_taskRegister+0x260>)
 80078b8:	216a      	movs	r1, #106	; 0x6a
 80078ba:	fb01 f303 	mul.w	r3, r1, r3
 80078be:	4413      	add	r3, r2
 80078c0:	3306      	adds	r3, #6
 80078c2:	4602      	mov	r2, r0
 80078c4:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 80078c6:	8abb      	ldrh	r3, [r7, #20]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	7990      	ldrb	r0, [r2, #6]
 80078cc:	4a28      	ldr	r2, [pc, #160]	; (8007970 <gos_taskRegister+0x260>)
 80078ce:	216a      	movs	r1, #106	; 0x6a
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	3307      	adds	r3, #7
 80078d8:	4602      	mov	r2, r0
 80078da:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 80078dc:	8abb      	ldrh	r3, [r7, #20]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80078e4:	b290      	uxth	r0, r2
 80078e6:	4a22      	ldr	r2, [pc, #136]	; (8007970 <gos_taskRegister+0x260>)
 80078e8:	216a      	movs	r1, #106	; 0x6a
 80078ea:	fb01 f303 	mul.w	r3, r1, r3
 80078ee:	4413      	add	r3, r2
 80078f0:	3348      	adds	r3, #72	; 0x48
 80078f2:	4602      	mov	r2, r0
 80078f4:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 80078f6:	8abb      	ldrh	r3, [r7, #20]
 80078f8:	8aba      	ldrh	r2, [r7, #20]
 80078fa:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 80078fe:	b290      	uxth	r0, r2
 8007900:	4a1b      	ldr	r2, [pc, #108]	; (8007970 <gos_taskRegister+0x260>)
 8007902:	216a      	movs	r1, #106	; 0x6a
 8007904:	fb01 f303 	mul.w	r3, r1, r3
 8007908:	4413      	add	r3, r2
 800790a:	332a      	adds	r3, #42	; 0x2a
 800790c:	4602      	mov	r2, r0
 800790e:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 8007910:	8abb      	ldrh	r3, [r7, #20]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	8912      	ldrh	r2, [r2, #8]
 8007916:	b290      	uxth	r0, r2
 8007918:	4a15      	ldr	r2, [pc, #84]	; (8007970 <gos_taskRegister+0x260>)
 800791a:	216a      	movs	r1, #106	; 0x6a
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	4413      	add	r3, r2
 8007922:	3308      	adds	r3, #8
 8007924:	4602      	mov	r2, r0
 8007926:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800792e:	b29b      	uxth	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8007934:	8abb      	ldrh	r3, [r7, #20]
 8007936:	4a0e      	ldr	r2, [pc, #56]	; (8007970 <gos_taskRegister+0x260>)
 8007938:	216a      	movs	r1, #106	; 0x6a
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	335e      	adds	r3, #94	; 0x5e
 8007942:	f242 7210 	movw	r2, #10000	; 0x2710
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	e021      	b.n	800798e <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007950:	b29b      	uxth	r3, r3
 8007952:	f242 7210 	movw	r2, #10000	; 0x2710
 8007956:	4293      	cmp	r3, r2
 8007958:	d90c      	bls.n	8007974 <gos_taskRegister+0x264>
            {
            	taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 800795a:	8abb      	ldrh	r3, [r7, #20]
 800795c:	4a04      	ldr	r2, [pc, #16]	; (8007970 <gos_taskRegister+0x260>)
 800795e:	216a      	movs	r1, #106	; 0x6a
 8007960:	fb01 f303 	mul.w	r3, r1, r3
 8007964:	4413      	add	r3, r2
 8007966:	335e      	adds	r3, #94	; 0x5e
 8007968:	f242 7210 	movw	r2, #10000	; 0x2710
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e00e      	b.n	800798e <gos_taskRegister+0x27e>
 8007970:	2000035c 	.word	0x2000035c
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 8007974:	8abb      	ldrh	r3, [r7, #20]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800797c:	b290      	uxth	r0, r2
 800797e:	4a2c      	ldr	r2, [pc, #176]	; (8007a30 <gos_taskRegister+0x320>)
 8007980:	216a      	movs	r1, #106	; 0x6a
 8007982:	fb01 f303 	mul.w	r3, r1, r3
 8007986:	4413      	add	r3, r2
 8007988:	335e      	adds	r3, #94	; 0x5e
 800798a:	4602      	mov	r2, r0
 800798c:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	330a      	adds	r3, #10
 8007992:	2b00      	cmp	r3, #0
 8007994:	d015      	beq.n	80079c2 <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	330a      	adds	r3, #10
 800799a:	4618      	mov	r0, r3
 800799c:	f7f8 fc98 	bl	80002d0 <strlen>
 80079a0:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d80d      	bhi.n	80079c2 <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 80079a6:	8abb      	ldrh	r3, [r7, #20]
 80079a8:	226a      	movs	r2, #106	; 0x6a
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	3308      	adds	r3, #8
 80079b0:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <gos_taskRegister+0x320>)
 80079b2:	4413      	add	r3, r2
 80079b4:	1c9a      	adds	r2, r3, #2
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	330a      	adds	r3, #10
 80079ba:	4619      	mov	r1, r3
 80079bc:	4610      	mov	r0, r2
 80079be:	f004 ff98 	bl	800c8f2 <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 80079c2:	8abb      	ldrh	r3, [r7, #20]
 80079c4:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <gos_taskRegister+0x320>)
 80079c6:	216a      	movs	r1, #106	; 0x6a
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	4413      	add	r3, r2
 80079ce:	332a      	adds	r3, #42	; 0x2a
 80079d0:	881a      	ldrh	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	855a      	strh	r2, [r3, #42]	; 0x2a
            if (taskId != NULL)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 80079dc:	8abb      	ldrh	r3, [r7, #20]
 80079de:	4a14      	ldr	r2, [pc, #80]	; (8007a30 <gos_taskRegister+0x320>)
 80079e0:	216a      	movs	r1, #106	; 0x6a
 80079e2:	fb01 f303 	mul.w	r3, r1, r3
 80079e6:	4413      	add	r3, r2
 80079e8:	332a      	adds	r3, #42	; 0x2a
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 80079f0:	8abb      	ldrh	r3, [r7, #20]
 80079f2:	4a0f      	ldr	r2, [pc, #60]	; (8007a30 <gos_taskRegister+0x320>)
 80079f4:	216a      	movs	r1, #106	; 0x6a
 80079f6:	fb01 f303 	mul.w	r3, r1, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	333c      	adds	r3, #60	; 0x3c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	8aba      	ldrh	r2, [r7, #20]
 8007a02:	490b      	ldr	r1, [pc, #44]	; (8007a30 <gos_taskRegister+0x320>)
 8007a04:	206a      	movs	r0, #106	; 0x6a
 8007a06:	fb00 f202 	mul.w	r2, r0, r2
 8007a0a:	440a      	add	r2, r1
 8007a0c:	3248      	adds	r2, #72	; 0x48
 8007a0e:	8812      	ldrh	r2, [r2, #0]
 8007a10:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8007a12:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8007a14:	3240      	adds	r2, #64	; 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8007a16:	4906      	ldr	r1, [pc, #24]	; (8007a30 <gos_taskRegister+0x320>)
 8007a18:	206a      	movs	r0, #106	; 0x6a
 8007a1a:	fb00 f303 	mul.w	r3, r0, r3
 8007a1e:	440b      	add	r3, r1
 8007a20:	3360      	adds	r3, #96	; 0x60
 8007a22:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	2000035c 	.word	0x2000035c

08007a34 <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 8007a3c:	23ae      	movs	r3, #174	; 0xae
 8007a3e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (currentTaskIndex > 0u)
 8007a40:	4b3a      	ldr	r3, [pc, #232]	; (8007b2c <gos_taskSleep+0xf8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d06c      	beq.n	8007b22 <gos_taskSleep+0xee>
    {
        GOS_ATOMIC_ENTER
 8007a48:	4b39      	ldr	r3, [pc, #228]	; (8007b30 <gos_taskSleep+0xfc>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d108      	bne.n	8007a62 <gos_taskSleep+0x2e>
 8007a50:	b672      	cpsid	i
 8007a52:	f3ef 8310 	mrs	r3, PRIMASK
 8007a56:	4a37      	ldr	r2, [pc, #220]	; (8007b34 <gos_taskSleep+0x100>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	4b33      	ldr	r3, [pc, #204]	; (8007b30 <gos_taskSleep+0xfc>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	3301      	adds	r3, #1
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	4b31      	ldr	r3, [pc, #196]	; (8007b30 <gos_taskSleep+0xfc>)
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	4b32      	ldr	r3, [pc, #200]	; (8007b38 <gos_taskSleep+0x104>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	4b30      	ldr	r3, [pc, #192]	; (8007b38 <gos_taskSleep+0x104>)
 8007a78:	701a      	strb	r2, [r3, #0]
        {
            if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 8007a7a:	4b2c      	ldr	r3, [pc, #176]	; (8007b2c <gos_taskSleep+0xf8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a2f      	ldr	r2, [pc, #188]	; (8007b3c <gos_taskSleep+0x108>)
 8007a80:	216a      	movs	r1, #106	; 0x6a
 8007a82:	fb01 f303 	mul.w	r3, r1, r3
 8007a86:	4413      	add	r3, r2
 8007a88:	3304      	adds	r3, #4
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b0a      	cmp	r3, #10
 8007a8e:	d121      	bne.n	8007ad4 <gos_taskSleep+0xa0>
            {
                taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 8007a90:	4b26      	ldr	r3, [pc, #152]	; (8007b2c <gos_taskSleep+0xf8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a29      	ldr	r2, [pc, #164]	; (8007b3c <gos_taskSleep+0x108>)
 8007a96:	216a      	movs	r1, #106	; 0x6a
 8007a98:	fb01 f303 	mul.w	r3, r1, r3
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	2216      	movs	r2, #22
 8007aa2:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 8007aa4:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <gos_taskSleep+0xf8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a24      	ldr	r2, [pc, #144]	; (8007b3c <gos_taskSleep+0x108>)
 8007aaa:	216a      	movs	r1, #106	; 0x6a
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	332c      	adds	r3, #44	; 0x2c
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 8007ab8:	4b1c      	ldr	r3, [pc, #112]	; (8007b2c <gos_taskSleep+0xf8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1f      	ldr	r2, [pc, #124]	; (8007b3c <gos_taskSleep+0x108>)
 8007abe:	216a      	movs	r1, #106	; 0x6a
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3330      	adds	r3, #48	; 0x30
 8007ac8:	2200      	movs	r2, #0
 8007aca:	801a      	strh	r2, [r3, #0]
 8007acc:	2200      	movs	r2, #0
 8007ace:	805a      	strh	r2, [r3, #2]
                taskSleepResult = GOS_SUCCESS;
 8007ad0:	2355      	movs	r3, #85	; 0x55
 8007ad2:	73fb      	strb	r3, [r7, #15]
            else
            {
                // Nothing to do.
            }
        }
        GOS_ATOMIC_EXIT
 8007ad4:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <gos_taskSleep+0xfc>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <gos_taskSleep+0xb4>
 8007adc:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <gos_taskSleep+0xfc>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <gos_taskSleep+0xfc>)
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <gos_taskSleep+0xfc>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d108      	bne.n	8007b02 <gos_taskSleep+0xce>
 8007af0:	4b10      	ldr	r3, [pc, #64]	; (8007b34 <gos_taskSleep+0x100>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f383 8810 	msr	PRIMASK, r3
 8007af8:	b662      	cpsie	i
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <gos_taskSleep+0x104>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <gos_taskSleep+0xe2>
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <gos_taskSleep+0x104>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <gos_taskSleep+0x104>)
 8007b14:	701a      	strb	r2, [r3, #0]

        if (taskSleepResult == GOS_SUCCESS)
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	2b55      	cmp	r3, #85	; 0x55
 8007b1a:	d102      	bne.n	8007b22 <gos_taskSleep+0xee>
        {
            // Unprivileged.
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 8007b1c:	2009      	movs	r0, #9
 8007b1e:	f7ff fb41 	bl	80071a4 <gos_kernelReschedule>
    else
    {
        // Idle task cannot sleep.
    }

    return taskSleepResult;
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	200012a4 	.word	0x200012a4
 8007b30:	2000129f 	.word	0x2000129f
 8007b34:	200012a0 	.word	0x200012a0
 8007b38:	2000129d 	.word	0x2000129d
 8007b3c:	2000035c 	.word	0x2000035c

08007b40 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	4603      	mov	r3, r0
 8007b48:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 8007b4a:	23ae      	movs	r3, #174	; 0xae
 8007b4c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007b52:	4b56      	ldr	r3, [pc, #344]	; (8007cac <gos_taskWakeup+0x16c>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d108      	bne.n	8007b6c <gos_taskWakeup+0x2c>
 8007b5a:	b672      	cpsid	i
 8007b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b60:	4a53      	ldr	r2, [pc, #332]	; (8007cb0 <gos_taskWakeup+0x170>)
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	4b4f      	ldr	r3, [pc, #316]	; (8007cac <gos_taskWakeup+0x16c>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	3301      	adds	r3, #1
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	4b4d      	ldr	r3, [pc, #308]	; (8007cac <gos_taskWakeup+0x16c>)
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	4b4e      	ldr	r3, [pc, #312]	; (8007cb4 <gos_taskWakeup+0x174>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	4b4c      	ldr	r3, [pc, #304]	; (8007cb4 <gos_taskWakeup+0x174>)
 8007b82:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8007b84:	88fb      	ldrh	r3, [r7, #6]
 8007b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8a:	d969      	bls.n	8007c60 <gos_taskWakeup+0x120>
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	f248 020f 	movw	r2, #32783	; 0x800f
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d864      	bhi.n	8007c60 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8007b9c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007b9e:	4b46      	ldr	r3, [pc, #280]	; (8007cb8 <gos_taskWakeup+0x178>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a46      	ldr	r2, [pc, #280]	; (8007cbc <gos_taskWakeup+0x17c>)
 8007ba4:	216a      	movs	r1, #106	; 0x6a
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	4413      	add	r3, r2
 8007bac:	3308      	adds	r3, #8
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b21b      	sxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	db03      	blt.n	8007bbe <gos_taskWakeup+0x7e>
            inIsr > 0)
 8007bb6:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <gos_taskWakeup+0x180>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d015      	beq.n	8007bea <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8007bbe:	4a3f      	ldr	r2, [pc, #252]	; (8007cbc <gos_taskWakeup+0x17c>)
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	216a      	movs	r1, #106	; 0x6a
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	4413      	add	r3, r2
 8007bca:	3304      	adds	r3, #4
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b16      	cmp	r3, #22
 8007bd0:	d146      	bne.n	8007c60 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8007bd2:	4a3a      	ldr	r2, [pc, #232]	; (8007cbc <gos_taskWakeup+0x17c>)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	216a      	movs	r1, #106	; 0x6a
 8007bd8:	fb01 f303 	mul.w	r3, r1, r3
 8007bdc:	4413      	add	r3, r2
 8007bde:	3304      	adds	r3, #4
 8007be0:	220a      	movs	r2, #10
 8007be2:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 8007be4:	2355      	movs	r3, #85	; 0x55
 8007be6:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8007be8:	e03a      	b.n	8007c60 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8007bea:	4b30      	ldr	r3, [pc, #192]	; (8007cac <gos_taskWakeup+0x16c>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <gos_taskWakeup+0xbe>
 8007bf2:	4b2e      	ldr	r3, [pc, #184]	; (8007cac <gos_taskWakeup+0x16c>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	4b2c      	ldr	r3, [pc, #176]	; (8007cac <gos_taskWakeup+0x16c>)
 8007bfc:	701a      	strb	r2, [r3, #0]
 8007bfe:	4b2b      	ldr	r3, [pc, #172]	; (8007cac <gos_taskWakeup+0x16c>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d108      	bne.n	8007c18 <gos_taskWakeup+0xd8>
 8007c06:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <gos_taskWakeup+0x170>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f383 8810 	msr	PRIMASK, r3
 8007c0e:	b662      	cpsie	i
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4b26      	ldr	r3, [pc, #152]	; (8007cb4 <gos_taskWakeup+0x174>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <gos_taskWakeup+0xec>
 8007c20:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <gos_taskWakeup+0x174>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	4b22      	ldr	r3, [pc, #136]	; (8007cb4 <gos_taskWakeup+0x174>)
 8007c2a:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8007c2c:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <gos_taskWakeup+0x178>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	226a      	movs	r2, #106	; 0x6a
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
 8007c36:	3308      	adds	r3, #8
 8007c38:	4a20      	ldr	r2, [pc, #128]	; (8007cbc <gos_taskWakeup+0x17c>)
 8007c3a:	4413      	add	r3, r2
 8007c3c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	216a      	movs	r1, #106	; 0x6a
 8007c42:	fb01 f202 	mul.w	r2, r1, r2
 8007c46:	3208      	adds	r2, #8
 8007c48:	491c      	ldr	r1, [pc, #112]	; (8007cbc <gos_taskWakeup+0x17c>)
 8007c4a:	440a      	add	r2, r1
 8007c4c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 8007c4e:	9201      	str	r2, [sp, #4]
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <gos_taskWakeup+0x184>)
 8007c54:	f240 126b 	movw	r2, #363	; 0x16b
 8007c58:	491b      	ldr	r1, [pc, #108]	; (8007cc8 <gos_taskWakeup+0x188>)
 8007c5a:	2034      	movs	r0, #52	; 0x34
 8007c5c:	f001 fb9a 	bl	8009394 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8007c60:	4b12      	ldr	r3, [pc, #72]	; (8007cac <gos_taskWakeup+0x16c>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <gos_taskWakeup+0x134>
 8007c68:	4b10      	ldr	r3, [pc, #64]	; (8007cac <gos_taskWakeup+0x16c>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	4b0e      	ldr	r3, [pc, #56]	; (8007cac <gos_taskWakeup+0x16c>)
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	4b0d      	ldr	r3, [pc, #52]	; (8007cac <gos_taskWakeup+0x16c>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d108      	bne.n	8007c8e <gos_taskWakeup+0x14e>
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <gos_taskWakeup+0x170>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f383 8810 	msr	PRIMASK, r3
 8007c84:	b662      	cpsie	i
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <gos_taskWakeup+0x174>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d005      	beq.n	8007ca2 <gos_taskWakeup+0x162>
 8007c96:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <gos_taskWakeup+0x174>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <gos_taskWakeup+0x174>)
 8007ca0:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	2000129f 	.word	0x2000129f
 8007cb0:	200012a0 	.word	0x200012a0
 8007cb4:	2000129d 	.word	0x2000129d
 8007cb8:	200012a4 	.word	0x200012a4
 8007cbc:	2000035c 	.word	0x2000035c
 8007cc0:	2000129e 	.word	0x2000129e
 8007cc4:	0800eee0 	.word	0x0800eee0
 8007cc8:	0800fbac 	.word	0x0800fbac

08007ccc <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 8007cd6:	23ae      	movs	r3, #174	; 0xae
 8007cd8:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007cde:	4b84      	ldr	r3, [pc, #528]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d108      	bne.n	8007cf8 <gos_taskSuspend+0x2c>
 8007ce6:	b672      	cpsid	i
 8007ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cec:	4a81      	ldr	r2, [pc, #516]	; (8007ef4 <gos_taskSuspend+0x228>)
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	4b7d      	ldr	r3, [pc, #500]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	4b7b      	ldr	r3, [pc, #492]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	4b7c      	ldr	r3, [pc, #496]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	4b7a      	ldr	r3, [pc, #488]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007d0e:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d16:	f240 80c1 	bls.w	8007e9c <gos_taskSuspend+0x1d0>
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	f248 020f 	movw	r2, #32783	; 0x800f
 8007d20:	4293      	cmp	r3, r2
 8007d22:	f200 80bb 	bhi.w	8007e9c <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8007d2c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007d2e:	4b73      	ldr	r3, [pc, #460]	; (8007efc <gos_taskSuspend+0x230>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a73      	ldr	r2, [pc, #460]	; (8007f00 <gos_taskSuspend+0x234>)
 8007d34:	216a      	movs	r1, #106	; 0x6a
 8007d36:	fb01 f303 	mul.w	r3, r1, r3
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	db08      	blt.n	8007d58 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8007d46:	4b6d      	ldr	r3, [pc, #436]	; (8007efc <gos_taskSuspend+0x230>)
 8007d48:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d003      	beq.n	8007d58 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8007d50:	4b6c      	ldr	r3, [pc, #432]	; (8007f04 <gos_taskSuspend+0x238>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d064      	beq.n	8007e22 <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8007d58:	4a69      	ldr	r2, [pc, #420]	; (8007f00 <gos_taskSuspend+0x234>)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	216a      	movs	r1, #106	; 0x6a
 8007d5e:	fb01 f303 	mul.w	r3, r1, r3
 8007d62:	4413      	add	r3, r2
 8007d64:	3304      	adds	r3, #4
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b0a      	cmp	r3, #10
 8007d6a:	d014      	beq.n	8007d96 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8007d6c:	4a64      	ldr	r2, [pc, #400]	; (8007f00 <gos_taskSuspend+0x234>)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	216a      	movs	r1, #106	; 0x6a
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	4413      	add	r3, r2
 8007d78:	3304      	adds	r3, #4
 8007d7a:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8007d7c:	2b16      	cmp	r3, #22
 8007d7e:	d00a      	beq.n	8007d96 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8007d80:	4a5f      	ldr	r2, [pc, #380]	; (8007f00 <gos_taskSuspend+0x234>)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	216a      	movs	r1, #106	; 0x6a
 8007d86:	fb01 f303 	mul.w	r3, r1, r3
 8007d8a:	4413      	add	r3, r2
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8007d90:	2b19      	cmp	r3, #25
 8007d92:	f040 8082 	bne.w	8007e9a <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 8007d96:	4a5a      	ldr	r2, [pc, #360]	; (8007f00 <gos_taskSuspend+0x234>)
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	216a      	movs	r1, #106	; 0x6a
 8007d9c:	fb01 f303 	mul.w	r3, r1, r3
 8007da0:	4413      	add	r3, r2
 8007da2:	3304      	adds	r3, #4
 8007da4:	7818      	ldrb	r0, [r3, #0]
 8007da6:	4a56      	ldr	r2, [pc, #344]	; (8007f00 <gos_taskSuspend+0x234>)
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	216a      	movs	r1, #106	; 0x6a
 8007dac:	fb01 f303 	mul.w	r3, r1, r3
 8007db0:	4413      	add	r3, r2
 8007db2:	3305      	adds	r3, #5
 8007db4:	4602      	mov	r2, r0
 8007db6:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 8007db8:	4a51      	ldr	r2, [pc, #324]	; (8007f00 <gos_taskSuspend+0x234>)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	216a      	movs	r1, #106	; 0x6a
 8007dbe:	fb01 f303 	mul.w	r3, r1, r3
 8007dc2:	4413      	add	r3, r2
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	2205      	movs	r2, #5
 8007dc8:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 8007dca:	2355      	movs	r3, #85	; 0x55
 8007dcc:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8007dce:	4b48      	ldr	r3, [pc, #288]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <gos_taskSuspend+0x116>
 8007dd6:	4b46      	ldr	r3, [pc, #280]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	4b44      	ldr	r3, [pc, #272]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	4b43      	ldr	r3, [pc, #268]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d108      	bne.n	8007dfc <gos_taskSuspend+0x130>
 8007dea:	4b42      	ldr	r3, [pc, #264]	; (8007ef4 <gos_taskSuspend+0x228>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f383 8810 	msr	PRIMASK, r3
 8007df2:	b662      	cpsie	i
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	4b3e      	ldr	r3, [pc, #248]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <gos_taskSuspend+0x144>
 8007e04:	4b3c      	ldr	r3, [pc, #240]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	4b3a      	ldr	r3, [pc, #232]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007e0e:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8007e10:	4b3a      	ldr	r3, [pc, #232]	; (8007efc <gos_taskSuspend+0x230>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d13f      	bne.n	8007e9a <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8007e1a:	2009      	movs	r0, #9
 8007e1c:	f7ff f9c2 	bl	80071a4 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8007e20:	e03b      	b.n	8007e9a <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8007e22:	4b33      	ldr	r3, [pc, #204]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <gos_taskSuspend+0x16a>
 8007e2a:	4b31      	ldr	r3, [pc, #196]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	4b2f      	ldr	r3, [pc, #188]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	4b2e      	ldr	r3, [pc, #184]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d108      	bne.n	8007e50 <gos_taskSuspend+0x184>
 8007e3e:	4b2d      	ldr	r3, [pc, #180]	; (8007ef4 <gos_taskSuspend+0x228>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f383 8810 	msr	PRIMASK, r3
 8007e46:	b662      	cpsie	i
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	4b29      	ldr	r3, [pc, #164]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <gos_taskSuspend+0x198>
 8007e58:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007e62:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8007e64:	4b25      	ldr	r3, [pc, #148]	; (8007efc <gos_taskSuspend+0x230>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	226a      	movs	r2, #106	; 0x6a
 8007e6a:	fb02 f303 	mul.w	r3, r2, r3
 8007e6e:	3308      	adds	r3, #8
 8007e70:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <gos_taskSuspend+0x234>)
 8007e72:	4413      	add	r3, r2
 8007e74:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	216a      	movs	r1, #106	; 0x6a
 8007e7a:	fb01 f202 	mul.w	r2, r1, r2
 8007e7e:	3208      	adds	r2, #8
 8007e80:	491f      	ldr	r1, [pc, #124]	; (8007f00 <gos_taskSuspend+0x234>)
 8007e82:	440a      	add	r2, r1
 8007e84:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 8007e86:	9201      	str	r2, [sp, #4]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	4b1f      	ldr	r3, [pc, #124]	; (8007f08 <gos_taskSuspend+0x23c>)
 8007e8c:	f240 12ad 	movw	r2, #429	; 0x1ad
 8007e90:	491e      	ldr	r1, [pc, #120]	; (8007f0c <gos_taskSuspend+0x240>)
 8007e92:	2034      	movs	r0, #52	; 0x34
 8007e94:	f001 fa7e 	bl	8009394 <gos_errorHandler>
 8007e98:	e000      	b.n	8007e9c <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8007e9a:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	2b55      	cmp	r3, #85	; 0x55
 8007ea0:	d020      	beq.n	8007ee4 <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <gos_taskSuspend+0x1ea>
 8007eaa:	4b11      	ldr	r3, [pc, #68]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <gos_taskSuspend+0x224>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d108      	bne.n	8007ed0 <gos_taskSuspend+0x204>
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <gos_taskSuspend+0x228>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f383 8810 	msr	PRIMASK, r3
 8007ec6:	b662      	cpsie	i
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <gos_taskSuspend+0x218>
 8007ed8:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <gos_taskSuspend+0x22c>)
 8007ee2:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	2000129f 	.word	0x2000129f
 8007ef4:	200012a0 	.word	0x200012a0
 8007ef8:	2000129d 	.word	0x2000129d
 8007efc:	200012a4 	.word	0x200012a4
 8007f00:	2000035c 	.word	0x2000035c
 8007f04:	2000129e 	.word	0x2000129e
 8007f08:	0800ef08 	.word	0x0800ef08
 8007f0c:	0800fbbc 	.word	0x0800fbbc

08007f10 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	4603      	mov	r3, r0
 8007f18:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 8007f1a:	23ae      	movs	r3, #174	; 0xae
 8007f1c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007f22:	4b4a      	ldr	r3, [pc, #296]	; (800804c <gos_taskResume+0x13c>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d108      	bne.n	8007f3c <gos_taskResume+0x2c>
 8007f2a:	b672      	cpsid	i
 8007f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f30:	4a47      	ldr	r2, [pc, #284]	; (8008050 <gos_taskResume+0x140>)
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	4b43      	ldr	r3, [pc, #268]	; (800804c <gos_taskResume+0x13c>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	4b41      	ldr	r3, [pc, #260]	; (800804c <gos_taskResume+0x13c>)
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	4b42      	ldr	r3, [pc, #264]	; (8008054 <gos_taskResume+0x144>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	4b40      	ldr	r3, [pc, #256]	; (8008054 <gos_taskResume+0x144>)
 8007f52:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f5a:	d950      	bls.n	8007ffe <gos_taskResume+0xee>
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	f248 020f 	movw	r2, #32783	; 0x800f
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d84b      	bhi.n	8007ffe <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8007f6c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007f6e:	4b3a      	ldr	r3, [pc, #232]	; (8008058 <gos_taskResume+0x148>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a3a      	ldr	r2, [pc, #232]	; (800805c <gos_taskResume+0x14c>)
 8007f74:	216a      	movs	r1, #106	; 0x6a
 8007f76:	fb01 f303 	mul.w	r3, r1, r3
 8007f7a:	4413      	add	r3, r2
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	b21b      	sxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	db03      	blt.n	8007f8e <gos_taskResume+0x7e>
            inIsr > 0)
 8007f86:	4b36      	ldr	r3, [pc, #216]	; (8008060 <gos_taskResume+0x150>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01d      	beq.n	8007fca <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8007f8e:	4a33      	ldr	r2, [pc, #204]	; (800805c <gos_taskResume+0x14c>)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	216a      	movs	r1, #106	; 0x6a
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
 8007f98:	4413      	add	r3, r2
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d12d      	bne.n	8007ffe <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 8007fa2:	4a2e      	ldr	r2, [pc, #184]	; (800805c <gos_taskResume+0x14c>)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	216a      	movs	r1, #106	; 0x6a
 8007fa8:	fb01 f303 	mul.w	r3, r1, r3
 8007fac:	4413      	add	r3, r2
 8007fae:	3305      	adds	r3, #5
 8007fb0:	7818      	ldrb	r0, [r3, #0]
 8007fb2:	4a2a      	ldr	r2, [pc, #168]	; (800805c <gos_taskResume+0x14c>)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	216a      	movs	r1, #106	; 0x6a
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 8007fc4:	2355      	movs	r3, #85	; 0x55
 8007fc6:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8007fc8:	e019      	b.n	8007ffe <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8007fca:	4b23      	ldr	r3, [pc, #140]	; (8008058 <gos_taskResume+0x148>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	226a      	movs	r2, #106	; 0x6a
 8007fd0:	fb02 f303 	mul.w	r3, r2, r3
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	4a21      	ldr	r2, [pc, #132]	; (800805c <gos_taskResume+0x14c>)
 8007fd8:	4413      	add	r3, r2
 8007fda:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	216a      	movs	r1, #106	; 0x6a
 8007fe0:	fb01 f202 	mul.w	r2, r1, r2
 8007fe4:	3208      	adds	r2, #8
 8007fe6:	491d      	ldr	r1, [pc, #116]	; (800805c <gos_taskResume+0x14c>)
 8007fe8:	440a      	add	r2, r1
 8007fea:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 8007fec:	9201      	str	r2, [sp, #4]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <gos_taskResume+0x154>)
 8007ff2:	f240 12e7 	movw	r2, #487	; 0x1e7
 8007ff6:	491c      	ldr	r1, [pc, #112]	; (8008068 <gos_taskResume+0x158>)
 8007ff8:	2034      	movs	r0, #52	; 0x34
 8007ffa:	f001 f9cb 	bl	8009394 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 8007ffe:	4b13      	ldr	r3, [pc, #76]	; (800804c <gos_taskResume+0x13c>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d005      	beq.n	8008012 <gos_taskResume+0x102>
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <gos_taskResume+0x13c>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	3b01      	subs	r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <gos_taskResume+0x13c>)
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	4b0e      	ldr	r3, [pc, #56]	; (800804c <gos_taskResume+0x13c>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d108      	bne.n	800802c <gos_taskResume+0x11c>
 800801a:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <gos_taskResume+0x140>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f383 8810 	msr	PRIMASK, r3
 8008022:	b662      	cpsie	i
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <gos_taskResume+0x144>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <gos_taskResume+0x130>
 8008034:	4b07      	ldr	r3, [pc, #28]	; (8008054 <gos_taskResume+0x144>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	3b01      	subs	r3, #1
 800803a:	b2da      	uxtb	r2, r3
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <gos_taskResume+0x144>)
 800803e:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	2000129f 	.word	0x2000129f
 8008050:	200012a0 	.word	0x200012a0
 8008054:	2000129d 	.word	0x2000129d
 8008058:	200012a4 	.word	0x200012a4
 800805c:	2000035c 	.word	0x2000035c
 8008060:	2000129e 	.word	0x2000129e
 8008064:	0800ef30 	.word	0x0800ef30
 8008068:	0800fbcc 	.word	0x0800fbcc

0800806c <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af02      	add	r7, sp, #8
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 8008078:	23ae      	movs	r3, #174	; 0xae
 800807a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 800807c:	2300      	movs	r3, #0
 800807e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008080:	4b7b      	ldr	r3, [pc, #492]	; (8008270 <gos_taskBlock+0x204>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d108      	bne.n	800809a <gos_taskBlock+0x2e>
 8008088:	b672      	cpsid	i
 800808a:	f3ef 8310 	mrs	r3, PRIMASK
 800808e:	4a79      	ldr	r2, [pc, #484]	; (8008274 <gos_taskBlock+0x208>)
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	4b75      	ldr	r3, [pc, #468]	; (8008270 <gos_taskBlock+0x204>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	4b73      	ldr	r3, [pc, #460]	; (8008270 <gos_taskBlock+0x204>)
 80080a4:	701a      	strb	r2, [r3, #0]
 80080a6:	4b74      	ldr	r3, [pc, #464]	; (8008278 <gos_taskBlock+0x20c>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	4b72      	ldr	r3, [pc, #456]	; (8008278 <gos_taskBlock+0x20c>)
 80080b0:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b8:	f240 80b0 	bls.w	800821c <gos_taskBlock+0x1b0>
 80080bc:	88fb      	ldrh	r3, [r7, #6]
 80080be:	f248 020f 	movw	r2, #32783	; 0x800f
 80080c2:	4293      	cmp	r3, r2
 80080c4:	f200 80aa 	bhi.w	800821c <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80080ce:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80080d0:	4b6a      	ldr	r3, [pc, #424]	; (800827c <gos_taskBlock+0x210>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a6a      	ldr	r2, [pc, #424]	; (8008280 <gos_taskBlock+0x214>)
 80080d6:	216a      	movs	r1, #106	; 0x6a
 80080d8:	fb01 f303 	mul.w	r3, r1, r3
 80080dc:	4413      	add	r3, r2
 80080de:	3308      	adds	r3, #8
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	b21b      	sxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	db08      	blt.n	80080fa <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 80080e8:	4b64      	ldr	r3, [pc, #400]	; (800827c <gos_taskBlock+0x210>)
 80080ea:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d003      	beq.n	80080fa <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 80080f2:	4b64      	ldr	r3, [pc, #400]	; (8008284 <gos_taskBlock+0x218>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d053      	beq.n	80081a2 <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80080fa:	4a61      	ldr	r2, [pc, #388]	; (8008280 <gos_taskBlock+0x214>)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	216a      	movs	r1, #106	; 0x6a
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	4413      	add	r3, r2
 8008106:	3304      	adds	r3, #4
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b0a      	cmp	r3, #10
 800810c:	f040 8085 	bne.w	800821a <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 8008110:	4a5b      	ldr	r2, [pc, #364]	; (8008280 <gos_taskBlock+0x214>)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	216a      	movs	r1, #106	; 0x6a
 8008116:	fb01 f303 	mul.w	r3, r1, r3
 800811a:	4413      	add	r3, r2
 800811c:	3304      	adds	r3, #4
 800811e:	2219      	movs	r2, #25
 8008120:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 8008122:	4a57      	ldr	r2, [pc, #348]	; (8008280 <gos_taskBlock+0x214>)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	216a      	movs	r1, #106	; 0x6a
 8008128:	fb01 f303 	mul.w	r3, r1, r3
 800812c:	4413      	add	r3, r2
 800812e:	3334      	adds	r3, #52	; 0x34
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 8008134:	4a52      	ldr	r2, [pc, #328]	; (8008280 <gos_taskBlock+0x214>)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	216a      	movs	r1, #106	; 0x6a
 800813a:	fb01 f303 	mul.w	r3, r1, r3
 800813e:	4413      	add	r3, r2
 8008140:	3338      	adds	r3, #56	; 0x38
 8008142:	2200      	movs	r2, #0
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 800814a:	2355      	movs	r3, #85	; 0x55
 800814c:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 800814e:	4b48      	ldr	r3, [pc, #288]	; (8008270 <gos_taskBlock+0x204>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <gos_taskBlock+0xf6>
 8008156:	4b46      	ldr	r3, [pc, #280]	; (8008270 <gos_taskBlock+0x204>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	3b01      	subs	r3, #1
 800815c:	b2da      	uxtb	r2, r3
 800815e:	4b44      	ldr	r3, [pc, #272]	; (8008270 <gos_taskBlock+0x204>)
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	4b43      	ldr	r3, [pc, #268]	; (8008270 <gos_taskBlock+0x204>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d108      	bne.n	800817c <gos_taskBlock+0x110>
 800816a:	4b42      	ldr	r3, [pc, #264]	; (8008274 <gos_taskBlock+0x208>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f383 8810 	msr	PRIMASK, r3
 8008172:	b662      	cpsie	i
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	4b3e      	ldr	r3, [pc, #248]	; (8008278 <gos_taskBlock+0x20c>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <gos_taskBlock+0x124>
 8008184:	4b3c      	ldr	r3, [pc, #240]	; (8008278 <gos_taskBlock+0x20c>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	3b01      	subs	r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	4b3a      	ldr	r3, [pc, #232]	; (8008278 <gos_taskBlock+0x20c>)
 800818e:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8008190:	4b3a      	ldr	r3, [pc, #232]	; (800827c <gos_taskBlock+0x210>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	d13f      	bne.n	800821a <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 800819a:	2009      	movs	r0, #9
 800819c:	f7ff f802 	bl	80071a4 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80081a0:	e03b      	b.n	800821a <gos_taskBlock+0x1ae>
            	// Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 80081a2:	4b33      	ldr	r3, [pc, #204]	; (8008270 <gos_taskBlock+0x204>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <gos_taskBlock+0x14a>
 80081aa:	4b31      	ldr	r3, [pc, #196]	; (8008270 <gos_taskBlock+0x204>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	4b2f      	ldr	r3, [pc, #188]	; (8008270 <gos_taskBlock+0x204>)
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	4b2e      	ldr	r3, [pc, #184]	; (8008270 <gos_taskBlock+0x204>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d108      	bne.n	80081d0 <gos_taskBlock+0x164>
 80081be:	4b2d      	ldr	r3, [pc, #180]	; (8008274 <gos_taskBlock+0x208>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f383 8810 	msr	PRIMASK, r3
 80081c6:	b662      	cpsie	i
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	4b29      	ldr	r3, [pc, #164]	; (8008278 <gos_taskBlock+0x20c>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <gos_taskBlock+0x178>
 80081d8:	4b27      	ldr	r3, [pc, #156]	; (8008278 <gos_taskBlock+0x20c>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	3b01      	subs	r3, #1
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	4b25      	ldr	r3, [pc, #148]	; (8008278 <gos_taskBlock+0x20c>)
 80081e2:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80081e4:	4b25      	ldr	r3, [pc, #148]	; (800827c <gos_taskBlock+0x210>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	226a      	movs	r2, #106	; 0x6a
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	3308      	adds	r3, #8
 80081f0:	4a23      	ldr	r2, [pc, #140]	; (8008280 <gos_taskBlock+0x214>)
 80081f2:	4413      	add	r3, r2
 80081f4:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	216a      	movs	r1, #106	; 0x6a
 80081fa:	fb01 f202 	mul.w	r2, r1, r2
 80081fe:	3208      	adds	r2, #8
 8008200:	491f      	ldr	r1, [pc, #124]	; (8008280 <gos_taskBlock+0x214>)
 8008202:	440a      	add	r2, r1
 8008204:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 8008206:	9201      	str	r2, [sp, #4]
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <gos_taskBlock+0x21c>)
 800820c:	f240 222b 	movw	r2, #555	; 0x22b
 8008210:	491e      	ldr	r1, [pc, #120]	; (800828c <gos_taskBlock+0x220>)
 8008212:	2034      	movs	r0, #52	; 0x34
 8008214:	f001 f8be 	bl	8009394 <gos_errorHandler>
 8008218:	e000      	b.n	800821c <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800821a:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	2b55      	cmp	r3, #85	; 0x55
 8008220:	d020      	beq.n	8008264 <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 8008222:	4b13      	ldr	r3, [pc, #76]	; (8008270 <gos_taskBlock+0x204>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <gos_taskBlock+0x1ca>
 800822a:	4b11      	ldr	r3, [pc, #68]	; (8008270 <gos_taskBlock+0x204>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	3b01      	subs	r3, #1
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <gos_taskBlock+0x204>)
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <gos_taskBlock+0x204>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d108      	bne.n	8008250 <gos_taskBlock+0x1e4>
 800823e:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <gos_taskBlock+0x208>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f383 8810 	msr	PRIMASK, r3
 8008246:	b662      	cpsie	i
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <gos_taskBlock+0x20c>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <gos_taskBlock+0x1f8>
 8008258:	4b07      	ldr	r3, [pc, #28]	; (8008278 <gos_taskBlock+0x20c>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	3b01      	subs	r3, #1
 800825e:	b2da      	uxtb	r2, r3
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <gos_taskBlock+0x20c>)
 8008262:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	2000129f 	.word	0x2000129f
 8008274:	200012a0 	.word	0x200012a0
 8008278:	2000129d 	.word	0x2000129d
 800827c:	200012a4 	.word	0x200012a4
 8008280:	2000035c 	.word	0x2000035c
 8008284:	2000129e 	.word	0x2000129e
 8008288:	0800ef58 	.word	0x0800ef58
 800828c:	0800fbdc 	.word	0x0800fbdc

08008290 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af02      	add	r7, sp, #8
 8008296:	4603      	mov	r3, r0
 8008298:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 800829a:	23ae      	movs	r3, #174	; 0xae
 800829c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80082a2:	4b68      	ldr	r3, [pc, #416]	; (8008444 <gos_taskUnblock+0x1b4>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d108      	bne.n	80082bc <gos_taskUnblock+0x2c>
 80082aa:	b672      	cpsid	i
 80082ac:	f3ef 8310 	mrs	r3, PRIMASK
 80082b0:	4a65      	ldr	r2, [pc, #404]	; (8008448 <gos_taskUnblock+0x1b8>)
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	4b61      	ldr	r3, [pc, #388]	; (8008444 <gos_taskUnblock+0x1b4>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	4b5f      	ldr	r3, [pc, #380]	; (8008444 <gos_taskUnblock+0x1b4>)
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	4b60      	ldr	r3, [pc, #384]	; (800844c <gos_taskUnblock+0x1bc>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	3301      	adds	r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	4b5e      	ldr	r3, [pc, #376]	; (800844c <gos_taskUnblock+0x1bc>)
 80082d2:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082da:	f240 808d 	bls.w	80083f8 <gos_taskUnblock+0x168>
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	f248 020f 	movw	r2, #32783	; 0x800f
 80082e4:	4293      	cmp	r3, r2
 80082e6:	f200 8087 	bhi.w	80083f8 <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80082f0:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80082f2:	4b57      	ldr	r3, [pc, #348]	; (8008450 <gos_taskUnblock+0x1c0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a57      	ldr	r2, [pc, #348]	; (8008454 <gos_taskUnblock+0x1c4>)
 80082f8:	216a      	movs	r1, #106	; 0x6a
 80082fa:	fb01 f303 	mul.w	r3, r1, r3
 80082fe:	4413      	add	r3, r2
 8008300:	3308      	adds	r3, #8
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b21b      	sxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	db03      	blt.n	8008312 <gos_taskUnblock+0x82>
            inIsr > 0)
 800830a:	4b53      	ldr	r3, [pc, #332]	; (8008458 <gos_taskUnblock+0x1c8>)
 800830c:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800830e:	2b00      	cmp	r3, #0
 8008310:	d035      	beq.n	800837e <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8008312:	4a50      	ldr	r2, [pc, #320]	; (8008454 <gos_taskUnblock+0x1c4>)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	216a      	movs	r1, #106	; 0x6a
 8008318:	fb01 f303 	mul.w	r3, r1, r3
 800831c:	4413      	add	r3, r2
 800831e:	3304      	adds	r3, #4
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b19      	cmp	r3, #25
 8008324:	d10b      	bne.n	800833e <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8008326:	4a4b      	ldr	r2, [pc, #300]	; (8008454 <gos_taskUnblock+0x1c4>)
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	216a      	movs	r1, #106	; 0x6a
 800832c:	fb01 f303 	mul.w	r3, r1, r3
 8008330:	4413      	add	r3, r2
 8008332:	3304      	adds	r3, #4
 8008334:	220a      	movs	r2, #10
 8008336:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8008338:	2355      	movs	r3, #85	; 0x55
 800833a:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800833c:	e05b      	b.n	80083f6 <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 800833e:	4a45      	ldr	r2, [pc, #276]	; (8008454 <gos_taskUnblock+0x1c4>)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	216a      	movs	r1, #106	; 0x6a
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	4413      	add	r3, r2
 800834a:	3304      	adds	r3, #4
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	2b05      	cmp	r3, #5
 8008350:	d151      	bne.n	80083f6 <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 8008352:	4a40      	ldr	r2, [pc, #256]	; (8008454 <gos_taskUnblock+0x1c4>)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	216a      	movs	r1, #106	; 0x6a
 8008358:	fb01 f303 	mul.w	r3, r1, r3
 800835c:	4413      	add	r3, r2
 800835e:	3305      	adds	r3, #5
 8008360:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 8008362:	2b19      	cmp	r3, #25
 8008364:	d147      	bne.n	80083f6 <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 8008366:	4a3b      	ldr	r2, [pc, #236]	; (8008454 <gos_taskUnblock+0x1c4>)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	216a      	movs	r1, #106	; 0x6a
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	4413      	add	r3, r2
 8008372:	3305      	adds	r3, #5
 8008374:	220a      	movs	r2, #10
 8008376:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8008378:	2355      	movs	r3, #85	; 0x55
 800837a:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800837c:	e03b      	b.n	80083f6 <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800837e:	4b31      	ldr	r3, [pc, #196]	; (8008444 <gos_taskUnblock+0x1b4>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d005      	beq.n	8008392 <gos_taskUnblock+0x102>
 8008386:	4b2f      	ldr	r3, [pc, #188]	; (8008444 <gos_taskUnblock+0x1b4>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	3b01      	subs	r3, #1
 800838c:	b2da      	uxtb	r2, r3
 800838e:	4b2d      	ldr	r3, [pc, #180]	; (8008444 <gos_taskUnblock+0x1b4>)
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	4b2c      	ldr	r3, [pc, #176]	; (8008444 <gos_taskUnblock+0x1b4>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d108      	bne.n	80083ac <gos_taskUnblock+0x11c>
 800839a:	4b2b      	ldr	r3, [pc, #172]	; (8008448 <gos_taskUnblock+0x1b8>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f383 8810 	msr	PRIMASK, r3
 80083a2:	b662      	cpsie	i
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	4b27      	ldr	r3, [pc, #156]	; (800844c <gos_taskUnblock+0x1bc>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <gos_taskUnblock+0x130>
 80083b4:	4b25      	ldr	r3, [pc, #148]	; (800844c <gos_taskUnblock+0x1bc>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	4b23      	ldr	r3, [pc, #140]	; (800844c <gos_taskUnblock+0x1bc>)
 80083be:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80083c0:	4b23      	ldr	r3, [pc, #140]	; (8008450 <gos_taskUnblock+0x1c0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	226a      	movs	r2, #106	; 0x6a
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
 80083ca:	3308      	adds	r3, #8
 80083cc:	4a21      	ldr	r2, [pc, #132]	; (8008454 <gos_taskUnblock+0x1c4>)
 80083ce:	4413      	add	r3, r2
 80083d0:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	216a      	movs	r1, #106	; 0x6a
 80083d6:	fb01 f202 	mul.w	r2, r1, r2
 80083da:	3208      	adds	r2, #8
 80083dc:	491d      	ldr	r1, [pc, #116]	; (8008454 <gos_taskUnblock+0x1c4>)
 80083de:	440a      	add	r2, r1
 80083e0:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 80083e2:	9201      	str	r2, [sp, #4]
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	4b1d      	ldr	r3, [pc, #116]	; (800845c <gos_taskUnblock+0x1cc>)
 80083e8:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80083ec:	491c      	ldr	r1, [pc, #112]	; (8008460 <gos_taskUnblock+0x1d0>)
 80083ee:	2034      	movs	r0, #52	; 0x34
 80083f0:	f000 ffd0 	bl	8009394 <gos_errorHandler>
 80083f4:	e000      	b.n	80083f8 <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80083f6:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80083f8:	4b12      	ldr	r3, [pc, #72]	; (8008444 <gos_taskUnblock+0x1b4>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <gos_taskUnblock+0x17c>
 8008400:	4b10      	ldr	r3, [pc, #64]	; (8008444 <gos_taskUnblock+0x1b4>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	3b01      	subs	r3, #1
 8008406:	b2da      	uxtb	r2, r3
 8008408:	4b0e      	ldr	r3, [pc, #56]	; (8008444 <gos_taskUnblock+0x1b4>)
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <gos_taskUnblock+0x1b4>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d108      	bne.n	8008426 <gos_taskUnblock+0x196>
 8008414:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <gos_taskUnblock+0x1b8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f383 8810 	msr	PRIMASK, r3
 800841c:	b662      	cpsie	i
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <gos_taskUnblock+0x1bc>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <gos_taskUnblock+0x1aa>
 800842e:	4b07      	ldr	r3, [pc, #28]	; (800844c <gos_taskUnblock+0x1bc>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	3b01      	subs	r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	4b05      	ldr	r3, [pc, #20]	; (800844c <gos_taskUnblock+0x1bc>)
 8008438:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	2000129f 	.word	0x2000129f
 8008448:	200012a0 	.word	0x200012a0
 800844c:	2000129d 	.word	0x2000129d
 8008450:	200012a4 	.word	0x200012a4
 8008454:	2000035c 	.word	0x2000035c
 8008458:	2000129e 	.word	0x2000129e
 800845c:	0800ef80 	.word	0x0800ef80
 8008460:	0800fbec 	.word	0x0800fbec

08008464 <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af02      	add	r7, sp, #8
 800846a:	4603      	mov	r3, r0
 800846c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 800846e:	23ae      	movs	r3, #174	; 0xae
 8008470:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8008472:	2300      	movs	r3, #0
 8008474:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008476:	4b84      	ldr	r3, [pc, #528]	; (8008688 <gos_taskDelete+0x224>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d108      	bne.n	8008490 <gos_taskDelete+0x2c>
 800847e:	b672      	cpsid	i
 8008480:	f3ef 8310 	mrs	r3, PRIMASK
 8008484:	4a81      	ldr	r2, [pc, #516]	; (800868c <gos_taskDelete+0x228>)
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	4b7d      	ldr	r3, [pc, #500]	; (8008688 <gos_taskDelete+0x224>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	3301      	adds	r3, #1
 8008496:	b2da      	uxtb	r2, r3
 8008498:	4b7b      	ldr	r3, [pc, #492]	; (8008688 <gos_taskDelete+0x224>)
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	4b7c      	ldr	r3, [pc, #496]	; (8008690 <gos_taskDelete+0x22c>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	3301      	adds	r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	4b7a      	ldr	r3, [pc, #488]	; (8008690 <gos_taskDelete+0x22c>)
 80084a6:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ae:	f240 80b9 	bls.w	8008624 <gos_taskDelete+0x1c0>
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	f248 020f 	movw	r2, #32783	; 0x800f
 80084b8:	4293      	cmp	r3, r2
 80084ba:	f200 80b3 	bhi.w	8008624 <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80084c4:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80084c6:	4b73      	ldr	r3, [pc, #460]	; (8008694 <gos_taskDelete+0x230>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a73      	ldr	r2, [pc, #460]	; (8008698 <gos_taskDelete+0x234>)
 80084cc:	216a      	movs	r1, #106	; 0x6a
 80084ce:	fb01 f303 	mul.w	r3, r1, r3
 80084d2:	4413      	add	r3, r2
 80084d4:	3308      	adds	r3, #8
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b21b      	sxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	db08      	blt.n	80084f0 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 80084de:	4b6d      	ldr	r3, [pc, #436]	; (8008694 <gos_taskDelete+0x230>)
 80084e0:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d003      	beq.n	80084f0 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 80084e8:	4b6c      	ldr	r3, [pc, #432]	; (800869c <gos_taskDelete+0x238>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d05e      	beq.n	80085ae <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 80084f0:	4a69      	ldr	r2, [pc, #420]	; (8008698 <gos_taskDelete+0x234>)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	216a      	movs	r1, #106	; 0x6a
 80084f6:	fb01 f303 	mul.w	r3, r1, r3
 80084fa:	4413      	add	r3, r2
 80084fc:	3304      	adds	r3, #4
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b0d      	cmp	r3, #13
 8008502:	f000 808f 	beq.w	8008624 <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 8008506:	4a64      	ldr	r2, [pc, #400]	; (8008698 <gos_taskDelete+0x234>)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	216a      	movs	r1, #106	; 0x6a
 800850c:	fb01 f303 	mul.w	r3, r1, r3
 8008510:	4413      	add	r3, r2
 8008512:	3304      	adds	r3, #4
 8008514:	220d      	movs	r2, #13
 8008516:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 8008518:	2355      	movs	r3, #85	; 0x55
 800851a:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 800851c:	4b5d      	ldr	r3, [pc, #372]	; (8008694 <gos_taskDelete+0x230>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a5d      	ldr	r2, [pc, #372]	; (8008698 <gos_taskDelete+0x234>)
 8008522:	216a      	movs	r1, #106	; 0x6a
 8008524:	fb01 f303 	mul.w	r3, r1, r3
 8008528:	4413      	add	r3, r2
 800852a:	3308      	adds	r3, #8
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008532:	2b00      	cmp	r3, #0
 8008534:	d133      	bne.n	800859e <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 8008536:	4b57      	ldr	r3, [pc, #348]	; (8008694 <gos_taskDelete+0x230>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a57      	ldr	r2, [pc, #348]	; (8008698 <gos_taskDelete+0x234>)
 800853c:	216a      	movs	r1, #106	; 0x6a
 800853e:	fb01 f303 	mul.w	r3, r1, r3
 8008542:	4413      	add	r3, r2
 8008544:	3308      	adds	r3, #8
 8008546:	881a      	ldrh	r2, [r3, #0]
 8008548:	4b52      	ldr	r3, [pc, #328]	; (8008694 <gos_taskDelete+0x230>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008550:	b290      	uxth	r0, r2
 8008552:	4a51      	ldr	r2, [pc, #324]	; (8008698 <gos_taskDelete+0x234>)
 8008554:	216a      	movs	r1, #106	; 0x6a
 8008556:	fb01 f303 	mul.w	r3, r1, r3
 800855a:	4413      	add	r3, r2
 800855c:	3308      	adds	r3, #8
 800855e:	4602      	mov	r2, r0
 8008560:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8008562:	4b4f      	ldr	r3, [pc, #316]	; (80086a0 <gos_taskDelete+0x23c>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	88fa      	ldrh	r2, [r7, #6]
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f002 f9be 	bl	800a8ec <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 8008570:	4b48      	ldr	r3, [pc, #288]	; (8008694 <gos_taskDelete+0x230>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a48      	ldr	r2, [pc, #288]	; (8008698 <gos_taskDelete+0x234>)
 8008576:	216a      	movs	r1, #106	; 0x6a
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	4413      	add	r3, r2
 800857e:	3308      	adds	r3, #8
 8008580:	881a      	ldrh	r2, [r3, #0]
 8008582:	4b44      	ldr	r3, [pc, #272]	; (8008694 <gos_taskDelete+0x230>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800858a:	b290      	uxth	r0, r2
 800858c:	4a42      	ldr	r2, [pc, #264]	; (8008698 <gos_taskDelete+0x234>)
 800858e:	216a      	movs	r1, #106	; 0x6a
 8008590:	fb01 f303 	mul.w	r3, r1, r3
 8008594:	4413      	add	r3, r2
 8008596:	3308      	adds	r3, #8
 8008598:	4602      	mov	r2, r0
 800859a:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 800859c:	e042      	b.n	8008624 <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 800859e:	4b40      	ldr	r3, [pc, #256]	; (80086a0 <gos_taskDelete+0x23c>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	88fa      	ldrh	r2, [r7, #6]
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f002 f9a0 	bl	800a8ec <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 80085ac:	e03a      	b.n	8008624 <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 80085ae:	4b36      	ldr	r3, [pc, #216]	; (8008688 <gos_taskDelete+0x224>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <gos_taskDelete+0x15e>
 80085b6:	4b34      	ldr	r3, [pc, #208]	; (8008688 <gos_taskDelete+0x224>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	4b32      	ldr	r3, [pc, #200]	; (8008688 <gos_taskDelete+0x224>)
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	4b31      	ldr	r3, [pc, #196]	; (8008688 <gos_taskDelete+0x224>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d108      	bne.n	80085dc <gos_taskDelete+0x178>
 80085ca:	4b30      	ldr	r3, [pc, #192]	; (800868c <gos_taskDelete+0x228>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f383 8810 	msr	PRIMASK, r3
 80085d2:	b662      	cpsie	i
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	4b2c      	ldr	r3, [pc, #176]	; (8008690 <gos_taskDelete+0x22c>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <gos_taskDelete+0x18c>
 80085e4:	4b2a      	ldr	r3, [pc, #168]	; (8008690 <gos_taskDelete+0x22c>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	4b28      	ldr	r3, [pc, #160]	; (8008690 <gos_taskDelete+0x22c>)
 80085ee:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80085f0:	4b28      	ldr	r3, [pc, #160]	; (8008694 <gos_taskDelete+0x230>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	226a      	movs	r2, #106	; 0x6a
 80085f6:	fb02 f303 	mul.w	r3, r2, r3
 80085fa:	3308      	adds	r3, #8
 80085fc:	4a26      	ldr	r2, [pc, #152]	; (8008698 <gos_taskDelete+0x234>)
 80085fe:	4413      	add	r3, r2
 8008600:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	216a      	movs	r1, #106	; 0x6a
 8008606:	fb01 f202 	mul.w	r2, r1, r2
 800860a:	3208      	adds	r2, #8
 800860c:	4922      	ldr	r1, [pc, #136]	; (8008698 <gos_taskDelete+0x234>)
 800860e:	440a      	add	r2, r1
 8008610:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 8008612:	9201      	str	r2, [sp, #4]
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	4b23      	ldr	r3, [pc, #140]	; (80086a4 <gos_taskDelete+0x240>)
 8008618:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800861c:	4922      	ldr	r1, [pc, #136]	; (80086a8 <gos_taskDelete+0x244>)
 800861e:	2034      	movs	r0, #52	; 0x34
 8008620:	f000 feb8 	bl	8009394 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8008624:	4b18      	ldr	r3, [pc, #96]	; (8008688 <gos_taskDelete+0x224>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <gos_taskDelete+0x1d4>
 800862c:	4b16      	ldr	r3, [pc, #88]	; (8008688 <gos_taskDelete+0x224>)
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	3b01      	subs	r3, #1
 8008632:	b2da      	uxtb	r2, r3
 8008634:	4b14      	ldr	r3, [pc, #80]	; (8008688 <gos_taskDelete+0x224>)
 8008636:	701a      	strb	r2, [r3, #0]
 8008638:	4b13      	ldr	r3, [pc, #76]	; (8008688 <gos_taskDelete+0x224>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d108      	bne.n	8008652 <gos_taskDelete+0x1ee>
 8008640:	4b12      	ldr	r3, [pc, #72]	; (800868c <gos_taskDelete+0x228>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f383 8810 	msr	PRIMASK, r3
 8008648:	b662      	cpsie	i
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	4b0f      	ldr	r3, [pc, #60]	; (8008690 <gos_taskDelete+0x22c>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <gos_taskDelete+0x202>
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <gos_taskDelete+0x22c>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	3b01      	subs	r3, #1
 8008660:	b2da      	uxtb	r2, r3
 8008662:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <gos_taskDelete+0x22c>)
 8008664:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	2b55      	cmp	r3, #85	; 0x55
 800866a:	d107      	bne.n	800867c <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 800866c:	4b09      	ldr	r3, [pc, #36]	; (8008694 <gos_taskDelete+0x230>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	d102      	bne.n	800867c <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 8008676:	2009      	movs	r0, #9
 8008678:	f7fe fd94 	bl	80071a4 <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	2000129f 	.word	0x2000129f
 800868c:	200012a0 	.word	0x200012a0
 8008690:	2000129d 	.word	0x2000129d
 8008694:	200012a4 	.word	0x200012a4
 8008698:	2000035c 	.word	0x2000035c
 800869c:	2000129e 	.word	0x2000129e
 80086a0:	200012c8 	.word	0x200012c8
 80086a4:	0800efa8 	.word	0x0800efa8
 80086a8:	0800fbfc 	.word	0x0800fbfc

080086ac <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	4603      	mov	r3, r0
 80086b4:	460a      	mov	r2, r1
 80086b6:	80fb      	strh	r3, [r7, #6]
 80086b8:	4613      	mov	r3, r2
 80086ba:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80086bc:	23ae      	movs	r3, #174	; 0xae
 80086be:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80086c0:	2300      	movs	r3, #0
 80086c2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80086c4:	4b53      	ldr	r3, [pc, #332]	; (8008814 <gos_taskSetPriority+0x168>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d108      	bne.n	80086de <gos_taskSetPriority+0x32>
 80086cc:	b672      	cpsid	i
 80086ce:	f3ef 8310 	mrs	r3, PRIMASK
 80086d2:	4a51      	ldr	r2, [pc, #324]	; (8008818 <gos_taskSetPriority+0x16c>)
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	4b4d      	ldr	r3, [pc, #308]	; (8008814 <gos_taskSetPriority+0x168>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	4b4b      	ldr	r3, [pc, #300]	; (8008814 <gos_taskSetPriority+0x168>)
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	4b4c      	ldr	r3, [pc, #304]	; (800881c <gos_taskSetPriority+0x170>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	3301      	adds	r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	4b4a      	ldr	r3, [pc, #296]	; (800881c <gos_taskSetPriority+0x170>)
 80086f4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fc:	d963      	bls.n	80087c6 <gos_taskSetPriority+0x11a>
 80086fe:	88fb      	ldrh	r3, [r7, #6]
 8008700:	f248 020f 	movw	r2, #32783	; 0x800f
 8008704:	4293      	cmp	r3, r2
 8008706:	d85e      	bhi.n	80087c6 <gos_taskSetPriority+0x11a>
 8008708:	797b      	ldrb	r3, [r7, #5]
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d05b      	beq.n	80087c6 <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008714:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8008716:	4b42      	ldr	r3, [pc, #264]	; (8008820 <gos_taskSetPriority+0x174>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a42      	ldr	r2, [pc, #264]	; (8008824 <gos_taskSetPriority+0x178>)
 800871c:	216a      	movs	r1, #106	; 0x6a
 800871e:	fb01 f303 	mul.w	r3, r1, r3
 8008722:	4413      	add	r3, r2
 8008724:	3308      	adds	r3, #8
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <gos_taskSetPriority+0x8c>
            inIsr > 0)
 8008730:	4b3d      	ldr	r3, [pc, #244]	; (8008828 <gos_taskSetPriority+0x17c>)
 8008732:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 8008738:	4a3a      	ldr	r2, [pc, #232]	; (8008824 <gos_taskSetPriority+0x178>)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	216a      	movs	r1, #106	; 0x6a
 800873e:	fb01 f303 	mul.w	r3, r1, r3
 8008742:	4413      	add	r3, r2
 8008744:	3306      	adds	r3, #6
 8008746:	797a      	ldrb	r2, [r7, #5]
 8008748:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 800874a:	2355      	movs	r3, #85	; 0x55
 800874c:	73fb      	strb	r3, [r7, #15]
 800874e:	e03a      	b.n	80087c6 <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8008750:	4b30      	ldr	r3, [pc, #192]	; (8008814 <gos_taskSetPriority+0x168>)
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <gos_taskSetPriority+0xb8>
 8008758:	4b2e      	ldr	r3, [pc, #184]	; (8008814 <gos_taskSetPriority+0x168>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	b2da      	uxtb	r2, r3
 8008760:	4b2c      	ldr	r3, [pc, #176]	; (8008814 <gos_taskSetPriority+0x168>)
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	4b2b      	ldr	r3, [pc, #172]	; (8008814 <gos_taskSetPriority+0x168>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d108      	bne.n	800877e <gos_taskSetPriority+0xd2>
 800876c:	4b2a      	ldr	r3, [pc, #168]	; (8008818 <gos_taskSetPriority+0x16c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f383 8810 	msr	PRIMASK, r3
 8008774:	b662      	cpsie	i
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	4b27      	ldr	r3, [pc, #156]	; (800881c <gos_taskSetPriority+0x170>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <gos_taskSetPriority+0xe6>
 8008786:	4b25      	ldr	r3, [pc, #148]	; (800881c <gos_taskSetPriority+0x170>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	3b01      	subs	r3, #1
 800878c:	b2da      	uxtb	r2, r3
 800878e:	4b23      	ldr	r3, [pc, #140]	; (800881c <gos_taskSetPriority+0x170>)
 8008790:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8008792:	4b23      	ldr	r3, [pc, #140]	; (8008820 <gos_taskSetPriority+0x174>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	226a      	movs	r2, #106	; 0x6a
 8008798:	fb02 f303 	mul.w	r3, r2, r3
 800879c:	3308      	adds	r3, #8
 800879e:	4a21      	ldr	r2, [pc, #132]	; (8008824 <gos_taskSetPriority+0x178>)
 80087a0:	4413      	add	r3, r2
 80087a2:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	216a      	movs	r1, #106	; 0x6a
 80087a8:	fb01 f202 	mul.w	r2, r1, r2
 80087ac:	3208      	adds	r2, #8
 80087ae:	491d      	ldr	r1, [pc, #116]	; (8008824 <gos_taskSetPriority+0x178>)
 80087b0:	440a      	add	r2, r1
 80087b2:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 80087b4:	9201      	str	r2, [sp, #4]
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	4b1c      	ldr	r3, [pc, #112]	; (800882c <gos_taskSetPriority+0x180>)
 80087ba:	f240 22ea 	movw	r2, #746	; 0x2ea
 80087be:	491c      	ldr	r1, [pc, #112]	; (8008830 <gos_taskSetPriority+0x184>)
 80087c0:	2034      	movs	r0, #52	; 0x34
 80087c2:	f000 fde7 	bl	8009394 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 80087c6:	4b13      	ldr	r3, [pc, #76]	; (8008814 <gos_taskSetPriority+0x168>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d005      	beq.n	80087da <gos_taskSetPriority+0x12e>
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <gos_taskSetPriority+0x168>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <gos_taskSetPriority+0x168>)
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <gos_taskSetPriority+0x168>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d108      	bne.n	80087f4 <gos_taskSetPriority+0x148>
 80087e2:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <gos_taskSetPriority+0x16c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f383 8810 	msr	PRIMASK, r3
 80087ea:	b662      	cpsie	i
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	4b09      	ldr	r3, [pc, #36]	; (800881c <gos_taskSetPriority+0x170>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <gos_taskSetPriority+0x15c>
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <gos_taskSetPriority+0x170>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	3b01      	subs	r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <gos_taskSetPriority+0x170>)
 8008806:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	2000129f 	.word	0x2000129f
 8008818:	200012a0 	.word	0x200012a0
 800881c:	2000129d 	.word	0x2000129d
 8008820:	200012a4 	.word	0x200012a4
 8008824:	2000035c 	.word	0x2000035c
 8008828:	2000129e 	.word	0x2000129e
 800882c:	0800efd0 	.word	0x0800efd0
 8008830:	0800fc0c 	.word	0x0800fc0c

08008834 <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af02      	add	r7, sp, #8
 800883a:	4603      	mov	r3, r0
 800883c:	460a      	mov	r2, r1
 800883e:	80fb      	strh	r3, [r7, #6]
 8008840:	4613      	mov	r3, r2
 8008842:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 8008844:	23ae      	movs	r3, #174	; 0xae
 8008846:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8008848:	2300      	movs	r3, #0
 800884a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800884c:	4b53      	ldr	r3, [pc, #332]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d108      	bne.n	8008866 <gos_taskSetOriginalPriority+0x32>
 8008854:	b672      	cpsid	i
 8008856:	f3ef 8310 	mrs	r3, PRIMASK
 800885a:	4a51      	ldr	r2, [pc, #324]	; (80089a0 <gos_taskSetOriginalPriority+0x16c>)
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	4b4d      	ldr	r3, [pc, #308]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	b2da      	uxtb	r2, r3
 800886e:	4b4b      	ldr	r3, [pc, #300]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	4b4c      	ldr	r3, [pc, #304]	; (80089a4 <gos_taskSetOriginalPriority+0x170>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	3301      	adds	r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4b4a      	ldr	r3, [pc, #296]	; (80089a4 <gos_taskSetOriginalPriority+0x170>)
 800887c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800887e:	88fb      	ldrh	r3, [r7, #6]
 8008880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008884:	d963      	bls.n	800894e <gos_taskSetOriginalPriority+0x11a>
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	f248 020f 	movw	r2, #32783	; 0x800f
 800888c:	4293      	cmp	r3, r2
 800888e:	d85e      	bhi.n	800894e <gos_taskSetOriginalPriority+0x11a>
 8008890:	797b      	ldrb	r3, [r7, #5]
 8008892:	2bff      	cmp	r3, #255	; 0xff
 8008894:	d05b      	beq.n	800894e <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800889c:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800889e:	4b42      	ldr	r3, [pc, #264]	; (80089a8 <gos_taskSetOriginalPriority+0x174>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a42      	ldr	r2, [pc, #264]	; (80089ac <gos_taskSetOriginalPriority+0x178>)
 80088a4:	216a      	movs	r1, #106	; 0x6a
 80088a6:	fb01 f303 	mul.w	r3, r1, r3
 80088aa:	4413      	add	r3, r2
 80088ac:	3308      	adds	r3, #8
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d103      	bne.n	80088c0 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 80088b8:	4b3d      	ldr	r3, [pc, #244]	; (80089b0 <gos_taskSetOriginalPriority+0x17c>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 80088c0:	4a3a      	ldr	r2, [pc, #232]	; (80089ac <gos_taskSetOriginalPriority+0x178>)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	216a      	movs	r1, #106	; 0x6a
 80088c6:	fb01 f303 	mul.w	r3, r1, r3
 80088ca:	4413      	add	r3, r2
 80088cc:	3307      	adds	r3, #7
 80088ce:	797a      	ldrb	r2, [r7, #5]
 80088d0:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 80088d2:	2355      	movs	r3, #85	; 0x55
 80088d4:	73fb      	strb	r3, [r7, #15]
 80088d6:	e03a      	b.n	800894e <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 80088d8:	4b30      	ldr	r3, [pc, #192]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <gos_taskSetOriginalPriority+0xb8>
 80088e0:	4b2e      	ldr	r3, [pc, #184]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	4b2c      	ldr	r3, [pc, #176]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 80088ea:	701a      	strb	r2, [r3, #0]
 80088ec:	4b2b      	ldr	r3, [pc, #172]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d108      	bne.n	8008906 <gos_taskSetOriginalPriority+0xd2>
 80088f4:	4b2a      	ldr	r3, [pc, #168]	; (80089a0 <gos_taskSetOriginalPriority+0x16c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f383 8810 	msr	PRIMASK, r3
 80088fc:	b662      	cpsie	i
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	4b27      	ldr	r3, [pc, #156]	; (80089a4 <gos_taskSetOriginalPriority+0x170>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <gos_taskSetOriginalPriority+0xe6>
 800890e:	4b25      	ldr	r3, [pc, #148]	; (80089a4 <gos_taskSetOriginalPriority+0x170>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	3b01      	subs	r3, #1
 8008914:	b2da      	uxtb	r2, r3
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <gos_taskSetOriginalPriority+0x170>)
 8008918:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800891a:	4b23      	ldr	r3, [pc, #140]	; (80089a8 <gos_taskSetOriginalPriority+0x174>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	226a      	movs	r2, #106	; 0x6a
 8008920:	fb02 f303 	mul.w	r3, r2, r3
 8008924:	3308      	adds	r3, #8
 8008926:	4a21      	ldr	r2, [pc, #132]	; (80089ac <gos_taskSetOriginalPriority+0x178>)
 8008928:	4413      	add	r3, r2
 800892a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	216a      	movs	r1, #106	; 0x6a
 8008930:	fb01 f202 	mul.w	r2, r1, r2
 8008934:	3208      	adds	r2, #8
 8008936:	491d      	ldr	r1, [pc, #116]	; (80089ac <gos_taskSetOriginalPriority+0x178>)
 8008938:	440a      	add	r2, r1
 800893a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 800893c:	9201      	str	r2, [sp, #4]
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <gos_taskSetOriginalPriority+0x180>)
 8008942:	f44f 7246 	mov.w	r2, #792	; 0x318
 8008946:	491c      	ldr	r1, [pc, #112]	; (80089b8 <gos_taskSetOriginalPriority+0x184>)
 8008948:	2034      	movs	r0, #52	; 0x34
 800894a:	f000 fd23 	bl	8009394 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <gos_taskSetOriginalPriority+0x12e>
 8008956:	4b11      	ldr	r3, [pc, #68]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	3b01      	subs	r3, #1
 800895c:	b2da      	uxtb	r2, r3
 800895e:	4b0f      	ldr	r3, [pc, #60]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <gos_taskSetOriginalPriority+0x168>)
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d108      	bne.n	800897c <gos_taskSetOriginalPriority+0x148>
 800896a:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <gos_taskSetOriginalPriority+0x16c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f383 8810 	msr	PRIMASK, r3
 8008972:	b662      	cpsie	i
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <gos_taskSetOriginalPriority+0x170>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <gos_taskSetOriginalPriority+0x15c>
 8008984:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <gos_taskSetOriginalPriority+0x170>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	3b01      	subs	r3, #1
 800898a:	b2da      	uxtb	r2, r3
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <gos_taskSetOriginalPriority+0x170>)
 800898e:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	2000129f 	.word	0x2000129f
 80089a0:	200012a0 	.word	0x200012a0
 80089a4:	2000129d 	.word	0x2000129d
 80089a8:	200012a4 	.word	0x200012a4
 80089ac:	2000035c 	.word	0x2000035c
 80089b0:	2000129e 	.word	0x2000129e
 80089b4:	0800efd0 	.word	0x0800efd0
 80089b8:	0800fc20 	.word	0x0800fc20

080089bc <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 80089c8:	23ae      	movs	r3, #174	; 0xae
 80089ca:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80089d0:	4b2e      	ldr	r3, [pc, #184]	; (8008a8c <gos_taskGetPriority+0xd0>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d108      	bne.n	80089ea <gos_taskGetPriority+0x2e>
 80089d8:	b672      	cpsid	i
 80089da:	f3ef 8310 	mrs	r3, PRIMASK
 80089de:	4a2c      	ldr	r2, [pc, #176]	; (8008a90 <gos_taskGetPriority+0xd4>)
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	4b28      	ldr	r3, [pc, #160]	; (8008a8c <gos_taskGetPriority+0xd0>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	3301      	adds	r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	4b26      	ldr	r3, [pc, #152]	; (8008a8c <gos_taskGetPriority+0xd0>)
 80089f4:	701a      	strb	r2, [r3, #0]
 80089f6:	4b27      	ldr	r3, [pc, #156]	; (8008a94 <gos_taskGetPriority+0xd8>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <gos_taskGetPriority+0xd8>)
 8008a00:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a08:	d917      	bls.n	8008a3a <gos_taskGetPriority+0x7e>
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	f248 020f 	movw	r2, #32783	; 0x800f
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d812      	bhi.n	8008a3a <gos_taskGetPriority+0x7e>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00f      	beq.n	8008a3a <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008a20:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 8008a22:	4a1d      	ldr	r2, [pc, #116]	; (8008a98 <gos_taskGetPriority+0xdc>)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	216a      	movs	r1, #106	; 0x6a
 8008a28:	fb01 f303 	mul.w	r3, r1, r3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3306      	adds	r3, #6
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 8008a36:	2355      	movs	r3, #85	; 0x55
 8008a38:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <gos_taskGetPriority+0xd0>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <gos_taskGetPriority+0x92>
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <gos_taskGetPriority+0xd0>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <gos_taskGetPriority+0xd0>)
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <gos_taskGetPriority+0xd0>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d108      	bne.n	8008a68 <gos_taskGetPriority+0xac>
 8008a56:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <gos_taskGetPriority+0xd4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f383 8810 	msr	PRIMASK, r3
 8008a5e:	b662      	cpsie	i
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <gos_taskGetPriority+0xd8>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <gos_taskGetPriority+0xc0>
 8008a70:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <gos_taskGetPriority+0xd8>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <gos_taskGetPriority+0xd8>)
 8008a7a:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	2000129f 	.word	0x2000129f
 8008a90:	200012a0 	.word	0x200012a0
 8008a94:	2000129d 	.word	0x2000129d
 8008a98:	2000035c 	.word	0x2000035c

08008a9c <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	460a      	mov	r2, r1
 8008aa6:	80fb      	strh	r3, [r7, #6]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 8008aac:	23ae      	movs	r3, #174	; 0xae
 8008aae:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008ab4:	4b31      	ldr	r3, [pc, #196]	; (8008b7c <gos_taskAddPrivilege+0xe0>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d108      	bne.n	8008ace <gos_taskAddPrivilege+0x32>
 8008abc:	b672      	cpsid	i
 8008abe:	f3ef 8310 	mrs	r3, PRIMASK
 8008ac2:	4a2f      	ldr	r2, [pc, #188]	; (8008b80 <gos_taskAddPrivilege+0xe4>)
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	4b2b      	ldr	r3, [pc, #172]	; (8008b7c <gos_taskAddPrivilege+0xe0>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	4b29      	ldr	r3, [pc, #164]	; (8008b7c <gos_taskAddPrivilege+0xe0>)
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	4b2a      	ldr	r3, [pc, #168]	; (8008b84 <gos_taskAddPrivilege+0xe8>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	4b28      	ldr	r3, [pc, #160]	; (8008b84 <gos_taskAddPrivilege+0xe8>)
 8008ae4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aec:	d91e      	bls.n	8008b2c <gos_taskAddPrivilege+0x90>
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	f248 020f 	movw	r2, #32783	; 0x800f
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d819      	bhi.n	8008b2c <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008afe:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 8008b00:	4a21      	ldr	r2, [pc, #132]	; (8008b88 <gos_taskAddPrivilege+0xec>)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	216a      	movs	r1, #106	; 0x6a
 8008b06:	fb01 f303 	mul.w	r3, r1, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	881a      	ldrh	r2, [r3, #0]
 8008b10:	88bb      	ldrh	r3, [r7, #4]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	b298      	uxth	r0, r3
 8008b16:	4a1c      	ldr	r2, [pc, #112]	; (8008b88 <gos_taskAddPrivilege+0xec>)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	216a      	movs	r1, #106	; 0x6a
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	4413      	add	r3, r2
 8008b22:	3308      	adds	r3, #8
 8008b24:	4602      	mov	r2, r0
 8008b26:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 8008b28:	2355      	movs	r3, #85	; 0x55
 8008b2a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8008b2c:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <gos_taskAddPrivilege+0xe0>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <gos_taskAddPrivilege+0xa4>
 8008b34:	4b11      	ldr	r3, [pc, #68]	; (8008b7c <gos_taskAddPrivilege+0xe0>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <gos_taskAddPrivilege+0xe0>)
 8008b3e:	701a      	strb	r2, [r3, #0]
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <gos_taskAddPrivilege+0xe0>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d108      	bne.n	8008b5a <gos_taskAddPrivilege+0xbe>
 8008b48:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <gos_taskAddPrivilege+0xe4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f383 8810 	msr	PRIMASK, r3
 8008b50:	b662      	cpsie	i
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <gos_taskAddPrivilege+0xe8>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d005      	beq.n	8008b6e <gos_taskAddPrivilege+0xd2>
 8008b62:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <gos_taskAddPrivilege+0xe8>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <gos_taskAddPrivilege+0xe8>)
 8008b6c:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	2000129f 	.word	0x2000129f
 8008b80:	200012a0 	.word	0x200012a0
 8008b84:	2000129d 	.word	0x2000129d
 8008b88:	2000035c 	.word	0x2000035c

08008b8c <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	460a      	mov	r2, r1
 8008b96:	80fb      	strh	r3, [r7, #6]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 8008b9c:	23ae      	movs	r3, #174	; 0xae
 8008b9e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008ba4:	4b34      	ldr	r3, [pc, #208]	; (8008c78 <gos_taskRemovePrivilege+0xec>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d108      	bne.n	8008bbe <gos_taskRemovePrivilege+0x32>
 8008bac:	b672      	cpsid	i
 8008bae:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb2:	4a32      	ldr	r2, [pc, #200]	; (8008c7c <gos_taskRemovePrivilege+0xf0>)
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	4b2e      	ldr	r3, [pc, #184]	; (8008c78 <gos_taskRemovePrivilege+0xec>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	4b2c      	ldr	r3, [pc, #176]	; (8008c78 <gos_taskRemovePrivilege+0xec>)
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	4b2d      	ldr	r3, [pc, #180]	; (8008c80 <gos_taskRemovePrivilege+0xf4>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	4b2b      	ldr	r3, [pc, #172]	; (8008c80 <gos_taskRemovePrivilege+0xf4>)
 8008bd4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
 8008bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bdc:	d923      	bls.n	8008c26 <gos_taskRemovePrivilege+0x9a>
 8008bde:	88fb      	ldrh	r3, [r7, #6]
 8008be0:	f248 020f 	movw	r2, #32783	; 0x800f
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d81e      	bhi.n	8008c26 <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8008be8:	88fb      	ldrh	r3, [r7, #6]
 8008bea:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008bee:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 8008bf0:	4a24      	ldr	r2, [pc, #144]	; (8008c84 <gos_taskRemovePrivilege+0xf8>)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	216a      	movs	r1, #106	; 0x6a
 8008bf6:	fb01 f303 	mul.w	r3, r1, r3
 8008bfa:	4413      	add	r3, r2
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	b21a      	sxth	r2, r3
 8008c02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008c06:	43db      	mvns	r3, r3
 8008c08:	b21b      	sxth	r3, r3
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	b21b      	sxth	r3, r3
 8008c0e:	b298      	uxth	r0, r3
 8008c10:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <gos_taskRemovePrivilege+0xf8>)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	216a      	movs	r1, #106	; 0x6a
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	4602      	mov	r2, r0
 8008c20:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 8008c22:	2355      	movs	r3, #85	; 0x55
 8008c24:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8008c26:	4b14      	ldr	r3, [pc, #80]	; (8008c78 <gos_taskRemovePrivilege+0xec>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <gos_taskRemovePrivilege+0xae>
 8008c2e:	4b12      	ldr	r3, [pc, #72]	; (8008c78 <gos_taskRemovePrivilege+0xec>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <gos_taskRemovePrivilege+0xec>)
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	; (8008c78 <gos_taskRemovePrivilege+0xec>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d108      	bne.n	8008c54 <gos_taskRemovePrivilege+0xc8>
 8008c42:	4b0e      	ldr	r3, [pc, #56]	; (8008c7c <gos_taskRemovePrivilege+0xf0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f383 8810 	msr	PRIMASK, r3
 8008c4a:	b662      	cpsie	i
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <gos_taskRemovePrivilege+0xf4>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <gos_taskRemovePrivilege+0xdc>
 8008c5c:	4b08      	ldr	r3, [pc, #32]	; (8008c80 <gos_taskRemovePrivilege+0xf4>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <gos_taskRemovePrivilege+0xf4>)
 8008c66:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	2000129f 	.word	0x2000129f
 8008c7c:	200012a0 	.word	0x200012a0
 8008c80:	2000129d 	.word	0x2000129d
 8008c84:	2000035c 	.word	0x2000035c

08008c88 <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	460a      	mov	r2, r1
 8008c92:	80fb      	strh	r3, [r7, #6]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 8008c98:	23ae      	movs	r3, #174	; 0xae
 8008c9a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008ca0:	4b2c      	ldr	r3, [pc, #176]	; (8008d54 <gos_taskSetPrivileges+0xcc>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d108      	bne.n	8008cba <gos_taskSetPrivileges+0x32>
 8008ca8:	b672      	cpsid	i
 8008caa:	f3ef 8310 	mrs	r3, PRIMASK
 8008cae:	4a2a      	ldr	r2, [pc, #168]	; (8008d58 <gos_taskSetPrivileges+0xd0>)
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	4b26      	ldr	r3, [pc, #152]	; (8008d54 <gos_taskSetPrivileges+0xcc>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <gos_taskSetPrivileges+0xcc>)
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	4b25      	ldr	r3, [pc, #148]	; (8008d5c <gos_taskSetPrivileges+0xd4>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <gos_taskSetPrivileges+0xd4>)
 8008cd0:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
 8008cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd8:	d913      	bls.n	8008d02 <gos_taskSetPrivileges+0x7a>
 8008cda:	88fb      	ldrh	r3, [r7, #6]
 8008cdc:	f248 020f 	movw	r2, #32783	; 0x800f
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d80e      	bhi.n	8008d02 <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8008ce4:	88fb      	ldrh	r3, [r7, #6]
 8008ce6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008cea:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 8008cec:	4a1c      	ldr	r2, [pc, #112]	; (8008d60 <gos_taskSetPrivileges+0xd8>)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	216a      	movs	r1, #106	; 0x6a
 8008cf2:	fb01 f303 	mul.w	r3, r1, r3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	88ba      	ldrh	r2, [r7, #4]
 8008cfc:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 8008cfe:	2355      	movs	r3, #85	; 0x55
 8008d00:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8008d02:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <gos_taskSetPrivileges+0xcc>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <gos_taskSetPrivileges+0x8e>
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <gos_taskSetPrivileges+0xcc>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	4b10      	ldr	r3, [pc, #64]	; (8008d54 <gos_taskSetPrivileges+0xcc>)
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <gos_taskSetPrivileges+0xcc>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d108      	bne.n	8008d30 <gos_taskSetPrivileges+0xa8>
 8008d1e:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <gos_taskSetPrivileges+0xd0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f383 8810 	msr	PRIMASK, r3
 8008d26:	b662      	cpsie	i
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <gos_taskSetPrivileges+0xd4>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <gos_taskSetPrivileges+0xbc>
 8008d38:	4b08      	ldr	r3, [pc, #32]	; (8008d5c <gos_taskSetPrivileges+0xd4>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <gos_taskSetPrivileges+0xd4>)
 8008d42:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	2000129f 	.word	0x2000129f
 8008d58:	200012a0 	.word	0x200012a0
 8008d5c:	2000129d 	.word	0x2000129d
 8008d60:	2000035c 	.word	0x2000035c

08008d64 <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 8008d70:	23ae      	movs	r3, #174	; 0xae
 8008d72:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008d78:	4b2e      	ldr	r3, [pc, #184]	; (8008e34 <gos_taskGetPrivileges+0xd0>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d108      	bne.n	8008d92 <gos_taskGetPrivileges+0x2e>
 8008d80:	b672      	cpsid	i
 8008d82:	f3ef 8310 	mrs	r3, PRIMASK
 8008d86:	4a2c      	ldr	r2, [pc, #176]	; (8008e38 <gos_taskGetPrivileges+0xd4>)
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <gos_taskGetPrivileges+0xd0>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	3301      	adds	r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	4b26      	ldr	r3, [pc, #152]	; (8008e34 <gos_taskGetPrivileges+0xd0>)
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	4b27      	ldr	r3, [pc, #156]	; (8008e3c <gos_taskGetPrivileges+0xd8>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	3301      	adds	r3, #1
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	4b25      	ldr	r3, [pc, #148]	; (8008e3c <gos_taskGetPrivileges+0xd8>)
 8008da8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db0:	d917      	bls.n	8008de2 <gos_taskGetPrivileges+0x7e>
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	f248 020f 	movw	r2, #32783	; 0x800f
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d812      	bhi.n	8008de2 <gos_taskGetPrivileges+0x7e>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00f      	beq.n	8008de2 <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8008dc2:	88fb      	ldrh	r3, [r7, #6]
 8008dc4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008dc8:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 8008dca:	4a1d      	ldr	r2, [pc, #116]	; (8008e40 <gos_taskGetPrivileges+0xdc>)
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	216a      	movs	r1, #106	; 0x6a
 8008dd0:	fb01 f303 	mul.w	r3, r1, r3
 8008dd4:	4413      	add	r3, r2
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	881a      	ldrh	r2, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 8008dde:	2355      	movs	r3, #85	; 0x55
 8008de0:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 8008de2:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <gos_taskGetPrivileges+0xd0>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <gos_taskGetPrivileges+0x92>
 8008dea:	4b12      	ldr	r3, [pc, #72]	; (8008e34 <gos_taskGetPrivileges+0xd0>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	4b10      	ldr	r3, [pc, #64]	; (8008e34 <gos_taskGetPrivileges+0xd0>)
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <gos_taskGetPrivileges+0xd0>)
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d108      	bne.n	8008e10 <gos_taskGetPrivileges+0xac>
 8008dfe:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <gos_taskGetPrivileges+0xd4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f383 8810 	msr	PRIMASK, r3
 8008e06:	b662      	cpsie	i
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <gos_taskGetPrivileges+0xd8>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <gos_taskGetPrivileges+0xc0>
 8008e18:	4b08      	ldr	r3, [pc, #32]	; (8008e3c <gos_taskGetPrivileges+0xd8>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <gos_taskGetPrivileges+0xd8>)
 8008e22:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	2000129f 	.word	0x2000129f
 8008e38:	200012a0 	.word	0x200012a0
 8008e3c:	2000129d 	.word	0x2000129d
 8008e40:	2000035c 	.word	0x2000035c

08008e44 <gos_taskGetId>:

/*
 * Function: gos_taskGetId
 */
gos_result_t gos_taskGetId (gos_taskName_t taskName, gos_tid_t* taskId)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskGetIdResult = GOS_ERROR;
 8008e4e:	23ae      	movs	r3, #174	; 0xae
 8008e50:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8008e56:	2300      	movs	r3, #0
 8008e58:	60bb      	str	r3, [r7, #8]
 8008e5a:	e01e      	b.n	8008e9a <gos_taskGetId+0x56>
    {
        if (strcmp(taskName, taskDescriptors[taskIndex].taskName) == 0u)
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	226a      	movs	r2, #106	; 0x6a
 8008e60:	fb02 f303 	mul.w	r3, r2, r3
 8008e64:	3308      	adds	r3, #8
 8008e66:	4a12      	ldr	r2, [pc, #72]	; (8008eb0 <gos_taskGetId+0x6c>)
 8008e68:	4413      	add	r3, r2
 8008e6a:	3302      	adds	r3, #2
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7f7 f9ce 	bl	8000210 <strcmp>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10c      	bne.n	8008e94 <gos_taskGetId+0x50>
        {
            *taskId = taskDescriptors[taskIndex].taskId;
 8008e7a:	4a0d      	ldr	r2, [pc, #52]	; (8008eb0 <gos_taskGetId+0x6c>)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	216a      	movs	r1, #106	; 0x6a
 8008e80:	fb01 f303 	mul.w	r3, r1, r3
 8008e84:	4413      	add	r3, r2
 8008e86:	332a      	adds	r3, #42	; 0x2a
 8008e88:	881a      	ldrh	r2, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	801a      	strh	r2, [r3, #0]
            taskGetIdResult = GOS_SUCCESS;
 8008e8e:	2355      	movs	r3, #85	; 0x55
 8008e90:	73fb      	strb	r3, [r7, #15]
            break;
 8008e92:	e008      	b.n	8008ea6 <gos_taskGetId+0x62>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60bb      	str	r3, [r7, #8]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b0f      	cmp	r3, #15
 8008e9e:	d802      	bhi.n	8008ea6 <gos_taskGetId+0x62>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1da      	bne.n	8008e5c <gos_taskGetId+0x18>
        {
            // Continue.
        }
    }

    return taskGetIdResult;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	2000035c 	.word	0x2000035c

08008eb4 <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 8008ebc:	23ae      	movs	r3, #174	; 0xae
 8008ebe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008ec0:	4b26      	ldr	r3, [pc, #152]	; (8008f5c <gos_taskGetCurrentId+0xa8>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d108      	bne.n	8008eda <gos_taskGetCurrentId+0x26>
 8008ec8:	b672      	cpsid	i
 8008eca:	f3ef 8310 	mrs	r3, PRIMASK
 8008ece:	4a24      	ldr	r2, [pc, #144]	; (8008f60 <gos_taskGetCurrentId+0xac>)
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	4b20      	ldr	r3, [pc, #128]	; (8008f5c <gos_taskGetCurrentId+0xa8>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	4b1e      	ldr	r3, [pc, #120]	; (8008f5c <gos_taskGetCurrentId+0xa8>)
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	4b1f      	ldr	r3, [pc, #124]	; (8008f64 <gos_taskGetCurrentId+0xb0>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <gos_taskGetCurrentId+0xb0>)
 8008ef0:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d009      	beq.n	8008f0c <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 8008ef8:	4b1b      	ldr	r3, [pc, #108]	; (8008f68 <gos_taskGetCurrentId+0xb4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 8008f08:	2355      	movs	r3, #85	; 0x55
 8008f0a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 8008f0c:	4b13      	ldr	r3, [pc, #76]	; (8008f5c <gos_taskGetCurrentId+0xa8>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d005      	beq.n	8008f20 <gos_taskGetCurrentId+0x6c>
 8008f14:	4b11      	ldr	r3, [pc, #68]	; (8008f5c <gos_taskGetCurrentId+0xa8>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <gos_taskGetCurrentId+0xa8>)
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <gos_taskGetCurrentId+0xa8>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d108      	bne.n	8008f3a <gos_taskGetCurrentId+0x86>
 8008f28:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <gos_taskGetCurrentId+0xac>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f383 8810 	msr	PRIMASK, r3
 8008f30:	b662      	cpsie	i
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <gos_taskGetCurrentId+0xb0>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d005      	beq.n	8008f4e <gos_taskGetCurrentId+0x9a>
 8008f42:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <gos_taskGetCurrentId+0xb0>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <gos_taskGetCurrentId+0xb0>)
 8008f4c:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	2000129f 	.word	0x2000129f
 8008f60:	200012a0 	.word	0x200012a0
 8008f64:	2000129d 	.word	0x2000129d
 8008f68:	200012a4 	.word	0x200012a4

08008f6c <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8008f78:	23ae      	movs	r3, #174	; 0xae
 8008f7a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008f80:	4b2d      	ldr	r3, [pc, #180]	; (8009038 <gos_taskGetData+0xcc>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d108      	bne.n	8008f9a <gos_taskGetData+0x2e>
 8008f88:	b672      	cpsid	i
 8008f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f8e:	4a2b      	ldr	r2, [pc, #172]	; (800903c <gos_taskGetData+0xd0>)
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	4b27      	ldr	r3, [pc, #156]	; (8009038 <gos_taskGetData+0xcc>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	4b25      	ldr	r3, [pc, #148]	; (8009038 <gos_taskGetData+0xcc>)
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	4b26      	ldr	r3, [pc, #152]	; (8009040 <gos_taskGetData+0xd4>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	3301      	adds	r3, #1
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	4b24      	ldr	r3, [pc, #144]	; (8009040 <gos_taskGetData+0xd4>)
 8008fb0:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8008fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	da18      	bge.n	8008fec <gos_taskGetData+0x80>
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	f248 020f 	movw	r2, #32783	; 0x800f
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d813      	bhi.n	8008fec <gos_taskGetData+0x80>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d010      	beq.n	8008fec <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8008fca:	88fb      	ldrh	r3, [r7, #6]
 8008fcc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8008fd0:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	226a      	movs	r2, #106	; 0x6a
 8008fd6:	fb02 f303 	mul.w	r3, r2, r3
 8008fda:	4a1a      	ldr	r2, [pc, #104]	; (8009044 <gos_taskGetData+0xd8>)
 8008fdc:	4413      	add	r3, r2
 8008fde:	226a      	movs	r2, #106	; 0x6a
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6838      	ldr	r0, [r7, #0]
 8008fe4:	f003 fc8d 	bl	800c902 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8008fe8:	2355      	movs	r3, #85	; 0x55
 8008fea:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8008fec:	4b12      	ldr	r3, [pc, #72]	; (8009038 <gos_taskGetData+0xcc>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <gos_taskGetData+0x94>
 8008ff4:	4b10      	ldr	r3, [pc, #64]	; (8009038 <gos_taskGetData+0xcc>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <gos_taskGetData+0xcc>)
 8008ffe:	701a      	strb	r2, [r3, #0]
 8009000:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <gos_taskGetData+0xcc>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d108      	bne.n	800901a <gos_taskGetData+0xae>
 8009008:	4b0c      	ldr	r3, [pc, #48]	; (800903c <gos_taskGetData+0xd0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f383 8810 	msr	PRIMASK, r3
 8009010:	b662      	cpsie	i
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <gos_taskGetData+0xd4>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d005      	beq.n	800902e <gos_taskGetData+0xc2>
 8009022:	4b07      	ldr	r3, [pc, #28]	; (8009040 <gos_taskGetData+0xd4>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	3b01      	subs	r3, #1
 8009028:	b2da      	uxtb	r2, r3
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <gos_taskGetData+0xd4>)
 800902c:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 800902e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	2000129f 	.word	0x2000129f
 800903c:	200012a0 	.word	0x200012a0
 8009040:	2000129d 	.word	0x2000129d
 8009044:	2000035c 	.word	0x2000035c

08009048 <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_SUCCESS;
 8009050:	2355      	movs	r3, #85	; 0x55
 8009052:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction == NULL                    ||
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d020      	beq.n	800909e <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPrivilegeLevel == 0                 ||
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	891b      	ldrh	r3, [r3, #8]
 8009060:	b29b      	uxth	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01b      	beq.n	800909e <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
        taskDescriptor->taskFunction == gos_idleTask      ||
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
 800906a:	4a11      	ldr	r2, [pc, #68]	; (80090b0 <gos_taskCheckDescriptor+0x68>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d016      	beq.n	800909e <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009076:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction == gos_idleTask      ||
 8009078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800907c:	d80f      	bhi.n	800909e <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009084:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 8009086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800908a:	d308      	bcc.n	800909e <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize % 4 != 0u)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009092:	b29b      	uxth	r3, r3
 8009094:	f003 0303 	and.w	r3, r3, #3
 8009098:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_ERROR;
 800909e:	23ae      	movs	r3, #174	; 0xae
 80090a0:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	080090b5 	.word	0x080090b5

080090b4 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 80090ba:	2155      	movs	r1, #85	; 0x55
 80090bc:	480c      	ldr	r0, [pc, #48]	; (80090f0 <gos_idleTask+0x3c>)
 80090be:	f000 f9ff 	bl	80094c0 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 80090c2:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <gos_idleTask+0x40>)
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	3301      	adds	r3, #1
 80090c8:	4a0a      	ldr	r2, [pc, #40]	; (80090f4 <gos_idleTask+0x40>)
 80090ca:	6413      	str	r3, [r2, #64]	; 0x40

        if (kernelIdleHookFunction != NULL)
 80090cc:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <gos_idleTask+0x44>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 80090d4:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <gos_idleTask+0x44>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 80090da:	2049      	movs	r0, #73	; 0x49
 80090dc:	f7fd fb52 	bl	8006784 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 80090e0:	2355      	movs	r3, #85	; 0x55
 80090e2:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 80090e4:	2009      	movs	r0, #9
 80090e6:	f7fe f85d 	bl	80071a4 <gos_kernelReschedule>
    return taskYieldResult;
 80090ea:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 80090ec:	e7e9      	b.n	80090c2 <gos_idleTask+0xe>
 80090ee:	bf00      	nop
 80090f0:	0800f004 	.word	0x0800f004
 80090f4:	2000035c 	.word	0x2000035c
 80090f8:	200012cc 	.word	0x200012cc

080090fc <main>:

/*
 * Main
 */
int main (void_t)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8009102:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <main+0x78>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	3301      	adds	r3, #1
 8009108:	b2da      	uxtb	r2, r3
 800910a:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <main+0x78>)
 800910c:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 800910e:	f7f7 ffb7 	bl	8001080 <gos_platformDriverInit>
 8009112:	4603      	mov	r3, r0
 8009114:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 8009116:	f000 f903 	bl	8009320 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	4619      	mov	r1, r3
 800911e:	4816      	ldr	r0, [pc, #88]	; (8009178 <main+0x7c>)
 8009120:	f000 f9ce 	bl	80094c0 <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8009124:	f7fd f954 	bl	80063d0 <gos_kernelInit>
 8009128:	4603      	mov	r3, r0
 800912a:	4619      	mov	r1, r3
 800912c:	4813      	ldr	r0, [pc, #76]	; (800917c <main+0x80>)
 800912e:	f000 f9c7 	bl	80094c0 <gos_errorTraceInit>
 8009132:	4603      	mov	r3, r0
 8009134:	2b55      	cmp	r3, #85	; 0x55
 8009136:	d109      	bne.n	800914c <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 8009138:	4911      	ldr	r1, [pc, #68]	; (8009180 <main+0x84>)
 800913a:	4812      	ldr	r0, [pc, #72]	; (8009184 <main+0x88>)
 800913c:	f7fe fae8 	bl	8007710 <gos_taskRegister>
 8009140:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8009142:	2b55      	cmp	r3, #85	; 0x55
 8009144:	d102      	bne.n	800914c <main+0x50>
    {
        initError = GOS_FALSE;
 8009146:	4b10      	ldr	r3, [pc, #64]	; (8009188 <main+0x8c>)
 8009148:	2249      	movs	r2, #73	; 0x49
 800914a:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 800914c:	f000 f85c 	bl	8009208 <gos_Start>
 8009150:	4603      	mov	r3, r0
 8009152:	2bae      	cmp	r3, #174	; 0xae
 8009154:	d106      	bne.n	8009164 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 8009156:	4b0d      	ldr	r3, [pc, #52]	; (800918c <main+0x90>)
 8009158:	22c0      	movs	r2, #192	; 0xc0
 800915a:	490d      	ldr	r1, [pc, #52]	; (8009190 <main+0x94>)
 800915c:	2034      	movs	r0, #52	; 0x34
 800915e:	f000 f919 	bl	8009394 <gos_errorHandler>
 8009162:	e005      	b.n	8009170 <main+0x74>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 8009164:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <main+0x98>)
 8009166:	22c4      	movs	r2, #196	; 0xc4
 8009168:	4909      	ldr	r1, [pc, #36]	; (8009190 <main+0x94>)
 800916a:	2034      	movs	r0, #52	; 0x34
 800916c:	f000 f912 	bl	8009394 <gos_errorHandler>
    }

    for (;;);
 8009170:	e7fe      	b.n	8009170 <main+0x74>
 8009172:	bf00      	nop
 8009174:	2000129d 	.word	0x2000129d
 8009178:	0800f014 	.word	0x0800f014
 800917c:	0800f034 	.word	0x0800f034
 8009180:	200012d2 	.word	0x200012d2
 8009184:	20000b1c 	.word	0x20000b1c
 8009188:	200012d0 	.word	0x200012d0
 800918c:	0800f04c 	.word	0x0800f04c
 8009190:	0800fc3c 	.word	0x0800fc3c
 8009194:	0800f06c 	.word	0x0800f06c

08009198 <gos_Dump>:

/*
 * Function: gos_Dump
 */
void_t gos_Dump (void_t)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_taskPrivilegeLevel_t privileges    = 0u;
 800919e:	2300      	movs	r3, #0
 80091a0:	80fb      	strh	r3, [r7, #6]
    gos_tid_t                currentTaskId = GOS_INVALID_TASK_ID;
 80091a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091a6:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    dumpRequired = GOS_TRUE;
 80091a8:	4b15      	ldr	r3, [pc, #84]	; (8009200 <gos_Dump+0x68>)
 80091aa:	2236      	movs	r2, #54	; 0x36
 80091ac:	701a      	strb	r2, [r3, #0]

    (void_t) gos_taskGetCurrentId(&currentTaskId);
 80091ae:	1d3b      	adds	r3, r7, #4
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fe7f 	bl	8008eb4 <gos_taskGetCurrentId>
    (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 80091b6:	88bb      	ldrh	r3, [r7, #4]
 80091b8:	1dba      	adds	r2, r7, #6
 80091ba:	4611      	mov	r1, r2
 80091bc:	4618      	mov	r0, r3
 80091be:	f7ff fdd1 	bl	8008d64 <gos_taskGetPrivileges>

    if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 80091c2:	88fb      	ldrh	r3, [r7, #6]
 80091c4:	b21b      	sxth	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	db11      	blt.n	80091ee <gos_Dump+0x56>
    {
        (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 80091ca:	88bb      	ldrh	r3, [r7, #4]
 80091cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff fc63 	bl	8008a9c <gos_taskAddPrivilege>
        gos_taskWakeup(systemTaskId);
 80091d6:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <gos_Dump+0x6c>)
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fcb0 	bl	8007b40 <gos_taskWakeup>
        (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 80091e0:	88bb      	ldrh	r3, [r7, #4]
 80091e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff fcd0 	bl	8008b8c <gos_taskRemovePrivilege>
    }
    else
    {
        gos_taskWakeup(systemTaskId);
    }
}
 80091ec:	e004      	b.n	80091f8 <gos_Dump+0x60>
        gos_taskWakeup(systemTaskId);
 80091ee:	4b05      	ldr	r3, [pc, #20]	; (8009204 <gos_Dump+0x6c>)
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe fca4 	bl	8007b40 <gos_taskWakeup>
}
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200012d1 	.word	0x200012d1
 8009204:	200012d2 	.word	0x200012d2

08009208 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 800920e:	23b1      	movs	r3, #177	; 0xb1
 8009210:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 8009212:	4b06      	ldr	r3, [pc, #24]	; (800922c <gos_Start+0x24>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b49      	cmp	r3, #73	; 0x49
 8009218:	d103      	bne.n	8009222 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 800921a:	f7fd f9c5 	bl	80065a8 <gos_kernelStart>
 800921e:	4603      	mov	r3, r0
 8009220:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 8009222:	79fb      	ldrb	r3, [r7, #7]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	200012d0 	.word	0x200012d0

08009230 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 8009230:	b590      	push	{r4, r7, lr}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 8009236:	2355      	movs	r3, #85	; 0x55
 8009238:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 800923a:	2300      	movs	r3, #0
 800923c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800923e:	4b32      	ldr	r3, [pc, #200]	; (8009308 <gos_systemTask+0xd8>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	3301      	adds	r3, #1
 8009244:	b2da      	uxtb	r2, r3
 8009246:	4b30      	ldr	r3, [pc, #192]	; (8009308 <gos_systemTask+0xd8>)
 8009248:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 800924a:	2300      	movs	r3, #0
 800924c:	71bb      	strb	r3, [r7, #6]
 800924e:	e01d      	b.n	800928c <gos_systemTask+0x5c>
    {
        sysInitResult &= gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc());
 8009250:	79ba      	ldrb	r2, [r7, #6]
 8009252:	4613      	mov	r3, r2
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4a2c      	ldr	r2, [pc, #176]	; (800930c <gos_systemTask+0xdc>)
 800925c:	189c      	adds	r4, r3, r2
 800925e:	79ba      	ldrb	r2, [r7, #6]
 8009260:	492a      	ldr	r1, [pc, #168]	; (800930c <gos_systemTask+0xdc>)
 8009262:	4613      	mov	r3, r2
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	440b      	add	r3, r1
 800926c:	3320      	adds	r3, #32
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4798      	blx	r3
 8009272:	4603      	mov	r3, r0
 8009274:	4619      	mov	r1, r3
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f922 	bl	80094c0 <gos_errorTraceInit>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	4013      	ands	r3, r2
 8009284:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 8009286:	79bb      	ldrb	r3, [r7, #6]
 8009288:	3301      	adds	r3, #1
 800928a:	71bb      	strb	r3, [r7, #6]
 800928c:	79bb      	ldrb	r3, [r7, #6]
 800928e:	2b07      	cmp	r3, #7
 8009290:	d9de      	bls.n	8009250 <gos_systemTask+0x20>
    }

    // Check and correct flag value.
    if (sysInitResult != GOS_SUCCESS)
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	2b55      	cmp	r3, #85	; 0x55
 8009296:	d001      	beq.n	800929c <gos_systemTask+0x6c>
    {
        sysInitResult = GOS_ERROR;
 8009298:	23ae      	movs	r3, #174	; 0xae
 800929a:	71fb      	strb	r3, [r7, #7]
    {
        // Nothing to do.
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	4619      	mov	r1, r3
 80092a0:	481b      	ldr	r0, [pc, #108]	; (8009310 <gos_systemTask+0xe0>)
 80092a2:	f000 f90d 	bl	80094c0 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 80092a6:	4b18      	ldr	r3, [pc, #96]	; (8009308 <gos_systemTask+0xd8>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <gos_systemTask+0x8a>
 80092ae:	4b16      	ldr	r3, [pc, #88]	; (8009308 <gos_systemTask+0xd8>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	4b14      	ldr	r3, [pc, #80]	; (8009308 <gos_systemTask+0xd8>)
 80092b8:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80092ba:	4b16      	ldr	r3, [pc, #88]	; (8009314 <gos_systemTask+0xe4>)
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	21c3      	movs	r1, #195	; 0xc3
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fab7 	bl	8008834 <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80092c6:	4b13      	ldr	r3, [pc, #76]	; (8009314 <gos_systemTask+0xe4>)
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	21c3      	movs	r1, #195	; 0xc3
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff f9ed 	bl	80086ac <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 80092d2:	2036      	movs	r0, #54	; 0x36
 80092d4:	f7fd fa56 	bl	8006784 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 80092d8:	4b0f      	ldr	r3, [pc, #60]	; (8009318 <gos_systemTask+0xe8>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b36      	cmp	r3, #54	; 0x36
 80092de:	d10f      	bne.n	8009300 <gos_systemTask+0xd0>
        {
            (void_t) gos_taskSleep(100);
 80092e0:	2064      	movs	r0, #100	; 0x64
 80092e2:	f7fe fba7 	bl	8007a34 <gos_taskSleep>
            gos_kernelDump();
 80092e6:	f7fd fbb3 	bl	8006a50 <gos_kernelDump>
            gos_queueDump();
 80092ea:	f000 fe8d 	bl	800a008 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 80092ee:	4b0b      	ldr	r3, [pc, #44]	; (800931c <gos_systemTask+0xec>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2100      	movs	r1, #0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 faf9 	bl	800a8ec <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 80092fa:	4b07      	ldr	r3, [pc, #28]	; (8009318 <gos_systemTask+0xe8>)
 80092fc:	2249      	movs	r2, #73	; 0x49
 80092fe:	701a      	strb	r2, [r3, #0]
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 8009300:	2064      	movs	r0, #100	; 0x64
 8009302:	f7fe fb97 	bl	8007a34 <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8009306:	e7e4      	b.n	80092d2 <gos_systemTask+0xa2>
 8009308:	2000129d 	.word	0x2000129d
 800930c:	200009fc 	.word	0x200009fc
 8009310:	0800f0e8 	.word	0x0800f0e8
 8009314:	200012d2 	.word	0x200012d2
 8009318:	200012d1 	.word	0x200012d1
 800931c:	2000129c 	.word	0x2000129c

08009320 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 8009324:	4811      	ldr	r0, [pc, #68]	; (800936c <gos_printStartupLogo+0x4c>)
 8009326:	f002 f99f 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 800932a:	4811      	ldr	r0, [pc, #68]	; (8009370 <gos_printStartupLogo+0x50>)
 800932c:	f002 f99c 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 8009330:	4810      	ldr	r0, [pc, #64]	; (8009374 <gos_printStartupLogo+0x54>)
 8009332:	f002 f999 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 8009336:	4810      	ldr	r0, [pc, #64]	; (8009378 <gos_printStartupLogo+0x58>)
 8009338:	f002 f996 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 800933c:	480f      	ldr	r0, [pc, #60]	; (800937c <gos_printStartupLogo+0x5c>)
 800933e:	f002 f993 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 8009342:	480f      	ldr	r0, [pc, #60]	; (8009380 <gos_printStartupLogo+0x60>)
 8009344:	f002 f990 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 8009348:	480e      	ldr	r0, [pc, #56]	; (8009384 <gos_printStartupLogo+0x64>)
 800934a:	f002 f98d 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 800934e:	4809      	ldr	r0, [pc, #36]	; (8009374 <gos_printStartupLogo+0x54>)
 8009350:	f002 f98a 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 8009354:	480c      	ldr	r0, [pc, #48]	; (8009388 <gos_printStartupLogo+0x68>)
 8009356:	f002 f987 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2024                        \r\n\r\n");
 800935a:	480c      	ldr	r0, [pc, #48]	; (800938c <gos_printStartupLogo+0x6c>)
 800935c:	f002 f984 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 8009360:	480b      	ldr	r0, [pc, #44]	; (8009390 <gos_printStartupLogo+0x70>)
 8009362:	f002 f981 	bl	800b668 <gos_traceTraceFormattedUnsafe>
}
 8009366:	bf00      	nop
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	0800f100 	.word	0x0800f100
 8009370:	0800f150 	.word	0x0800f150
 8009374:	0800f1a0 	.word	0x0800f1a0
 8009378:	0800f1f0 	.word	0x0800f1f0
 800937c:	0800f240 	.word	0x0800f240
 8009380:	0800f290 	.word	0x0800f290
 8009384:	0800f2e0 	.word	0x0800f2e0
 8009388:	0800f330 	.word	0x0800f330
 800938c:	0800f380 	.word	0x0800f380
 8009390:	0800f3d0 	.word	0x0800f3d0

08009394 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 8009394:	b408      	push	{r3}
 8009396:	b580      	push	{r7, lr}
 8009398:	b087      	sub	sp, #28
 800939a:	af00      	add	r7, sp, #0
 800939c:	4603      	mov	r3, r0
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 80093a4:	4839      	ldr	r0, [pc, #228]	; (800948c <gos_errorHandler+0xf8>)
 80093a6:	f002 f95f 	bl	800b668 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	2b34      	cmp	r3, #52	; 0x34
 80093ae:	d103      	bne.n	80093b8 <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80093b0:	4837      	ldr	r0, [pc, #220]	; (8009490 <gos_errorHandler+0xfc>)
 80093b2:	f002 f959 	bl	800b668 <gos_traceTraceFormattedUnsafe>
 80093b6:	e013      	b.n	80093e0 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	2b2e      	cmp	r3, #46	; 0x2e
 80093bc:	d103      	bne.n	80093c6 <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80093be:	4835      	ldr	r0, [pc, #212]	; (8009494 <gos_errorHandler+0x100>)
 80093c0:	f002 f952 	bl	800b668 <gos_traceTraceFormattedUnsafe>
 80093c4:	e00c      	b.n	80093e0 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 80093c6:	7bfb      	ldrb	r3, [r7, #15]
 80093c8:	2b1a      	cmp	r3, #26
 80093ca:	d103      	bne.n	80093d4 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80093cc:	4832      	ldr	r0, [pc, #200]	; (8009498 <gos_errorHandler+0x104>)
 80093ce:	f002 f94b 	bl	800b668 <gos_traceTraceFormattedUnsafe>
 80093d2:	e005      	b.n	80093e0 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	2b3a      	cmp	r3, #58	; 0x3a
 80093d8:	d102      	bne.n	80093e0 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80093da:	4830      	ldr	r0, [pc, #192]	; (800949c <gos_errorHandler+0x108>)
 80093dc:	f002 f944 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d005      	beq.n	80093f2 <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	68b9      	ldr	r1, [r7, #8]
 80093ea:	482d      	ldr	r0, [pc, #180]	; (80094a0 <gos_errorHandler+0x10c>)
 80093ec:	f002 f93c 	bl	800b668 <gos_traceTraceFormattedUnsafe>
 80093f0:	e006      	b.n	8009400 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	482a      	ldr	r0, [pc, #168]	; (80094a4 <gos_errorHandler+0x110>)
 80093fc:	f002 f934 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00b      	beq.n	800941e <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 8009406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800940a:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009410:	4825      	ldr	r0, [pc, #148]	; (80094a8 <gos_errorHandler+0x114>)
 8009412:	f003 f9e5 	bl	800c7e0 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 8009416:	4924      	ldr	r1, [pc, #144]	; (80094a8 <gos_errorHandler+0x114>)
 8009418:	4824      	ldr	r0, [pc, #144]	; (80094ac <gos_errorHandler+0x118>)
 800941a:	f002 f925 	bl	800b668 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 800941e:	4824      	ldr	r0, [pc, #144]	; (80094b0 <gos_errorHandler+0x11c>)
 8009420:	f002 f922 	bl	800b668 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	2b34      	cmp	r3, #52	; 0x34
 8009428:	d002      	beq.n	8009430 <gos_errorHandler+0x9c>
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	2b1a      	cmp	r3, #26
 800942e:	d126      	bne.n	800947e <gos_errorHandler+0xea>
    {
        GOS_DISABLE_SCHED
 8009430:	4b20      	ldr	r3, [pc, #128]	; (80094b4 <gos_errorHandler+0x120>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <gos_errorHandler+0x120>)
 800943a:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 800943c:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <gos_errorHandler+0x124>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d108      	bne.n	8009456 <gos_errorHandler+0xc2>
 8009444:	b672      	cpsid	i
 8009446:	f3ef 8310 	mrs	r3, PRIMASK
 800944a:	4a1c      	ldr	r2, [pc, #112]	; (80094bc <gos_errorHandler+0x128>)
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	4b18      	ldr	r3, [pc, #96]	; (80094b8 <gos_errorHandler+0x124>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	b2da      	uxtb	r2, r3
 800945e:	4b16      	ldr	r3, [pc, #88]	; (80094b8 <gos_errorHandler+0x124>)
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	4b14      	ldr	r3, [pc, #80]	; (80094b4 <gos_errorHandler+0x120>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	b2da      	uxtb	r2, r3
 800946a:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <gos_errorHandler+0x120>)
 800946c:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 800946e:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 8009470:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009474:	f7fd f96a 	bl	800674c <gos_kernelDelayMs>
            gos_kernelReset();
 8009478:	f7fd f94a 	bl	8006710 <gos_kernelReset>
            GOS_NOP;
 800947c:	e7f7      	b.n	800946e <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009488:	b001      	add	sp, #4
 800948a:	4770      	bx	lr
 800948c:	0800f420 	.word	0x0800f420
 8009490:	0800f474 	.word	0x0800f474
 8009494:	0800f4a0 	.word	0x0800f4a0
 8009498:	0800f4c0 	.word	0x0800f4c0
 800949c:	0800f4f0 	.word	0x0800f4f0
 80094a0:	0800f510 	.word	0x0800f510
 80094a4:	0800f534 	.word	0x0800f534
 80094a8:	200012d4 	.word	0x200012d4
 80094ac:	0800f560 	.word	0x0800f560
 80094b0:	0800f568 	.word	0x0800f568
 80094b4:	2000129d 	.word	0x2000129d
 80094b8:	2000129f 	.word	0x2000129f
 80094bc:	200012a0 	.word	0x200012a0

080094c0 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 80094c0:	b590      	push	{r4, r7, lr}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */

    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 80094cc:	f7fd f902 	bl	80066d4 <gos_kernelGetSysTicks>
 80094d0:	4604      	mov	r4, r0
 80094d2:	1cfb      	adds	r3, r7, #3
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f80d 	bl	80094f4 <gos_traceResultToString>
 80094da:	4603      	mov	r3, r0
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	4621      	mov	r1, r4
 80094e0:	4803      	ldr	r0, [pc, #12]	; (80094f0 <gos_errorTraceInit+0x30>)
 80094e2:	f002 f8c1 	bl	800b668 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 80094e6:	78fb      	ldrb	r3, [r7, #3]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd90      	pop	{r4, r7, pc}
 80094f0:	0800f5b8 	.word	0x0800f5b8

080094f4 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b55      	cmp	r3, #85	; 0x55
 8009502:	d002      	beq.n	800950a <gos_traceResultToString+0x16>
 8009504:	2bae      	cmp	r3, #174	; 0xae
 8009506:	d002      	beq.n	800950e <gos_traceResultToString+0x1a>
 8009508:	e003      	b.n	8009512 <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 800950a:	4b05      	ldr	r3, [pc, #20]	; (8009520 <gos_traceResultToString+0x2c>)
 800950c:	e002      	b.n	8009514 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 800950e:	4b05      	ldr	r3, [pc, #20]	; (8009524 <gos_traceResultToString+0x30>)
 8009510:	e000      	b.n	8009514 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 8009512:	4b05      	ldr	r3, [pc, #20]	; (8009528 <gos_traceResultToString+0x34>)
        }
    }
}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	0800f5d4 	.word	0x0800f5d4
 8009524:	0800f5e8 	.word	0x0800f5e8
 8009528:	0800f5fc 	.word	0x0800f5fc

0800952c <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 8009532:	2355      	movs	r3, #85	; 0x55
 8009534:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 8009536:	2300      	movs	r3, #0
 8009538:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 800953a:	2300      	movs	r3, #0
 800953c:	80bb      	strh	r3, [r7, #4]
 800953e:	e01a      	b.n	8009576 <gos_gcpInit+0x4a>
    {
        gcpInitResult &= gos_mutexInit(&gcpRxMutexes[mutexIdx]);
 8009540:	88bb      	ldrh	r3, [r7, #4]
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4a12      	ldr	r2, [pc, #72]	; (8009590 <gos_gcpInit+0x64>)
 8009546:	4413      	add	r3, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f973 	bl	8009834 <gos_mutexInit>
 800954e:	4603      	mov	r3, r0
 8009550:	461a      	mov	r2, r3
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	4013      	ands	r3, r2
 8009556:	71fb      	strb	r3, [r7, #7]
        gcpInitResult &= gos_mutexInit(&gcpTxMutexes[mutexIdx]);
 8009558:	88bb      	ldrh	r3, [r7, #4]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4a0d      	ldr	r2, [pc, #52]	; (8009594 <gos_gcpInit+0x68>)
 800955e:	4413      	add	r3, r2
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f967 	bl	8009834 <gos_mutexInit>
 8009566:	4603      	mov	r3, r0
 8009568:	461a      	mov	r2, r3
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	4013      	ands	r3, r2
 800956e:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8009570:	88bb      	ldrh	r3, [r7, #4]
 8009572:	3301      	adds	r3, #1
 8009574:	80bb      	strh	r3, [r7, #4]
 8009576:	88bb      	ldrh	r3, [r7, #4]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d9e1      	bls.n	8009540 <gos_gcpInit+0x14>
    }

    if (gcpInitResult != GOS_SUCCESS)
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	2b55      	cmp	r3, #85	; 0x55
 8009580:	d001      	beq.n	8009586 <gos_gcpInit+0x5a>
    {
        gcpInitResult = GOS_ERROR;
 8009582:	23ae      	movs	r3, #174	; 0xae
 8009584:	71fb      	strb	r3, [r7, #7]
    }

    return gcpInitResult;
 8009586:	79fb      	ldrb	r3, [r7, #7]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20001324 	.word	0x20001324
 8009594:	20001330 	.word	0x20001330

08009598 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_SUCCESS;
 800959e:	2355      	movs	r3, #85	; 0x55
 80095a0:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 80095a2:	2300      	movs	r3, #0
 80095a4:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 80095a6:	2300      	movs	r3, #0
 80095a8:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 80095aa:	4b22      	ldr	r3, [pc, #136]	; (8009634 <gos_messageInit+0x9c>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 80095b0:	4b21      	ldr	r3, [pc, #132]	; (8009638 <gos_messageInit+0xa0>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80095b6:	2300      	movs	r3, #0
 80095b8:	71bb      	strb	r3, [r7, #6]
 80095ba:	e014      	b.n	80095e6 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 80095bc:	79bb      	ldrb	r3, [r7, #6]
 80095be:	4a1f      	ldr	r2, [pc, #124]	; (800963c <gos_messageInit+0xa4>)
 80095c0:	2154      	movs	r1, #84	; 0x54
 80095c2:	fb01 f303 	mul.w	r3, r1, r3
 80095c6:	4413      	add	r3, r2
 80095c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095cc:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 80095ce:	79bb      	ldrb	r3, [r7, #6]
 80095d0:	4a1a      	ldr	r2, [pc, #104]	; (800963c <gos_messageInit+0xa4>)
 80095d2:	2154      	movs	r1, #84	; 0x54
 80095d4:	fb01 f303 	mul.w	r3, r1, r3
 80095d8:	4413      	add	r3, r2
 80095da:	3302      	adds	r3, #2
 80095dc:	2200      	movs	r2, #0
 80095de:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80095e0:	79bb      	ldrb	r3, [r7, #6]
 80095e2:	3301      	adds	r3, #1
 80095e4:	71bb      	strb	r3, [r7, #6]
 80095e6:	79bb      	ldrb	r3, [r7, #6]
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d9e7      	bls.n	80095bc <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 80095ec:	2300      	movs	r3, #0
 80095ee:	717b      	strb	r3, [r7, #5]
 80095f0:	e009      	b.n	8009606 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 80095f2:	797b      	ldrb	r3, [r7, #5]
 80095f4:	4a12      	ldr	r2, [pc, #72]	; (8009640 <gos_messageInit+0xa8>)
 80095f6:	015b      	lsls	r3, r3, #5
 80095f8:	4413      	add	r3, r2
 80095fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095fe:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8009600:	797b      	ldrb	r3, [r7, #5]
 8009602:	3301      	adds	r3, #1
 8009604:	717b      	strb	r3, [r7, #5]
 8009606:	797b      	ldrb	r3, [r7, #5]
 8009608:	2b09      	cmp	r3, #9
 800960a:	d9f2      	bls.n	80095f2 <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 800960c:	480d      	ldr	r0, [pc, #52]	; (8009644 <gos_messageInit+0xac>)
 800960e:	f000 f911 	bl	8009834 <gos_mutexInit>
 8009612:	4603      	mov	r3, r0
 8009614:	2b55      	cmp	r3, #85	; 0x55
 8009616:	d106      	bne.n	8009626 <gos_messageInit+0x8e>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) != GOS_SUCCESS)
 8009618:	490b      	ldr	r1, [pc, #44]	; (8009648 <gos_messageInit+0xb0>)
 800961a:	480c      	ldr	r0, [pc, #48]	; (800964c <gos_messageInit+0xb4>)
 800961c:	f7fe f878 	bl	8007710 <gos_taskRegister>
 8009620:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8009622:	2b55      	cmp	r3, #85	; 0x55
 8009624:	d001      	beq.n	800962a <gos_messageInit+0x92>
    {
        messageInitResult = GOS_ERROR;
 8009626:	23ae      	movs	r3, #174	; 0xae
 8009628:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 800962a:	79fb      	ldrb	r3, [r7, #7]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	200015ce 	.word	0x200015ce
 8009638:	200015cf 	.word	0x200015cf
 800963c:	2000133c 	.word	0x2000133c
 8009640:	2000148c 	.word	0x2000148c
 8009644:	200015d0 	.word	0x200015d0
 8009648:	200015cc 	.word	0x200015cc
 800964c:	20000b88 	.word	0x20000b88

08009650 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 8009650:	b590      	push	{r4, r7, lr}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 8009656:	2300      	movs	r3, #0
 8009658:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 800965a:	2300      	movs	r3, #0
 800965c:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 800965e:	2300      	movs	r3, #0
 8009660:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8009662:	f04f 31ff 	mov.w	r1, #4294967295
 8009666:	4870      	ldr	r0, [pc, #448]	; (8009828 <gos_messageDaemonTask+0x1d8>)
 8009668:	f000 f8fe 	bl	8009868 <gos_mutexLock>
 800966c:	4603      	mov	r3, r0
 800966e:	2b55      	cmp	r3, #85	; 0x55
 8009670:	f040 80d5 	bne.w	800981e <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8009674:	2300      	movs	r3, #0
 8009676:	71bb      	strb	r3, [r7, #6]
 8009678:	e0ca      	b.n	8009810 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 800967a:	79bb      	ldrb	r3, [r7, #6]
 800967c:	4a6b      	ldr	r2, [pc, #428]	; (800982c <gos_messageDaemonTask+0x1dc>)
 800967e:	015b      	lsls	r3, r3, #5
 8009680:	4413      	add	r3, r2
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009688:	f000 80bf 	beq.w	800980a <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800968c:	2300      	movs	r3, #0
 800968e:	717b      	strb	r3, [r7, #5]
 8009690:	e077      	b.n	8009782 <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8009692:	2300      	movs	r3, #0
 8009694:	71fb      	strb	r3, [r7, #7]
 8009696:	e06e      	b.n	8009776 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8009698:	79ba      	ldrb	r2, [r7, #6]
 800969a:	797b      	ldrb	r3, [r7, #5]
 800969c:	4963      	ldr	r1, [pc, #396]	; (800982c <gos_messageDaemonTask+0x1dc>)
 800969e:	0112      	lsls	r2, r2, #4
 80096a0:	4413      	add	r3, r2
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	440b      	add	r3, r1
 80096a6:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	4961      	ldr	r1, [pc, #388]	; (8009830 <gos_messageDaemonTask+0x1e0>)
 80096ac:	2054      	movs	r0, #84	; 0x54
 80096ae:	fb00 f303 	mul.w	r3, r0, r3
 80096b2:	440b      	add	r3, r1
 80096b4:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d15a      	bne.n	8009770 <gos_messageDaemonTask+0x120>
                            {
                            	(void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 80096ba:	79bb      	ldrb	r3, [r7, #6]
 80096bc:	4a5b      	ldr	r2, [pc, #364]	; (800982c <gos_messageDaemonTask+0x1dc>)
 80096be:	015b      	lsls	r3, r3, #5
 80096c0:	4413      	add	r3, r2
 80096c2:	3318      	adds	r3, #24
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	2254      	movs	r2, #84	; 0x54
 80096cc:	fb02 f303 	mul.w	r3, r2, r3
 80096d0:	4a57      	ldr	r2, [pc, #348]	; (8009830 <gos_messageDaemonTask+0x1e0>)
 80096d2:	4413      	add	r3, r2
 80096d4:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	4a55      	ldr	r2, [pc, #340]	; (8009830 <gos_messageDaemonTask+0x1e0>)
 80096da:	2454      	movs	r4, #84	; 0x54
 80096dc:	fb04 f303 	mul.w	r3, r4, r3
 80096e0:	4413      	add	r3, r2
 80096e2:	3302      	adds	r3, #2
 80096e4:	781b      	ldrb	r3, [r3, #0]
                            	(void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 80096e6:	461a      	mov	r2, r3
 80096e8:	f003 f90b 	bl	800c902 <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 80096ec:	79fa      	ldrb	r2, [r7, #7]
 80096ee:	79bb      	ldrb	r3, [r7, #6]
 80096f0:	494e      	ldr	r1, [pc, #312]	; (800982c <gos_messageDaemonTask+0x1dc>)
 80096f2:	015b      	lsls	r3, r3, #5
 80096f4:	440b      	add	r3, r1
 80096f6:	3318      	adds	r3, #24
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	494d      	ldr	r1, [pc, #308]	; (8009830 <gos_messageDaemonTask+0x1e0>)
 80096fc:	2054      	movs	r0, #84	; 0x54
 80096fe:	fb00 f202 	mul.w	r2, r0, r2
 8009702:	440a      	add	r2, r1
 8009704:	3202      	adds	r2, #2
 8009706:	7812      	ldrb	r2, [r2, #0]
 8009708:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 800970a:	79fa      	ldrb	r2, [r7, #7]
 800970c:	79bb      	ldrb	r3, [r7, #6]
 800970e:	4947      	ldr	r1, [pc, #284]	; (800982c <gos_messageDaemonTask+0x1dc>)
 8009710:	015b      	lsls	r3, r3, #5
 8009712:	440b      	add	r3, r1
 8009714:	3318      	adds	r3, #24
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4945      	ldr	r1, [pc, #276]	; (8009830 <gos_messageDaemonTask+0x1e0>)
 800971a:	2054      	movs	r0, #84	; 0x54
 800971c:	fb00 f202 	mul.w	r2, r0, r2
 8009720:	440a      	add	r2, r1
 8009722:	8812      	ldrh	r2, [r2, #0]
 8009724:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8009726:	79bb      	ldrb	r3, [r7, #6]
 8009728:	4a40      	ldr	r2, [pc, #256]	; (800982c <gos_messageDaemonTask+0x1dc>)
 800972a:	015b      	lsls	r3, r3, #5
 800972c:	4413      	add	r3, r2
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fdad 	bl	8008290 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	4a3d      	ldr	r2, [pc, #244]	; (8009830 <gos_messageDaemonTask+0x1e0>)
 800973a:	2154      	movs	r1, #84	; 0x54
 800973c:	fb01 f303 	mul.w	r3, r1, r3
 8009740:	4413      	add	r3, r2
 8009742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009746:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8009748:	79bb      	ldrb	r3, [r7, #6]
 800974a:	4a38      	ldr	r2, [pc, #224]	; (800982c <gos_messageDaemonTask+0x1dc>)
 800974c:	015b      	lsls	r3, r3, #5
 800974e:	4413      	add	r3, r2
 8009750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009754:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 8009756:	79bb      	ldrb	r3, [r7, #6]
 8009758:	4a34      	ldr	r2, [pc, #208]	; (800982c <gos_messageDaemonTask+0x1dc>)
 800975a:	015b      	lsls	r3, r3, #5
 800975c:	4413      	add	r3, r2
 800975e:	331c      	adds	r3, #28
 8009760:	2236      	movs	r2, #54	; 0x36
 8009762:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 8009764:	2304      	movs	r3, #4
 8009766:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 8009768:	2308      	movs	r3, #8
 800976a:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 800976c:	230a      	movs	r3, #10
 800976e:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	3301      	adds	r3, #1
 8009774:	71fb      	strb	r3, [r7, #7]
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d98d      	bls.n	8009698 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800977c:	797b      	ldrb	r3, [r7, #5]
 800977e:	3301      	adds	r3, #1
 8009780:	717b      	strb	r3, [r7, #5]
 8009782:	797b      	ldrb	r3, [r7, #5]
 8009784:	2b07      	cmp	r3, #7
 8009786:	d984      	bls.n	8009692 <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8009788:	79bb      	ldrb	r3, [r7, #6]
 800978a:	4a28      	ldr	r2, [pc, #160]	; (800982c <gos_messageDaemonTask+0x1dc>)
 800978c:	015b      	lsls	r3, r3, #5
 800978e:	4413      	add	r3, r2
 8009790:	331c      	adds	r3, #28
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b49      	cmp	r3, #73	; 0x49
 8009796:	d138      	bne.n	800980a <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 8009798:	79bb      	ldrb	r3, [r7, #6]
 800979a:	4a24      	ldr	r2, [pc, #144]	; (800982c <gos_messageDaemonTask+0x1dc>)
 800979c:	015b      	lsls	r3, r3, #5
 800979e:	4413      	add	r3, r2
 80097a0:	3302      	adds	r3, #2
 80097a2:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 80097a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d02e      	beq.n	800980a <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 80097ac:	79bb      	ldrb	r3, [r7, #6]
 80097ae:	491f      	ldr	r1, [pc, #124]	; (800982c <gos_messageDaemonTask+0x1dc>)
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	440a      	add	r2, r1
 80097b4:	3204      	adds	r2, #4
 80097b6:	8812      	ldrh	r2, [r2, #0]
 80097b8:	3201      	adds	r2, #1
 80097ba:	b291      	uxth	r1, r2
 80097bc:	4a1b      	ldr	r2, [pc, #108]	; (800982c <gos_messageDaemonTask+0x1dc>)
 80097be:	015b      	lsls	r3, r3, #5
 80097c0:	4413      	add	r3, r2
 80097c2:	3304      	adds	r3, #4
 80097c4:	460a      	mov	r2, r1
 80097c6:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 80097c8:	79bb      	ldrb	r3, [r7, #6]
 80097ca:	4a18      	ldr	r2, [pc, #96]	; (800982c <gos_messageDaemonTask+0x1dc>)
 80097cc:	015b      	lsls	r3, r3, #5
 80097ce:	4413      	add	r3, r2
 80097d0:	3304      	adds	r3, #4
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	2332      	movs	r3, #50	; 0x32
 80097d8:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 80097dc:	79ba      	ldrb	r2, [r7, #6]
 80097de:	4913      	ldr	r1, [pc, #76]	; (800982c <gos_messageDaemonTask+0x1dc>)
 80097e0:	0152      	lsls	r2, r2, #5
 80097e2:	440a      	add	r2, r1
 80097e4:	3202      	adds	r2, #2
 80097e6:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d90e      	bls.n	800980a <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 80097ec:	79bb      	ldrb	r3, [r7, #6]
 80097ee:	4a0f      	ldr	r2, [pc, #60]	; (800982c <gos_messageDaemonTask+0x1dc>)
 80097f0:	015b      	lsls	r3, r3, #5
 80097f2:	4413      	add	r3, r2
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fd4a 	bl	8008290 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 80097fc:	79bb      	ldrb	r3, [r7, #6]
 80097fe:	4a0b      	ldr	r2, [pc, #44]	; (800982c <gos_messageDaemonTask+0x1dc>)
 8009800:	015b      	lsls	r3, r3, #5
 8009802:	4413      	add	r3, r2
 8009804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009808:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800980a:	79bb      	ldrb	r3, [r7, #6]
 800980c:	3301      	adds	r3, #1
 800980e:	71bb      	strb	r3, [r7, #6]
 8009810:	79bb      	ldrb	r3, [r7, #6]
 8009812:	2b09      	cmp	r3, #9
 8009814:	f67f af31 	bls.w	800967a <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8009818:	4803      	ldr	r0, [pc, #12]	; (8009828 <gos_messageDaemonTask+0x1d8>)
 800981a:	f000 f92b 	bl	8009a74 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 800981e:	2032      	movs	r0, #50	; 0x32
 8009820:	f7fe f908 	bl	8007a34 <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8009824:	e71d      	b.n	8009662 <gos_messageDaemonTask+0x12>
 8009826:	bf00      	nop
 8009828:	200015d0 	.word	0x200015d0
 800982c:	2000148c 	.word	0x2000148c
 8009830:	2000133c 	.word	0x2000133c

08009834 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 800983c:	23ae      	movs	r3, #174	; 0xae
 800983e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d008      	beq.n	8009858 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	22d2      	movs	r2, #210	; 0xd2
 800984a:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009852:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 8009854:	2355      	movs	r3, #85	; 0x55
 8009856:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 8009858:	7bfb      	ldrb	r3, [r7, #15]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
	...

08009868 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 8009872:	23ae      	movs	r3, #174	; 0xae
 8009874:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 8009876:	f7fc ff2d 	bl	80066d4 <gos_kernelGetSysTicks>
 800987a:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 800987c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009880:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 8009882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009886:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 8009888:	23ff      	movs	r3, #255	; 0xff
 800988a:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 800988c:	23ff      	movs	r3, #255	; 0xff
 800988e:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 8009890:	2349      	movs	r3, #73	; 0x49
 8009892:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 8009894:	e0ce      	b.n	8009a34 <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 8009896:	4b73      	ldr	r3, [pc, #460]	; (8009a64 <gos_mutexLock+0x1fc>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d108      	bne.n	80098b0 <gos_mutexLock+0x48>
 800989e:	b672      	cpsid	i
 80098a0:	f3ef 8310 	mrs	r3, PRIMASK
 80098a4:	4a70      	ldr	r2, [pc, #448]	; (8009a68 <gos_mutexLock+0x200>)
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	4b6c      	ldr	r3, [pc, #432]	; (8009a64 <gos_mutexLock+0x1fc>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	3301      	adds	r3, #1
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	4b6a      	ldr	r3, [pc, #424]	; (8009a64 <gos_mutexLock+0x1fc>)
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	4b6b      	ldr	r3, [pc, #428]	; (8009a6c <gos_mutexLock+0x204>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	4b69      	ldr	r3, [pc, #420]	; (8009a6c <gos_mutexLock+0x204>)
 80098c6:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2bd2      	cmp	r3, #210	; 0xd2
 80098ce:	d13b      	bne.n	8009948 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 80098d0:	7cfb      	ldrb	r3, [r7, #19]
 80098d2:	2b36      	cmp	r3, #54	; 0x36
 80098d4:	d12d      	bne.n	8009932 <gos_mutexLock+0xca>
            {
            	// ISR enter to avoid privilege issues.
            	GOS_ISR_ENTER
 80098d6:	4b66      	ldr	r3, [pc, #408]	; (8009a70 <gos_mutexLock+0x208>)
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d105      	bne.n	80098ea <gos_mutexLock+0x82>
 80098de:	4b63      	ldr	r3, [pc, #396]	; (8009a6c <gos_mutexLock+0x204>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	4b61      	ldr	r3, [pc, #388]	; (8009a6c <gos_mutexLock+0x204>)
 80098e8:	701a      	strb	r2, [r3, #0]
 80098ea:	4b61      	ldr	r3, [pc, #388]	; (8009a70 <gos_mutexLock+0x208>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	3301      	adds	r3, #1
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	4b5f      	ldr	r3, [pc, #380]	; (8009a70 <gos_mutexLock+0x208>)
 80098f4:	701a      	strb	r2, [r3, #0]
            	(void_t) gos_taskSetPriority(ownerId, ownerPrio);
 80098f6:	7a7a      	ldrb	r2, [r7, #9]
 80098f8:	8abb      	ldrh	r3, [r7, #20]
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fe fed5 	bl	80086ac <gos_taskSetPriority>
            	GOS_ISR_EXIT
 8009902:	4b5b      	ldr	r3, [pc, #364]	; (8009a70 <gos_mutexLock+0x208>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d005      	beq.n	8009916 <gos_mutexLock+0xae>
 800990a:	4b59      	ldr	r3, [pc, #356]	; (8009a70 <gos_mutexLock+0x208>)
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	3b01      	subs	r3, #1
 8009910:	b2da      	uxtb	r2, r3
 8009912:	4b57      	ldr	r3, [pc, #348]	; (8009a70 <gos_mutexLock+0x208>)
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	4b56      	ldr	r3, [pc, #344]	; (8009a70 <gos_mutexLock+0x208>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d109      	bne.n	8009932 <gos_mutexLock+0xca>
 800991e:	4b53      	ldr	r3, [pc, #332]	; (8009a6c <gos_mutexLock+0x204>)
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <gos_mutexLock+0xca>
 8009926:	4b51      	ldr	r3, [pc, #324]	; (8009a6c <gos_mutexLock+0x204>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	3b01      	subs	r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	4b4f      	ldr	r3, [pc, #316]	; (8009a6c <gos_mutexLock+0x204>)
 8009930:	701a      	strb	r2, [r3, #0]
            else
            {
            	// Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	226b      	movs	r2, #107	; 0x6b
 8009936:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3302      	adds	r3, #2
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fab9 	bl	8008eb4 <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 8009942:	2355      	movs	r3, #85	; 0x55
 8009944:	75fb      	strb	r3, [r7, #23]
 8009946:	e04b      	b.n	80099e0 <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
        	// Check priority.
        	(void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	885b      	ldrh	r3, [r3, #2]
 800994c:	f107 0209 	add.w	r2, r7, #9
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff f832 	bl	80089bc <gos_taskGetPriority>
        	(void_t) gos_taskGetCurrentId(&currentId);
 8009958:	f107 030a 	add.w	r3, r7, #10
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff faa9 	bl	8008eb4 <gos_taskGetCurrentId>
        	(void_t) gos_taskGetPriority(currentId, &currentPrio);
 8009962:	897b      	ldrh	r3, [r7, #10]
 8009964:	f107 0208 	add.w	r2, r7, #8
 8009968:	4611      	mov	r1, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff f826 	bl	80089bc <gos_taskGetPriority>
        	ownerId = pMutex->owner;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	885b      	ldrh	r3, [r3, #2]
 8009974:	82bb      	strh	r3, [r7, #20]

        	// If the current task has a higher priority,
        	// then modify the owner priority.
        	if (currentPrio < ownerPrio)
 8009976:	7a3a      	ldrb	r2, [r7, #8]
 8009978:	7a7b      	ldrb	r3, [r7, #9]
 800997a:	429a      	cmp	r2, r3
 800997c:	d230      	bcs.n	80099e0 <gos_mutexLock+0x178>
        	{
        		// Add temporary priority.
        		// ISR enter to avoid privilege issues.
        		GOS_ISR_ENTER
 800997e:	4b3c      	ldr	r3, [pc, #240]	; (8009a70 <gos_mutexLock+0x208>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d105      	bne.n	8009992 <gos_mutexLock+0x12a>
 8009986:	4b39      	ldr	r3, [pc, #228]	; (8009a6c <gos_mutexLock+0x204>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	3301      	adds	r3, #1
 800998c:	b2da      	uxtb	r2, r3
 800998e:	4b37      	ldr	r3, [pc, #220]	; (8009a6c <gos_mutexLock+0x204>)
 8009990:	701a      	strb	r2, [r3, #0]
 8009992:	4b37      	ldr	r3, [pc, #220]	; (8009a70 <gos_mutexLock+0x208>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	3301      	adds	r3, #1
 8009998:	b2da      	uxtb	r2, r3
 800999a:	4b35      	ldr	r3, [pc, #212]	; (8009a70 <gos_mutexLock+0x208>)
 800999c:	701a      	strb	r2, [r3, #0]
        		(void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	885b      	ldrh	r3, [r3, #2]
 80099a2:	7a3a      	ldrb	r2, [r7, #8]
 80099a4:	4611      	mov	r1, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fe80 	bl	80086ac <gos_taskSetPriority>
        		GOS_ISR_EXIT
 80099ac:	4b30      	ldr	r3, [pc, #192]	; (8009a70 <gos_mutexLock+0x208>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <gos_mutexLock+0x158>
 80099b4:	4b2e      	ldr	r3, [pc, #184]	; (8009a70 <gos_mutexLock+0x208>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	4b2c      	ldr	r3, [pc, #176]	; (8009a70 <gos_mutexLock+0x208>)
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	4b2b      	ldr	r3, [pc, #172]	; (8009a70 <gos_mutexLock+0x208>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d109      	bne.n	80099dc <gos_mutexLock+0x174>
 80099c8:	4b28      	ldr	r3, [pc, #160]	; (8009a6c <gos_mutexLock+0x204>)
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d005      	beq.n	80099dc <gos_mutexLock+0x174>
 80099d0:	4b26      	ldr	r3, [pc, #152]	; (8009a6c <gos_mutexLock+0x204>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	4b24      	ldr	r3, [pc, #144]	; (8009a6c <gos_mutexLock+0x204>)
 80099da:	701a      	strb	r2, [r3, #0]

				prioChanged = GOS_TRUE;
 80099dc:	2336      	movs	r3, #54	; 0x36
 80099de:	74fb      	strb	r3, [r7, #19]
        		// There is no priority inversion.
        	}
#endif
        }

        GOS_ATOMIC_EXIT
 80099e0:	4b20      	ldr	r3, [pc, #128]	; (8009a64 <gos_mutexLock+0x1fc>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <gos_mutexLock+0x18c>
 80099e8:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <gos_mutexLock+0x1fc>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <gos_mutexLock+0x1fc>)
 80099f2:	701a      	strb	r2, [r3, #0]
 80099f4:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <gos_mutexLock+0x1fc>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d108      	bne.n	8009a0e <gos_mutexLock+0x1a6>
 80099fc:	4b1a      	ldr	r3, [pc, #104]	; (8009a68 <gos_mutexLock+0x200>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f383 8810 	msr	PRIMASK, r3
 8009a04:	b662      	cpsie	i
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	4b17      	ldr	r3, [pc, #92]	; (8009a6c <gos_mutexLock+0x204>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d005      	beq.n	8009a22 <gos_mutexLock+0x1ba>
 8009a16:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <gos_mutexLock+0x204>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	4b13      	ldr	r3, [pc, #76]	; (8009a6c <gos_mutexLock+0x204>)
 8009a20:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	2b55      	cmp	r3, #85	; 0x55
 8009a26:	d017      	beq.n	8009a58 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 8009a2e:	2002      	movs	r0, #2
 8009a30:	f7fe f800 	bl	8007a34 <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00f      	beq.n	8009a5a <gos_mutexLock+0x1f2>
 8009a3a:	f7fc fe4b 	bl	80066d4 <gos_kernelGetSysTicks>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	f4bf af25 	bcs.w	8009896 <gos_mutexLock+0x2e>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a52:	f43f af20 	beq.w	8009896 <gos_mutexLock+0x2e>
 8009a56:	e000      	b.n	8009a5a <gos_mutexLock+0x1f2>
            break;
 8009a58:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	2000129f 	.word	0x2000129f
 8009a68:	200012a0 	.word	0x200012a0
 8009a6c:	2000129d 	.word	0x2000129d
 8009a70:	2000129e 	.word	0x2000129e

08009a74 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 8009a7c:	23ae      	movs	r3, #174	; 0xae
 8009a7e:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 8009a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a84:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d04c      	beq.n	8009b26 <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 8009a8c:	4b28      	ldr	r3, [pc, #160]	; (8009b30 <gos_mutexUnlock+0xbc>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d108      	bne.n	8009aa6 <gos_mutexUnlock+0x32>
 8009a94:	b672      	cpsid	i
 8009a96:	f3ef 8310 	mrs	r3, PRIMASK
 8009a9a:	4a26      	ldr	r2, [pc, #152]	; (8009b34 <gos_mutexUnlock+0xc0>)
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	4b22      	ldr	r3, [pc, #136]	; (8009b30 <gos_mutexUnlock+0xbc>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	4b20      	ldr	r3, [pc, #128]	; (8009b30 <gos_mutexUnlock+0xbc>)
 8009ab0:	701a      	strb	r2, [r3, #0]
 8009ab2:	4b21      	ldr	r3, [pc, #132]	; (8009b38 <gos_mutexUnlock+0xc4>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	4b1f      	ldr	r3, [pc, #124]	; (8009b38 <gos_mutexUnlock+0xc4>)
 8009abc:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 8009abe:	f107 030c 	add.w	r3, r7, #12
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff f9f6 	bl	8008eb4 <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	885a      	ldrh	r2, [r3, #2]
 8009acc:	89bb      	ldrh	r3, [r7, #12]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d108      	bne.n	8009ae4 <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	22d2      	movs	r2, #210	; 0xd2
 8009ad6:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ade:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 8009ae0:	2355      	movs	r3, #85	; 0x55
 8009ae2:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 8009ae4:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <gos_mutexUnlock+0xbc>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d005      	beq.n	8009af8 <gos_mutexUnlock+0x84>
 8009aec:	4b10      	ldr	r3, [pc, #64]	; (8009b30 <gos_mutexUnlock+0xbc>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	4b0e      	ldr	r3, [pc, #56]	; (8009b30 <gos_mutexUnlock+0xbc>)
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <gos_mutexUnlock+0xbc>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d108      	bne.n	8009b12 <gos_mutexUnlock+0x9e>
 8009b00:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <gos_mutexUnlock+0xc0>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f383 8810 	msr	PRIMASK, r3
 8009b08:	b662      	cpsie	i
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <gos_mutexUnlock+0xc4>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d005      	beq.n	8009b26 <gos_mutexUnlock+0xb2>
 8009b1a:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <gos_mutexUnlock+0xc4>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <gos_mutexUnlock+0xc4>)
 8009b24:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	2000129f 	.word	0x2000129f
 8009b34:	200012a0 	.word	0x200012a0
 8009b38:	2000129d 	.word	0x2000129d

08009b3c <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_SUCCESS;
 8009b42:	2355      	movs	r3, #85	; 0x55
 8009b44:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 8009b46:	2300      	movs	r3, #0
 8009b48:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	71fb      	strb	r3, [r7, #7]
 8009b52:	e038      	b.n	8009bc6 <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	4a22      	ldr	r2, [pc, #136]	; (8009be0 <gos_queueInit+0xa4>)
 8009b58:	2100      	movs	r1, #0
 8009b5a:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	4a21      	ldr	r2, [pc, #132]	; (8009be4 <gos_queueInit+0xa8>)
 8009b60:	2100      	movs	r1, #0
 8009b62:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	4a20      	ldr	r2, [pc, #128]	; (8009be8 <gos_queueInit+0xac>)
 8009b68:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009b6c:	fb01 f303 	mul.w	r3, r1, r3
 8009b70:	4413      	add	r3, r2
 8009b72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009b76:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 8009b78:	79fb      	ldrb	r3, [r7, #7]
 8009b7a:	4a1b      	ldr	r2, [pc, #108]	; (8009be8 <gos_queueInit+0xac>)
 8009b7c:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009b80:	fb01 f303 	mul.w	r3, r1, r3
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8009b8a:	3302      	adds	r3, #2
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8009b90:	2300      	movs	r3, #0
 8009b92:	71bb      	strb	r3, [r7, #6]
 8009b94:	e011      	b.n	8009bba <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	79ba      	ldrb	r2, [r7, #6]
 8009b9a:	4913      	ldr	r1, [pc, #76]	; (8009be8 <gos_queueInit+0xac>)
 8009b9c:	20c9      	movs	r0, #201	; 0xc9
 8009b9e:	fb00 f202 	mul.w	r2, r0, r2
 8009ba2:	f641 7084 	movw	r0, #8068	; 0x1f84
 8009ba6:	fb00 f303 	mul.w	r3, r0, r3
 8009baa:	4413      	add	r3, r2
 8009bac:	440b      	add	r3, r1
 8009bae:	33e2      	adds	r3, #226	; 0xe2
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8009bb4:	79bb      	ldrb	r3, [r7, #6]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	71bb      	strb	r3, [r7, #6]
 8009bba:	79bb      	ldrb	r3, [r7, #6]
 8009bbc:	2b27      	cmp	r3, #39	; 0x27
 8009bbe:	d9ea      	bls.n	8009b96 <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	71fb      	strb	r3, [r7, #7]
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d9c3      	bls.n	8009b54 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 8009bcc:	4807      	ldr	r0, [pc, #28]	; (8009bec <gos_queueInit+0xb0>)
 8009bce:	f7ff fe31 	bl	8009834 <gos_mutexInit>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 8009bd6:	797b      	ldrb	r3, [r7, #5]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200093e4 	.word	0x200093e4
 8009be4:	200093e8 	.word	0x200093e8
 8009be8:	200015d4 	.word	0x200015d4
 8009bec:	200093ec 	.word	0x200093ec

08009bf0 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 8009bf8:	23ae      	movs	r3, #174	; 0xae
 8009bfa:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d048      	beq.n	8009c98 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8009c06:	2300      	movs	r3, #0
 8009c08:	73bb      	strb	r3, [r7, #14]
 8009c0a:	e042      	b.n	8009c92 <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	4a25      	ldr	r2, [pc, #148]	; (8009ca4 <gos_queueCreate+0xb4>)
 8009c10:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009c14:	fb01 f303 	mul.w	r3, r1, r3
 8009c18:	4413      	add	r3, r2
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c20:	d134      	bne.n	8009c8c <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8009c2c:	b290      	uxth	r0, r2
 8009c2e:	4a1d      	ldr	r2, [pc, #116]	; (8009ca4 <gos_queueCreate+0xb4>)
 8009c30:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	4413      	add	r3, r2
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	4a18      	ldr	r2, [pc, #96]	; (8009ca4 <gos_queueCreate+0xb4>)
 8009c42:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	881a      	ldrh	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3302      	adds	r3, #2
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d015      	beq.n	8009c86 <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7f6 fb36 	bl	80002d0 <strlen>
 8009c64:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 8009c66:	2b18      	cmp	r3, #24
 8009c68:	d80d      	bhi.n	8009c86 <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	f641 7284 	movw	r2, #8068	; 0x1f84
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	4a0b      	ldr	r2, [pc, #44]	; (8009ca4 <gos_queueCreate+0xb4>)
 8009c76:	4413      	add	r3, r2
 8009c78:	1c9a      	adds	r2, r3, #2
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f002 fe36 	bl	800c8f2 <strcpy>
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 8009c86:	2355      	movs	r3, #85	; 0x55
 8009c88:	73fb      	strb	r3, [r7, #15]
                break;
 8009c8a:	e005      	b.n	8009c98 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	73bb      	strb	r3, [r7, #14]
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d9b9      	bls.n	8009c0c <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200015d4 	.word	0x200015d4

08009ca8 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	607b      	str	r3, [r7, #4]
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	81fb      	strh	r3, [r7, #14]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 8009cba:	23ae      	movs	r3, #174	; 0xae
 8009cbc:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	485a      	ldr	r0, [pc, #360]	; (8009e30 <gos_queuePut+0x188>)
 8009cc6:	f7ff fdcf 	bl	8009868 <gos_mutexLock>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b55      	cmp	r3, #85	; 0x55
 8009cce:	f040 80a7 	bne.w	8009e20 <gos_queuePut+0x178>
 8009cd2:	89fb      	ldrh	r3, [r7, #14]
 8009cd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cd8:	f0c0 80a2 	bcc.w	8009e20 <gos_queuePut+0x178>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8009cdc:	89fb      	ldrh	r3, [r7, #14]
 8009cde:	f243 0203 	movw	r2, #12291	; 0x3003
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	f200 809c 	bhi.w	8009e20 <gos_queuePut+0x178>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 8098 	beq.w	8009e20 <gos_queuePut+0x178>
        element                                          != NULL                 &&
 8009cf0:	7b7b      	ldrb	r3, [r7, #13]
 8009cf2:	2bc8      	cmp	r3, #200	; 0xc8
 8009cf4:	f200 8094 	bhi.w	8009e20 <gos_queuePut+0x178>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 8009cf8:	89fb      	ldrh	r3, [r7, #14]
 8009cfa:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8009cfe:	4a4d      	ldr	r2, [pc, #308]	; (8009e34 <gos_queuePut+0x18c>)
 8009d00:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009d04:	fb01 f303 	mul.w	r3, r1, r3
 8009d08:	4413      	add	r3, r2
 8009d0a:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 8009d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d10:	f000 8086 	beq.w	8009e20 <gos_queuePut+0x178>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8009d14:	89fb      	ldrh	r3, [r7, #14]
 8009d16:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8009d18:	7dbb      	ldrb	r3, [r7, #22]
 8009d1a:	4a47      	ldr	r2, [pc, #284]	; (8009e38 <gos_queuePut+0x190>)
 8009d1c:	5cd3      	ldrb	r3, [r2, r3]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <gos_queuePut+0x8e>
 8009d22:	7dbb      	ldrb	r3, [r7, #22]
 8009d24:	4a45      	ldr	r2, [pc, #276]	; (8009e3c <gos_queuePut+0x194>)
 8009d26:	5cd3      	ldrb	r3, [r2, r3]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	7dbb      	ldrb	r3, [r7, #22]
 8009d2c:	4a42      	ldr	r2, [pc, #264]	; (8009e38 <gos_queuePut+0x190>)
 8009d2e:	5cd3      	ldrb	r3, [r2, r3]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	4299      	cmp	r1, r3
 8009d34:	d109      	bne.n	8009d4a <gos_queuePut+0xa2>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8009d36:	7dbb      	ldrb	r3, [r7, #22]
 8009d38:	4a3f      	ldr	r2, [pc, #252]	; (8009e38 <gos_queuePut+0x190>)
 8009d3a:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d16f      	bne.n	8009e20 <gos_queuePut+0x178>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8009d40:	7dbb      	ldrb	r3, [r7, #22]
 8009d42:	4a3e      	ldr	r2, [pc, #248]	; (8009e3c <gos_queuePut+0x194>)
 8009d44:	5cd3      	ldrb	r3, [r2, r3]
 8009d46:	2b27      	cmp	r3, #39	; 0x27
 8009d48:	d06a      	beq.n	8009e20 <gos_queuePut+0x178>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 8009d4a:	7dbb      	ldrb	r3, [r7, #22]
 8009d4c:	7dba      	ldrb	r2, [r7, #22]
 8009d4e:	493b      	ldr	r1, [pc, #236]	; (8009e3c <gos_queuePut+0x194>)
 8009d50:	5c8a      	ldrb	r2, [r1, r2]
 8009d52:	4611      	mov	r1, r2
 8009d54:	22c9      	movs	r2, #201	; 0xc9
 8009d56:	fb01 f202 	mul.w	r2, r1, r2
 8009d5a:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009d5e:	fb01 f303 	mul.w	r3, r1, r3
 8009d62:	4413      	add	r3, r2
 8009d64:	3318      	adds	r3, #24
 8009d66:	4a33      	ldr	r2, [pc, #204]	; (8009e34 <gos_queuePut+0x18c>)
 8009d68:	4413      	add	r3, r2
 8009d6a:	3302      	adds	r3, #2
            (void_t) memcpy(
 8009d6c:	7b7a      	ldrb	r2, [r7, #13]
 8009d6e:	68b9      	ldr	r1, [r7, #8]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f002 fdc6 	bl	800c902 <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 8009d76:	7dbb      	ldrb	r3, [r7, #22]
 8009d78:	7dba      	ldrb	r2, [r7, #22]
 8009d7a:	4930      	ldr	r1, [pc, #192]	; (8009e3c <gos_queuePut+0x194>)
 8009d7c:	5c8a      	ldrb	r2, [r1, r2]
 8009d7e:	4610      	mov	r0, r2
 8009d80:	492c      	ldr	r1, [pc, #176]	; (8009e34 <gos_queuePut+0x18c>)
 8009d82:	22c9      	movs	r2, #201	; 0xc9
 8009d84:	fb00 f202 	mul.w	r2, r0, r2
 8009d88:	f641 7084 	movw	r0, #8068	; 0x1f84
 8009d8c:	fb00 f303 	mul.w	r3, r0, r3
 8009d90:	4413      	add	r3, r2
 8009d92:	440b      	add	r3, r1
 8009d94:	33e2      	adds	r3, #226	; 0xe2
 8009d96:	7b7a      	ldrb	r2, [r7, #13]
 8009d98:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 8009d9a:	7dbb      	ldrb	r3, [r7, #22]
 8009d9c:	4a27      	ldr	r2, [pc, #156]	; (8009e3c <gos_queuePut+0x194>)
 8009d9e:	5cd2      	ldrb	r2, [r2, r3]
 8009da0:	3201      	adds	r2, #1
 8009da2:	b2d1      	uxtb	r1, r2
 8009da4:	4a25      	ldr	r2, [pc, #148]	; (8009e3c <gos_queuePut+0x194>)
 8009da6:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 8009da8:	7dba      	ldrb	r2, [r7, #22]
 8009daa:	4922      	ldr	r1, [pc, #136]	; (8009e34 <gos_queuePut+0x18c>)
 8009dac:	f641 7384 	movw	r3, #8068	; 0x1f84
 8009db0:	fb02 f303 	mul.w	r3, r2, r3
 8009db4:	440b      	add	r3, r1
 8009db6:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8009dba:	3302      	adds	r3, #2
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	b2d8      	uxtb	r0, r3
 8009dc2:	491c      	ldr	r1, [pc, #112]	; (8009e34 <gos_queuePut+0x18c>)
 8009dc4:	f641 7384 	movw	r3, #8068	; 0x1f84
 8009dc8:	fb02 f303 	mul.w	r3, r2, r3
 8009dcc:	440b      	add	r3, r1
 8009dce:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8009dd2:	3302      	adds	r3, #2
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8009dd8:	7dbb      	ldrb	r3, [r7, #22]
 8009dda:	4a18      	ldr	r2, [pc, #96]	; (8009e3c <gos_queuePut+0x194>)
 8009ddc:	5cd3      	ldrb	r3, [r2, r3]
 8009dde:	2b27      	cmp	r3, #39	; 0x27
 8009de0:	d903      	bls.n	8009dea <gos_queuePut+0x142>
            {
                writeCounters[queueIndex] = 0u;
 8009de2:	7dbb      	ldrb	r3, [r7, #22]
 8009de4:	4a15      	ldr	r2, [pc, #84]	; (8009e3c <gos_queuePut+0x194>)
 8009de6:	2100      	movs	r1, #0
 8009de8:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8009dea:	7dbb      	ldrb	r3, [r7, #22]
 8009dec:	4a11      	ldr	r2, [pc, #68]	; (8009e34 <gos_queuePut+0x18c>)
 8009dee:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009df2:	fb01 f303 	mul.w	r3, r1, r3
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b27      	cmp	r3, #39	; 0x27
 8009e02:	d10b      	bne.n	8009e1c <gos_queuePut+0x174>
                queueFullHook != NULL)
 8009e04:	4b0e      	ldr	r3, [pc, #56]	; (8009e40 <gos_queuePut+0x198>)
 8009e06:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <gos_queuePut+0x174>
            {
                gos_mutexUnlock(&queueMutex);
 8009e0c:	4808      	ldr	r0, [pc, #32]	; (8009e30 <gos_queuePut+0x188>)
 8009e0e:	f7ff fe31 	bl	8009a74 <gos_mutexUnlock>
                queueFullHook(queueId);
 8009e12:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <gos_queuePut+0x198>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	89fa      	ldrh	r2, [r7, #14]
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 8009e1c:	2355      	movs	r3, #85	; 0x55
 8009e1e:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8009e20:	4803      	ldr	r0, [pc, #12]	; (8009e30 <gos_queuePut+0x188>)
 8009e22:	f7ff fe27 	bl	8009a74 <gos_mutexUnlock>

    return queuePutResult;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	200093ec 	.word	0x200093ec
 8009e34:	200015d4 	.word	0x200015d4
 8009e38:	200093e4 	.word	0x200093e4
 8009e3c:	200093e8 	.word	0x200093e8
 8009e40:	200093f0 	.word	0x200093f0

08009e44 <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	607b      	str	r3, [r7, #4]
 8009e4e:	4603      	mov	r3, r0
 8009e50:	81fb      	strh	r3, [r7, #14]
 8009e52:	4613      	mov	r3, r2
 8009e54:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 8009e56:	23ae      	movs	r3, #174	; 0xae
 8009e58:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4864      	ldr	r0, [pc, #400]	; (8009ff4 <gos_queueGet+0x1b0>)
 8009e62:	f7ff fd01 	bl	8009868 <gos_mutexLock>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b55      	cmp	r3, #85	; 0x55
 8009e6a:	f040 80bb 	bne.w	8009fe4 <gos_queueGet+0x1a0>
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 80b7 	beq.w	8009fe4 <gos_queueGet+0x1a0>
        target                                           != NULL                 &&
 8009e76:	89fb      	ldrh	r3, [r7, #14]
 8009e78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e7c:	f0c0 80b2 	bcc.w	8009fe4 <gos_queueGet+0x1a0>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8009e80:	89fb      	ldrh	r3, [r7, #14]
 8009e82:	f243 0203 	movw	r2, #12291	; 0x3003
 8009e86:	4293      	cmp	r3, r2
 8009e88:	f200 80ac 	bhi.w	8009fe4 <gos_queueGet+0x1a0>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8009e8c:	89fb      	ldrh	r3, [r7, #14]
 8009e8e:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8009e92:	4a59      	ldr	r2, [pc, #356]	; (8009ff8 <gos_queueGet+0x1b4>)
 8009e94:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009e98:	fb01 f303 	mul.w	r3, r1, r3
 8009e9c:	4413      	add	r3, r2
 8009e9e:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8009ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ea4:	f000 809e 	beq.w	8009fe4 <gos_queueGet+0x1a0>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 8009ea8:	89fb      	ldrh	r3, [r7, #14]
 8009eaa:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8009eae:	89fa      	ldrh	r2, [r7, #14]
 8009eb0:	f5a2 5240 	sub.w	r2, r2, #12288	; 0x3000
 8009eb4:	4951      	ldr	r1, [pc, #324]	; (8009ffc <gos_queueGet+0x1b8>)
 8009eb6:	5c8a      	ldrb	r2, [r1, r2]
 8009eb8:	4610      	mov	r0, r2
 8009eba:	494f      	ldr	r1, [pc, #316]	; (8009ff8 <gos_queueGet+0x1b4>)
 8009ebc:	22c9      	movs	r2, #201	; 0xc9
 8009ebe:	fb00 f202 	mul.w	r2, r0, r2
 8009ec2:	f641 7084 	movw	r0, #8068	; 0x1f84
 8009ec6:	fb00 f303 	mul.w	r3, r0, r3
 8009eca:	4413      	add	r3, r2
 8009ecc:	440b      	add	r3, r1
 8009ece:	33e2      	adds	r3, #226	; 0xe2
 8009ed0:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8009ed2:	7b7a      	ldrb	r2, [r7, #13]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	f0c0 8085 	bcc.w	8009fe4 <gos_queueGet+0x1a0>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8009eda:	89fb      	ldrh	r3, [r7, #14]
 8009edc:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 8009ede:	7dbb      	ldrb	r3, [r7, #22]
 8009ee0:	4a46      	ldr	r2, [pc, #280]	; (8009ffc <gos_queueGet+0x1b8>)
 8009ee2:	5cd2      	ldrb	r2, [r2, r3]
 8009ee4:	7dbb      	ldrb	r3, [r7, #22]
 8009ee6:	4946      	ldr	r1, [pc, #280]	; (800a000 <gos_queueGet+0x1bc>)
 8009ee8:	5ccb      	ldrb	r3, [r1, r3]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d07a      	beq.n	8009fe4 <gos_queueGet+0x1a0>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 8009eee:	7dbb      	ldrb	r3, [r7, #22]
 8009ef0:	7dba      	ldrb	r2, [r7, #22]
 8009ef2:	4942      	ldr	r1, [pc, #264]	; (8009ffc <gos_queueGet+0x1b8>)
 8009ef4:	5c8a      	ldrb	r2, [r1, r2]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	22c9      	movs	r2, #201	; 0xc9
 8009efa:	fb01 f202 	mul.w	r2, r1, r2
 8009efe:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009f02:	fb01 f303 	mul.w	r3, r1, r3
 8009f06:	4413      	add	r3, r2
 8009f08:	3318      	adds	r3, #24
 8009f0a:	4a3b      	ldr	r2, [pc, #236]	; (8009ff8 <gos_queueGet+0x1b4>)
 8009f0c:	4413      	add	r3, r2
 8009f0e:	1c99      	adds	r1, r3, #2
 8009f10:	7dbb      	ldrb	r3, [r7, #22]
 8009f12:	7dba      	ldrb	r2, [r7, #22]
 8009f14:	4839      	ldr	r0, [pc, #228]	; (8009ffc <gos_queueGet+0x1b8>)
 8009f16:	5c82      	ldrb	r2, [r0, r2]
 8009f18:	4614      	mov	r4, r2
 8009f1a:	4837      	ldr	r0, [pc, #220]	; (8009ff8 <gos_queueGet+0x1b4>)
 8009f1c:	22c9      	movs	r2, #201	; 0xc9
 8009f1e:	fb04 f202 	mul.w	r2, r4, r2
 8009f22:	f641 7484 	movw	r4, #8068	; 0x1f84
 8009f26:	fb04 f303 	mul.w	r3, r4, r3
 8009f2a:	4413      	add	r3, r2
 8009f2c:	4403      	add	r3, r0
 8009f2e:	33e2      	adds	r3, #226	; 0xe2
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	68b8      	ldr	r0, [r7, #8]
 8009f36:	f002 fce4 	bl	800c902 <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 8009f3a:	7dbb      	ldrb	r3, [r7, #22]
 8009f3c:	7dba      	ldrb	r2, [r7, #22]
 8009f3e:	492f      	ldr	r1, [pc, #188]	; (8009ffc <gos_queueGet+0x1b8>)
 8009f40:	5c8a      	ldrb	r2, [r1, r2]
 8009f42:	4610      	mov	r0, r2
 8009f44:	492c      	ldr	r1, [pc, #176]	; (8009ff8 <gos_queueGet+0x1b4>)
 8009f46:	22c9      	movs	r2, #201	; 0xc9
 8009f48:	fb00 f202 	mul.w	r2, r0, r2
 8009f4c:	f641 7084 	movw	r0, #8068	; 0x1f84
 8009f50:	fb00 f303 	mul.w	r3, r0, r3
 8009f54:	4413      	add	r3, r2
 8009f56:	440b      	add	r3, r1
 8009f58:	33e2      	adds	r3, #226	; 0xe2
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 8009f5e:	7dbb      	ldrb	r3, [r7, #22]
 8009f60:	4a26      	ldr	r2, [pc, #152]	; (8009ffc <gos_queueGet+0x1b8>)
 8009f62:	5cd2      	ldrb	r2, [r2, r3]
 8009f64:	3201      	adds	r2, #1
 8009f66:	b2d1      	uxtb	r1, r2
 8009f68:	4a24      	ldr	r2, [pc, #144]	; (8009ffc <gos_queueGet+0x1b8>)
 8009f6a:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 8009f6c:	7dba      	ldrb	r2, [r7, #22]
 8009f6e:	4922      	ldr	r1, [pc, #136]	; (8009ff8 <gos_queueGet+0x1b4>)
 8009f70:	f641 7384 	movw	r3, #8068	; 0x1f84
 8009f74:	fb02 f303 	mul.w	r3, r2, r3
 8009f78:	440b      	add	r3, r1
 8009f7a:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8009f7e:	3302      	adds	r3, #2
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	b2d8      	uxtb	r0, r3
 8009f86:	491c      	ldr	r1, [pc, #112]	; (8009ff8 <gos_queueGet+0x1b4>)
 8009f88:	f641 7384 	movw	r3, #8068	; 0x1f84
 8009f8c:	fb02 f303 	mul.w	r3, r2, r3
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8009f96:	3302      	adds	r3, #2
 8009f98:	4602      	mov	r2, r0
 8009f9a:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8009f9c:	7dbb      	ldrb	r3, [r7, #22]
 8009f9e:	4a17      	ldr	r2, [pc, #92]	; (8009ffc <gos_queueGet+0x1b8>)
 8009fa0:	5cd3      	ldrb	r3, [r2, r3]
 8009fa2:	2b27      	cmp	r3, #39	; 0x27
 8009fa4:	d903      	bls.n	8009fae <gos_queueGet+0x16a>
            {
                readCounters[queueIndex] = 0u;
 8009fa6:	7dbb      	ldrb	r3, [r7, #22]
 8009fa8:	4a14      	ldr	r2, [pc, #80]	; (8009ffc <gos_queueGet+0x1b8>)
 8009faa:	2100      	movs	r1, #0
 8009fac:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 8009fae:	7dbb      	ldrb	r3, [r7, #22]
 8009fb0:	4a11      	ldr	r2, [pc, #68]	; (8009ff8 <gos_queueGet+0x1b4>)
 8009fb2:	f641 7184 	movw	r1, #8068	; 0x1f84
 8009fb6:	fb01 f303 	mul.w	r3, r1, r3
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10b      	bne.n	8009fe0 <gos_queueGet+0x19c>
                queueEmptyHook != NULL)
 8009fc8:	4b0e      	ldr	r3, [pc, #56]	; (800a004 <gos_queueGet+0x1c0>)
 8009fca:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d007      	beq.n	8009fe0 <gos_queueGet+0x19c>
            {
                gos_mutexUnlock(&queueMutex);
 8009fd0:	4808      	ldr	r0, [pc, #32]	; (8009ff4 <gos_queueGet+0x1b0>)
 8009fd2:	f7ff fd4f 	bl	8009a74 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <gos_queueGet+0x1c0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	89fa      	ldrh	r2, [r7, #14]
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 8009fe0:	2355      	movs	r3, #85	; 0x55
 8009fe2:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8009fe4:	4803      	ldr	r0, [pc, #12]	; (8009ff4 <gos_queueGet+0x1b0>)
 8009fe6:	f7ff fd45 	bl	8009a74 <gos_mutexUnlock>

    return queueGetResult;
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	371c      	adds	r7, #28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd90      	pop	{r4, r7, pc}
 8009ff4:	200093ec 	.word	0x200093ec
 8009ff8:	200015d4 	.word	0x200015d4
 8009ffc:	200093e4 	.word	0x200093e4
 800a000:	200093e8 	.word	0x200093e8
 800a004:	200093f4 	.word	0x200093f4

0800a008 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 800a008:	b590      	push	{r4, r7, lr}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 800a00e:	2300      	movs	r3, #0
 800a010:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 800a012:	4826      	ldr	r0, [pc, #152]	; (800a0ac <gos_queueDump+0xa4>)
 800a014:	f001 fd4a 	bl	800baac <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 800a018:	4825      	ldr	r0, [pc, #148]	; (800a0b0 <gos_queueDump+0xa8>)
 800a01a:	f001 fd47 	bl	800baac <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 800a01e:	4b25      	ldr	r3, [pc, #148]	; (800a0b4 <gos_queueDump+0xac>)
 800a020:	4a25      	ldr	r2, [pc, #148]	; (800a0b8 <gos_queueDump+0xb0>)
 800a022:	4926      	ldr	r1, [pc, #152]	; (800a0bc <gos_queueDump+0xb4>)
 800a024:	4826      	ldr	r0, [pc, #152]	; (800a0c0 <gos_queueDump+0xb8>)
 800a026:	f001 fd41 	bl	800baac <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 800a02a:	4821      	ldr	r0, [pc, #132]	; (800a0b0 <gos_queueDump+0xa8>)
 800a02c:	f001 fd3e 	bl	800baac <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800a030:	2300      	movs	r3, #0
 800a032:	71fb      	strb	r3, [r7, #7]
 800a034:	e02d      	b.n	800a092 <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	4a22      	ldr	r2, [pc, #136]	; (800a0c4 <gos_queueDump+0xbc>)
 800a03a:	f641 7184 	movw	r1, #8068	; 0x1f84
 800a03e:	fb01 f303 	mul.w	r3, r1, r3
 800a042:	4413      	add	r3, r2
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a04a:	d026      	beq.n	800a09a <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	4a1d      	ldr	r2, [pc, #116]	; (800a0c4 <gos_queueDump+0xbc>)
 800a050:	f641 7184 	movw	r1, #8068	; 0x1f84
 800a054:	fb01 f303 	mul.w	r3, r1, r3
 800a058:	4413      	add	r3, r2
 800a05a:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 800a05c:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	f641 7284 	movw	r2, #8068	; 0x1f84
 800a064:	fb02 f303 	mul.w	r3, r2, r3
 800a068:	4a16      	ldr	r2, [pc, #88]	; (800a0c4 <gos_queueDump+0xbc>)
 800a06a:	4413      	add	r3, r2
 800a06c:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	4914      	ldr	r1, [pc, #80]	; (800a0c4 <gos_queueDump+0xbc>)
 800a072:	f641 7084 	movw	r0, #8068	; 0x1f84
 800a076:	fb00 f303 	mul.w	r3, r0, r3
 800a07a:	440b      	add	r3, r1
 800a07c:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800a080:	3302      	adds	r3, #2
 800a082:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 800a084:	4621      	mov	r1, r4
 800a086:	4810      	ldr	r0, [pc, #64]	; (800a0c8 <gos_queueDump+0xc0>)
 800a088:	f001 fd10 	bl	800baac <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	3301      	adds	r3, #1
 800a090:	71fb      	strb	r3, [r7, #7]
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	2b03      	cmp	r3, #3
 800a096:	d9ce      	bls.n	800a036 <gos_queueDump+0x2e>
 800a098:	e000      	b.n	800a09c <gos_queueDump+0x94>
            break;
 800a09a:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 800a09c:	480b      	ldr	r0, [pc, #44]	; (800a0cc <gos_queueDump+0xc4>)
 800a09e:	f001 fd05 	bl	800baac <gos_shellDriverTransmitString>
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd90      	pop	{r4, r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	0800f610 	.word	0x0800f610
 800a0b0:	0800f620 	.word	0x0800f620
 800a0b4:	0800f65c 	.word	0x0800f65c
 800a0b8:	0800f668 	.word	0x0800f668
 800a0bc:	0800f670 	.word	0x0800f670
 800a0c0:	0800f674 	.word	0x0800f674
 800a0c4:	200015d4 	.word	0x200015d4
 800a0c8:	0800f68c 	.word	0x0800f68c
 800a0cc:	0800f6a8 	.word	0x0800f6a8

0800a0d0 <gos_shellInit>:

/*
 * Function: gos_shellInit
 */
gos_result_t gos_shellInit (void_t)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            shellInitResult = GOS_ERROR;
 800a0d6:	23ae      	movs	r3, #174	; 0xae
 800a0d8:	71fb      	strb	r3, [r7, #7]
    gos_shellCommandIndex_t index           = 0u;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 800a0de:	4b15      	ldr	r3, [pc, #84]	; (800a134 <gos_shellInit+0x64>)
 800a0e0:	2236      	movs	r2, #54	; 0x36
 800a0e2:	701a      	strb	r2, [r3, #0]

    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	71bb      	strb	r3, [r7, #6]
 800a0e8:	e00c      	b.n	800a104 <gos_shellInit+0x34>
    {
        shellCommands[index].commandHandler = NULL;
 800a0ea:	79ba      	ldrb	r2, [r7, #6]
 800a0ec:	4912      	ldr	r1, [pc, #72]	; (800a138 <gos_shellInit+0x68>)
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	1a9b      	subs	r3, r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	440b      	add	r3, r1
 800a0f8:	3314      	adds	r3, #20
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800a0fe:	79bb      	ldrb	r3, [r7, #6]
 800a100:	3301      	adds	r3, #1
 800a102:	71bb      	strb	r3, [r7, #6]
 800a104:	79bb      	ldrb	r3, [r7, #6]
 800a106:	2b0f      	cmp	r3, #15
 800a108:	d9ef      	bls.n	800a0ea <gos_shellInit+0x1a>
    }

    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 800a10a:	490c      	ldr	r1, [pc, #48]	; (800a13c <gos_shellInit+0x6c>)
 800a10c:	480c      	ldr	r0, [pc, #48]	; (800a140 <gos_shellInit+0x70>)
 800a10e:	f7fd faff 	bl	8007710 <gos_taskRegister>
 800a112:	4603      	mov	r3, r0
 800a114:	2b55      	cmp	r3, #85	; 0x55
 800a116:	d107      	bne.n	800a128 <gos_shellInit+0x58>
        gos_shellRegisterCommand(&shellCommand) == GOS_SUCCESS)
 800a118:	480a      	ldr	r0, [pc, #40]	; (800a144 <gos_shellInit+0x74>)
 800a11a:	f000 f815 	bl	800a148 <gos_shellRegisterCommand>
 800a11e:	4603      	mov	r3, r0
    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 800a120:	2b55      	cmp	r3, #85	; 0x55
 800a122:	d101      	bne.n	800a128 <gos_shellInit+0x58>
    {
        shellInitResult = GOS_SUCCESS;
 800a124:	2355      	movs	r3, #85	; 0x55
 800a126:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellInitResult;
 800a128:	79fb      	ldrb	r3, [r7, #7]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20009686 	.word	0x20009686
 800a138:	200093f8 	.word	0x200093f8
 800a13c:	200095b8 	.word	0x200095b8
 800a140:	20000bf4 	.word	0x20000bf4
 800a144:	20000c60 	.word	0x20000c60

0800a148 <gos_shellRegisterCommand>:

/*
 * Function: gos_shellRegisterCommand
 */
gos_result_t gos_shellRegisterCommand (gos_shellCommand_t* command)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            shellRegisterCommandResult = GOS_ERROR;
 800a150:	23ae      	movs	r3, #174	; 0xae
 800a152:	73fb      	strb	r3, [r7, #15]
    gos_shellCommandIndex_t index                      = 0u;
 800a154:	2300      	movs	r3, #0
 800a156:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (command->commandHandler != NULL && command->command != NULL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d03c      	beq.n	800a1da <gos_shellRegisterCommand+0x92>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d039      	beq.n	800a1da <gos_shellRegisterCommand+0x92>
    {
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800a166:	2300      	movs	r3, #0
 800a168:	73bb      	strb	r3, [r7, #14]
 800a16a:	e033      	b.n	800a1d4 <gos_shellRegisterCommand+0x8c>
        {
            if (shellCommands[index].commandHandler == NULL)
 800a16c:	7bba      	ldrb	r2, [r7, #14]
 800a16e:	491d      	ldr	r1, [pc, #116]	; (800a1e4 <gos_shellRegisterCommand+0x9c>)
 800a170:	4613      	mov	r3, r2
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	3314      	adds	r3, #20
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d125      	bne.n	800a1ce <gos_shellRegisterCommand+0x86>
            {
                shellCommands[index].commandHandler = command->commandHandler;
 800a182:	7bba      	ldrb	r2, [r7, #14]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6959      	ldr	r1, [r3, #20]
 800a188:	4816      	ldr	r0, [pc, #88]	; (800a1e4 <gos_shellRegisterCommand+0x9c>)
 800a18a:	4613      	mov	r3, r2
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4403      	add	r3, r0
 800a194:	3314      	adds	r3, #20
 800a196:	6019      	str	r1, [r3, #0]
                shellCommands[index].commandHandlerPrivileges = command->commandHandlerPrivileges;
 800a198:	7bba      	ldrb	r2, [r7, #14]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	8b18      	ldrh	r0, [r3, #24]
 800a19e:	4911      	ldr	r1, [pc, #68]	; (800a1e4 <gos_shellRegisterCommand+0x9c>)
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	3318      	adds	r3, #24
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	801a      	strh	r2, [r3, #0]
                (void_t) strcpy(shellCommands[index].command, command->command);
 800a1b0:	7bba      	ldrb	r2, [r7, #14]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	1a9b      	subs	r3, r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4a0a      	ldr	r2, [pc, #40]	; (800a1e4 <gos_shellRegisterCommand+0x9c>)
 800a1bc:	4413      	add	r3, r2
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f002 fb95 	bl	800c8f2 <strcpy>
                shellRegisterCommandResult = GOS_SUCCESS;
 800a1c8:	2355      	movs	r3, #85	; 0x55
 800a1ca:	73fb      	strb	r3, [r7, #15]
                break;
 800a1cc:	e005      	b.n	800a1da <gos_shellRegisterCommand+0x92>
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800a1ce:	7bbb      	ldrb	r3, [r7, #14]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	73bb      	strb	r3, [r7, #14]
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2b0f      	cmp	r3, #15
 800a1d8:	d9c8      	bls.n	800a16c <gos_shellRegisterCommand+0x24>
            {
                // Nothing to do.
            }
        }
    }
    return shellRegisterCommandResult;
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	200093f8 	.word	0x200093f8

0800a1e8 <gos_shellDaemonTask>:
 *          a string.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellDaemonTask (void_t)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_shellCommandIndex_t index              = 0u;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	71fb      	strb	r3, [r7, #7]
    u16_t                   actualCommandIndex = 0u;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	80bb      	strh	r3, [r7, #4]
    u16_t                   paramIndex         = 0u;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	807b      	strh	r3, [r7, #2]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 800a1fa:	4b70      	ldr	r3, [pc, #448]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	4b6f      	ldr	r3, [pc, #444]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a202:	4413      	add	r3, r2
 800a204:	4618      	mov	r0, r3
 800a206:	f001 fc39 	bl	800ba7c <gos_shellDriverReceiveChar>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b55      	cmp	r3, #85	; 0x55
 800a20e:	f040 80d0 	bne.w	800a3b2 <gos_shellDaemonTask+0x1ca>
        {
            if (useEcho == GOS_TRUE)
 800a212:	4b6c      	ldr	r3, [pc, #432]	; (800a3c4 <gos_shellDaemonTask+0x1dc>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b36      	cmp	r3, #54	; 0x36
 800a218:	d107      	bne.n	800a22a <gos_shellDaemonTask+0x42>
            {
                (void_t) gos_shellDriverTransmitString(&commandBuffer[commandBufferIndex]);
 800a21a:	4b68      	ldr	r3, [pc, #416]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	4b67      	ldr	r3, [pc, #412]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a222:	4413      	add	r3, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fc41 	bl	800baac <gos_shellDriverTransmitString>
            }

            /*
             * Backspace character check
             */
            if (commandBuffer[commandBufferIndex] == '\177')
 800a22a:	4b64      	ldr	r3, [pc, #400]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	4b63      	ldr	r3, [pc, #396]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a232:	5c9b      	ldrb	r3, [r3, r2]
 800a234:	2b7f      	cmp	r3, #127	; 0x7f
 800a236:	d10c      	bne.n	800a252 <gos_shellDaemonTask+0x6a>
            {
                commandBuffer[commandBufferIndex] = '\0';
 800a238:	4b60      	ldr	r3, [pc, #384]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	461a      	mov	r2, r3
 800a23e:	4b60      	ldr	r3, [pc, #384]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a240:	2100      	movs	r1, #0
 800a242:	5499      	strb	r1, [r3, r2]
                commandBufferIndex--;
 800a244:	4b5d      	ldr	r3, [pc, #372]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	3b01      	subs	r3, #1
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	4b5b      	ldr	r3, [pc, #364]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a24e:	801a      	strh	r2, [r3, #0]
 800a250:	e0af      	b.n	800a3b2 <gos_shellDaemonTask+0x1ca>
            }
            /*
             * Enter character check
             */
            else if (commandBuffer[commandBufferIndex] == '\r')
 800a252:	4b5a      	ldr	r3, [pc, #360]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	4b59      	ldr	r3, [pc, #356]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a25a:	5c9b      	ldrb	r3, [r3, r2]
 800a25c:	2b0d      	cmp	r3, #13
 800a25e:	f040 8096 	bne.w	800a38e <gos_shellDaemonTask+0x1a6>
            {
                if (useEcho == GOS_TRUE)
 800a262:	4b58      	ldr	r3, [pc, #352]	; (800a3c4 <gos_shellDaemonTask+0x1dc>)
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b36      	cmp	r3, #54	; 0x36
 800a268:	d102      	bne.n	800a270 <gos_shellDaemonTask+0x88>
                {
                    (void_t) gos_shellDriverTransmitString("\n");
 800a26a:	4857      	ldr	r0, [pc, #348]	; (800a3c8 <gos_shellDaemonTask+0x1e0>)
 800a26c:	f001 fc1e 	bl	800baac <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                commandBuffer[commandBufferIndex] = '\0';
 800a270:	4b52      	ldr	r3, [pc, #328]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	4b52      	ldr	r3, [pc, #328]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a278:	2100      	movs	r1, #0
 800a27a:	5499      	strb	r1, [r3, r2]
                actualCommandIndex = 0u;
 800a27c:	2300      	movs	r3, #0
 800a27e:	80bb      	strh	r3, [r7, #4]
                paramIndex = 0u;
 800a280:	2300      	movs	r3, #0
 800a282:	807b      	strh	r3, [r7, #2]

                // Get command.
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 800a284:	e008      	b.n	800a298 <gos_shellDaemonTask+0xb0>
                {
                    actualCommand[actualCommandIndex] = commandBuffer[actualCommandIndex];
 800a286:	88ba      	ldrh	r2, [r7, #4]
 800a288:	88bb      	ldrh	r3, [r7, #4]
 800a28a:	494d      	ldr	r1, [pc, #308]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a28c:	5c89      	ldrb	r1, [r1, r2]
 800a28e:	4a4f      	ldr	r2, [pc, #316]	; (800a3cc <gos_shellDaemonTask+0x1e4>)
 800a290:	54d1      	strb	r1, [r2, r3]
                    actualCommandIndex++;
 800a292:	88bb      	ldrh	r3, [r7, #4]
 800a294:	3301      	adds	r3, #1
 800a296:	80bb      	strh	r3, [r7, #4]
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 800a298:	88bb      	ldrh	r3, [r7, #4]
 800a29a:	4a49      	ldr	r2, [pc, #292]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a29c:	5cd3      	ldrb	r3, [r2, r3]
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d004      	beq.n	800a2ac <gos_shellDaemonTask+0xc4>
 800a2a2:	88bb      	ldrh	r3, [r7, #4]
 800a2a4:	4a46      	ldr	r2, [pc, #280]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a2a6:	5cd3      	ldrb	r3, [r2, r3]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1ec      	bne.n	800a286 <gos_shellDaemonTask+0x9e>
                }
                actualCommand[actualCommandIndex] = '\0';
 800a2ac:	88bb      	ldrh	r3, [r7, #4]
 800a2ae:	4a47      	ldr	r2, [pc, #284]	; (800a3cc <gos_shellDaemonTask+0x1e4>)
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	54d1      	strb	r1, [r2, r3]
                actualCommandIndex++;
 800a2b4:	88bb      	ldrh	r3, [r7, #4]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	80bb      	strh	r3, [r7, #4]

                // Get parameters.
                while (commandBuffer[actualCommandIndex] != '\0')
 800a2ba:	e00b      	b.n	800a2d4 <gos_shellDaemonTask+0xec>
                {
                    commandParams[paramIndex++] = commandBuffer[actualCommandIndex++];
 800a2bc:	88bb      	ldrh	r3, [r7, #4]
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	80ba      	strh	r2, [r7, #4]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	887b      	ldrh	r3, [r7, #2]
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	807a      	strh	r2, [r7, #2]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	4b3c      	ldr	r3, [pc, #240]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a2ce:	5c59      	ldrb	r1, [r3, r1]
 800a2d0:	4b3f      	ldr	r3, [pc, #252]	; (800a3d0 <gos_shellDaemonTask+0x1e8>)
 800a2d2:	5499      	strb	r1, [r3, r2]
                while (commandBuffer[actualCommandIndex] != '\0')
 800a2d4:	88bb      	ldrh	r3, [r7, #4]
 800a2d6:	4a3a      	ldr	r2, [pc, #232]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a2d8:	5cd3      	ldrb	r3, [r2, r3]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1ee      	bne.n	800a2bc <gos_shellDaemonTask+0xd4>
                }
                commandParams[paramIndex] = '\0';
 800a2de:	887b      	ldrh	r3, [r7, #2]
 800a2e0:	4a3b      	ldr	r2, [pc, #236]	; (800a3d0 <gos_shellDaemonTask+0x1e8>)
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	54d1      	strb	r1, [r2, r3]

                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	71fb      	strb	r3, [r7, #7]
 800a2ea:	e03c      	b.n	800a366 <gos_shellDaemonTask+0x17e>
                {
                    if (strcmp(shellCommands[index].command, actualCommand) == 0)
 800a2ec:	79fa      	ldrb	r2, [r7, #7]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4a37      	ldr	r2, [pc, #220]	; (800a3d4 <gos_shellDaemonTask+0x1ec>)
 800a2f8:	4413      	add	r3, r2
 800a2fa:	4934      	ldr	r1, [pc, #208]	; (800a3cc <gos_shellDaemonTask+0x1e4>)
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7f5 ff87 	bl	8000210 <strcmp>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d12b      	bne.n	800a360 <gos_shellDaemonTask+0x178>
                    {
                        if (shellCommands[index].commandHandler != NULL)
 800a308:	79fa      	ldrb	r2, [r7, #7]
 800a30a:	4932      	ldr	r1, [pc, #200]	; (800a3d4 <gos_shellDaemonTask+0x1ec>)
 800a30c:	4613      	mov	r3, r2
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	3314      	adds	r3, #20
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d027      	beq.n	800a36e <gos_shellDaemonTask+0x186>
                        {
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, shellCommands[index].commandHandlerPrivileges);
 800a31e:	4b2e      	ldr	r3, [pc, #184]	; (800a3d8 <gos_shellDaemonTask+0x1f0>)
 800a320:	8818      	ldrh	r0, [r3, #0]
 800a322:	79fa      	ldrb	r2, [r7, #7]
 800a324:	492b      	ldr	r1, [pc, #172]	; (800a3d4 <gos_shellDaemonTask+0x1ec>)
 800a326:	4613      	mov	r3, r2
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	440b      	add	r3, r1
 800a330:	3318      	adds	r3, #24
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	4619      	mov	r1, r3
 800a336:	f7fe fca7 	bl	8008c88 <gos_taskSetPrivileges>
                            shellCommands[index].commandHandler(commandParams);
 800a33a:	79fa      	ldrb	r2, [r7, #7]
 800a33c:	4925      	ldr	r1, [pc, #148]	; (800a3d4 <gos_shellDaemonTask+0x1ec>)
 800a33e:	4613      	mov	r3, r2
 800a340:	00db      	lsls	r3, r3, #3
 800a342:	1a9b      	subs	r3, r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	440b      	add	r3, r1
 800a348:	3314      	adds	r3, #20
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4820      	ldr	r0, [pc, #128]	; (800a3d0 <gos_shellDaemonTask+0x1e8>)
 800a34e:	4798      	blx	r3
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, GOS_TASK_PRIVILEGE_KERNEL);
 800a350:	4b21      	ldr	r3, [pc, #132]	; (800a3d8 <gos_shellDaemonTask+0x1f0>)
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fe fc95 	bl	8008c88 <gos_taskSetPrivileges>
                        }
                        else
                        {
                            // Nothing to do.
                        }
                        break;
 800a35e:	e006      	b.n	800a36e <gos_shellDaemonTask+0x186>
                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	3301      	adds	r3, #1
 800a364:	71fb      	strb	r3, [r7, #7]
 800a366:	79fb      	ldrb	r3, [r7, #7]
 800a368:	2b0f      	cmp	r3, #15
 800a36a:	d9bf      	bls.n	800a2ec <gos_shellDaemonTask+0x104>
 800a36c:	e000      	b.n	800a370 <gos_shellDaemonTask+0x188>
                        break;
 800a36e:	bf00      	nop
                        // Nothing to do.
                    }
                }

                // If command not found.
                if (index == CFG_SHELL_MAX_COMMAND_NUMBER)
 800a370:	79fb      	ldrb	r3, [r7, #7]
 800a372:	2b10      	cmp	r3, #16
 800a374:	d102      	bne.n	800a37c <gos_shellDaemonTask+0x194>
                {
                    (void_t) gos_shellDriverTransmitString("Unrecognized command!\r\n");
 800a376:	4819      	ldr	r0, [pc, #100]	; (800a3dc <gos_shellDaemonTask+0x1f4>)
 800a378:	f001 fb98 	bl	800baac <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 800a37c:	22c8      	movs	r2, #200	; 0xc8
 800a37e:	2100      	movs	r1, #0
 800a380:	480f      	ldr	r0, [pc, #60]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a382:	f002 fa37 	bl	800c7f4 <memset>
                commandBufferIndex = 0u;
 800a386:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a388:	2200      	movs	r2, #0
 800a38a:	801a      	strh	r2, [r3, #0]
 800a38c:	e011      	b.n	800a3b2 <gos_shellDaemonTask+0x1ca>
            }
            else
            {
                commandBufferIndex++;
 800a38e:	4b0b      	ldr	r3, [pc, #44]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a390:	881b      	ldrh	r3, [r3, #0]
 800a392:	3301      	adds	r3, #1
 800a394:	b29a      	uxth	r2, r3
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a398:	801a      	strh	r2, [r3, #0]

                if (commandBufferIndex >= CFG_SHELL_COMMAND_BUFFER_SIZE)
 800a39a:	4b08      	ldr	r3, [pc, #32]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	2bc7      	cmp	r3, #199	; 0xc7
 800a3a0:	d907      	bls.n	800a3b2 <gos_shellDaemonTask+0x1ca>
                {
                    (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 800a3a2:	22c8      	movs	r2, #200	; 0xc8
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4806      	ldr	r0, [pc, #24]	; (800a3c0 <gos_shellDaemonTask+0x1d8>)
 800a3a8:	f002 fa24 	bl	800c7f4 <memset>
                    commandBufferIndex = 0u;
 800a3ac:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <gos_shellDaemonTask+0x1d4>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	801a      	strh	r2, [r3, #0]
                {
                    // Nothing to do.
                }
            }
        }
        (void_t) gos_taskSleep(GOS_SHELL_DAEMON_POLL_TIME_MS);
 800a3b2:	2032      	movs	r0, #50	; 0x32
 800a3b4:	f7fd fb3e 	bl	8007a34 <gos_taskSleep>
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 800a3b8:	e71f      	b.n	800a1fa <gos_shellDaemonTask+0x12>
 800a3ba:	bf00      	nop
 800a3bc:	20009684 	.word	0x20009684
 800a3c0:	200095bc 	.word	0x200095bc
 800a3c4:	20009686 	.word	0x20009686
 800a3c8:	0800f6e8 	.word	0x0800f6e8
 800a3cc:	20009688 	.word	0x20009688
 800a3d0:	2000969c 	.word	0x2000969c
 800a3d4:	200093f8 	.word	0x200093f8
 800a3d8:	200095b8 	.word	0x200095b8
 800a3dc:	0800f6ec 	.word	0x0800f6ec

0800a3e0 <gos_shellCommandHandler>:
 * @details Handles the built-in shell command.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellCommandHandler (char_t* params)
{
 800a3e0:	b590      	push	{r4, r7, lr}
 800a3e2:	b089      	sub	sp, #36	; 0x24
 800a3e4:	af02      	add	r7, sp, #8
 800a3e6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t                    index        = 0u;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	75fb      	strb	r3, [r7, #23]
    gos_shellCommandIndex_t commandIndex = 0u;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	75bb      	strb	r3, [r7, #22]
    gos_tid_t               taskId       = GOS_INVALID_TASK_ID;
 800a3f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3f4:	82bb      	strh	r3, [r7, #20]
    gos_runtime_t           totalRunTime = {0};
 800a3f6:	f107 0308 	add.w	r3, r7, #8
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	605a      	str	r2, [r3, #4]
 800a400:	721a      	strb	r2, [r3, #8]

    /*
     * Function code.
     */
    if (strcmp(params, "dump") == 0)
 800a402:	499f      	ldr	r1, [pc, #636]	; (800a680 <gos_shellCommandHandler+0x2a0>)
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7f5 ff03 	bl	8000210 <strcmp>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <gos_shellCommandHandler+0x36>
    {
        gos_Dump();
 800a410:	f7fe fec2 	bl	8009198 <gos_Dump>
        else
        {
            // Nothing to do.
        }
    }
}
 800a414:	e1d4      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
    else if (strcmp(params, "reset") == 0)
 800a416:	499b      	ldr	r1, [pc, #620]	; (800a684 <gos_shellCommandHandler+0x2a4>)
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7f5 fef9 	bl	8000210 <strcmp>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <gos_shellCommandHandler+0x4a>
        gos_kernelReset();
 800a424:	f7fc f974 	bl	8006710 <gos_kernelReset>
}
 800a428:	e1ca      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
    else if (strcmp(params, "help") == 0)
 800a42a:	4997      	ldr	r1, [pc, #604]	; (800a688 <gos_shellCommandHandler+0x2a8>)
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7f5 feef 	bl	8000210 <strcmp>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d137      	bne.n	800a4a8 <gos_shellCommandHandler+0xc8>
        (void_t) gos_shellDriverTransmitString("List of registered shell commands: \r\n");
 800a438:	4894      	ldr	r0, [pc, #592]	; (800a68c <gos_shellCommandHandler+0x2ac>)
 800a43a:	f001 fb37 	bl	800baac <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 800a43e:	2300      	movs	r3, #0
 800a440:	75bb      	strb	r3, [r7, #22]
 800a442:	e02a      	b.n	800a49a <gos_shellCommandHandler+0xba>
            if (strcmp(shellCommands[commandIndex].command, "") == 0)
 800a444:	7dba      	ldrb	r2, [r7, #22]
 800a446:	4613      	mov	r3, r2
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	1a9b      	subs	r3, r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4a90      	ldr	r2, [pc, #576]	; (800a690 <gos_shellCommandHandler+0x2b0>)
 800a450:	4413      	add	r3, r2
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 81b2 	beq.w	800a7be <gos_shellCommandHandler+0x3de>
            else if (strcmp(shellCommands[commandIndex].command, "shell") == 0)
 800a45a:	7dba      	ldrb	r2, [r7, #22]
 800a45c:	4613      	mov	r3, r2
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	1a9b      	subs	r3, r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4a8a      	ldr	r2, [pc, #552]	; (800a690 <gos_shellCommandHandler+0x2b0>)
 800a466:	4413      	add	r3, r2
 800a468:	498a      	ldr	r1, [pc, #552]	; (800a694 <gos_shellCommandHandler+0x2b4>)
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7f5 fed0 	bl	8000210 <strcmp>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d103      	bne.n	800a47e <gos_shellCommandHandler+0x9e>
                (void_t) gos_shellDriverTransmitString("\t"
 800a476:	4888      	ldr	r0, [pc, #544]	; (800a698 <gos_shellCommandHandler+0x2b8>)
 800a478:	f001 fb18 	bl	800baac <gos_shellDriverTransmitString>
 800a47c:	e00a      	b.n	800a494 <gos_shellCommandHandler+0xb4>
                (void_t) gos_shellDriverTransmitString("\t- %s\r\n", shellCommands[commandIndex].command);
 800a47e:	7dba      	ldrb	r2, [r7, #22]
 800a480:	4613      	mov	r3, r2
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4a81      	ldr	r2, [pc, #516]	; (800a690 <gos_shellCommandHandler+0x2b0>)
 800a48a:	4413      	add	r3, r2
 800a48c:	4619      	mov	r1, r3
 800a48e:	4883      	ldr	r0, [pc, #524]	; (800a69c <gos_shellCommandHandler+0x2bc>)
 800a490:	f001 fb0c 	bl	800baac <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 800a494:	7dbb      	ldrb	r3, [r7, #22]
 800a496:	3301      	adds	r3, #1
 800a498:	75bb      	strb	r3, [r7, #22]
 800a49a:	7dbb      	ldrb	r3, [r7, #22]
 800a49c:	2b0f      	cmp	r3, #15
 800a49e:	d9d1      	bls.n	800a444 <gos_shellCommandHandler+0x64>
}
 800a4a0:	e18e      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
            index++;
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	75fb      	strb	r3, [r7, #23]
        while (params[index] != ' ' && params[index])
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b20      	cmp	r3, #32
 800a4b2:	d005      	beq.n	800a4c0 <gos_shellCommandHandler+0xe0>
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1f0      	bne.n	800a4a2 <gos_shellCommandHandler+0xc2>
        params[index] = '\0';
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	701a      	strb	r2, [r3, #0]
        if (strcmp(params, "delete_tid") == 0)
 800a4ca:	4975      	ldr	r1, [pc, #468]	; (800a6a0 <gos_shellCommandHandler+0x2c0>)
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7f5 fe9f 	bl	8000210 <strcmp>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d120      	bne.n	800a51a <gos_shellCommandHandler+0x13a>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800a4d8:	7dfb      	ldrb	r3, [r7, #23]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	75fb      	strb	r3, [r7, #23]
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	2210      	movs	r2, #16
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f001 fbcd 	bl	800bc88 <strtol>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	82bb      	strh	r3, [r7, #20]
            if (gos_taskDelete(taskId) == GOS_SUCCESS)
 800a4f4:	8abb      	ldrh	r3, [r7, #20]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fd ffb4 	bl	8008464 <gos_taskDelete>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b55      	cmp	r3, #85	; 0x55
 800a500:	d105      	bne.n	800a50e <gos_shellCommandHandler+0x12e>
                (void_t) gos_shellDriverTransmitString("0x%X task has been deleted.\r\n", taskId);
 800a502:	8abb      	ldrh	r3, [r7, #20]
 800a504:	4619      	mov	r1, r3
 800a506:	4867      	ldr	r0, [pc, #412]	; (800a6a4 <gos_shellCommandHandler+0x2c4>)
 800a508:	f001 fad0 	bl	800baac <gos_shellDriverTransmitString>
}
 800a50c:	e158      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be deleted.\r\n", taskId);
 800a50e:	8abb      	ldrh	r3, [r7, #20]
 800a510:	4619      	mov	r1, r3
 800a512:	4865      	ldr	r0, [pc, #404]	; (800a6a8 <gos_shellCommandHandler+0x2c8>)
 800a514:	f001 faca 	bl	800baac <gos_shellDriverTransmitString>
}
 800a518:	e152      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
        else if (strcmp(params, "delete") == 0)
 800a51a:	4964      	ldr	r1, [pc, #400]	; (800a6ac <gos_shellCommandHandler+0x2cc>)
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7f5 fe77 	bl	8000210 <strcmp>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d129      	bne.n	800a57c <gos_shellCommandHandler+0x19c>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	3301      	adds	r3, #1
 800a52c:	75fb      	strb	r3, [r7, #23]
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	4413      	add	r3, r2
 800a534:	f107 0214 	add.w	r2, r7, #20
 800a538:	4611      	mov	r1, r2
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe fc82 	bl	8008e44 <gos_taskGetId>
 800a540:	4603      	mov	r3, r0
 800a542:	2b55      	cmp	r3, #85	; 0x55
 800a544:	d116      	bne.n	800a574 <gos_shellCommandHandler+0x194>
                if (gos_taskDelete(taskId) == GOS_SUCCESS)
 800a546:	8abb      	ldrh	r3, [r7, #20]
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fd ff8b 	bl	8008464 <gos_taskDelete>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b55      	cmp	r3, #85	; 0x55
 800a552:	d107      	bne.n	800a564 <gos_shellCommandHandler+0x184>
                    (void_t) gos_shellDriverTransmitString("%s has been deleted.\r\n", &params[index]);
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	4413      	add	r3, r2
 800a55a:	4619      	mov	r1, r3
 800a55c:	4854      	ldr	r0, [pc, #336]	; (800a6b0 <gos_shellCommandHandler+0x2d0>)
 800a55e:	f001 faa5 	bl	800baac <gos_shellDriverTransmitString>
}
 800a562:	e12d      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                    (void_t) gos_shellDriverTransmitString("%s could not be deleted.\r\n", &params[index]);
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	4413      	add	r3, r2
 800a56a:	4619      	mov	r1, r3
 800a56c:	4851      	ldr	r0, [pc, #324]	; (800a6b4 <gos_shellCommandHandler+0x2d4>)
 800a56e:	f001 fa9d 	bl	800baac <gos_shellDriverTransmitString>
}
 800a572:	e125      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800a574:	4850      	ldr	r0, [pc, #320]	; (800a6b8 <gos_shellCommandHandler+0x2d8>)
 800a576:	f001 fa99 	bl	800baac <gos_shellDriverTransmitString>
}
 800a57a:	e121      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
        else if (strcmp(params, "suspend_tid") == 0)
 800a57c:	494f      	ldr	r1, [pc, #316]	; (800a6bc <gos_shellCommandHandler+0x2dc>)
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7f5 fe46 	bl	8000210 <strcmp>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d120      	bne.n	800a5cc <gos_shellCommandHandler+0x1ec>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	3301      	adds	r3, #1
 800a58e:	75fb      	strb	r3, [r7, #23]
 800a590:	7dfb      	ldrb	r3, [r7, #23]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	4413      	add	r3, r2
 800a596:	2210      	movs	r2, #16
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f001 fb74 	bl	800bc88 <strtol>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	82bb      	strh	r3, [r7, #20]
            if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 800a5a6:	8abb      	ldrh	r3, [r7, #20]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fd fb8f 	bl	8007ccc <gos_taskSuspend>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b55      	cmp	r3, #85	; 0x55
 800a5b2:	d105      	bne.n	800a5c0 <gos_shellCommandHandler+0x1e0>
                (void_t) gos_shellDriverTransmitString("0x%X task has been suspended.\r\n", taskId);
 800a5b4:	8abb      	ldrh	r3, [r7, #20]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4841      	ldr	r0, [pc, #260]	; (800a6c0 <gos_shellCommandHandler+0x2e0>)
 800a5ba:	f001 fa77 	bl	800baac <gos_shellDriverTransmitString>
}
 800a5be:	e0ff      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be suspended.\r\n", taskId);
 800a5c0:	8abb      	ldrh	r3, [r7, #20]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	483f      	ldr	r0, [pc, #252]	; (800a6c4 <gos_shellCommandHandler+0x2e4>)
 800a5c6:	f001 fa71 	bl	800baac <gos_shellDriverTransmitString>
}
 800a5ca:	e0f9      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
        else if (strcmp(params, "suspend") == 0)
 800a5cc:	493e      	ldr	r1, [pc, #248]	; (800a6c8 <gos_shellCommandHandler+0x2e8>)
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7f5 fe1e 	bl	8000210 <strcmp>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d129      	bne.n	800a62e <gos_shellCommandHandler+0x24e>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	75fb      	strb	r3, [r7, #23]
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f107 0214 	add.w	r2, r7, #20
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fc29 	bl	8008e44 <gos_taskGetId>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b55      	cmp	r3, #85	; 0x55
 800a5f6:	d116      	bne.n	800a626 <gos_shellCommandHandler+0x246>
                if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 800a5f8:	8abb      	ldrh	r3, [r7, #20]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fd fb66 	bl	8007ccc <gos_taskSuspend>
 800a600:	4603      	mov	r3, r0
 800a602:	2b55      	cmp	r3, #85	; 0x55
 800a604:	d107      	bne.n	800a616 <gos_shellCommandHandler+0x236>
                    (void_t) gos_shellDriverTransmitString("%s has been suspended.\r\n", &params[index]);
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	4413      	add	r3, r2
 800a60c:	4619      	mov	r1, r3
 800a60e:	482f      	ldr	r0, [pc, #188]	; (800a6cc <gos_shellCommandHandler+0x2ec>)
 800a610:	f001 fa4c 	bl	800baac <gos_shellDriverTransmitString>
}
 800a614:	e0d4      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                    (void_t) gos_shellDriverTransmitString("%s could not be suspended.\r\n", &params[index]);
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	4413      	add	r3, r2
 800a61c:	4619      	mov	r1, r3
 800a61e:	482c      	ldr	r0, [pc, #176]	; (800a6d0 <gos_shellCommandHandler+0x2f0>)
 800a620:	f001 fa44 	bl	800baac <gos_shellDriverTransmitString>
}
 800a624:	e0cc      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800a626:	4824      	ldr	r0, [pc, #144]	; (800a6b8 <gos_shellCommandHandler+0x2d8>)
 800a628:	f001 fa40 	bl	800baac <gos_shellDriverTransmitString>
}
 800a62c:	e0c8      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
        else if (strcmp(params, "resume_tid") == 0)
 800a62e:	4929      	ldr	r1, [pc, #164]	; (800a6d4 <gos_shellCommandHandler+0x2f4>)
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7f5 fded 	bl	8000210 <strcmp>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d151      	bne.n	800a6e0 <gos_shellCommandHandler+0x300>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	3301      	adds	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	4413      	add	r3, r2
 800a648:	2210      	movs	r2, #16
 800a64a:	2100      	movs	r1, #0
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 fb1b 	bl	800bc88 <strtol>
 800a652:	4603      	mov	r3, r0
 800a654:	b29b      	uxth	r3, r3
 800a656:	82bb      	strh	r3, [r7, #20]
            if (gos_taskResume(taskId) == GOS_SUCCESS)
 800a658:	8abb      	ldrh	r3, [r7, #20]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fd fc58 	bl	8007f10 <gos_taskResume>
 800a660:	4603      	mov	r3, r0
 800a662:	2b55      	cmp	r3, #85	; 0x55
 800a664:	d105      	bne.n	800a672 <gos_shellCommandHandler+0x292>
                (void_t) gos_shellDriverTransmitString("0x%X task has been resumed.\r\n", taskId);
 800a666:	8abb      	ldrh	r3, [r7, #20]
 800a668:	4619      	mov	r1, r3
 800a66a:	481b      	ldr	r0, [pc, #108]	; (800a6d8 <gos_shellCommandHandler+0x2f8>)
 800a66c:	f001 fa1e 	bl	800baac <gos_shellDriverTransmitString>
}
 800a670:	e0a6      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be resumed.\r\n", taskId);
 800a672:	8abb      	ldrh	r3, [r7, #20]
 800a674:	4619      	mov	r1, r3
 800a676:	4819      	ldr	r0, [pc, #100]	; (800a6dc <gos_shellCommandHandler+0x2fc>)
 800a678:	f001 fa18 	bl	800baac <gos_shellDriverTransmitString>
}
 800a67c:	e0a0      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
 800a67e:	bf00      	nop
 800a680:	0800f704 	.word	0x0800f704
 800a684:	0800f70c 	.word	0x0800f70c
 800a688:	0800f714 	.word	0x0800f714
 800a68c:	0800f71c 	.word	0x0800f71c
 800a690:	200093f8 	.word	0x200093f8
 800a694:	0800f744 	.word	0x0800f744
 800a698:	0800f74c 	.word	0x0800f74c
 800a69c:	0800f7d8 	.word	0x0800f7d8
 800a6a0:	0800f7e0 	.word	0x0800f7e0
 800a6a4:	0800f7ec 	.word	0x0800f7ec
 800a6a8:	0800f80c 	.word	0x0800f80c
 800a6ac:	0800f830 	.word	0x0800f830
 800a6b0:	0800f838 	.word	0x0800f838
 800a6b4:	0800f850 	.word	0x0800f850
 800a6b8:	0800f86c 	.word	0x0800f86c
 800a6bc:	0800f888 	.word	0x0800f888
 800a6c0:	0800f894 	.word	0x0800f894
 800a6c4:	0800f8b4 	.word	0x0800f8b4
 800a6c8:	0800f8d8 	.word	0x0800f8d8
 800a6cc:	0800f8e0 	.word	0x0800f8e0
 800a6d0:	0800f8fc 	.word	0x0800f8fc
 800a6d4:	0800f91c 	.word	0x0800f91c
 800a6d8:	0800f928 	.word	0x0800f928
 800a6dc:	0800f948 	.word	0x0800f948
        else if (strcmp(params, "resume") == 0)
 800a6e0:	4939      	ldr	r1, [pc, #228]	; (800a7c8 <gos_shellCommandHandler+0x3e8>)
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7f5 fd94 	bl	8000210 <strcmp>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d129      	bne.n	800a742 <gos_shellCommandHandler+0x362>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	75fb      	strb	r3, [r7, #23]
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f107 0214 	add.w	r2, r7, #20
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe fb9f 	bl	8008e44 <gos_taskGetId>
 800a706:	4603      	mov	r3, r0
 800a708:	2b55      	cmp	r3, #85	; 0x55
 800a70a:	d116      	bne.n	800a73a <gos_shellCommandHandler+0x35a>
                if (gos_taskResume(taskId) == GOS_SUCCESS)
 800a70c:	8abb      	ldrh	r3, [r7, #20]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fd fbfe 	bl	8007f10 <gos_taskResume>
 800a714:	4603      	mov	r3, r0
 800a716:	2b55      	cmp	r3, #85	; 0x55
 800a718:	d107      	bne.n	800a72a <gos_shellCommandHandler+0x34a>
                    (void_t) gos_shellDriverTransmitString("%s has been resumed.\r\n", &params[index]);
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	4413      	add	r3, r2
 800a720:	4619      	mov	r1, r3
 800a722:	482a      	ldr	r0, [pc, #168]	; (800a7cc <gos_shellCommandHandler+0x3ec>)
 800a724:	f001 f9c2 	bl	800baac <gos_shellDriverTransmitString>
}
 800a728:	e04a      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                    (void_t) gos_shellDriverTransmitString("%s could not be resumed.\r\n", &params[index]);
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	4413      	add	r3, r2
 800a730:	4619      	mov	r1, r3
 800a732:	4827      	ldr	r0, [pc, #156]	; (800a7d0 <gos_shellCommandHandler+0x3f0>)
 800a734:	f001 f9ba 	bl	800baac <gos_shellDriverTransmitString>
}
 800a738:	e042      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800a73a:	4826      	ldr	r0, [pc, #152]	; (800a7d4 <gos_shellCommandHandler+0x3f4>)
 800a73c:	f001 f9b6 	bl	800baac <gos_shellDriverTransmitString>
}
 800a740:	e03e      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
        else if (strcmp(params, "cpu") == 0)
 800a742:	4925      	ldr	r1, [pc, #148]	; (800a7d8 <gos_shellCommandHandler+0x3f8>)
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7f5 fd63 	bl	8000210 <strcmp>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d11b      	bne.n	800a788 <gos_shellCommandHandler+0x3a8>
            (void_t) gos_shellDriverTransmitString("CPU usage: %u.%02u%%\r\n", (gos_kernelGetCpuUsage() / 100), (gos_kernelGetCpuUsage() % 100));
 800a750:	f7fb ffcc 	bl	80066ec <gos_kernelGetCpuUsage>
 800a754:	4603      	mov	r3, r0
 800a756:	461a      	mov	r2, r3
 800a758:	4b20      	ldr	r3, [pc, #128]	; (800a7dc <gos_shellCommandHandler+0x3fc>)
 800a75a:	fba3 2302 	umull	r2, r3, r3, r2
 800a75e:	095b      	lsrs	r3, r3, #5
 800a760:	b29b      	uxth	r3, r3
 800a762:	461c      	mov	r4, r3
 800a764:	f7fb ffc2 	bl	80066ec <gos_kernelGetCpuUsage>
 800a768:	4603      	mov	r3, r0
 800a76a:	4a1c      	ldr	r2, [pc, #112]	; (800a7dc <gos_shellCommandHandler+0x3fc>)
 800a76c:	fba2 1203 	umull	r1, r2, r2, r3
 800a770:	0952      	lsrs	r2, r2, #5
 800a772:	2164      	movs	r1, #100	; 0x64
 800a774:	fb01 f202 	mul.w	r2, r1, r2
 800a778:	1a9b      	subs	r3, r3, r2
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	4621      	mov	r1, r4
 800a780:	4817      	ldr	r0, [pc, #92]	; (800a7e0 <gos_shellCommandHandler+0x400>)
 800a782:	f001 f993 	bl	800baac <gos_shellDriverTransmitString>
}
 800a786:	e01b      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
        else if (strcmp(params, "runtime") == 0)
 800a788:	4916      	ldr	r1, [pc, #88]	; (800a7e4 <gos_shellCommandHandler+0x404>)
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7f5 fd40 	bl	8000210 <strcmp>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d114      	bne.n	800a7c0 <gos_shellCommandHandler+0x3e0>
            (void_t) gos_runTimeGet(&totalRunTime);
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 f9d2 	bl	800ab44 <gos_runTimeGet>
                    totalRunTime.days,
 800a7a0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800a7a4:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800a7a6:	4619      	mov	r1, r3
                    totalRunTime.hours,
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
            (void_t) gos_shellDriverTransmitString(
 800a7aa:	461a      	mov	r2, r3
                    totalRunTime.minutes,
 800a7ac:	7b7b      	ldrb	r3, [r7, #13]
            (void_t) gos_shellDriverTransmitString(
 800a7ae:	4618      	mov	r0, r3
                    totalRunTime.seconds
 800a7b0:	7b3b      	ldrb	r3, [r7, #12]
            (void_t) gos_shellDriverTransmitString(
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	480c      	ldr	r0, [pc, #48]	; (800a7e8 <gos_shellCommandHandler+0x408>)
 800a7b8:	f001 f978 	bl	800baac <gos_shellDriverTransmitString>
}
 800a7bc:	e000      	b.n	800a7c0 <gos_shellCommandHandler+0x3e0>
                break;
 800a7be:	bf00      	nop
}
 800a7c0:	bf00      	nop
 800a7c2:	371c      	adds	r7, #28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd90      	pop	{r4, r7, pc}
 800a7c8:	0800f96c 	.word	0x0800f96c
 800a7cc:	0800f974 	.word	0x0800f974
 800a7d0:	0800f98c 	.word	0x0800f98c
 800a7d4:	0800f86c 	.word	0x0800f86c
 800a7d8:	0800f9a8 	.word	0x0800f9a8
 800a7dc:	51eb851f 	.word	0x51eb851f
 800a7e0:	0800f9ac 	.word	0x0800f9ac
 800a7e4:	0800f9c4 	.word	0x0800f9c4
 800a7e8:	0800f9cc 	.word	0x0800f9cc

0800a7ec <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_SUCCESS;
 800a7f2:	2355      	movs	r3, #85	; 0x55
 800a7f4:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	71bb      	strb	r3, [r7, #6]
 800a7fe:	e00a      	b.n	800a816 <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 800a800:	79bb      	ldrb	r3, [r7, #6]
 800a802:	4a16      	ldr	r2, [pc, #88]	; (800a85c <gos_signalInit+0x70>)
 800a804:	212c      	movs	r1, #44	; 0x2c
 800a806:	fb01 f303 	mul.w	r3, r1, r3
 800a80a:	4413      	add	r3, r2
 800a80c:	2249      	movs	r2, #73	; 0x49
 800a80e:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a810:	79bb      	ldrb	r3, [r7, #6]
 800a812:	3301      	adds	r3, #1
 800a814:	71bb      	strb	r3, [r7, #6]
 800a816:	79bb      	ldrb	r3, [r7, #6]
 800a818:	2b05      	cmp	r3, #5
 800a81a:	d9f1      	bls.n	800a800 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 800a81c:	2100      	movs	r1, #0
 800a81e:	4810      	ldr	r0, [pc, #64]	; (800a860 <gos_signalInit+0x74>)
 800a820:	f7fc ff76 	bl	8007710 <gos_taskRegister>
 800a824:	4603      	mov	r3, r0
 800a826:	2b55      	cmp	r3, #85	; 0x55
 800a828:	d111      	bne.n	800a84e <gos_signalInit+0x62>
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 800a82a:	480e      	ldr	r0, [pc, #56]	; (800a864 <gos_signalInit+0x78>)
 800a82c:	f000 f820 	bl	800a870 <gos_signalCreate>
 800a830:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 800a832:	2b55      	cmp	r3, #85	; 0x55
 800a834:	d10b      	bne.n	800a84e <gos_signalInit+0x62>
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 800a836:	480c      	ldr	r0, [pc, #48]	; (800a868 <gos_signalInit+0x7c>)
 800a838:	f000 f81a 	bl	800a870 <gos_signalCreate>
 800a83c:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 800a83e:	2b55      	cmp	r3, #85	; 0x55
 800a840:	d105      	bne.n	800a84e <gos_signalInit+0x62>
        gos_triggerInit(&signalInvokeTrigger)               != GOS_SUCCESS
 800a842:	480a      	ldr	r0, [pc, #40]	; (800a86c <gos_signalInit+0x80>)
 800a844:	f000 ff6c 	bl	800b720 <gos_triggerInit>
 800a848:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 800a84a:	2b55      	cmp	r3, #85	; 0x55
 800a84c:	d001      	beq.n	800a852 <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_ERROR;
 800a84e:	23ae      	movs	r3, #174	; 0xae
 800a850:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 800a852:	79fb      	ldrb	r3, [r7, #7]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	2000971c 	.word	0x2000971c
 800a860:	20000c7c 	.word	0x20000c7c
 800a864:	200012c8 	.word	0x200012c8
 800a868:	2000129c 	.word	0x2000129c
 800a86c:	20009824 	.word	0x20009824

0800a870 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 800a878:	23ae      	movs	r3, #174	; 0xae
 800a87a:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a880:	2300      	movs	r3, #0
 800a882:	73bb      	strb	r3, [r7, #14]
 800a884:	e025      	b.n	800a8d2 <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	4a17      	ldr	r2, [pc, #92]	; (800a8e8 <gos_signalCreate+0x78>)
 800a88a:	212c      	movs	r1, #44	; 0x2c
 800a88c:	fb01 f303 	mul.w	r3, r1, r3
 800a890:	4413      	add	r3, r2
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2b49      	cmp	r3, #73	; 0x49
 800a896:	d119      	bne.n	800a8cc <gos_signalCreate+0x5c>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d016      	beq.n	800a8cc <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	7bba      	ldrb	r2, [r7, #14]
 800a8a2:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	4a10      	ldr	r2, [pc, #64]	; (800a8e8 <gos_signalCreate+0x78>)
 800a8a8:	212c      	movs	r1, #44	; 0x2c
 800a8aa:	fb01 f303 	mul.w	r3, r1, r3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	2236      	movs	r2, #54	; 0x36
 800a8b2:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	4a0c      	ldr	r2, [pc, #48]	; (800a8e8 <gos_signalCreate+0x78>)
 800a8b8:	212c      	movs	r1, #44	; 0x2c
 800a8ba:	fb01 f303 	mul.w	r3, r1, r3
 800a8be:	4413      	add	r3, r2
 800a8c0:	3328      	adds	r3, #40	; 0x28
 800a8c2:	2249      	movs	r2, #73	; 0x49
 800a8c4:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 800a8c6:	2355      	movs	r3, #85	; 0x55
 800a8c8:	73fb      	strb	r3, [r7, #15]
            break;
 800a8ca:	e005      	b.n	800a8d8 <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	73bb      	strb	r3, [r7, #14]
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
 800a8d4:	2b05      	cmp	r3, #5
 800a8d6:	d9d6      	bls.n	800a886 <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	2000971c 	.word	0x2000971c

0800a8ec <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b0a0      	sub	sp, #128	; 0x80
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	460a      	mov	r2, r1
 800a8f6:	71fb      	strb	r3, [r7, #7]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 800a8fc:	23ae      	movs	r3, #174	; 0xae
 800a8fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 800a902:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a906:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    gos_taskDescriptor_t callerTaskDesc     = {0};
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	226a      	movs	r2, #106	; 0x6a
 800a910:	2100      	movs	r1, #0
 800a912:	4618      	mov	r0, r3
 800a914:	f001 ff6e 	bl	800c7f4 <memset>

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 800a918:	79fb      	ldrb	r3, [r7, #7]
 800a91a:	2b05      	cmp	r3, #5
 800a91c:	d849      	bhi.n	800a9b2 <gos_signalInvoke+0xc6>
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	4a27      	ldr	r2, [pc, #156]	; (800a9c0 <gos_signalInvoke+0xd4>)
 800a922:	212c      	movs	r1, #44	; 0x2c
 800a924:	fb01 f303 	mul.w	r3, r1, r3
 800a928:	4413      	add	r3, r2
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b36      	cmp	r3, #54	; 0x36
 800a92e:	d140      	bne.n	800a9b2 <gos_signalInvoke+0xc6>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800a930:	f7fc fbce 	bl	80070d0 <gos_kernelIsCallerIsr>
 800a934:	4603      	mov	r3, r0
 800a936:	2b36      	cmp	r3, #54	; 0x36
 800a938:	d017      	beq.n	800a96a <gos_signalInvoke+0x7e>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 800a93a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe fab8 	bl	8008eb4 <gos_taskGetCurrentId>
 800a944:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800a946:	2b55      	cmp	r3, #85	; 0x55
 800a948:	d128      	bne.n	800a99c <gos_signalInvoke+0xb0>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 800a94a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800a94e:	f107 0208 	add.w	r2, r7, #8
 800a952:	4611      	mov	r1, r2
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe fb09 	bl	8008f6c <gos_taskGetData>
 800a95a:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 800a95c:	2b55      	cmp	r3, #85	; 0x55
 800a95e:	d11d      	bne.n	800a99c <gos_signalInvoke+0xb0>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 800a960:	8a3b      	ldrh	r3, [r7, #16]
 800a962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 800a966:	2b00      	cmp	r3, #0
 800a968:	d018      	beq.n	800a99c <gos_signalInvoke+0xb0>
            )
        {
            signalArray[signalId].senderId       = senderId;
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	4a14      	ldr	r2, [pc, #80]	; (800a9c0 <gos_signalInvoke+0xd4>)
 800a96e:	212c      	movs	r1, #44	; 0x2c
 800a970:	fb01 f303 	mul.w	r3, r1, r3
 800a974:	4413      	add	r3, r2
 800a976:	332a      	adds	r3, #42	; 0x2a
 800a978:	88ba      	ldrh	r2, [r7, #4]
 800a97a:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	4a10      	ldr	r2, [pc, #64]	; (800a9c0 <gos_signalInvoke+0xd4>)
 800a980:	212c      	movs	r1, #44	; 0x2c
 800a982:	fb01 f303 	mul.w	r3, r1, r3
 800a986:	4413      	add	r3, r2
 800a988:	3328      	adds	r3, #40	; 0x28
 800a98a:	2236      	movs	r2, #54	; 0x36
 800a98c:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 800a98e:	2355      	movs	r3, #85	; 0x55
 800a990:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 800a994:	480b      	ldr	r0, [pc, #44]	; (800a9c4 <gos_signalInvoke+0xd8>)
 800a996:	f000 ffe7 	bl	800b968 <gos_triggerIncrement>
 800a99a:	e00a      	b.n	800a9b2 <gos_signalInvoke+0xc6>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 800a99c:	f107 0308 	add.w	r3, r7, #8
 800a9a0:	330a      	adds	r3, #10
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <gos_signalInvoke+0xdc>)
 800a9a6:	f44f 728a 	mov.w	r2, #276	; 0x114
 800a9aa:	4908      	ldr	r1, [pc, #32]	; (800a9cc <gos_signalInvoke+0xe0>)
 800a9ac:	202e      	movs	r0, #46	; 0x2e
 800a9ae:	f7fe fcf1 	bl	8009394 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 800a9b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3778      	adds	r7, #120	; 0x78
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	2000971c 	.word	0x2000971c
 800a9c4:	20009824 	.word	0x20009824
 800a9c8:	0800fa08 	.word	0x0800fa08
 800a9cc:	0800fc44 	.word	0x0800fc44

0800a9d0 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 800a9d0:	b590      	push	{r4, r7, lr}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800a9de:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	4835      	ldr	r0, [pc, #212]	; (800aabc <gos_signalDaemonTask+0xec>)
 800a9e6:	f000 ff0f 	bl	800b808 <gos_triggerWait>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b55      	cmp	r3, #85	; 0x55
 800a9ee:	d1f6      	bne.n	800a9de <gos_signalDaemonTask+0xe>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 800a9f0:	4832      	ldr	r0, [pc, #200]	; (800aabc <gos_signalDaemonTask+0xec>)
 800a9f2:	f000 feb1 	bl	800b758 <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	71bb      	strb	r3, [r7, #6]
 800a9fa:	e05b      	b.n	800aab4 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 800a9fc:	79bb      	ldrb	r3, [r7, #6]
 800a9fe:	4a30      	ldr	r2, [pc, #192]	; (800aac0 <gos_signalDaemonTask+0xf0>)
 800aa00:	212c      	movs	r1, #44	; 0x2c
 800aa02:	fb01 f303 	mul.w	r3, r1, r3
 800aa06:	4413      	add	r3, r2
 800aa08:	3328      	adds	r3, #40	; 0x28
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2b36      	cmp	r3, #54	; 0x36
 800aa0e:	d14e      	bne.n	800aaae <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800aa10:	2300      	movs	r3, #0
 800aa12:	71fb      	strb	r3, [r7, #7]
 800aa14:	e03d      	b.n	800aa92 <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 800aa16:	79ba      	ldrb	r2, [r7, #6]
 800aa18:	79f9      	ldrb	r1, [r7, #7]
 800aa1a:	4829      	ldr	r0, [pc, #164]	; (800aac0 <gos_signalDaemonTask+0xf0>)
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	4413      	add	r3, r2
 800aa26:	440b      	add	r3, r1
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4403      	add	r3, r0
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d033      	beq.n	800aa9a <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 800aa32:	4b24      	ldr	r3, [pc, #144]	; (800aac4 <gos_signalDaemonTask+0xf4>)
 800aa34:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 800aa36:	79ba      	ldrb	r2, [r7, #6]
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	4921      	ldr	r1, [pc, #132]	; (800aac0 <gos_signalDaemonTask+0xf0>)
 800aa3c:	2416      	movs	r4, #22
 800aa3e:	fb04 f202 	mul.w	r2, r4, r2
 800aa42:	4413      	add	r3, r2
 800aa44:	330c      	adds	r3, #12
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	440b      	add	r3, r1
 800aa4a:	889b      	ldrh	r3, [r3, #4]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f7fe f91b 	bl	8008c88 <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 800aa52:	79ba      	ldrb	r2, [r7, #6]
 800aa54:	79f9      	ldrb	r1, [r7, #7]
 800aa56:	481a      	ldr	r0, [pc, #104]	; (800aac0 <gos_signalDaemonTask+0xf0>)
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	4413      	add	r3, r2
 800aa62:	440b      	add	r3, r1
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4403      	add	r3, r0
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	79ba      	ldrb	r2, [r7, #6]
 800aa6c:	4914      	ldr	r1, [pc, #80]	; (800aac0 <gos_signalDaemonTask+0xf0>)
 800aa6e:	202c      	movs	r0, #44	; 0x2c
 800aa70:	fb00 f202 	mul.w	r2, r0, r2
 800aa74:	440a      	add	r2, r1
 800aa76:	322a      	adds	r2, #42	; 0x2a
 800aa78:	8812      	ldrh	r2, [r2, #0]
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 800aa7e:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <gos_signalDaemonTask+0xf4>)
 800aa80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa82:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe f8fe 	bl	8008c88 <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	71fb      	strb	r3, [r7, #7]
 800aa92:	79fb      	ldrb	r3, [r7, #7]
 800aa94:	2b05      	cmp	r3, #5
 800aa96:	d9be      	bls.n	800aa16 <gos_signalDaemonTask+0x46>
 800aa98:	e000      	b.n	800aa9c <gos_signalDaemonTask+0xcc>
                            break;
 800aa9a:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 800aa9c:	79bb      	ldrb	r3, [r7, #6]
 800aa9e:	4a08      	ldr	r2, [pc, #32]	; (800aac0 <gos_signalDaemonTask+0xf0>)
 800aaa0:	212c      	movs	r1, #44	; 0x2c
 800aaa2:	fb01 f303 	mul.w	r3, r1, r3
 800aaa6:	4413      	add	r3, r2
 800aaa8:	3328      	adds	r3, #40	; 0x28
 800aaaa:	2249      	movs	r2, #73	; 0x49
 800aaac:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800aaae:	79bb      	ldrb	r3, [r7, #6]
 800aab0:	3301      	adds	r3, #1
 800aab2:	71bb      	strb	r3, [r7, #6]
 800aab4:	79bb      	ldrb	r3, [r7, #6]
 800aab6:	2b05      	cmp	r3, #5
 800aab8:	d9a0      	bls.n	800a9fc <gos_signalDaemonTask+0x2c>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800aaba:	e790      	b.n	800a9de <gos_signalDaemonTask+0xe>
 800aabc:	20009824 	.word	0x20009824
 800aac0:	2000971c 	.word	0x2000971c
 800aac4:	20000c7c 	.word	0x20000c7c

0800aac8 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_SUCCESS;
 800aace:	2355      	movs	r3, #85	; 0x55
 800aad0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                                != GOS_SUCCESS ||
 800aad2:	480a      	ldr	r0, [pc, #40]	; (800aafc <gos_timeInit+0x34>)
 800aad4:	f7ff fecc 	bl	800a870 <gos_signalCreate>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b55      	cmp	r3, #85	; 0x55
 800aadc:	d106      	bne.n	800aaec <gos_timeInit+0x24>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) != GOS_SUCCESS
 800aade:	4908      	ldr	r1, [pc, #32]	; (800ab00 <gos_timeInit+0x38>)
 800aae0:	4808      	ldr	r0, [pc, #32]	; (800ab04 <gos_timeInit+0x3c>)
 800aae2:	f7fc fe15 	bl	8007710 <gos_taskRegister>
 800aae6:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                                != GOS_SUCCESS ||
 800aae8:	2b55      	cmp	r3, #85	; 0x55
 800aaea:	d001      	beq.n	800aaf0 <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_ERROR;
 800aaec:	23ae      	movs	r3, #174	; 0xae
 800aaee:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 800aaf0:	79fb      	ldrb	r3, [r7, #7]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	2000983c 	.word	0x2000983c
 800ab00:	2000983a 	.word	0x2000983a
 800ab04:	20000cf4 	.word	0x20000cf4

0800ab08 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 800ab10:	23ae      	movs	r3, #174	; 0xae
 800ab12:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00a      	beq.n	800ab30 <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4908      	ldr	r1, [pc, #32]	; (800ab40 <gos_timeGet+0x38>)
 800ab1e:	461a      	mov	r2, r3
 800ab20:	460b      	mov	r3, r1
 800ab22:	cb03      	ldmia	r3!, {r0, r1}
 800ab24:	6010      	str	r0, [r2, #0]
 800ab26:	6051      	str	r1, [r2, #4]
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 800ab2c:	2355      	movs	r3, #85	; 0x55
 800ab2e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20000ce8 	.word	0x20000ce8

0800ab44 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 800ab4c:	23ae      	movs	r3, #174	; 0xae
 800ab4e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00a      	beq.n	800ab6c <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4908      	ldr	r1, [pc, #32]	; (800ab7c <gos_runTimeGet+0x38>)
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	cb03      	ldmia	r3!, {r0, r1}
 800ab60:	6010      	str	r0, [r2, #0]
 800ab62:	6051      	str	r1, [r2, #4]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 800ab68:	2355      	movs	r3, #85	; 0x55
 800ab6a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	20009830 	.word	0x20009830

0800ab80 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 800ab8c:	23ae      	movs	r3, #174	; 0xae
 800ab8e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f000 80e5 	beq.w	800ad62 <gos_timeAddMilliseconds+0x1e2>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	887b      	ldrh	r3, [r7, #2]
 800aba0:	4413      	add	r3, r2
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	b29b      	uxth	r3, r3
 800abae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abb2:	f0c0 80d4 	bcc.w	800ad5e <gos_timeAddMilliseconds+0x1de>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	789a      	ldrb	r2, [r3, #2]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	496b      	ldr	r1, [pc, #428]	; (800ad70 <gos_timeAddMilliseconds+0x1f0>)
 800abc2:	fba1 1303 	umull	r1, r3, r1, r3
 800abc6:	099b      	lsrs	r3, r3, #6
 800abc8:	b29b      	uxth	r3, r3
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	4413      	add	r3, r2
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	4a65      	ldr	r2, [pc, #404]	; (800ad70 <gos_timeAddMilliseconds+0x1f0>)
 800abdc:	fba2 1203 	umull	r1, r2, r2, r3
 800abe0:	0992      	lsrs	r2, r2, #6
 800abe2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800abe6:	fb01 f202 	mul.w	r2, r1, r2
 800abea:	1a9b      	subs	r3, r3, r2
 800abec:	b29a      	uxth	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	789b      	ldrb	r3, [r3, #2]
 800abf6:	2b3b      	cmp	r3, #59	; 0x3b
 800abf8:	f240 80b1 	bls.w	800ad5e <gos_timeAddMilliseconds+0x1de>
            {
                pTime->minutes += pTime->seconds / 60u;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	78da      	ldrb	r2, [r3, #3]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	789b      	ldrb	r3, [r3, #2]
 800ac04:	495b      	ldr	r1, [pc, #364]	; (800ad74 <gos_timeAddMilliseconds+0x1f4>)
 800ac06:	fba1 1303 	umull	r1, r3, r1, r3
 800ac0a:	095b      	lsrs	r3, r3, #5
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	4413      	add	r3, r2
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	789a      	ldrb	r2, [r3, #2]
 800ac1a:	4b56      	ldr	r3, [pc, #344]	; (800ad74 <gos_timeAddMilliseconds+0x1f4>)
 800ac1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac20:	0959      	lsrs	r1, r3, #5
 800ac22:	460b      	mov	r3, r1
 800ac24:	011b      	lsls	r3, r3, #4
 800ac26:	1a5b      	subs	r3, r3, r1
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	78db      	ldrb	r3, [r3, #3]
 800ac36:	2b3b      	cmp	r3, #59	; 0x3b
 800ac38:	f240 8091 	bls.w	800ad5e <gos_timeAddMilliseconds+0x1de>
                {
                    pTime->hours += pTime->minutes / 60u;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	791a      	ldrb	r2, [r3, #4]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	78db      	ldrb	r3, [r3, #3]
 800ac44:	494b      	ldr	r1, [pc, #300]	; (800ad74 <gos_timeAddMilliseconds+0x1f4>)
 800ac46:	fba1 1303 	umull	r1, r3, r1, r3
 800ac4a:	095b      	lsrs	r3, r3, #5
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	4413      	add	r3, r2
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	78da      	ldrb	r2, [r3, #3]
 800ac5a:	4b46      	ldr	r3, [pc, #280]	; (800ad74 <gos_timeAddMilliseconds+0x1f4>)
 800ac5c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac60:	0959      	lsrs	r1, r3, #5
 800ac62:	460b      	mov	r3, r1
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	1a5b      	subs	r3, r3, r1
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	791b      	ldrb	r3, [r3, #4]
 800ac76:	2b17      	cmp	r3, #23
 800ac78:	d971      	bls.n	800ad5e <gos_timeAddMilliseconds+0x1de>
                    {
                        pTime->days += pTime->hours / 24u;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	791b      	ldrb	r3, [r3, #4]
 800ac86:	493c      	ldr	r1, [pc, #240]	; (800ad78 <gos_timeAddMilliseconds+0x1f8>)
 800ac88:	fba1 1303 	umull	r1, r3, r1, r3
 800ac8c:	091b      	lsrs	r3, r3, #4
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	4413      	add	r3, r2
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	791a      	ldrb	r2, [r3, #4]
 800aca0:	4b35      	ldr	r3, [pc, #212]	; (800ad78 <gos_timeAddMilliseconds+0x1f8>)
 800aca2:	fba3 1302 	umull	r1, r3, r3, r2
 800aca6:	0919      	lsrs	r1, r3, #4
 800aca8:	460b      	mov	r3, r1
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	440b      	add	r3, r1
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	891b      	ldrh	r3, [r3, #8]
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	f003 0303 	and.w	r3, r3, #3
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d117      	bne.n	800acf8 <gos_timeAddMilliseconds+0x178>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	79db      	ldrb	r3, [r3, #7]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d113      	bne.n	800acf8 <gos_timeAddMilliseconds+0x178>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	2b1d      	cmp	r3, #29
 800acda:	d90d      	bls.n	800acf8 <gos_timeAddMilliseconds+0x178>
                        {
                            pTime->days = 1u;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f042 0201 	orr.w	r2, r2, #1
 800ace4:	715a      	strb	r2, [r3, #5]
 800ace6:	2200      	movs	r2, #0
 800ace8:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	79db      	ldrb	r3, [r3, #7]
 800acee:	3301      	adds	r3, #1
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	71da      	strb	r2, [r3, #7]
 800acf6:	e024      	b.n	800ad42 <gos_timeAddMilliseconds+0x1c2>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	891b      	ldrh	r3, [r3, #8]
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	f003 0303 	and.w	r3, r3, #3
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d103      	bne.n	800ad10 <gos_timeAddMilliseconds+0x190>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	79db      	ldrb	r3, [r3, #7]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d018      	beq.n	800ad42 <gos_timeAddMilliseconds+0x1c2>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	79db      	ldrb	r3, [r3, #7]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	4a19      	ldr	r2, [pc, #100]	; (800ad7c <gos_timeAddMilliseconds+0x1fc>)
 800ad18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d20c      	bcs.n	800ad42 <gos_timeAddMilliseconds+0x1c2>
                        {
                            pTime->days = 1u;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f042 0201 	orr.w	r2, r2, #1
 800ad30:	715a      	strb	r2, [r3, #5]
 800ad32:	2200      	movs	r2, #0
 800ad34:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	79db      	ldrb	r3, [r3, #7]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	79db      	ldrb	r3, [r3, #7]
 800ad46:	2b0d      	cmp	r3, #13
 800ad48:	d109      	bne.n	800ad5e <gos_timeAddMilliseconds+0x1de>
                        {
                            pTime->months = 1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	891b      	ldrh	r3, [r3, #8]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	3301      	adds	r3, #1
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 800ad5e:	2355      	movs	r3, #85	; 0x55
 800ad60:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	10624dd3 	.word	0x10624dd3
 800ad74:	88888889 	.word	0x88888889
 800ad78:	aaaaaaab 	.word	0xaaaaaaab
 800ad7c:	0800fc58 	.word	0x0800fc58

0800ad80 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b087      	sub	sp, #28
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 800ad8e:	23ae      	movs	r3, #174	; 0xae
 800ad90:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d063      	beq.n	800ae60 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	88fb      	ldrh	r3, [r7, #6]
 800ada0:	4413      	add	r3, r2
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	b29b      	uxth	r3, r3
 800adae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adb2:	d355      	bcc.n	800ae60 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	885b      	ldrh	r3, [r3, #2]
 800adc8:	b29b      	uxth	r3, r3
 800adca:	3301      	adds	r3, #1
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	885b      	ldrh	r3, [r3, #2]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800addc:	d340      	bcc.n	800ae60 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	885b      	ldrh	r3, [r3, #2]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ade8:	b29a      	uxth	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	791b      	ldrb	r3, [r3, #4]
 800adf2:	3301      	adds	r3, #1
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	791b      	ldrb	r3, [r3, #4]
 800adfe:	2b3b      	cmp	r3, #59	; 0x3b
 800ae00:	d92e      	bls.n	800ae60 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	791b      	ldrb	r3, [r3, #4]
 800ae06:	3b3c      	subs	r3, #60	; 0x3c
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	795b      	ldrb	r3, [r3, #5]
 800ae12:	3301      	adds	r3, #1
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	795b      	ldrb	r3, [r3, #5]
 800ae1e:	2b3b      	cmp	r3, #59	; 0x3b
 800ae20:	d91e      	bls.n	800ae60 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	795b      	ldrb	r3, [r3, #5]
 800ae26:	3b3c      	subs	r3, #60	; 0x3c
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	799b      	ldrb	r3, [r3, #6]
 800ae32:	3301      	adds	r3, #1
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	799b      	ldrb	r3, [r3, #6]
 800ae3e:	2b17      	cmp	r3, #23
 800ae40:	d90e      	bls.n	800ae60 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	799b      	ldrb	r3, [r3, #6]
 800ae46:	3b18      	subs	r3, #24
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	3301      	adds	r3, #1
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d063      	beq.n	800af2e <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	88fb      	ldrh	r3, [r7, #6]
 800ae6e:	4413      	add	r3, r2
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae80:	d355      	bcc.n	800af2e <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	3301      	adds	r3, #1
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	885b      	ldrh	r3, [r3, #2]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeaa:	d340      	bcc.n	800af2e <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	885b      	ldrh	r3, [r3, #2]
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	791b      	ldrb	r3, [r3, #4]
 800aec0:	3301      	adds	r3, #1
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	791b      	ldrb	r3, [r3, #4]
 800aecc:	2b3b      	cmp	r3, #59	; 0x3b
 800aece:	d92e      	bls.n	800af2e <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	791b      	ldrb	r3, [r3, #4]
 800aed4:	3b3c      	subs	r3, #60	; 0x3c
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	795b      	ldrb	r3, [r3, #5]
 800aee0:	3301      	adds	r3, #1
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	795b      	ldrb	r3, [r3, #5]
 800aeec:	2b3b      	cmp	r3, #59	; 0x3b
 800aeee:	d91e      	bls.n	800af2e <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	795b      	ldrb	r3, [r3, #5]
 800aef4:	3b3c      	subs	r3, #60	; 0x3c
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	799b      	ldrb	r3, [r3, #6]
 800af00:	3301      	adds	r3, #1
 800af02:	b2da      	uxtb	r2, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	799b      	ldrb	r3, [r3, #6]
 800af0c:	2b17      	cmp	r3, #23
 800af0e:	d90e      	bls.n	800af2e <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	799b      	ldrb	r3, [r3, #6]
 800af14:	3b18      	subs	r3, #24
 800af16:	b2da      	uxtb	r2, r3
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800af22:	b29b      	uxth	r3, r3
 800af24:	3301      	adds	r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 800af2e:	2355      	movs	r3, #85	; 0x55
 800af30:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 800af32:	7dfb      	ldrb	r3, [r7, #23]
}
 800af34:	4618      	mov	r0, r3
 800af36:	371c      	adds	r7, #28
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 800af4c:	23ae      	movs	r3, #174	; 0xae
 800af4e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 808f 	beq.w	800b076 <gos_runTimeAddMilliseconds+0x136>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	885b      	ldrh	r3, [r3, #2]
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	887b      	ldrh	r3, [r7, #2]
 800af60:	4413      	add	r3, r2
 800af62:	b29a      	uxth	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	885b      	ldrh	r3, [r3, #2]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af72:	d37e      	bcc.n	800b072 <gos_runTimeAddMilliseconds+0x132>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	791a      	ldrb	r2, [r3, #4]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	885b      	ldrh	r3, [r3, #2]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	4941      	ldr	r1, [pc, #260]	; (800b084 <gos_runTimeAddMilliseconds+0x144>)
 800af80:	fba1 1303 	umull	r1, r3, r1, r3
 800af84:	099b      	lsrs	r3, r3, #6
 800af86:	b29b      	uxth	r3, r3
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	4413      	add	r3, r2
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	885b      	ldrh	r3, [r3, #2]
 800af96:	b29b      	uxth	r3, r3
 800af98:	4a3a      	ldr	r2, [pc, #232]	; (800b084 <gos_runTimeAddMilliseconds+0x144>)
 800af9a:	fba2 1203 	umull	r1, r2, r2, r3
 800af9e:	0992      	lsrs	r2, r2, #6
 800afa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800afa4:	fb01 f202 	mul.w	r2, r1, r2
 800afa8:	1a9b      	subs	r3, r3, r2
 800afaa:	b29a      	uxth	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	791b      	ldrb	r3, [r3, #4]
 800afb4:	2b3b      	cmp	r3, #59	; 0x3b
 800afb6:	d95c      	bls.n	800b072 <gos_runTimeAddMilliseconds+0x132>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	795a      	ldrb	r2, [r3, #5]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	791b      	ldrb	r3, [r3, #4]
 800afc0:	4931      	ldr	r1, [pc, #196]	; (800b088 <gos_runTimeAddMilliseconds+0x148>)
 800afc2:	fba1 1303 	umull	r1, r3, r1, r3
 800afc6:	095b      	lsrs	r3, r3, #5
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	4413      	add	r3, r2
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	791a      	ldrb	r2, [r3, #4]
 800afd6:	4b2c      	ldr	r3, [pc, #176]	; (800b088 <gos_runTimeAddMilliseconds+0x148>)
 800afd8:	fba3 1302 	umull	r1, r3, r3, r2
 800afdc:	0959      	lsrs	r1, r3, #5
 800afde:	460b      	mov	r3, r1
 800afe0:	011b      	lsls	r3, r3, #4
 800afe2:	1a5b      	subs	r3, r3, r1
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	795b      	ldrb	r3, [r3, #5]
 800aff2:	2b3b      	cmp	r3, #59	; 0x3b
 800aff4:	d93d      	bls.n	800b072 <gos_runTimeAddMilliseconds+0x132>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	799a      	ldrb	r2, [r3, #6]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	795b      	ldrb	r3, [r3, #5]
 800affe:	4922      	ldr	r1, [pc, #136]	; (800b088 <gos_runTimeAddMilliseconds+0x148>)
 800b000:	fba1 1303 	umull	r1, r3, r1, r3
 800b004:	095b      	lsrs	r3, r3, #5
 800b006:	b2db      	uxtb	r3, r3
 800b008:	4413      	add	r3, r2
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	795a      	ldrb	r2, [r3, #5]
 800b014:	4b1c      	ldr	r3, [pc, #112]	; (800b088 <gos_runTimeAddMilliseconds+0x148>)
 800b016:	fba3 1302 	umull	r1, r3, r3, r2
 800b01a:	0959      	lsrs	r1, r3, #5
 800b01c:	460b      	mov	r3, r1
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	1a5b      	subs	r3, r3, r1
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	b2da      	uxtb	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	799b      	ldrb	r3, [r3, #6]
 800b030:	2b17      	cmp	r3, #23
 800b032:	d91e      	bls.n	800b072 <gos_runTimeAddMilliseconds+0x132>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	799b      	ldrb	r3, [r3, #6]
 800b040:	4912      	ldr	r1, [pc, #72]	; (800b08c <gos_runTimeAddMilliseconds+0x14c>)
 800b042:	fba1 1303 	umull	r1, r3, r1, r3
 800b046:	091b      	lsrs	r3, r3, #4
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4413      	add	r3, r2
 800b04e:	b29a      	uxth	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	799a      	ldrb	r2, [r3, #6]
 800b05a:	4b0c      	ldr	r3, [pc, #48]	; (800b08c <gos_runTimeAddMilliseconds+0x14c>)
 800b05c:	fba3 1302 	umull	r1, r3, r3, r2
 800b060:	0919      	lsrs	r1, r3, #4
 800b062:	460b      	mov	r3, r1
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	440b      	add	r3, r1
 800b068:	00db      	lsls	r3, r3, #3
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 800b072:	2355      	movs	r3, #85	; 0x55
 800b074:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	10624dd3 	.word	0x10624dd3
 800b088:	88888889 	.word	0x88888889
 800b08c:	aaaaaaab 	.word	0xaaaaaaab

0800b090 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 800b09a:	23ae      	movs	r3, #174	; 0xae
 800b09c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 800b09e:	88fb      	ldrh	r3, [r7, #6]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	480a      	ldr	r0, [pc, #40]	; (800b0cc <gos_timeIncreaseSystemTime+0x3c>)
 800b0a4:	f7ff ff4c 	bl	800af40 <gos_runTimeAddMilliseconds>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b55      	cmp	r3, #85	; 0x55
 800b0ac:	d109      	bne.n	800b0c2 <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 800b0ae:	88fb      	ldrh	r3, [r7, #6]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4807      	ldr	r0, [pc, #28]	; (800b0d0 <gos_timeIncreaseSystemTime+0x40>)
 800b0b4:	f7ff fd64 	bl	800ab80 <gos_timeAddMilliseconds>
 800b0b8:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 800b0ba:	2b55      	cmp	r3, #85	; 0x55
 800b0bc:	d101      	bne.n	800b0c2 <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 800b0be:	2355      	movs	r3, #85	; 0x55
 800b0c0:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	20009830 	.word	0x20009830
 800b0d0:	20000ce8 	.word	0x20000ce8

0800b0d4 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 800b0da:	1d3b      	adds	r3, r7, #4
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	605a      	str	r2, [r3, #4]
 800b0e2:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 800b0e4:	4b27      	ldr	r3, [pc, #156]	; (800b184 <gos_timeDaemonTask+0xb0>)
 800b0e6:	789a      	ldrb	r2, [r3, #2]
 800b0e8:	79bb      	ldrb	r3, [r7, #6]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d905      	bls.n	800b0fa <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 800b0ee:	4b26      	ldr	r3, [pc, #152]	; (800b188 <gos_timeDaemonTask+0xb4>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff fbf9 	bl	800a8ec <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 800b0fa:	4b22      	ldr	r3, [pc, #136]	; (800b184 <gos_timeDaemonTask+0xb0>)
 800b0fc:	78da      	ldrb	r2, [r3, #3]
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	429a      	cmp	r2, r3
 800b102:	d905      	bls.n	800b110 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 800b104:	4b20      	ldr	r3, [pc, #128]	; (800b188 <gos_timeDaemonTask+0xb4>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2101      	movs	r1, #1
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7ff fbee 	bl	800a8ec <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 800b110:	4b1c      	ldr	r3, [pc, #112]	; (800b184 <gos_timeDaemonTask+0xb0>)
 800b112:	791a      	ldrb	r2, [r3, #4]
 800b114:	7a3b      	ldrb	r3, [r7, #8]
 800b116:	429a      	cmp	r2, r3
 800b118:	d905      	bls.n	800b126 <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 800b11a:	4b1b      	ldr	r3, [pc, #108]	; (800b188 <gos_timeDaemonTask+0xb4>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2102      	movs	r1, #2
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff fbe3 	bl	800a8ec <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 800b126:	4b17      	ldr	r3, [pc, #92]	; (800b184 <gos_timeDaemonTask+0xb0>)
 800b128:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800b132:	b29b      	uxth	r3, r3
 800b134:	429a      	cmp	r2, r3
 800b136:	d905      	bls.n	800b144 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 800b138:	4b13      	ldr	r3, [pc, #76]	; (800b188 <gos_timeDaemonTask+0xb4>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2103      	movs	r1, #3
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff fbd4 	bl	800a8ec <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 800b144:	4b0f      	ldr	r3, [pc, #60]	; (800b184 <gos_timeDaemonTask+0xb0>)
 800b146:	79da      	ldrb	r2, [r3, #7]
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d905      	bls.n	800b15a <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 800b14e:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <gos_timeDaemonTask+0xb4>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	2104      	movs	r1, #4
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fbc9 	bl	800a8ec <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 800b15a:	4b0a      	ldr	r3, [pc, #40]	; (800b184 <gos_timeDaemonTask+0xb0>)
 800b15c:	891a      	ldrh	r2, [r3, #8]
 800b15e:	89bb      	ldrh	r3, [r7, #12]
 800b160:	429a      	cmp	r2, r3
 800b162:	d905      	bls.n	800b170 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 800b164:	4b08      	ldr	r3, [pc, #32]	; (800b188 <gos_timeDaemonTask+0xb4>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2105      	movs	r1, #5
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff fbbe 	bl	800a8ec <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 800b170:	1d3b      	adds	r3, r7, #4
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff fcc8 	bl	800ab08 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 800b178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b17c:	f7fc fc5a 	bl	8007a34 <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 800b180:	e7b0      	b.n	800b0e4 <gos_timeDaemonTask+0x10>
 800b182:	bf00      	nop
 800b184:	20000ce8 	.word	0x20000ce8
 800b188:	2000983c 	.word	0x2000983c

0800b18c <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_SUCCESS;
 800b192:	2355      	movs	r3, #85	; 0x55
 800b194:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 800b196:	480d      	ldr	r0, [pc, #52]	; (800b1cc <gos_traceInit+0x40>)
 800b198:	f7fe fd2a 	bl	8009bf0 <gos_queueCreate>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b55      	cmp	r3, #85	; 0x55
 800b1a0:	d10c      	bne.n	800b1bc <gos_traceInit+0x30>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	480a      	ldr	r0, [pc, #40]	; (800b1d0 <gos_traceInit+0x44>)
 800b1a6:	f7fc fab3 	bl	8007710 <gos_taskRegister>
 800b1aa:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 800b1ac:	2b55      	cmp	r3, #85	; 0x55
 800b1ae:	d105      	bne.n	800b1bc <gos_traceInit+0x30>
        gos_mutexInit(&traceMutex) != GOS_SUCCESS
 800b1b0:	4808      	ldr	r0, [pc, #32]	; (800b1d4 <gos_traceInit+0x48>)
 800b1b2:	f7fe fb3f 	bl	8009834 <gos_mutexInit>
 800b1b6:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 800b1b8:	2b55      	cmp	r3, #85	; 0x55
 800b1ba:	d001      	beq.n	800b1c0 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_ERROR;
 800b1bc:	23ae      	movs	r3, #174	; 0xae
 800b1be:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20000d60 	.word	0x20000d60
 800b1d0:	20000d7c 	.word	0x20000d7c
 800b1d4:	200099fc 	.word	0x200099fc

0800b1d8 <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 800b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1da:	b0a9      	sub	sp, #164	; 0xa4
 800b1dc:	af06      	add	r7, sp, #24
 800b1de:	4603      	mov	r3, r0
 800b1e0:	6039      	str	r1, [r7, #0]
 800b1e2:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 800b1e4:	23ae      	movs	r3, #174	; 0xae
 800b1e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800b1ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ee:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    gos_taskDescriptor_t     callerTaskDesc = {0};
 800b1f2:	f107 0318 	add.w	r3, r7, #24
 800b1f6:	226a      	movs	r2, #106	; 0x6a
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f001 fafa 	bl	800c7f4 <memset>
    gos_time_t               sysTime        = {0};
 800b200:	f107 030c 	add.w	r3, r7, #12
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	605a      	str	r2, [r3, #4]
 800b20a:	811a      	strh	r2, [r3, #8]
    gos_taskPrivilegeLevel_t privileges     = 0u;
 800b20c:	2300      	movs	r3, #0
 800b20e:	817b      	strh	r3, [r7, #10]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 80e6 	beq.w	800b3e4 <gos_traceTrace+0x20c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800b218:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fd fe49 	bl	8008eb4 <gos_taskGetCurrentId>
 800b222:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 800b224:	2b55      	cmp	r3, #85	; 0x55
 800b226:	f040 80dd 	bne.w	800b3e4 <gos_traceTrace+0x20c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800b22a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b22e:	f107 0218 	add.w	r2, r7, #24
 800b232:	4611      	mov	r1, r2
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd fe99 	bl	8008f6c <gos_taskGetData>
 800b23a:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800b23c:	2b55      	cmp	r3, #85	; 0x55
 800b23e:	f040 80d1 	bne.w	800b3e4 <gos_traceTrace+0x20c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800b242:	8c3b      	ldrh	r3, [r7, #32]
 800b244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d105      	bne.n	800b258 <gos_traceTrace+0x80>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800b24c:	f7fb ff40 	bl	80070d0 <gos_kernelIsCallerIsr>
 800b250:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800b252:	2b36      	cmp	r3, #54	; 0x36
 800b254:	f040 80c6 	bne.w	800b3e4 <gos_traceTrace+0x20c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800b258:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b25c:	4864      	ldr	r0, [pc, #400]	; (800b3f0 <gos_traceTrace+0x218>)
 800b25e:	f7fe fb03 	bl	8009868 <gos_mutexLock>
 800b262:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800b264:	2b55      	cmp	r3, #85	; 0x55
 800b266:	f040 80bd 	bne.w	800b3e4 <gos_traceTrace+0x20c>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 800b26a:	2355      	movs	r3, #85	; 0x55
 800b26c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        if (addTimeStamp == GOS_TRUE)
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	2b36      	cmp	r3, #54	; 0x36
 800b274:	d137      	bne.n	800b2e6 <gos_traceTrace+0x10e>
        {
            traceResult &= gos_timeGet(&sysTime);
 800b276:	f107 030c 	add.w	r3, r7, #12
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff fc44 	bl	800ab08 <gos_timeGet>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b288:	4013      	ands	r3, r2
 800b28a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 800b28e:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b290:	461d      	mov	r5, r3
                    sysTime.months,
 800b292:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b294:	461e      	mov	r6, r3
                    sysTime.days,
 800b296:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800b29a:	b29b      	uxth	r3, r3
                    sysTime.hours,
 800b29c:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 800b29e:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 800b2a0:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 800b2a2:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b2a4:	9404      	str	r4, [sp, #16]
 800b2a6:	9003      	str	r0, [sp, #12]
 800b2a8:	9102      	str	r1, [sp, #8]
 800b2aa:	9201      	str	r2, [sp, #4]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	4633      	mov	r3, r6
 800b2b0:	462a      	mov	r2, r5
 800b2b2:	4950      	ldr	r1, [pc, #320]	; (800b3f4 <gos_traceTrace+0x21c>)
 800b2b4:	4850      	ldr	r0, [pc, #320]	; (800b3f8 <gos_traceTrace+0x220>)
 800b2b6:	f001 fa19 	bl	800c6ec <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 800b2ba:	4b50      	ldr	r3, [pc, #320]	; (800b3fc <gos_traceTrace+0x224>)
 800b2bc:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 800b2be:	484e      	ldr	r0, [pc, #312]	; (800b3f8 <gos_traceTrace+0x220>)
 800b2c0:	f7f5 f806 	bl	80002d0 <strlen>
 800b2c4:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b2d0:	4949      	ldr	r1, [pc, #292]	; (800b3f8 <gos_traceTrace+0x220>)
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7fe fce8 	bl	8009ca8 <gos_queuePut>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        traceResult &= gos_queuePut(
 800b2e6:	4b45      	ldr	r3, [pc, #276]	; (800b3fc <gos_traceTrace+0x224>)
 800b2e8:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
 800b2ea:	6838      	ldr	r0, [r7, #0]
 800b2ec:	f7f4 fff0 	bl	80002d0 <strlen>
 800b2f0:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7fe fcd2 	bl	8009ca8 <gos_queuePut>
 800b304:	4603      	mov	r3, r0
 800b306:	461a      	mov	r2, r3
 800b308:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b30c:	4013      	ands	r3, r2
 800b30e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 800b312:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b316:	2b55      	cmp	r3, #85	; 0x55
 800b318:	d002      	beq.n	800b320 <gos_traceTrace+0x148>
        {
            traceResult = GOS_ERROR;
 800b31a:	23ae      	movs	r3, #174	; 0xae
 800b31c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 800b320:	4b37      	ldr	r3, [pc, #220]	; (800b400 <gos_traceTrace+0x228>)
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d108      	bne.n	800b33a <gos_traceTrace+0x162>
 800b328:	b672      	cpsid	i
 800b32a:	f3ef 8310 	mrs	r3, PRIMASK
 800b32e:	4a35      	ldr	r2, [pc, #212]	; (800b404 <gos_traceTrace+0x22c>)
 800b330:	6013      	str	r3, [r2, #0]
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	4b31      	ldr	r3, [pc, #196]	; (800b400 <gos_traceTrace+0x228>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	3301      	adds	r3, #1
 800b340:	b2da      	uxtb	r2, r3
 800b342:	4b2f      	ldr	r3, [pc, #188]	; (800b400 <gos_traceTrace+0x228>)
 800b344:	701a      	strb	r2, [r3, #0]
 800b346:	4b30      	ldr	r3, [pc, #192]	; (800b408 <gos_traceTrace+0x230>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	3301      	adds	r3, #1
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	4b2e      	ldr	r3, [pc, #184]	; (800b408 <gos_traceTrace+0x230>)
 800b350:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 800b352:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b356:	f107 020a 	add.w	r2, r7, #10
 800b35a:	4611      	mov	r1, r2
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fd fd01 	bl	8008d64 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800b362:	897b      	ldrh	r3, [r7, #10]
 800b364:	b21b      	sxth	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	db13      	blt.n	800b392 <gos_traceTrace+0x1ba>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800b36a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b36e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b372:	4618      	mov	r0, r3
 800b374:	f7fd fb92 	bl	8008a9c <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800b378:	4b24      	ldr	r3, [pc, #144]	; (800b40c <gos_traceTrace+0x234>)
 800b37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fc fdc7 	bl	8007f10 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800b382:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fd fbfe 	bl	8008b8c <gos_taskRemovePrivilege>
 800b390:	e004      	b.n	800b39c <gos_traceTrace+0x1c4>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800b392:	4b1e      	ldr	r3, [pc, #120]	; (800b40c <gos_traceTrace+0x234>)
 800b394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b396:	4618      	mov	r0, r3
 800b398:	f7fc fdba 	bl	8007f10 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 800b39c:	4b18      	ldr	r3, [pc, #96]	; (800b400 <gos_traceTrace+0x228>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d005      	beq.n	800b3b0 <gos_traceTrace+0x1d8>
 800b3a4:	4b16      	ldr	r3, [pc, #88]	; (800b400 <gos_traceTrace+0x228>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	4b14      	ldr	r3, [pc, #80]	; (800b400 <gos_traceTrace+0x228>)
 800b3ae:	701a      	strb	r2, [r3, #0]
 800b3b0:	4b13      	ldr	r3, [pc, #76]	; (800b400 <gos_traceTrace+0x228>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d108      	bne.n	800b3ca <gos_traceTrace+0x1f2>
 800b3b8:	4b12      	ldr	r3, [pc, #72]	; (800b404 <gos_traceTrace+0x22c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f383 8810 	msr	PRIMASK, r3
 800b3c0:	b662      	cpsie	i
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	4b0f      	ldr	r3, [pc, #60]	; (800b408 <gos_traceTrace+0x230>)
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d005      	beq.n	800b3de <gos_traceTrace+0x206>
 800b3d2:	4b0d      	ldr	r3, [pc, #52]	; (800b408 <gos_traceTrace+0x230>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <gos_traceTrace+0x230>)
 800b3dc:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 800b3de:	4804      	ldr	r0, [pc, #16]	; (800b3f0 <gos_traceTrace+0x218>)
 800b3e0:	f7fe fb48 	bl	8009a74 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800b3e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	378c      	adds	r7, #140	; 0x8c
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3f0:	200099fc 	.word	0x200099fc
 800b3f4:	0800fa34 	.word	0x0800fa34
 800b3f8:	200099d0 	.word	0x200099d0
 800b3fc:	20000d60 	.word	0x20000d60
 800b400:	2000129f 	.word	0x2000129f
 800b404:	200012a0 	.word	0x200012a0
 800b408:	2000129d 	.word	0x2000129d
 800b40c:	20000d7c 	.word	0x20000d7c

0800b410 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 800b410:	b40e      	push	{r1, r2, r3}
 800b412:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b414:	b0aa      	sub	sp, #168	; 0xa8
 800b416:	af06      	add	r7, sp, #24
 800b418:	4603      	mov	r3, r0
 800b41a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 800b41c:	2355      	movs	r3, #85	; 0x55
 800b41e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800b422:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b426:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 800b42a:	f107 0320 	add.w	r3, r7, #32
 800b42e:	226a      	movs	r2, #106	; 0x6a
 800b430:	2100      	movs	r1, #0
 800b432:	4618      	mov	r0, r3
 800b434:	f001 f9de 	bl	800c7f4 <memset>
    gos_time_t               sysTime        = {0};
 800b438:	f107 0314 	add.w	r3, r7, #20
 800b43c:	2200      	movs	r2, #0
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	605a      	str	r2, [r3, #4]
 800b442:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 800b444:	2300      	movs	r3, #0
 800b446:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 800b448:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 80ed 	beq.w	800b62c <gos_traceTraceFormatted+0x21c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800b452:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b456:	4618      	mov	r0, r3
 800b458:	f7fd fd2c 	bl	8008eb4 <gos_taskGetCurrentId>
 800b45c:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 800b45e:	2b55      	cmp	r3, #85	; 0x55
 800b460:	f040 80e4 	bne.w	800b62c <gos_traceTraceFormatted+0x21c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800b464:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b468:	f107 0220 	add.w	r2, r7, #32
 800b46c:	4611      	mov	r1, r2
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd fd7c 	bl	8008f6c <gos_taskGetData>
 800b474:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800b476:	2b55      	cmp	r3, #85	; 0x55
 800b478:	f040 80d8 	bne.w	800b62c <gos_traceTraceFormatted+0x21c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800b47c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b47e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800b482:	2b00      	cmp	r3, #0
 800b484:	d105      	bne.n	800b492 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800b486:	f7fb fe23 	bl	80070d0 <gos_kernelIsCallerIsr>
 800b48a:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800b48c:	2b36      	cmp	r3, #54	; 0x36
 800b48e:	f040 80cd 	bne.w	800b62c <gos_traceTraceFormatted+0x21c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800b492:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b496:	486b      	ldr	r0, [pc, #428]	; (800b644 <gos_traceTraceFormatted+0x234>)
 800b498:	f7fe f9e6 	bl	8009868 <gos_mutexLock>
 800b49c:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800b49e:	2b55      	cmp	r3, #85	; 0x55
 800b4a0:	f040 80c4 	bne.w	800b62c <gos_traceTraceFormatted+0x21c>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	2b36      	cmp	r3, #54	; 0x36
 800b4a8:	d137      	bne.n	800b51a <gos_traceTraceFormatted+0x10a>
        {
            traceResult &= gos_timeGet(&sysTime);
 800b4aa:	f107 0314 	add.w	r3, r7, #20
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff fb2a 	bl	800ab08 <gos_timeGet>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b4bc:	4013      	ands	r3, r2
 800b4be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 800b4c2:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b4c4:	461d      	mov	r5, r3
                    sysTime.months,
 800b4c6:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b4c8:	461e      	mov	r6, r3
                    sysTime.days,
 800b4ca:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800b4ce:	b29b      	uxth	r3, r3
                    sysTime.hours,
 800b4d0:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 800b4d2:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 800b4d4:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 800b4d6:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b4d8:	9404      	str	r4, [sp, #16]
 800b4da:	9003      	str	r0, [sp, #12]
 800b4dc:	9102      	str	r1, [sp, #8]
 800b4de:	9201      	str	r2, [sp, #4]
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	4633      	mov	r3, r6
 800b4e4:	462a      	mov	r2, r5
 800b4e6:	4958      	ldr	r1, [pc, #352]	; (800b648 <gos_traceTraceFormatted+0x238>)
 800b4e8:	4858      	ldr	r0, [pc, #352]	; (800b64c <gos_traceTraceFormatted+0x23c>)
 800b4ea:	f001 f8ff 	bl	800c6ec <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 800b4ee:	4b58      	ldr	r3, [pc, #352]	; (800b650 <gos_traceTraceFormatted+0x240>)
 800b4f0:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 800b4f2:	4856      	ldr	r0, [pc, #344]	; (800b64c <gos_traceTraceFormatted+0x23c>)
 800b4f4:	f7f4 feec 	bl	80002d0 <strlen>
 800b4f8:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b504:	4951      	ldr	r1, [pc, #324]	; (800b64c <gos_traceTraceFormatted+0x23c>)
 800b506:	4620      	mov	r0, r4
 800b508:	f7fe fbce 	bl	8009ca8 <gos_queuePut>
 800b50c:	4603      	mov	r3, r0
 800b50e:	461a      	mov	r2, r3
 800b510:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b514:	4013      	ands	r3, r2
 800b516:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 800b51a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800b51e:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b526:	484b      	ldr	r0, [pc, #300]	; (800b654 <gos_traceTraceFormatted+0x244>)
 800b528:	f001 f95a 	bl	800c7e0 <vsiprintf>
        va_end(args);
        traceResult &= gos_queuePut(
 800b52c:	4b48      	ldr	r3, [pc, #288]	; (800b650 <gos_traceTraceFormatted+0x240>)
 800b52e:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
 800b530:	4848      	ldr	r0, [pc, #288]	; (800b654 <gos_traceTraceFormatted+0x244>)
 800b532:	f7f4 fecd 	bl	80002d0 <strlen>
 800b536:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	3301      	adds	r3, #1
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b542:	4944      	ldr	r1, [pc, #272]	; (800b654 <gos_traceTraceFormatted+0x244>)
 800b544:	4620      	mov	r0, r4
 800b546:	f7fe fbaf 	bl	8009ca8 <gos_queuePut>
 800b54a:	4603      	mov	r3, r0
 800b54c:	461a      	mov	r2, r3
 800b54e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b552:	4013      	ands	r3, r2
 800b554:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 800b558:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b55c:	2b55      	cmp	r3, #85	; 0x55
 800b55e:	d002      	beq.n	800b566 <gos_traceTraceFormatted+0x156>
        {
            traceResult = GOS_ERROR;
 800b560:	23ae      	movs	r3, #174	; 0xae
 800b562:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 800b566:	4b3c      	ldr	r3, [pc, #240]	; (800b658 <gos_traceTraceFormatted+0x248>)
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d108      	bne.n	800b580 <gos_traceTraceFormatted+0x170>
 800b56e:	b672      	cpsid	i
 800b570:	f3ef 8310 	mrs	r3, PRIMASK
 800b574:	4a39      	ldr	r2, [pc, #228]	; (800b65c <gos_traceTraceFormatted+0x24c>)
 800b576:	6013      	str	r3, [r2, #0]
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	4b35      	ldr	r3, [pc, #212]	; (800b658 <gos_traceTraceFormatted+0x248>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	b2da      	uxtb	r2, r3
 800b588:	4b33      	ldr	r3, [pc, #204]	; (800b658 <gos_traceTraceFormatted+0x248>)
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	4b34      	ldr	r3, [pc, #208]	; (800b660 <gos_traceTraceFormatted+0x250>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	3301      	adds	r3, #1
 800b592:	b2da      	uxtb	r2, r3
 800b594:	4b32      	ldr	r3, [pc, #200]	; (800b660 <gos_traceTraceFormatted+0x250>)
 800b596:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 800b598:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b59c:	f107 020e 	add.w	r2, r7, #14
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fd fbde 	bl	8008d64 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800b5a8:	89fb      	ldrh	r3, [r7, #14]
 800b5aa:	b21b      	sxth	r3, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	db13      	blt.n	800b5d8 <gos_traceTraceFormatted+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800b5b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b5b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fd fa6f 	bl	8008a9c <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800b5be:	4b29      	ldr	r3, [pc, #164]	; (800b664 <gos_traceTraceFormatted+0x254>)
 800b5c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fc fca4 	bl	8007f10 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800b5c8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b5cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fd fadb 	bl	8008b8c <gos_taskRemovePrivilege>
 800b5d6:	e004      	b.n	800b5e2 <gos_traceTraceFormatted+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800b5d8:	4b22      	ldr	r3, [pc, #136]	; (800b664 <gos_traceTraceFormatted+0x254>)
 800b5da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fc fc97 	bl	8007f10 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 800b5e2:	4b1d      	ldr	r3, [pc, #116]	; (800b658 <gos_traceTraceFormatted+0x248>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d005      	beq.n	800b5f6 <gos_traceTraceFormatted+0x1e6>
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	; (800b658 <gos_traceTraceFormatted+0x248>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	4b19      	ldr	r3, [pc, #100]	; (800b658 <gos_traceTraceFormatted+0x248>)
 800b5f4:	701a      	strb	r2, [r3, #0]
 800b5f6:	4b18      	ldr	r3, [pc, #96]	; (800b658 <gos_traceTraceFormatted+0x248>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d108      	bne.n	800b610 <gos_traceTraceFormatted+0x200>
 800b5fe:	4b17      	ldr	r3, [pc, #92]	; (800b65c <gos_traceTraceFormatted+0x24c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f383 8810 	msr	PRIMASK, r3
 800b606:	b662      	cpsie	i
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	4b13      	ldr	r3, [pc, #76]	; (800b660 <gos_traceTraceFormatted+0x250>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d005      	beq.n	800b624 <gos_traceTraceFormatted+0x214>
 800b618:	4b11      	ldr	r3, [pc, #68]	; (800b660 <gos_traceTraceFormatted+0x250>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	4b0f      	ldr	r3, [pc, #60]	; (800b660 <gos_traceTraceFormatted+0x250>)
 800b622:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 800b624:	4807      	ldr	r0, [pc, #28]	; (800b644 <gos_traceTraceFormatted+0x234>)
 800b626:	f7fe fa25 	bl	8009a74 <gos_mutexUnlock>
 800b62a:	e002      	b.n	800b632 <gos_traceTraceFormatted+0x222>
    }
    else
    {
        traceResult = GOS_ERROR;
 800b62c:	23ae      	movs	r3, #174	; 0xae
 800b62e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return traceResult;
 800b632:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800b636:	4618      	mov	r0, r3
 800b638:	3790      	adds	r7, #144	; 0x90
 800b63a:	46bd      	mov	sp, r7
 800b63c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b640:	b003      	add	sp, #12
 800b642:	4770      	bx	lr
 800b644:	200099fc 	.word	0x200099fc
 800b648:	0800fa34 	.word	0x0800fa34
 800b64c:	200099d0 	.word	0x200099d0
 800b650:	20000d60 	.word	0x20000d60
 800b654:	20009908 	.word	0x20009908
 800b658:	2000129f 	.word	0x2000129f
 800b65c:	200012a0 	.word	0x200012a0
 800b660:	2000129d 	.word	0x2000129d
 800b664:	20000d7c 	.word	0x20000d7c

0800b668 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 800b668:	b40f      	push	{r0, r1, r2, r3}
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 800b670:	23ae      	movs	r3, #174	; 0xae
 800b672:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01c      	beq.n	800b6b4 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 800b67a:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	3301      	adds	r3, #1
 800b680:	b2da      	uxtb	r2, r3
 800b682:	4b10      	ldr	r3, [pc, #64]	; (800b6c4 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b684:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 800b686:	f107 0314 	add.w	r3, r7, #20
 800b68a:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	6939      	ldr	r1, [r7, #16]
 800b690:	480d      	ldr	r0, [pc, #52]	; (800b6c8 <gos_traceTraceFormattedUnsafe+0x60>)
 800b692:	f001 f8a5 	bl	800c7e0 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 800b696:	480c      	ldr	r0, [pc, #48]	; (800b6c8 <gos_traceTraceFormattedUnsafe+0x60>)
 800b698:	f000 fa5c 	bl	800bb54 <gos_traceDriverTransmitString_Unsafe>
 800b69c:	4603      	mov	r3, r0
 800b69e:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 800b6a0:	4b08      	ldr	r3, [pc, #32]	; (800b6c4 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d005      	beq.n	800b6b4 <gos_traceTraceFormattedUnsafe+0x4c>
 800b6a8:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b6b2:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800b6b4:	79fb      	ldrb	r3, [r7, #7]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6c0:	b004      	add	sp, #16
 800b6c2:	4770      	bx	lr
 800b6c4:	2000129d 	.word	0x2000129d
 800b6c8:	20009908 	.word	0x20009908

0800b6cc <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 800b6d0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b6d4:	480e      	ldr	r0, [pc, #56]	; (800b710 <gos_traceDaemonTask+0x44>)
 800b6d6:	f7fe f8c7 	bl	8009868 <gos_mutexLock>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b55      	cmp	r3, #85	; 0x55
 800b6de:	d10e      	bne.n	800b6fe <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 800b6e0:	e002      	b.n	800b6e8 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 800b6e2:	480c      	ldr	r0, [pc, #48]	; (800b714 <gos_traceDaemonTask+0x48>)
 800b6e4:	f000 fa1e 	bl	800bb24 <gos_traceDriverTransmitString>
            while (gos_queueGet(
 800b6e8:	4b0b      	ldr	r3, [pc, #44]	; (800b718 <gos_traceDaemonTask+0x4c>)
 800b6ea:	8818      	ldrh	r0, [r3, #0]
 800b6ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b6f0:	22c8      	movs	r2, #200	; 0xc8
 800b6f2:	4908      	ldr	r1, [pc, #32]	; (800b714 <gos_traceDaemonTask+0x48>)
 800b6f4:	f7fe fba6 	bl	8009e44 <gos_queueGet>
 800b6f8:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 800b6fa:	2b55      	cmp	r3, #85	; 0x55
 800b6fc:	d0f1      	beq.n	800b6e2 <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 800b6fe:	4804      	ldr	r0, [pc, #16]	; (800b710 <gos_traceDaemonTask+0x44>)
 800b700:	f7fe f9b8 	bl	8009a74 <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 800b704:	4b05      	ldr	r3, [pc, #20]	; (800b71c <gos_traceDaemonTask+0x50>)
 800b706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fc fadf 	bl	8007ccc <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 800b70e:	e7df      	b.n	800b6d0 <gos_traceDaemonTask+0x4>
 800b710:	200099fc 	.word	0x200099fc
 800b714:	20009840 	.word	0x20009840
 800b718:	20000d60 	.word	0x20000d60
 800b71c:	20000d7c 	.word	0x20000d7c

0800b720 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 800b728:	23ae      	movs	r3, #174	; 0xae
 800b72a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00b      	beq.n	800b74a <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b744:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 800b746:	2355      	movs	r3, #85	; 0x55
 800b748:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 800b760:	23ae      	movs	r3, #174	; 0xae
 800b762:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d041      	beq.n	800b7ee <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 800b76a:	4b24      	ldr	r3, [pc, #144]	; (800b7fc <gos_triggerReset+0xa4>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d108      	bne.n	800b784 <gos_triggerReset+0x2c>
 800b772:	b672      	cpsid	i
 800b774:	f3ef 8310 	mrs	r3, PRIMASK
 800b778:	4a21      	ldr	r2, [pc, #132]	; (800b800 <gos_triggerReset+0xa8>)
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	4b1d      	ldr	r3, [pc, #116]	; (800b7fc <gos_triggerReset+0xa4>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <gos_triggerReset+0xa4>)
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	4b1c      	ldr	r3, [pc, #112]	; (800b804 <gos_triggerReset+0xac>)
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	3301      	adds	r3, #1
 800b796:	b2da      	uxtb	r2, r3
 800b798:	4b1a      	ldr	r3, [pc, #104]	; (800b804 <gos_triggerReset+0xac>)
 800b79a:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 800b7a8:	2355      	movs	r3, #85	; 0x55
 800b7aa:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 800b7ac:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <gos_triggerReset+0xa4>)
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d005      	beq.n	800b7c0 <gos_triggerReset+0x68>
 800b7b4:	4b11      	ldr	r3, [pc, #68]	; (800b7fc <gos_triggerReset+0xa4>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	4b0f      	ldr	r3, [pc, #60]	; (800b7fc <gos_triggerReset+0xa4>)
 800b7be:	701a      	strb	r2, [r3, #0]
 800b7c0:	4b0e      	ldr	r3, [pc, #56]	; (800b7fc <gos_triggerReset+0xa4>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d108      	bne.n	800b7da <gos_triggerReset+0x82>
 800b7c8:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <gos_triggerReset+0xa8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f383 8810 	msr	PRIMASK, r3
 800b7d0:	b662      	cpsie	i
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <gos_triggerReset+0xac>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d005      	beq.n	800b7ee <gos_triggerReset+0x96>
 800b7e2:	4b08      	ldr	r3, [pc, #32]	; (800b804 <gos_triggerReset+0xac>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	b2da      	uxtb	r2, r3
 800b7ea:	4b06      	ldr	r3, [pc, #24]	; (800b804 <gos_triggerReset+0xac>)
 800b7ec:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	2000129f 	.word	0x2000129f
 800b800:	200012a0 	.word	0x200012a0
 800b804:	2000129d 	.word	0x2000129d

0800b808 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 800b814:	23ae      	movs	r3, #174	; 0xae
 800b816:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 800b818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b81c:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 8096 	beq.w	800b952 <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 800b826:	4b4d      	ldr	r3, [pc, #308]	; (800b95c <gos_triggerWait+0x154>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d108      	bne.n	800b840 <gos_triggerWait+0x38>
 800b82e:	b672      	cpsid	i
 800b830:	f3ef 8310 	mrs	r3, PRIMASK
 800b834:	4a4a      	ldr	r2, [pc, #296]	; (800b960 <gos_triggerWait+0x158>)
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	4b46      	ldr	r3, [pc, #280]	; (800b95c <gos_triggerWait+0x154>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	b2da      	uxtb	r2, r3
 800b848:	4b44      	ldr	r3, [pc, #272]	; (800b95c <gos_triggerWait+0x154>)
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	4b45      	ldr	r3, [pc, #276]	; (800b964 <gos_triggerWait+0x15c>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	3301      	adds	r3, #1
 800b852:	b2da      	uxtb	r2, r3
 800b854:	4b43      	ldr	r3, [pc, #268]	; (800b964 <gos_triggerWait+0x15c>)
 800b856:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 800b858:	f107 0314 	add.w	r3, r7, #20
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fd fb29 	bl	8008eb4 <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 800b862:	8aba      	ldrh	r2, [r7, #20]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 800b86e:	4b3b      	ldr	r3, [pc, #236]	; (800b95c <gos_triggerWait+0x154>)
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <gos_triggerWait+0x7a>
 800b876:	4b39      	ldr	r3, [pc, #228]	; (800b95c <gos_triggerWait+0x154>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	4b37      	ldr	r3, [pc, #220]	; (800b95c <gos_triggerWait+0x154>)
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	4b36      	ldr	r3, [pc, #216]	; (800b95c <gos_triggerWait+0x154>)
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d108      	bne.n	800b89c <gos_triggerWait+0x94>
 800b88a:	4b35      	ldr	r3, [pc, #212]	; (800b960 <gos_triggerWait+0x158>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f383 8810 	msr	PRIMASK, r3
 800b892:	b662      	cpsie	i
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	4b31      	ldr	r3, [pc, #196]	; (800b964 <gos_triggerWait+0x15c>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d005      	beq.n	800b8b0 <gos_triggerWait+0xa8>
 800b8a4:	4b2f      	ldr	r3, [pc, #188]	; (800b964 <gos_triggerWait+0x15c>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	4b2d      	ldr	r3, [pc, #180]	; (800b964 <gos_triggerWait+0x15c>)
 800b8ae:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d204      	bcs.n	800b8c6 <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 800b8bc:	8abb      	ldrh	r3, [r7, #20]
 800b8be:	6879      	ldr	r1, [r7, #4]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fc fbd3 	bl	800806c <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 800b8c6:	4b25      	ldr	r3, [pc, #148]	; (800b95c <gos_triggerWait+0x154>)
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d108      	bne.n	800b8e0 <gos_triggerWait+0xd8>
 800b8ce:	b672      	cpsid	i
 800b8d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d4:	4a22      	ldr	r2, [pc, #136]	; (800b960 <gos_triggerWait+0x158>)
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	4b1e      	ldr	r3, [pc, #120]	; (800b95c <gos_triggerWait+0x154>)
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	4b1c      	ldr	r3, [pc, #112]	; (800b95c <gos_triggerWait+0x154>)
 800b8ea:	701a      	strb	r2, [r3, #0]
 800b8ec:	4b1d      	ldr	r3, [pc, #116]	; (800b964 <gos_triggerWait+0x15c>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	b2da      	uxtb	r2, r3
 800b8f4:	4b1b      	ldr	r3, [pc, #108]	; (800b964 <gos_triggerWait+0x15c>)
 800b8f6:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d305      	bcc.n	800b910 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 800b904:	2355      	movs	r3, #85	; 0x55
 800b906:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b90e:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 800b910:	4b12      	ldr	r3, [pc, #72]	; (800b95c <gos_triggerWait+0x154>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d005      	beq.n	800b924 <gos_triggerWait+0x11c>
 800b918:	4b10      	ldr	r3, [pc, #64]	; (800b95c <gos_triggerWait+0x154>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	4b0e      	ldr	r3, [pc, #56]	; (800b95c <gos_triggerWait+0x154>)
 800b922:	701a      	strb	r2, [r3, #0]
 800b924:	4b0d      	ldr	r3, [pc, #52]	; (800b95c <gos_triggerWait+0x154>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d108      	bne.n	800b93e <gos_triggerWait+0x136>
 800b92c:	4b0c      	ldr	r3, [pc, #48]	; (800b960 <gos_triggerWait+0x158>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f383 8810 	msr	PRIMASK, r3
 800b934:	b662      	cpsie	i
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	4b09      	ldr	r3, [pc, #36]	; (800b964 <gos_triggerWait+0x15c>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d005      	beq.n	800b952 <gos_triggerWait+0x14a>
 800b946:	4b07      	ldr	r3, [pc, #28]	; (800b964 <gos_triggerWait+0x15c>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	4b05      	ldr	r3, [pc, #20]	; (800b964 <gos_triggerWait+0x15c>)
 800b950:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 800b952:	7dfb      	ldrb	r3, [r7, #23]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	2000129f 	.word	0x2000129f
 800b960:	200012a0 	.word	0x200012a0
 800b964:	2000129d 	.word	0x2000129d

0800b968 <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 800b970:	23ae      	movs	r3, #174	; 0xae
 800b972:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d073      	beq.n	800ba62 <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 800b97a:	4b3c      	ldr	r3, [pc, #240]	; (800ba6c <gos_triggerIncrement+0x104>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d108      	bne.n	800b994 <gos_triggerIncrement+0x2c>
 800b982:	b672      	cpsid	i
 800b984:	f3ef 8310 	mrs	r3, PRIMASK
 800b988:	4a39      	ldr	r2, [pc, #228]	; (800ba70 <gos_triggerIncrement+0x108>)
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	4b35      	ldr	r3, [pc, #212]	; (800ba6c <gos_triggerIncrement+0x104>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	3301      	adds	r3, #1
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	4b33      	ldr	r3, [pc, #204]	; (800ba6c <gos_triggerIncrement+0x104>)
 800b99e:	701a      	strb	r2, [r3, #0]
 800b9a0:	4b34      	ldr	r3, [pc, #208]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	4b32      	ldr	r3, [pc, #200]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800b9aa:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d12c      	bne.n	800ba1c <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 800b9c2:	4b2d      	ldr	r3, [pc, #180]	; (800ba78 <gos_triggerIncrement+0x110>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d105      	bne.n	800b9d6 <gos_triggerIncrement+0x6e>
 800b9ca:	4b2a      	ldr	r3, [pc, #168]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	4b28      	ldr	r3, [pc, #160]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800b9d4:	701a      	strb	r2, [r3, #0]
 800b9d6:	4b28      	ldr	r3, [pc, #160]	; (800ba78 <gos_triggerIncrement+0x110>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	4b26      	ldr	r3, [pc, #152]	; (800ba78 <gos_triggerIncrement+0x110>)
 800b9e0:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	891b      	ldrh	r3, [r3, #8]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fc fc52 	bl	8008290 <gos_taskUnblock>

            GOS_ISR_EXIT
 800b9ec:	4b22      	ldr	r3, [pc, #136]	; (800ba78 <gos_triggerIncrement+0x110>)
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d005      	beq.n	800ba00 <gos_triggerIncrement+0x98>
 800b9f4:	4b20      	ldr	r3, [pc, #128]	; (800ba78 <gos_triggerIncrement+0x110>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	4b1e      	ldr	r3, [pc, #120]	; (800ba78 <gos_triggerIncrement+0x110>)
 800b9fe:	701a      	strb	r2, [r3, #0]
 800ba00:	4b1d      	ldr	r3, [pc, #116]	; (800ba78 <gos_triggerIncrement+0x110>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d109      	bne.n	800ba1c <gos_triggerIncrement+0xb4>
 800ba08:	4b1a      	ldr	r3, [pc, #104]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d005      	beq.n	800ba1c <gos_triggerIncrement+0xb4>
 800ba10:	4b18      	ldr	r3, [pc, #96]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	4b16      	ldr	r3, [pc, #88]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800ba1a:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 800ba1c:	2355      	movs	r3, #85	; 0x55
 800ba1e:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 800ba20:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <gos_triggerIncrement+0x104>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d005      	beq.n	800ba34 <gos_triggerIncrement+0xcc>
 800ba28:	4b10      	ldr	r3, [pc, #64]	; (800ba6c <gos_triggerIncrement+0x104>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	4b0e      	ldr	r3, [pc, #56]	; (800ba6c <gos_triggerIncrement+0x104>)
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <gos_triggerIncrement+0x104>)
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d108      	bne.n	800ba4e <gos_triggerIncrement+0xe6>
 800ba3c:	4b0c      	ldr	r3, [pc, #48]	; (800ba70 <gos_triggerIncrement+0x108>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f383 8810 	msr	PRIMASK, r3
 800ba44:	b662      	cpsie	i
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d005      	beq.n	800ba62 <gos_triggerIncrement+0xfa>
 800ba56:	4b07      	ldr	r3, [pc, #28]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	b2da      	uxtb	r2, r3
 800ba5e:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <gos_triggerIncrement+0x10c>)
 800ba60:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	2000129f 	.word	0x2000129f
 800ba70:	200012a0 	.word	0x200012a0
 800ba74:	2000129d 	.word	0x2000129d
 800ba78:	2000129e 	.word	0x2000129e

0800ba7c <gos_shellDriverReceiveChar>:

/*
 * Function: gos_shellDriverReceiveChar
 */
gos_result_t gos_shellDriverReceiveChar (char_t* pChar)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t shellDriverReceiveResult = GOS_ERROR;
 800ba84:	23ae      	movs	r3, #174	; 0xae
 800ba86:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.shellDriverReceiveChar != NULL)
 800ba88:	4b07      	ldr	r3, [pc, #28]	; (800baa8 <gos_shellDriverReceiveChar+0x2c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d005      	beq.n	800ba9c <gos_shellDriverReceiveChar+0x20>
    {
        shellDriverReceiveResult = driverFunctions.shellDriverReceiveChar(pChar);
 800ba90:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <gos_shellDriverReceiveChar+0x2c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	4798      	blx	r3
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]
    }

    return shellDriverReceiveResult;
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20001280 	.word	0x20001280

0800baac <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 800baac:	b40f      	push	{r0, r1, r2, r3}
 800baae:	b580      	push	{r7, lr}
 800bab0:	b082      	sub	sp, #8
 800bab2:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 800bab4:	23ae      	movs	r3, #174	; 0xae
 800bab6:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 800bab8:	f107 0314 	add.w	r3, r7, #20
 800babc:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	6939      	ldr	r1, [r7, #16]
 800bac2:	480a      	ldr	r0, [pc, #40]	; (800baec <gos_shellDriverTransmitString+0x40>)
 800bac4:	f000 fe8c 	bl	800c7e0 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 800bac8:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <gos_shellDriverTransmitString+0x44>)
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d005      	beq.n	800badc <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <gos_shellDriverTransmitString+0x44>)
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	4805      	ldr	r0, [pc, #20]	; (800baec <gos_shellDriverTransmitString+0x40>)
 800bad6:	4798      	blx	r3
 800bad8:	4603      	mov	r3, r0
 800bada:	71fb      	strb	r3, [r7, #7]
    }

    return shellDriverTransmitResult;
 800badc:	79fb      	ldrb	r3, [r7, #7]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bae8:	b004      	add	sp, #16
 800baea:	4770      	bx	lr
 800baec:	20009a00 	.word	0x20009a00
 800baf0:	20001280 	.word	0x20001280

0800baf4 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 800bafc:	23ae      	movs	r3, #174	; 0xae
 800bafe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 800bb00:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <gos_timerDriverSysTimerGet+0x2c>)
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d005      	beq.n	800bb14 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 800bb08:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <gos_timerDriverSysTimerGet+0x2c>)
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	4798      	blx	r3
 800bb10:	4603      	mov	r3, r0
 800bb12:	73fb      	strb	r3, [r7, #15]
    }

    return timerDriverSysTimerGetResult;
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20001280 	.word	0x20001280

0800bb24 <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800bb2c:	23ae      	movs	r3, #174	; 0xae
 800bb2e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <gos_traceDriverTransmitString+0x2c>)
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d005      	beq.n	800bb44 <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 800bb38:	4b05      	ldr	r3, [pc, #20]	; (800bb50 <gos_traceDriverTransmitString+0x2c>)
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	4798      	blx	r3
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]
    }

    return traceDriverTransmitResult;
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20001280 	.word	0x20001280

0800bb54 <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800bb5c:	23ae      	movs	r3, #174	; 0xae
 800bb5e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 800bb60:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	4798      	blx	r3
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]
    }

    return traceDriverTransmitResult;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20001280 	.word	0x20001280

0800bb84 <_strtol_l.constprop.0>:
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb8a:	d001      	beq.n	800bb90 <_strtol_l.constprop.0+0xc>
 800bb8c:	2b24      	cmp	r3, #36	; 0x24
 800bb8e:	d906      	bls.n	800bb9e <_strtol_l.constprop.0+0x1a>
 800bb90:	f000 fe82 	bl	800c898 <__errno>
 800bb94:	2316      	movs	r3, #22
 800bb96:	6003      	str	r3, [r0, #0]
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc84 <_strtol_l.constprop.0+0x100>
 800bba2:	460d      	mov	r5, r1
 800bba4:	462e      	mov	r6, r5
 800bba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbaa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bbae:	f017 0708 	ands.w	r7, r7, #8
 800bbb2:	d1f7      	bne.n	800bba4 <_strtol_l.constprop.0+0x20>
 800bbb4:	2c2d      	cmp	r4, #45	; 0x2d
 800bbb6:	d132      	bne.n	800bc1e <_strtol_l.constprop.0+0x9a>
 800bbb8:	782c      	ldrb	r4, [r5, #0]
 800bbba:	2701      	movs	r7, #1
 800bbbc:	1cb5      	adds	r5, r6, #2
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d05b      	beq.n	800bc7a <_strtol_l.constprop.0+0xf6>
 800bbc2:	2b10      	cmp	r3, #16
 800bbc4:	d109      	bne.n	800bbda <_strtol_l.constprop.0+0x56>
 800bbc6:	2c30      	cmp	r4, #48	; 0x30
 800bbc8:	d107      	bne.n	800bbda <_strtol_l.constprop.0+0x56>
 800bbca:	782c      	ldrb	r4, [r5, #0]
 800bbcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bbd0:	2c58      	cmp	r4, #88	; 0x58
 800bbd2:	d14d      	bne.n	800bc70 <_strtol_l.constprop.0+0xec>
 800bbd4:	786c      	ldrb	r4, [r5, #1]
 800bbd6:	2310      	movs	r3, #16
 800bbd8:	3502      	adds	r5, #2
 800bbda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bbde:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbe2:	f04f 0e00 	mov.w	lr, #0
 800bbe6:	fbb8 f9f3 	udiv	r9, r8, r3
 800bbea:	4676      	mov	r6, lr
 800bbec:	fb03 8a19 	mls	sl, r3, r9, r8
 800bbf0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bbf4:	f1bc 0f09 	cmp.w	ip, #9
 800bbf8:	d816      	bhi.n	800bc28 <_strtol_l.constprop.0+0xa4>
 800bbfa:	4664      	mov	r4, ip
 800bbfc:	42a3      	cmp	r3, r4
 800bbfe:	dd24      	ble.n	800bc4a <_strtol_l.constprop.0+0xc6>
 800bc00:	f1be 3fff 	cmp.w	lr, #4294967295
 800bc04:	d008      	beq.n	800bc18 <_strtol_l.constprop.0+0x94>
 800bc06:	45b1      	cmp	r9, r6
 800bc08:	d31c      	bcc.n	800bc44 <_strtol_l.constprop.0+0xc0>
 800bc0a:	d101      	bne.n	800bc10 <_strtol_l.constprop.0+0x8c>
 800bc0c:	45a2      	cmp	sl, r4
 800bc0e:	db19      	blt.n	800bc44 <_strtol_l.constprop.0+0xc0>
 800bc10:	fb06 4603 	mla	r6, r6, r3, r4
 800bc14:	f04f 0e01 	mov.w	lr, #1
 800bc18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc1c:	e7e8      	b.n	800bbf0 <_strtol_l.constprop.0+0x6c>
 800bc1e:	2c2b      	cmp	r4, #43	; 0x2b
 800bc20:	bf04      	itt	eq
 800bc22:	782c      	ldrbeq	r4, [r5, #0]
 800bc24:	1cb5      	addeq	r5, r6, #2
 800bc26:	e7ca      	b.n	800bbbe <_strtol_l.constprop.0+0x3a>
 800bc28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bc2c:	f1bc 0f19 	cmp.w	ip, #25
 800bc30:	d801      	bhi.n	800bc36 <_strtol_l.constprop.0+0xb2>
 800bc32:	3c37      	subs	r4, #55	; 0x37
 800bc34:	e7e2      	b.n	800bbfc <_strtol_l.constprop.0+0x78>
 800bc36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bc3a:	f1bc 0f19 	cmp.w	ip, #25
 800bc3e:	d804      	bhi.n	800bc4a <_strtol_l.constprop.0+0xc6>
 800bc40:	3c57      	subs	r4, #87	; 0x57
 800bc42:	e7db      	b.n	800bbfc <_strtol_l.constprop.0+0x78>
 800bc44:	f04f 3eff 	mov.w	lr, #4294967295
 800bc48:	e7e6      	b.n	800bc18 <_strtol_l.constprop.0+0x94>
 800bc4a:	f1be 3fff 	cmp.w	lr, #4294967295
 800bc4e:	d105      	bne.n	800bc5c <_strtol_l.constprop.0+0xd8>
 800bc50:	2322      	movs	r3, #34	; 0x22
 800bc52:	6003      	str	r3, [r0, #0]
 800bc54:	4646      	mov	r6, r8
 800bc56:	b942      	cbnz	r2, 800bc6a <_strtol_l.constprop.0+0xe6>
 800bc58:	4630      	mov	r0, r6
 800bc5a:	e79e      	b.n	800bb9a <_strtol_l.constprop.0+0x16>
 800bc5c:	b107      	cbz	r7, 800bc60 <_strtol_l.constprop.0+0xdc>
 800bc5e:	4276      	negs	r6, r6
 800bc60:	2a00      	cmp	r2, #0
 800bc62:	d0f9      	beq.n	800bc58 <_strtol_l.constprop.0+0xd4>
 800bc64:	f1be 0f00 	cmp.w	lr, #0
 800bc68:	d000      	beq.n	800bc6c <_strtol_l.constprop.0+0xe8>
 800bc6a:	1e69      	subs	r1, r5, #1
 800bc6c:	6011      	str	r1, [r2, #0]
 800bc6e:	e7f3      	b.n	800bc58 <_strtol_l.constprop.0+0xd4>
 800bc70:	2430      	movs	r4, #48	; 0x30
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1b1      	bne.n	800bbda <_strtol_l.constprop.0+0x56>
 800bc76:	2308      	movs	r3, #8
 800bc78:	e7af      	b.n	800bbda <_strtol_l.constprop.0+0x56>
 800bc7a:	2c30      	cmp	r4, #48	; 0x30
 800bc7c:	d0a5      	beq.n	800bbca <_strtol_l.constprop.0+0x46>
 800bc7e:	230a      	movs	r3, #10
 800bc80:	e7ab      	b.n	800bbda <_strtol_l.constprop.0+0x56>
 800bc82:	bf00      	nop
 800bc84:	0800fc71 	.word	0x0800fc71

0800bc88 <strtol>:
 800bc88:	4613      	mov	r3, r2
 800bc8a:	460a      	mov	r2, r1
 800bc8c:	4601      	mov	r1, r0
 800bc8e:	4802      	ldr	r0, [pc, #8]	; (800bc98 <strtol+0x10>)
 800bc90:	6800      	ldr	r0, [r0, #0]
 800bc92:	f7ff bf77 	b.w	800bb84 <_strtol_l.constprop.0>
 800bc96:	bf00      	nop
 800bc98:	20000e40 	.word	0x20000e40

0800bc9c <__cvt>:
 800bc9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bca0:	ec55 4b10 	vmov	r4, r5, d0
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	460e      	mov	r6, r1
 800bca8:	4619      	mov	r1, r3
 800bcaa:	462b      	mov	r3, r5
 800bcac:	bfbb      	ittet	lt
 800bcae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcb2:	461d      	movlt	r5, r3
 800bcb4:	2300      	movge	r3, #0
 800bcb6:	232d      	movlt	r3, #45	; 0x2d
 800bcb8:	700b      	strb	r3, [r1, #0]
 800bcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bcc0:	4691      	mov	r9, r2
 800bcc2:	f023 0820 	bic.w	r8, r3, #32
 800bcc6:	bfbc      	itt	lt
 800bcc8:	4622      	movlt	r2, r4
 800bcca:	4614      	movlt	r4, r2
 800bccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcd0:	d005      	beq.n	800bcde <__cvt+0x42>
 800bcd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bcd6:	d100      	bne.n	800bcda <__cvt+0x3e>
 800bcd8:	3601      	adds	r6, #1
 800bcda:	2102      	movs	r1, #2
 800bcdc:	e000      	b.n	800bce0 <__cvt+0x44>
 800bcde:	2103      	movs	r1, #3
 800bce0:	ab03      	add	r3, sp, #12
 800bce2:	9301      	str	r3, [sp, #4]
 800bce4:	ab02      	add	r3, sp, #8
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	ec45 4b10 	vmov	d0, r4, r5
 800bcec:	4653      	mov	r3, sl
 800bcee:	4632      	mov	r2, r6
 800bcf0:	f000 fe9e 	bl	800ca30 <_dtoa_r>
 800bcf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bcf8:	4607      	mov	r7, r0
 800bcfa:	d102      	bne.n	800bd02 <__cvt+0x66>
 800bcfc:	f019 0f01 	tst.w	r9, #1
 800bd00:	d022      	beq.n	800bd48 <__cvt+0xac>
 800bd02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd06:	eb07 0906 	add.w	r9, r7, r6
 800bd0a:	d110      	bne.n	800bd2e <__cvt+0x92>
 800bd0c:	783b      	ldrb	r3, [r7, #0]
 800bd0e:	2b30      	cmp	r3, #48	; 0x30
 800bd10:	d10a      	bne.n	800bd28 <__cvt+0x8c>
 800bd12:	2200      	movs	r2, #0
 800bd14:	2300      	movs	r3, #0
 800bd16:	4620      	mov	r0, r4
 800bd18:	4629      	mov	r1, r5
 800bd1a:	f7f4 ff05 	bl	8000b28 <__aeabi_dcmpeq>
 800bd1e:	b918      	cbnz	r0, 800bd28 <__cvt+0x8c>
 800bd20:	f1c6 0601 	rsb	r6, r6, #1
 800bd24:	f8ca 6000 	str.w	r6, [sl]
 800bd28:	f8da 3000 	ldr.w	r3, [sl]
 800bd2c:	4499      	add	r9, r3
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2300      	movs	r3, #0
 800bd32:	4620      	mov	r0, r4
 800bd34:	4629      	mov	r1, r5
 800bd36:	f7f4 fef7 	bl	8000b28 <__aeabi_dcmpeq>
 800bd3a:	b108      	cbz	r0, 800bd40 <__cvt+0xa4>
 800bd3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd40:	2230      	movs	r2, #48	; 0x30
 800bd42:	9b03      	ldr	r3, [sp, #12]
 800bd44:	454b      	cmp	r3, r9
 800bd46:	d307      	bcc.n	800bd58 <__cvt+0xbc>
 800bd48:	9b03      	ldr	r3, [sp, #12]
 800bd4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd4c:	1bdb      	subs	r3, r3, r7
 800bd4e:	4638      	mov	r0, r7
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	b004      	add	sp, #16
 800bd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd58:	1c59      	adds	r1, r3, #1
 800bd5a:	9103      	str	r1, [sp, #12]
 800bd5c:	701a      	strb	r2, [r3, #0]
 800bd5e:	e7f0      	b.n	800bd42 <__cvt+0xa6>

0800bd60 <__exponent>:
 800bd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd62:	4603      	mov	r3, r0
 800bd64:	2900      	cmp	r1, #0
 800bd66:	bfb8      	it	lt
 800bd68:	4249      	neglt	r1, r1
 800bd6a:	f803 2b02 	strb.w	r2, [r3], #2
 800bd6e:	bfb4      	ite	lt
 800bd70:	222d      	movlt	r2, #45	; 0x2d
 800bd72:	222b      	movge	r2, #43	; 0x2b
 800bd74:	2909      	cmp	r1, #9
 800bd76:	7042      	strb	r2, [r0, #1]
 800bd78:	dd2a      	ble.n	800bdd0 <__exponent+0x70>
 800bd7a:	f10d 0207 	add.w	r2, sp, #7
 800bd7e:	4617      	mov	r7, r2
 800bd80:	260a      	movs	r6, #10
 800bd82:	4694      	mov	ip, r2
 800bd84:	fb91 f5f6 	sdiv	r5, r1, r6
 800bd88:	fb06 1415 	mls	r4, r6, r5, r1
 800bd8c:	3430      	adds	r4, #48	; 0x30
 800bd8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bd92:	460c      	mov	r4, r1
 800bd94:	2c63      	cmp	r4, #99	; 0x63
 800bd96:	f102 32ff 	add.w	r2, r2, #4294967295
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	dcf1      	bgt.n	800bd82 <__exponent+0x22>
 800bd9e:	3130      	adds	r1, #48	; 0x30
 800bda0:	f1ac 0402 	sub.w	r4, ip, #2
 800bda4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bda8:	1c41      	adds	r1, r0, #1
 800bdaa:	4622      	mov	r2, r4
 800bdac:	42ba      	cmp	r2, r7
 800bdae:	d30a      	bcc.n	800bdc6 <__exponent+0x66>
 800bdb0:	f10d 0209 	add.w	r2, sp, #9
 800bdb4:	eba2 020c 	sub.w	r2, r2, ip
 800bdb8:	42bc      	cmp	r4, r7
 800bdba:	bf88      	it	hi
 800bdbc:	2200      	movhi	r2, #0
 800bdbe:	4413      	add	r3, r2
 800bdc0:	1a18      	subs	r0, r3, r0
 800bdc2:	b003      	add	sp, #12
 800bdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bdca:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bdce:	e7ed      	b.n	800bdac <__exponent+0x4c>
 800bdd0:	2330      	movs	r3, #48	; 0x30
 800bdd2:	3130      	adds	r1, #48	; 0x30
 800bdd4:	7083      	strb	r3, [r0, #2]
 800bdd6:	70c1      	strb	r1, [r0, #3]
 800bdd8:	1d03      	adds	r3, r0, #4
 800bdda:	e7f1      	b.n	800bdc0 <__exponent+0x60>

0800bddc <_printf_float>:
 800bddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde0:	ed2d 8b02 	vpush	{d8}
 800bde4:	b08d      	sub	sp, #52	; 0x34
 800bde6:	460c      	mov	r4, r1
 800bde8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bdec:	4616      	mov	r6, r2
 800bdee:	461f      	mov	r7, r3
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	f000 fd07 	bl	800c804 <_localeconv_r>
 800bdf6:	f8d0 a000 	ldr.w	sl, [r0]
 800bdfa:	4650      	mov	r0, sl
 800bdfc:	f7f4 fa68 	bl	80002d0 <strlen>
 800be00:	2300      	movs	r3, #0
 800be02:	930a      	str	r3, [sp, #40]	; 0x28
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	9305      	str	r3, [sp, #20]
 800be08:	f8d8 3000 	ldr.w	r3, [r8]
 800be0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be10:	3307      	adds	r3, #7
 800be12:	f023 0307 	bic.w	r3, r3, #7
 800be16:	f103 0208 	add.w	r2, r3, #8
 800be1a:	f8c8 2000 	str.w	r2, [r8]
 800be1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be26:	9307      	str	r3, [sp, #28]
 800be28:	f8cd 8018 	str.w	r8, [sp, #24]
 800be2c:	ee08 0a10 	vmov	s16, r0
 800be30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800be34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be38:	4b9e      	ldr	r3, [pc, #632]	; (800c0b4 <_printf_float+0x2d8>)
 800be3a:	f04f 32ff 	mov.w	r2, #4294967295
 800be3e:	f7f4 fea5 	bl	8000b8c <__aeabi_dcmpun>
 800be42:	bb88      	cbnz	r0, 800bea8 <_printf_float+0xcc>
 800be44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be48:	4b9a      	ldr	r3, [pc, #616]	; (800c0b4 <_printf_float+0x2d8>)
 800be4a:	f04f 32ff 	mov.w	r2, #4294967295
 800be4e:	f7f4 fe7f 	bl	8000b50 <__aeabi_dcmple>
 800be52:	bb48      	cbnz	r0, 800bea8 <_printf_float+0xcc>
 800be54:	2200      	movs	r2, #0
 800be56:	2300      	movs	r3, #0
 800be58:	4640      	mov	r0, r8
 800be5a:	4649      	mov	r1, r9
 800be5c:	f7f4 fe6e 	bl	8000b3c <__aeabi_dcmplt>
 800be60:	b110      	cbz	r0, 800be68 <_printf_float+0x8c>
 800be62:	232d      	movs	r3, #45	; 0x2d
 800be64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be68:	4a93      	ldr	r2, [pc, #588]	; (800c0b8 <_printf_float+0x2dc>)
 800be6a:	4b94      	ldr	r3, [pc, #592]	; (800c0bc <_printf_float+0x2e0>)
 800be6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be70:	bf94      	ite	ls
 800be72:	4690      	movls	r8, r2
 800be74:	4698      	movhi	r8, r3
 800be76:	2303      	movs	r3, #3
 800be78:	6123      	str	r3, [r4, #16]
 800be7a:	9b05      	ldr	r3, [sp, #20]
 800be7c:	f023 0304 	bic.w	r3, r3, #4
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	f04f 0900 	mov.w	r9, #0
 800be86:	9700      	str	r7, [sp, #0]
 800be88:	4633      	mov	r3, r6
 800be8a:	aa0b      	add	r2, sp, #44	; 0x2c
 800be8c:	4621      	mov	r1, r4
 800be8e:	4628      	mov	r0, r5
 800be90:	f000 f9da 	bl	800c248 <_printf_common>
 800be94:	3001      	adds	r0, #1
 800be96:	f040 8090 	bne.w	800bfba <_printf_float+0x1de>
 800be9a:	f04f 30ff 	mov.w	r0, #4294967295
 800be9e:	b00d      	add	sp, #52	; 0x34
 800bea0:	ecbd 8b02 	vpop	{d8}
 800bea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea8:	4642      	mov	r2, r8
 800beaa:	464b      	mov	r3, r9
 800beac:	4640      	mov	r0, r8
 800beae:	4649      	mov	r1, r9
 800beb0:	f7f4 fe6c 	bl	8000b8c <__aeabi_dcmpun>
 800beb4:	b140      	cbz	r0, 800bec8 <_printf_float+0xec>
 800beb6:	464b      	mov	r3, r9
 800beb8:	2b00      	cmp	r3, #0
 800beba:	bfbc      	itt	lt
 800bebc:	232d      	movlt	r3, #45	; 0x2d
 800bebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bec2:	4a7f      	ldr	r2, [pc, #508]	; (800c0c0 <_printf_float+0x2e4>)
 800bec4:	4b7f      	ldr	r3, [pc, #508]	; (800c0c4 <_printf_float+0x2e8>)
 800bec6:	e7d1      	b.n	800be6c <_printf_float+0x90>
 800bec8:	6863      	ldr	r3, [r4, #4]
 800beca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bece:	9206      	str	r2, [sp, #24]
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	d13f      	bne.n	800bf54 <_printf_float+0x178>
 800bed4:	2306      	movs	r3, #6
 800bed6:	6063      	str	r3, [r4, #4]
 800bed8:	9b05      	ldr	r3, [sp, #20]
 800beda:	6861      	ldr	r1, [r4, #4]
 800bedc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bee0:	2300      	movs	r3, #0
 800bee2:	9303      	str	r3, [sp, #12]
 800bee4:	ab0a      	add	r3, sp, #40	; 0x28
 800bee6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800beea:	ab09      	add	r3, sp, #36	; 0x24
 800beec:	ec49 8b10 	vmov	d0, r8, r9
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	6022      	str	r2, [r4, #0]
 800bef4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bef8:	4628      	mov	r0, r5
 800befa:	f7ff fecf 	bl	800bc9c <__cvt>
 800befe:	9b06      	ldr	r3, [sp, #24]
 800bf00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf02:	2b47      	cmp	r3, #71	; 0x47
 800bf04:	4680      	mov	r8, r0
 800bf06:	d108      	bne.n	800bf1a <_printf_float+0x13e>
 800bf08:	1cc8      	adds	r0, r1, #3
 800bf0a:	db02      	blt.n	800bf12 <_printf_float+0x136>
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	4299      	cmp	r1, r3
 800bf10:	dd41      	ble.n	800bf96 <_printf_float+0x1ba>
 800bf12:	f1ab 0302 	sub.w	r3, fp, #2
 800bf16:	fa5f fb83 	uxtb.w	fp, r3
 800bf1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf1e:	d820      	bhi.n	800bf62 <_printf_float+0x186>
 800bf20:	3901      	subs	r1, #1
 800bf22:	465a      	mov	r2, fp
 800bf24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf28:	9109      	str	r1, [sp, #36]	; 0x24
 800bf2a:	f7ff ff19 	bl	800bd60 <__exponent>
 800bf2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf30:	1813      	adds	r3, r2, r0
 800bf32:	2a01      	cmp	r2, #1
 800bf34:	4681      	mov	r9, r0
 800bf36:	6123      	str	r3, [r4, #16]
 800bf38:	dc02      	bgt.n	800bf40 <_printf_float+0x164>
 800bf3a:	6822      	ldr	r2, [r4, #0]
 800bf3c:	07d2      	lsls	r2, r2, #31
 800bf3e:	d501      	bpl.n	800bf44 <_printf_float+0x168>
 800bf40:	3301      	adds	r3, #1
 800bf42:	6123      	str	r3, [r4, #16]
 800bf44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d09c      	beq.n	800be86 <_printf_float+0xaa>
 800bf4c:	232d      	movs	r3, #45	; 0x2d
 800bf4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf52:	e798      	b.n	800be86 <_printf_float+0xaa>
 800bf54:	9a06      	ldr	r2, [sp, #24]
 800bf56:	2a47      	cmp	r2, #71	; 0x47
 800bf58:	d1be      	bne.n	800bed8 <_printf_float+0xfc>
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1bc      	bne.n	800bed8 <_printf_float+0xfc>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e7b9      	b.n	800bed6 <_printf_float+0xfa>
 800bf62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf66:	d118      	bne.n	800bf9a <_printf_float+0x1be>
 800bf68:	2900      	cmp	r1, #0
 800bf6a:	6863      	ldr	r3, [r4, #4]
 800bf6c:	dd0b      	ble.n	800bf86 <_printf_float+0x1aa>
 800bf6e:	6121      	str	r1, [r4, #16]
 800bf70:	b913      	cbnz	r3, 800bf78 <_printf_float+0x19c>
 800bf72:	6822      	ldr	r2, [r4, #0]
 800bf74:	07d0      	lsls	r0, r2, #31
 800bf76:	d502      	bpl.n	800bf7e <_printf_float+0x1a2>
 800bf78:	3301      	adds	r3, #1
 800bf7a:	440b      	add	r3, r1
 800bf7c:	6123      	str	r3, [r4, #16]
 800bf7e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bf80:	f04f 0900 	mov.w	r9, #0
 800bf84:	e7de      	b.n	800bf44 <_printf_float+0x168>
 800bf86:	b913      	cbnz	r3, 800bf8e <_printf_float+0x1b2>
 800bf88:	6822      	ldr	r2, [r4, #0]
 800bf8a:	07d2      	lsls	r2, r2, #31
 800bf8c:	d501      	bpl.n	800bf92 <_printf_float+0x1b6>
 800bf8e:	3302      	adds	r3, #2
 800bf90:	e7f4      	b.n	800bf7c <_printf_float+0x1a0>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e7f2      	b.n	800bf7c <_printf_float+0x1a0>
 800bf96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9c:	4299      	cmp	r1, r3
 800bf9e:	db05      	blt.n	800bfac <_printf_float+0x1d0>
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	6121      	str	r1, [r4, #16]
 800bfa4:	07d8      	lsls	r0, r3, #31
 800bfa6:	d5ea      	bpl.n	800bf7e <_printf_float+0x1a2>
 800bfa8:	1c4b      	adds	r3, r1, #1
 800bfaa:	e7e7      	b.n	800bf7c <_printf_float+0x1a0>
 800bfac:	2900      	cmp	r1, #0
 800bfae:	bfd4      	ite	le
 800bfb0:	f1c1 0202 	rsble	r2, r1, #2
 800bfb4:	2201      	movgt	r2, #1
 800bfb6:	4413      	add	r3, r2
 800bfb8:	e7e0      	b.n	800bf7c <_printf_float+0x1a0>
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	055a      	lsls	r2, r3, #21
 800bfbe:	d407      	bmi.n	800bfd0 <_printf_float+0x1f4>
 800bfc0:	6923      	ldr	r3, [r4, #16]
 800bfc2:	4642      	mov	r2, r8
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	47b8      	blx	r7
 800bfca:	3001      	adds	r0, #1
 800bfcc:	d12c      	bne.n	800c028 <_printf_float+0x24c>
 800bfce:	e764      	b.n	800be9a <_printf_float+0xbe>
 800bfd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bfd4:	f240 80e0 	bls.w	800c198 <_printf_float+0x3bc>
 800bfd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfdc:	2200      	movs	r2, #0
 800bfde:	2300      	movs	r3, #0
 800bfe0:	f7f4 fda2 	bl	8000b28 <__aeabi_dcmpeq>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d034      	beq.n	800c052 <_printf_float+0x276>
 800bfe8:	4a37      	ldr	r2, [pc, #220]	; (800c0c8 <_printf_float+0x2ec>)
 800bfea:	2301      	movs	r3, #1
 800bfec:	4631      	mov	r1, r6
 800bfee:	4628      	mov	r0, r5
 800bff0:	47b8      	blx	r7
 800bff2:	3001      	adds	r0, #1
 800bff4:	f43f af51 	beq.w	800be9a <_printf_float+0xbe>
 800bff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bffc:	429a      	cmp	r2, r3
 800bffe:	db02      	blt.n	800c006 <_printf_float+0x22a>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	07d8      	lsls	r0, r3, #31
 800c004:	d510      	bpl.n	800c028 <_printf_float+0x24c>
 800c006:	ee18 3a10 	vmov	r3, s16
 800c00a:	4652      	mov	r2, sl
 800c00c:	4631      	mov	r1, r6
 800c00e:	4628      	mov	r0, r5
 800c010:	47b8      	blx	r7
 800c012:	3001      	adds	r0, #1
 800c014:	f43f af41 	beq.w	800be9a <_printf_float+0xbe>
 800c018:	f04f 0800 	mov.w	r8, #0
 800c01c:	f104 091a 	add.w	r9, r4, #26
 800c020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c022:	3b01      	subs	r3, #1
 800c024:	4543      	cmp	r3, r8
 800c026:	dc09      	bgt.n	800c03c <_printf_float+0x260>
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	079b      	lsls	r3, r3, #30
 800c02c:	f100 8107 	bmi.w	800c23e <_printf_float+0x462>
 800c030:	68e0      	ldr	r0, [r4, #12]
 800c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c034:	4298      	cmp	r0, r3
 800c036:	bfb8      	it	lt
 800c038:	4618      	movlt	r0, r3
 800c03a:	e730      	b.n	800be9e <_printf_float+0xc2>
 800c03c:	2301      	movs	r3, #1
 800c03e:	464a      	mov	r2, r9
 800c040:	4631      	mov	r1, r6
 800c042:	4628      	mov	r0, r5
 800c044:	47b8      	blx	r7
 800c046:	3001      	adds	r0, #1
 800c048:	f43f af27 	beq.w	800be9a <_printf_float+0xbe>
 800c04c:	f108 0801 	add.w	r8, r8, #1
 800c050:	e7e6      	b.n	800c020 <_printf_float+0x244>
 800c052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c054:	2b00      	cmp	r3, #0
 800c056:	dc39      	bgt.n	800c0cc <_printf_float+0x2f0>
 800c058:	4a1b      	ldr	r2, [pc, #108]	; (800c0c8 <_printf_float+0x2ec>)
 800c05a:	2301      	movs	r3, #1
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	47b8      	blx	r7
 800c062:	3001      	adds	r0, #1
 800c064:	f43f af19 	beq.w	800be9a <_printf_float+0xbe>
 800c068:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c06c:	4313      	orrs	r3, r2
 800c06e:	d102      	bne.n	800c076 <_printf_float+0x29a>
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	07d9      	lsls	r1, r3, #31
 800c074:	d5d8      	bpl.n	800c028 <_printf_float+0x24c>
 800c076:	ee18 3a10 	vmov	r3, s16
 800c07a:	4652      	mov	r2, sl
 800c07c:	4631      	mov	r1, r6
 800c07e:	4628      	mov	r0, r5
 800c080:	47b8      	blx	r7
 800c082:	3001      	adds	r0, #1
 800c084:	f43f af09 	beq.w	800be9a <_printf_float+0xbe>
 800c088:	f04f 0900 	mov.w	r9, #0
 800c08c:	f104 0a1a 	add.w	sl, r4, #26
 800c090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c092:	425b      	negs	r3, r3
 800c094:	454b      	cmp	r3, r9
 800c096:	dc01      	bgt.n	800c09c <_printf_float+0x2c0>
 800c098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c09a:	e792      	b.n	800bfc2 <_printf_float+0x1e6>
 800c09c:	2301      	movs	r3, #1
 800c09e:	4652      	mov	r2, sl
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f aef7 	beq.w	800be9a <_printf_float+0xbe>
 800c0ac:	f109 0901 	add.w	r9, r9, #1
 800c0b0:	e7ee      	b.n	800c090 <_printf_float+0x2b4>
 800c0b2:	bf00      	nop
 800c0b4:	7fefffff 	.word	0x7fefffff
 800c0b8:	0800fd71 	.word	0x0800fd71
 800c0bc:	0800fd75 	.word	0x0800fd75
 800c0c0:	0800fd79 	.word	0x0800fd79
 800c0c4:	0800fd7d 	.word	0x0800fd7d
 800c0c8:	0800fd81 	.word	0x0800fd81
 800c0cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	bfa8      	it	ge
 800c0d4:	461a      	movge	r2, r3
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	4691      	mov	r9, r2
 800c0da:	dc37      	bgt.n	800c14c <_printf_float+0x370>
 800c0dc:	f04f 0b00 	mov.w	fp, #0
 800c0e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0e4:	f104 021a 	add.w	r2, r4, #26
 800c0e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	eba3 0309 	sub.w	r3, r3, r9
 800c0f0:	455b      	cmp	r3, fp
 800c0f2:	dc33      	bgt.n	800c15c <_printf_float+0x380>
 800c0f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	db3b      	blt.n	800c174 <_printf_float+0x398>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	07da      	lsls	r2, r3, #31
 800c100:	d438      	bmi.n	800c174 <_printf_float+0x398>
 800c102:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c106:	eba2 0903 	sub.w	r9, r2, r3
 800c10a:	9b05      	ldr	r3, [sp, #20]
 800c10c:	1ad2      	subs	r2, r2, r3
 800c10e:	4591      	cmp	r9, r2
 800c110:	bfa8      	it	ge
 800c112:	4691      	movge	r9, r2
 800c114:	f1b9 0f00 	cmp.w	r9, #0
 800c118:	dc35      	bgt.n	800c186 <_printf_float+0x3aa>
 800c11a:	f04f 0800 	mov.w	r8, #0
 800c11e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c122:	f104 0a1a 	add.w	sl, r4, #26
 800c126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c12a:	1a9b      	subs	r3, r3, r2
 800c12c:	eba3 0309 	sub.w	r3, r3, r9
 800c130:	4543      	cmp	r3, r8
 800c132:	f77f af79 	ble.w	800c028 <_printf_float+0x24c>
 800c136:	2301      	movs	r3, #1
 800c138:	4652      	mov	r2, sl
 800c13a:	4631      	mov	r1, r6
 800c13c:	4628      	mov	r0, r5
 800c13e:	47b8      	blx	r7
 800c140:	3001      	adds	r0, #1
 800c142:	f43f aeaa 	beq.w	800be9a <_printf_float+0xbe>
 800c146:	f108 0801 	add.w	r8, r8, #1
 800c14a:	e7ec      	b.n	800c126 <_printf_float+0x34a>
 800c14c:	4613      	mov	r3, r2
 800c14e:	4631      	mov	r1, r6
 800c150:	4642      	mov	r2, r8
 800c152:	4628      	mov	r0, r5
 800c154:	47b8      	blx	r7
 800c156:	3001      	adds	r0, #1
 800c158:	d1c0      	bne.n	800c0dc <_printf_float+0x300>
 800c15a:	e69e      	b.n	800be9a <_printf_float+0xbe>
 800c15c:	2301      	movs	r3, #1
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	9205      	str	r2, [sp, #20]
 800c164:	47b8      	blx	r7
 800c166:	3001      	adds	r0, #1
 800c168:	f43f ae97 	beq.w	800be9a <_printf_float+0xbe>
 800c16c:	9a05      	ldr	r2, [sp, #20]
 800c16e:	f10b 0b01 	add.w	fp, fp, #1
 800c172:	e7b9      	b.n	800c0e8 <_printf_float+0x30c>
 800c174:	ee18 3a10 	vmov	r3, s16
 800c178:	4652      	mov	r2, sl
 800c17a:	4631      	mov	r1, r6
 800c17c:	4628      	mov	r0, r5
 800c17e:	47b8      	blx	r7
 800c180:	3001      	adds	r0, #1
 800c182:	d1be      	bne.n	800c102 <_printf_float+0x326>
 800c184:	e689      	b.n	800be9a <_printf_float+0xbe>
 800c186:	9a05      	ldr	r2, [sp, #20]
 800c188:	464b      	mov	r3, r9
 800c18a:	4442      	add	r2, r8
 800c18c:	4631      	mov	r1, r6
 800c18e:	4628      	mov	r0, r5
 800c190:	47b8      	blx	r7
 800c192:	3001      	adds	r0, #1
 800c194:	d1c1      	bne.n	800c11a <_printf_float+0x33e>
 800c196:	e680      	b.n	800be9a <_printf_float+0xbe>
 800c198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c19a:	2a01      	cmp	r2, #1
 800c19c:	dc01      	bgt.n	800c1a2 <_printf_float+0x3c6>
 800c19e:	07db      	lsls	r3, r3, #31
 800c1a0:	d53a      	bpl.n	800c218 <_printf_float+0x43c>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4642      	mov	r2, r8
 800c1a6:	4631      	mov	r1, r6
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b8      	blx	r7
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	f43f ae74 	beq.w	800be9a <_printf_float+0xbe>
 800c1b2:	ee18 3a10 	vmov	r3, s16
 800c1b6:	4652      	mov	r2, sl
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	47b8      	blx	r7
 800c1be:	3001      	adds	r0, #1
 800c1c0:	f43f ae6b 	beq.w	800be9a <_printf_float+0xbe>
 800c1c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c1d0:	f7f4 fcaa 	bl	8000b28 <__aeabi_dcmpeq>
 800c1d4:	b9d8      	cbnz	r0, 800c20e <_printf_float+0x432>
 800c1d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c1da:	f108 0201 	add.w	r2, r8, #1
 800c1de:	4631      	mov	r1, r6
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	47b8      	blx	r7
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	d10e      	bne.n	800c206 <_printf_float+0x42a>
 800c1e8:	e657      	b.n	800be9a <_printf_float+0xbe>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	4652      	mov	r2, sl
 800c1ee:	4631      	mov	r1, r6
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47b8      	blx	r7
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	f43f ae50 	beq.w	800be9a <_printf_float+0xbe>
 800c1fa:	f108 0801 	add.w	r8, r8, #1
 800c1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c200:	3b01      	subs	r3, #1
 800c202:	4543      	cmp	r3, r8
 800c204:	dcf1      	bgt.n	800c1ea <_printf_float+0x40e>
 800c206:	464b      	mov	r3, r9
 800c208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c20c:	e6da      	b.n	800bfc4 <_printf_float+0x1e8>
 800c20e:	f04f 0800 	mov.w	r8, #0
 800c212:	f104 0a1a 	add.w	sl, r4, #26
 800c216:	e7f2      	b.n	800c1fe <_printf_float+0x422>
 800c218:	2301      	movs	r3, #1
 800c21a:	4642      	mov	r2, r8
 800c21c:	e7df      	b.n	800c1de <_printf_float+0x402>
 800c21e:	2301      	movs	r3, #1
 800c220:	464a      	mov	r2, r9
 800c222:	4631      	mov	r1, r6
 800c224:	4628      	mov	r0, r5
 800c226:	47b8      	blx	r7
 800c228:	3001      	adds	r0, #1
 800c22a:	f43f ae36 	beq.w	800be9a <_printf_float+0xbe>
 800c22e:	f108 0801 	add.w	r8, r8, #1
 800c232:	68e3      	ldr	r3, [r4, #12]
 800c234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c236:	1a5b      	subs	r3, r3, r1
 800c238:	4543      	cmp	r3, r8
 800c23a:	dcf0      	bgt.n	800c21e <_printf_float+0x442>
 800c23c:	e6f8      	b.n	800c030 <_printf_float+0x254>
 800c23e:	f04f 0800 	mov.w	r8, #0
 800c242:	f104 0919 	add.w	r9, r4, #25
 800c246:	e7f4      	b.n	800c232 <_printf_float+0x456>

0800c248 <_printf_common>:
 800c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c24c:	4616      	mov	r6, r2
 800c24e:	4699      	mov	r9, r3
 800c250:	688a      	ldr	r2, [r1, #8]
 800c252:	690b      	ldr	r3, [r1, #16]
 800c254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c258:	4293      	cmp	r3, r2
 800c25a:	bfb8      	it	lt
 800c25c:	4613      	movlt	r3, r2
 800c25e:	6033      	str	r3, [r6, #0]
 800c260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c264:	4607      	mov	r7, r0
 800c266:	460c      	mov	r4, r1
 800c268:	b10a      	cbz	r2, 800c26e <_printf_common+0x26>
 800c26a:	3301      	adds	r3, #1
 800c26c:	6033      	str	r3, [r6, #0]
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	0699      	lsls	r1, r3, #26
 800c272:	bf42      	ittt	mi
 800c274:	6833      	ldrmi	r3, [r6, #0]
 800c276:	3302      	addmi	r3, #2
 800c278:	6033      	strmi	r3, [r6, #0]
 800c27a:	6825      	ldr	r5, [r4, #0]
 800c27c:	f015 0506 	ands.w	r5, r5, #6
 800c280:	d106      	bne.n	800c290 <_printf_common+0x48>
 800c282:	f104 0a19 	add.w	sl, r4, #25
 800c286:	68e3      	ldr	r3, [r4, #12]
 800c288:	6832      	ldr	r2, [r6, #0]
 800c28a:	1a9b      	subs	r3, r3, r2
 800c28c:	42ab      	cmp	r3, r5
 800c28e:	dc26      	bgt.n	800c2de <_printf_common+0x96>
 800c290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c294:	1e13      	subs	r3, r2, #0
 800c296:	6822      	ldr	r2, [r4, #0]
 800c298:	bf18      	it	ne
 800c29a:	2301      	movne	r3, #1
 800c29c:	0692      	lsls	r2, r2, #26
 800c29e:	d42b      	bmi.n	800c2f8 <_printf_common+0xb0>
 800c2a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2a4:	4649      	mov	r1, r9
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	47c0      	blx	r8
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	d01e      	beq.n	800c2ec <_printf_common+0xa4>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	6922      	ldr	r2, [r4, #16]
 800c2b2:	f003 0306 	and.w	r3, r3, #6
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	bf02      	ittt	eq
 800c2ba:	68e5      	ldreq	r5, [r4, #12]
 800c2bc:	6833      	ldreq	r3, [r6, #0]
 800c2be:	1aed      	subeq	r5, r5, r3
 800c2c0:	68a3      	ldr	r3, [r4, #8]
 800c2c2:	bf0c      	ite	eq
 800c2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2c8:	2500      	movne	r5, #0
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	bfc4      	itt	gt
 800c2ce:	1a9b      	subgt	r3, r3, r2
 800c2d0:	18ed      	addgt	r5, r5, r3
 800c2d2:	2600      	movs	r6, #0
 800c2d4:	341a      	adds	r4, #26
 800c2d6:	42b5      	cmp	r5, r6
 800c2d8:	d11a      	bne.n	800c310 <_printf_common+0xc8>
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e008      	b.n	800c2f0 <_printf_common+0xa8>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4652      	mov	r2, sl
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	47c0      	blx	r8
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d103      	bne.n	800c2f4 <_printf_common+0xac>
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f4:	3501      	adds	r5, #1
 800c2f6:	e7c6      	b.n	800c286 <_printf_common+0x3e>
 800c2f8:	18e1      	adds	r1, r4, r3
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	2030      	movs	r0, #48	; 0x30
 800c2fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c302:	4422      	add	r2, r4
 800c304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c30c:	3302      	adds	r3, #2
 800c30e:	e7c7      	b.n	800c2a0 <_printf_common+0x58>
 800c310:	2301      	movs	r3, #1
 800c312:	4622      	mov	r2, r4
 800c314:	4649      	mov	r1, r9
 800c316:	4638      	mov	r0, r7
 800c318:	47c0      	blx	r8
 800c31a:	3001      	adds	r0, #1
 800c31c:	d0e6      	beq.n	800c2ec <_printf_common+0xa4>
 800c31e:	3601      	adds	r6, #1
 800c320:	e7d9      	b.n	800c2d6 <_printf_common+0x8e>
	...

0800c324 <_printf_i>:
 800c324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c328:	7e0f      	ldrb	r7, [r1, #24]
 800c32a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c32c:	2f78      	cmp	r7, #120	; 0x78
 800c32e:	4691      	mov	r9, r2
 800c330:	4680      	mov	r8, r0
 800c332:	460c      	mov	r4, r1
 800c334:	469a      	mov	sl, r3
 800c336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c33a:	d807      	bhi.n	800c34c <_printf_i+0x28>
 800c33c:	2f62      	cmp	r7, #98	; 0x62
 800c33e:	d80a      	bhi.n	800c356 <_printf_i+0x32>
 800c340:	2f00      	cmp	r7, #0
 800c342:	f000 80d4 	beq.w	800c4ee <_printf_i+0x1ca>
 800c346:	2f58      	cmp	r7, #88	; 0x58
 800c348:	f000 80c0 	beq.w	800c4cc <_printf_i+0x1a8>
 800c34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c354:	e03a      	b.n	800c3cc <_printf_i+0xa8>
 800c356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c35a:	2b15      	cmp	r3, #21
 800c35c:	d8f6      	bhi.n	800c34c <_printf_i+0x28>
 800c35e:	a101      	add	r1, pc, #4	; (adr r1, 800c364 <_printf_i+0x40>)
 800c360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c364:	0800c3bd 	.word	0x0800c3bd
 800c368:	0800c3d1 	.word	0x0800c3d1
 800c36c:	0800c34d 	.word	0x0800c34d
 800c370:	0800c34d 	.word	0x0800c34d
 800c374:	0800c34d 	.word	0x0800c34d
 800c378:	0800c34d 	.word	0x0800c34d
 800c37c:	0800c3d1 	.word	0x0800c3d1
 800c380:	0800c34d 	.word	0x0800c34d
 800c384:	0800c34d 	.word	0x0800c34d
 800c388:	0800c34d 	.word	0x0800c34d
 800c38c:	0800c34d 	.word	0x0800c34d
 800c390:	0800c4d5 	.word	0x0800c4d5
 800c394:	0800c3fd 	.word	0x0800c3fd
 800c398:	0800c48f 	.word	0x0800c48f
 800c39c:	0800c34d 	.word	0x0800c34d
 800c3a0:	0800c34d 	.word	0x0800c34d
 800c3a4:	0800c4f7 	.word	0x0800c4f7
 800c3a8:	0800c34d 	.word	0x0800c34d
 800c3ac:	0800c3fd 	.word	0x0800c3fd
 800c3b0:	0800c34d 	.word	0x0800c34d
 800c3b4:	0800c34d 	.word	0x0800c34d
 800c3b8:	0800c497 	.word	0x0800c497
 800c3bc:	682b      	ldr	r3, [r5, #0]
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	602a      	str	r2, [r5, #0]
 800c3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e09f      	b.n	800c510 <_printf_i+0x1ec>
 800c3d0:	6820      	ldr	r0, [r4, #0]
 800c3d2:	682b      	ldr	r3, [r5, #0]
 800c3d4:	0607      	lsls	r7, r0, #24
 800c3d6:	f103 0104 	add.w	r1, r3, #4
 800c3da:	6029      	str	r1, [r5, #0]
 800c3dc:	d501      	bpl.n	800c3e2 <_printf_i+0xbe>
 800c3de:	681e      	ldr	r6, [r3, #0]
 800c3e0:	e003      	b.n	800c3ea <_printf_i+0xc6>
 800c3e2:	0646      	lsls	r6, r0, #25
 800c3e4:	d5fb      	bpl.n	800c3de <_printf_i+0xba>
 800c3e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c3ea:	2e00      	cmp	r6, #0
 800c3ec:	da03      	bge.n	800c3f6 <_printf_i+0xd2>
 800c3ee:	232d      	movs	r3, #45	; 0x2d
 800c3f0:	4276      	negs	r6, r6
 800c3f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3f6:	485a      	ldr	r0, [pc, #360]	; (800c560 <_printf_i+0x23c>)
 800c3f8:	230a      	movs	r3, #10
 800c3fa:	e012      	b.n	800c422 <_printf_i+0xfe>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	6820      	ldr	r0, [r4, #0]
 800c400:	1d19      	adds	r1, r3, #4
 800c402:	6029      	str	r1, [r5, #0]
 800c404:	0605      	lsls	r5, r0, #24
 800c406:	d501      	bpl.n	800c40c <_printf_i+0xe8>
 800c408:	681e      	ldr	r6, [r3, #0]
 800c40a:	e002      	b.n	800c412 <_printf_i+0xee>
 800c40c:	0641      	lsls	r1, r0, #25
 800c40e:	d5fb      	bpl.n	800c408 <_printf_i+0xe4>
 800c410:	881e      	ldrh	r6, [r3, #0]
 800c412:	4853      	ldr	r0, [pc, #332]	; (800c560 <_printf_i+0x23c>)
 800c414:	2f6f      	cmp	r7, #111	; 0x6f
 800c416:	bf0c      	ite	eq
 800c418:	2308      	moveq	r3, #8
 800c41a:	230a      	movne	r3, #10
 800c41c:	2100      	movs	r1, #0
 800c41e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c422:	6865      	ldr	r5, [r4, #4]
 800c424:	60a5      	str	r5, [r4, #8]
 800c426:	2d00      	cmp	r5, #0
 800c428:	bfa2      	ittt	ge
 800c42a:	6821      	ldrge	r1, [r4, #0]
 800c42c:	f021 0104 	bicge.w	r1, r1, #4
 800c430:	6021      	strge	r1, [r4, #0]
 800c432:	b90e      	cbnz	r6, 800c438 <_printf_i+0x114>
 800c434:	2d00      	cmp	r5, #0
 800c436:	d04b      	beq.n	800c4d0 <_printf_i+0x1ac>
 800c438:	4615      	mov	r5, r2
 800c43a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c43e:	fb03 6711 	mls	r7, r3, r1, r6
 800c442:	5dc7      	ldrb	r7, [r0, r7]
 800c444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c448:	4637      	mov	r7, r6
 800c44a:	42bb      	cmp	r3, r7
 800c44c:	460e      	mov	r6, r1
 800c44e:	d9f4      	bls.n	800c43a <_printf_i+0x116>
 800c450:	2b08      	cmp	r3, #8
 800c452:	d10b      	bne.n	800c46c <_printf_i+0x148>
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	07de      	lsls	r6, r3, #31
 800c458:	d508      	bpl.n	800c46c <_printf_i+0x148>
 800c45a:	6923      	ldr	r3, [r4, #16]
 800c45c:	6861      	ldr	r1, [r4, #4]
 800c45e:	4299      	cmp	r1, r3
 800c460:	bfde      	ittt	le
 800c462:	2330      	movle	r3, #48	; 0x30
 800c464:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c46c:	1b52      	subs	r2, r2, r5
 800c46e:	6122      	str	r2, [r4, #16]
 800c470:	f8cd a000 	str.w	sl, [sp]
 800c474:	464b      	mov	r3, r9
 800c476:	aa03      	add	r2, sp, #12
 800c478:	4621      	mov	r1, r4
 800c47a:	4640      	mov	r0, r8
 800c47c:	f7ff fee4 	bl	800c248 <_printf_common>
 800c480:	3001      	adds	r0, #1
 800c482:	d14a      	bne.n	800c51a <_printf_i+0x1f6>
 800c484:	f04f 30ff 	mov.w	r0, #4294967295
 800c488:	b004      	add	sp, #16
 800c48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	f043 0320 	orr.w	r3, r3, #32
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	4833      	ldr	r0, [pc, #204]	; (800c564 <_printf_i+0x240>)
 800c498:	2778      	movs	r7, #120	; 0x78
 800c49a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	6829      	ldr	r1, [r5, #0]
 800c4a2:	061f      	lsls	r7, r3, #24
 800c4a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4a8:	d402      	bmi.n	800c4b0 <_printf_i+0x18c>
 800c4aa:	065f      	lsls	r7, r3, #25
 800c4ac:	bf48      	it	mi
 800c4ae:	b2b6      	uxthmi	r6, r6
 800c4b0:	07df      	lsls	r7, r3, #31
 800c4b2:	bf48      	it	mi
 800c4b4:	f043 0320 	orrmi.w	r3, r3, #32
 800c4b8:	6029      	str	r1, [r5, #0]
 800c4ba:	bf48      	it	mi
 800c4bc:	6023      	strmi	r3, [r4, #0]
 800c4be:	b91e      	cbnz	r6, 800c4c8 <_printf_i+0x1a4>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	f023 0320 	bic.w	r3, r3, #32
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	2310      	movs	r3, #16
 800c4ca:	e7a7      	b.n	800c41c <_printf_i+0xf8>
 800c4cc:	4824      	ldr	r0, [pc, #144]	; (800c560 <_printf_i+0x23c>)
 800c4ce:	e7e4      	b.n	800c49a <_printf_i+0x176>
 800c4d0:	4615      	mov	r5, r2
 800c4d2:	e7bd      	b.n	800c450 <_printf_i+0x12c>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	6826      	ldr	r6, [r4, #0]
 800c4d8:	6961      	ldr	r1, [r4, #20]
 800c4da:	1d18      	adds	r0, r3, #4
 800c4dc:	6028      	str	r0, [r5, #0]
 800c4de:	0635      	lsls	r5, r6, #24
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	d501      	bpl.n	800c4e8 <_printf_i+0x1c4>
 800c4e4:	6019      	str	r1, [r3, #0]
 800c4e6:	e002      	b.n	800c4ee <_printf_i+0x1ca>
 800c4e8:	0670      	lsls	r0, r6, #25
 800c4ea:	d5fb      	bpl.n	800c4e4 <_printf_i+0x1c0>
 800c4ec:	8019      	strh	r1, [r3, #0]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	6123      	str	r3, [r4, #16]
 800c4f2:	4615      	mov	r5, r2
 800c4f4:	e7bc      	b.n	800c470 <_printf_i+0x14c>
 800c4f6:	682b      	ldr	r3, [r5, #0]
 800c4f8:	1d1a      	adds	r2, r3, #4
 800c4fa:	602a      	str	r2, [r5, #0]
 800c4fc:	681d      	ldr	r5, [r3, #0]
 800c4fe:	6862      	ldr	r2, [r4, #4]
 800c500:	2100      	movs	r1, #0
 800c502:	4628      	mov	r0, r5
 800c504:	f7f3 fe94 	bl	8000230 <memchr>
 800c508:	b108      	cbz	r0, 800c50e <_printf_i+0x1ea>
 800c50a:	1b40      	subs	r0, r0, r5
 800c50c:	6060      	str	r0, [r4, #4]
 800c50e:	6863      	ldr	r3, [r4, #4]
 800c510:	6123      	str	r3, [r4, #16]
 800c512:	2300      	movs	r3, #0
 800c514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c518:	e7aa      	b.n	800c470 <_printf_i+0x14c>
 800c51a:	6923      	ldr	r3, [r4, #16]
 800c51c:	462a      	mov	r2, r5
 800c51e:	4649      	mov	r1, r9
 800c520:	4640      	mov	r0, r8
 800c522:	47d0      	blx	sl
 800c524:	3001      	adds	r0, #1
 800c526:	d0ad      	beq.n	800c484 <_printf_i+0x160>
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	079b      	lsls	r3, r3, #30
 800c52c:	d413      	bmi.n	800c556 <_printf_i+0x232>
 800c52e:	68e0      	ldr	r0, [r4, #12]
 800c530:	9b03      	ldr	r3, [sp, #12]
 800c532:	4298      	cmp	r0, r3
 800c534:	bfb8      	it	lt
 800c536:	4618      	movlt	r0, r3
 800c538:	e7a6      	b.n	800c488 <_printf_i+0x164>
 800c53a:	2301      	movs	r3, #1
 800c53c:	4632      	mov	r2, r6
 800c53e:	4649      	mov	r1, r9
 800c540:	4640      	mov	r0, r8
 800c542:	47d0      	blx	sl
 800c544:	3001      	adds	r0, #1
 800c546:	d09d      	beq.n	800c484 <_printf_i+0x160>
 800c548:	3501      	adds	r5, #1
 800c54a:	68e3      	ldr	r3, [r4, #12]
 800c54c:	9903      	ldr	r1, [sp, #12]
 800c54e:	1a5b      	subs	r3, r3, r1
 800c550:	42ab      	cmp	r3, r5
 800c552:	dcf2      	bgt.n	800c53a <_printf_i+0x216>
 800c554:	e7eb      	b.n	800c52e <_printf_i+0x20a>
 800c556:	2500      	movs	r5, #0
 800c558:	f104 0619 	add.w	r6, r4, #25
 800c55c:	e7f5      	b.n	800c54a <_printf_i+0x226>
 800c55e:	bf00      	nop
 800c560:	0800fd83 	.word	0x0800fd83
 800c564:	0800fd94 	.word	0x0800fd94

0800c568 <std>:
 800c568:	2300      	movs	r3, #0
 800c56a:	b510      	push	{r4, lr}
 800c56c:	4604      	mov	r4, r0
 800c56e:	e9c0 3300 	strd	r3, r3, [r0]
 800c572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c576:	6083      	str	r3, [r0, #8]
 800c578:	8181      	strh	r1, [r0, #12]
 800c57a:	6643      	str	r3, [r0, #100]	; 0x64
 800c57c:	81c2      	strh	r2, [r0, #14]
 800c57e:	6183      	str	r3, [r0, #24]
 800c580:	4619      	mov	r1, r3
 800c582:	2208      	movs	r2, #8
 800c584:	305c      	adds	r0, #92	; 0x5c
 800c586:	f000 f935 	bl	800c7f4 <memset>
 800c58a:	4b0d      	ldr	r3, [pc, #52]	; (800c5c0 <std+0x58>)
 800c58c:	6263      	str	r3, [r4, #36]	; 0x24
 800c58e:	4b0d      	ldr	r3, [pc, #52]	; (800c5c4 <std+0x5c>)
 800c590:	62a3      	str	r3, [r4, #40]	; 0x28
 800c592:	4b0d      	ldr	r3, [pc, #52]	; (800c5c8 <std+0x60>)
 800c594:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c596:	4b0d      	ldr	r3, [pc, #52]	; (800c5cc <std+0x64>)
 800c598:	6323      	str	r3, [r4, #48]	; 0x30
 800c59a:	4b0d      	ldr	r3, [pc, #52]	; (800c5d0 <std+0x68>)
 800c59c:	6224      	str	r4, [r4, #32]
 800c59e:	429c      	cmp	r4, r3
 800c5a0:	d006      	beq.n	800c5b0 <std+0x48>
 800c5a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c5a6:	4294      	cmp	r4, r2
 800c5a8:	d002      	beq.n	800c5b0 <std+0x48>
 800c5aa:	33d0      	adds	r3, #208	; 0xd0
 800c5ac:	429c      	cmp	r4, r3
 800c5ae:	d105      	bne.n	800c5bc <std+0x54>
 800c5b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b8:	f000 b998 	b.w	800c8ec <__retarget_lock_init_recursive>
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	bf00      	nop
 800c5c0:	0800c72d 	.word	0x0800c72d
 800c5c4:	0800c74f 	.word	0x0800c74f
 800c5c8:	0800c787 	.word	0x0800c787
 800c5cc:	0800c7ab 	.word	0x0800c7ab
 800c5d0:	20009ac8 	.word	0x20009ac8

0800c5d4 <stdio_exit_handler>:
 800c5d4:	4a02      	ldr	r2, [pc, #8]	; (800c5e0 <stdio_exit_handler+0xc>)
 800c5d6:	4903      	ldr	r1, [pc, #12]	; (800c5e4 <stdio_exit_handler+0x10>)
 800c5d8:	4803      	ldr	r0, [pc, #12]	; (800c5e8 <stdio_exit_handler+0x14>)
 800c5da:	f000 b869 	b.w	800c6b0 <_fwalk_sglue>
 800c5de:	bf00      	nop
 800c5e0:	20000de8 	.word	0x20000de8
 800c5e4:	0800e2c9 	.word	0x0800e2c9
 800c5e8:	20000df4 	.word	0x20000df4

0800c5ec <cleanup_stdio>:
 800c5ec:	6841      	ldr	r1, [r0, #4]
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <cleanup_stdio+0x34>)
 800c5f0:	4299      	cmp	r1, r3
 800c5f2:	b510      	push	{r4, lr}
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	d001      	beq.n	800c5fc <cleanup_stdio+0x10>
 800c5f8:	f001 fe66 	bl	800e2c8 <_fflush_r>
 800c5fc:	68a1      	ldr	r1, [r4, #8]
 800c5fe:	4b09      	ldr	r3, [pc, #36]	; (800c624 <cleanup_stdio+0x38>)
 800c600:	4299      	cmp	r1, r3
 800c602:	d002      	beq.n	800c60a <cleanup_stdio+0x1e>
 800c604:	4620      	mov	r0, r4
 800c606:	f001 fe5f 	bl	800e2c8 <_fflush_r>
 800c60a:	68e1      	ldr	r1, [r4, #12]
 800c60c:	4b06      	ldr	r3, [pc, #24]	; (800c628 <cleanup_stdio+0x3c>)
 800c60e:	4299      	cmp	r1, r3
 800c610:	d004      	beq.n	800c61c <cleanup_stdio+0x30>
 800c612:	4620      	mov	r0, r4
 800c614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c618:	f001 be56 	b.w	800e2c8 <_fflush_r>
 800c61c:	bd10      	pop	{r4, pc}
 800c61e:	bf00      	nop
 800c620:	20009ac8 	.word	0x20009ac8
 800c624:	20009b30 	.word	0x20009b30
 800c628:	20009b98 	.word	0x20009b98

0800c62c <global_stdio_init.part.0>:
 800c62c:	b510      	push	{r4, lr}
 800c62e:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <global_stdio_init.part.0+0x30>)
 800c630:	4c0b      	ldr	r4, [pc, #44]	; (800c660 <global_stdio_init.part.0+0x34>)
 800c632:	4a0c      	ldr	r2, [pc, #48]	; (800c664 <global_stdio_init.part.0+0x38>)
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	4620      	mov	r0, r4
 800c638:	2200      	movs	r2, #0
 800c63a:	2104      	movs	r1, #4
 800c63c:	f7ff ff94 	bl	800c568 <std>
 800c640:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c644:	2201      	movs	r2, #1
 800c646:	2109      	movs	r1, #9
 800c648:	f7ff ff8e 	bl	800c568 <std>
 800c64c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c650:	2202      	movs	r2, #2
 800c652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c656:	2112      	movs	r1, #18
 800c658:	f7ff bf86 	b.w	800c568 <std>
 800c65c:	20009c00 	.word	0x20009c00
 800c660:	20009ac8 	.word	0x20009ac8
 800c664:	0800c5d5 	.word	0x0800c5d5

0800c668 <__sfp_lock_acquire>:
 800c668:	4801      	ldr	r0, [pc, #4]	; (800c670 <__sfp_lock_acquire+0x8>)
 800c66a:	f000 b940 	b.w	800c8ee <__retarget_lock_acquire_recursive>
 800c66e:	bf00      	nop
 800c670:	20009c09 	.word	0x20009c09

0800c674 <__sfp_lock_release>:
 800c674:	4801      	ldr	r0, [pc, #4]	; (800c67c <__sfp_lock_release+0x8>)
 800c676:	f000 b93b 	b.w	800c8f0 <__retarget_lock_release_recursive>
 800c67a:	bf00      	nop
 800c67c:	20009c09 	.word	0x20009c09

0800c680 <__sinit>:
 800c680:	b510      	push	{r4, lr}
 800c682:	4604      	mov	r4, r0
 800c684:	f7ff fff0 	bl	800c668 <__sfp_lock_acquire>
 800c688:	6a23      	ldr	r3, [r4, #32]
 800c68a:	b11b      	cbz	r3, 800c694 <__sinit+0x14>
 800c68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c690:	f7ff bff0 	b.w	800c674 <__sfp_lock_release>
 800c694:	4b04      	ldr	r3, [pc, #16]	; (800c6a8 <__sinit+0x28>)
 800c696:	6223      	str	r3, [r4, #32]
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <__sinit+0x2c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1f5      	bne.n	800c68c <__sinit+0xc>
 800c6a0:	f7ff ffc4 	bl	800c62c <global_stdio_init.part.0>
 800c6a4:	e7f2      	b.n	800c68c <__sinit+0xc>
 800c6a6:	bf00      	nop
 800c6a8:	0800c5ed 	.word	0x0800c5ed
 800c6ac:	20009c00 	.word	0x20009c00

0800c6b0 <_fwalk_sglue>:
 800c6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	4688      	mov	r8, r1
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	2600      	movs	r6, #0
 800c6bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c6c4:	d505      	bpl.n	800c6d2 <_fwalk_sglue+0x22>
 800c6c6:	6824      	ldr	r4, [r4, #0]
 800c6c8:	2c00      	cmp	r4, #0
 800c6ca:	d1f7      	bne.n	800c6bc <_fwalk_sglue+0xc>
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6d2:	89ab      	ldrh	r3, [r5, #12]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d907      	bls.n	800c6e8 <_fwalk_sglue+0x38>
 800c6d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	d003      	beq.n	800c6e8 <_fwalk_sglue+0x38>
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	47c0      	blx	r8
 800c6e6:	4306      	orrs	r6, r0
 800c6e8:	3568      	adds	r5, #104	; 0x68
 800c6ea:	e7e9      	b.n	800c6c0 <_fwalk_sglue+0x10>

0800c6ec <siprintf>:
 800c6ec:	b40e      	push	{r1, r2, r3}
 800c6ee:	b500      	push	{lr}
 800c6f0:	b09c      	sub	sp, #112	; 0x70
 800c6f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c6f4:	9002      	str	r0, [sp, #8]
 800c6f6:	9006      	str	r0, [sp, #24]
 800c6f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c6fc:	4809      	ldr	r0, [pc, #36]	; (800c724 <siprintf+0x38>)
 800c6fe:	9107      	str	r1, [sp, #28]
 800c700:	9104      	str	r1, [sp, #16]
 800c702:	4909      	ldr	r1, [pc, #36]	; (800c728 <siprintf+0x3c>)
 800c704:	f853 2b04 	ldr.w	r2, [r3], #4
 800c708:	9105      	str	r1, [sp, #20]
 800c70a:	6800      	ldr	r0, [r0, #0]
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	a902      	add	r1, sp, #8
 800c710:	f001 fc56 	bl	800dfc0 <_svfiprintf_r>
 800c714:	9b02      	ldr	r3, [sp, #8]
 800c716:	2200      	movs	r2, #0
 800c718:	701a      	strb	r2, [r3, #0]
 800c71a:	b01c      	add	sp, #112	; 0x70
 800c71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c720:	b003      	add	sp, #12
 800c722:	4770      	bx	lr
 800c724:	20000e40 	.word	0x20000e40
 800c728:	ffff0208 	.word	0xffff0208

0800c72c <__sread>:
 800c72c:	b510      	push	{r4, lr}
 800c72e:	460c      	mov	r4, r1
 800c730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c734:	f000 f88c 	bl	800c850 <_read_r>
 800c738:	2800      	cmp	r0, #0
 800c73a:	bfab      	itete	ge
 800c73c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c73e:	89a3      	ldrhlt	r3, [r4, #12]
 800c740:	181b      	addge	r3, r3, r0
 800c742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c746:	bfac      	ite	ge
 800c748:	6563      	strge	r3, [r4, #84]	; 0x54
 800c74a:	81a3      	strhlt	r3, [r4, #12]
 800c74c:	bd10      	pop	{r4, pc}

0800c74e <__swrite>:
 800c74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c752:	461f      	mov	r7, r3
 800c754:	898b      	ldrh	r3, [r1, #12]
 800c756:	05db      	lsls	r3, r3, #23
 800c758:	4605      	mov	r5, r0
 800c75a:	460c      	mov	r4, r1
 800c75c:	4616      	mov	r6, r2
 800c75e:	d505      	bpl.n	800c76c <__swrite+0x1e>
 800c760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c764:	2302      	movs	r3, #2
 800c766:	2200      	movs	r2, #0
 800c768:	f000 f860 	bl	800c82c <_lseek_r>
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c776:	81a3      	strh	r3, [r4, #12]
 800c778:	4632      	mov	r2, r6
 800c77a:	463b      	mov	r3, r7
 800c77c:	4628      	mov	r0, r5
 800c77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c782:	f000 b877 	b.w	800c874 <_write_r>

0800c786 <__sseek>:
 800c786:	b510      	push	{r4, lr}
 800c788:	460c      	mov	r4, r1
 800c78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c78e:	f000 f84d 	bl	800c82c <_lseek_r>
 800c792:	1c43      	adds	r3, r0, #1
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	bf15      	itete	ne
 800c798:	6560      	strne	r0, [r4, #84]	; 0x54
 800c79a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c79e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7a2:	81a3      	strheq	r3, [r4, #12]
 800c7a4:	bf18      	it	ne
 800c7a6:	81a3      	strhne	r3, [r4, #12]
 800c7a8:	bd10      	pop	{r4, pc}

0800c7aa <__sclose>:
 800c7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ae:	f000 b82d 	b.w	800c80c <_close_r>
	...

0800c7b4 <_vsiprintf_r>:
 800c7b4:	b500      	push	{lr}
 800c7b6:	b09b      	sub	sp, #108	; 0x6c
 800c7b8:	9100      	str	r1, [sp, #0]
 800c7ba:	9104      	str	r1, [sp, #16]
 800c7bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7c0:	9105      	str	r1, [sp, #20]
 800c7c2:	9102      	str	r1, [sp, #8]
 800c7c4:	4905      	ldr	r1, [pc, #20]	; (800c7dc <_vsiprintf_r+0x28>)
 800c7c6:	9103      	str	r1, [sp, #12]
 800c7c8:	4669      	mov	r1, sp
 800c7ca:	f001 fbf9 	bl	800dfc0 <_svfiprintf_r>
 800c7ce:	9b00      	ldr	r3, [sp, #0]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	b01b      	add	sp, #108	; 0x6c
 800c7d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7da:	bf00      	nop
 800c7dc:	ffff0208 	.word	0xffff0208

0800c7e0 <vsiprintf>:
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	460a      	mov	r2, r1
 800c7e4:	4601      	mov	r1, r0
 800c7e6:	4802      	ldr	r0, [pc, #8]	; (800c7f0 <vsiprintf+0x10>)
 800c7e8:	6800      	ldr	r0, [r0, #0]
 800c7ea:	f7ff bfe3 	b.w	800c7b4 <_vsiprintf_r>
 800c7ee:	bf00      	nop
 800c7f0:	20000e40 	.word	0x20000e40

0800c7f4 <memset>:
 800c7f4:	4402      	add	r2, r0
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d100      	bne.n	800c7fe <memset+0xa>
 800c7fc:	4770      	bx	lr
 800c7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c802:	e7f9      	b.n	800c7f8 <memset+0x4>

0800c804 <_localeconv_r>:
 800c804:	4800      	ldr	r0, [pc, #0]	; (800c808 <_localeconv_r+0x4>)
 800c806:	4770      	bx	lr
 800c808:	20000f34 	.word	0x20000f34

0800c80c <_close_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d06      	ldr	r5, [pc, #24]	; (800c828 <_close_r+0x1c>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	f7f4 fd11 	bl	800123e <_close>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_close_r+0x1a>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_close_r+0x1a>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	20009c04 	.word	0x20009c04

0800c82c <_lseek_r>:
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	4d07      	ldr	r5, [pc, #28]	; (800c84c <_lseek_r+0x20>)
 800c830:	4604      	mov	r4, r0
 800c832:	4608      	mov	r0, r1
 800c834:	4611      	mov	r1, r2
 800c836:	2200      	movs	r2, #0
 800c838:	602a      	str	r2, [r5, #0]
 800c83a:	461a      	mov	r2, r3
 800c83c:	f7f4 fd26 	bl	800128c <_lseek>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_lseek_r+0x1e>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_lseek_r+0x1e>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	20009c04 	.word	0x20009c04

0800c850 <_read_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d07      	ldr	r5, [pc, #28]	; (800c870 <_read_r+0x20>)
 800c854:	4604      	mov	r4, r0
 800c856:	4608      	mov	r0, r1
 800c858:	4611      	mov	r1, r2
 800c85a:	2200      	movs	r2, #0
 800c85c:	602a      	str	r2, [r5, #0]
 800c85e:	461a      	mov	r2, r3
 800c860:	f7f4 fcb4 	bl	80011cc <_read>
 800c864:	1c43      	adds	r3, r0, #1
 800c866:	d102      	bne.n	800c86e <_read_r+0x1e>
 800c868:	682b      	ldr	r3, [r5, #0]
 800c86a:	b103      	cbz	r3, 800c86e <_read_r+0x1e>
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	bd38      	pop	{r3, r4, r5, pc}
 800c870:	20009c04 	.word	0x20009c04

0800c874 <_write_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d07      	ldr	r5, [pc, #28]	; (800c894 <_write_r+0x20>)
 800c878:	4604      	mov	r4, r0
 800c87a:	4608      	mov	r0, r1
 800c87c:	4611      	mov	r1, r2
 800c87e:	2200      	movs	r2, #0
 800c880:	602a      	str	r2, [r5, #0]
 800c882:	461a      	mov	r2, r3
 800c884:	f7f4 fcbf 	bl	8001206 <_write>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_write_r+0x1e>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_write_r+0x1e>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	20009c04 	.word	0x20009c04

0800c898 <__errno>:
 800c898:	4b01      	ldr	r3, [pc, #4]	; (800c8a0 <__errno+0x8>)
 800c89a:	6818      	ldr	r0, [r3, #0]
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	20000e40 	.word	0x20000e40

0800c8a4 <__libc_init_array>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	4d0d      	ldr	r5, [pc, #52]	; (800c8dc <__libc_init_array+0x38>)
 800c8a8:	4c0d      	ldr	r4, [pc, #52]	; (800c8e0 <__libc_init_array+0x3c>)
 800c8aa:	1b64      	subs	r4, r4, r5
 800c8ac:	10a4      	asrs	r4, r4, #2
 800c8ae:	2600      	movs	r6, #0
 800c8b0:	42a6      	cmp	r6, r4
 800c8b2:	d109      	bne.n	800c8c8 <__libc_init_array+0x24>
 800c8b4:	4d0b      	ldr	r5, [pc, #44]	; (800c8e4 <__libc_init_array+0x40>)
 800c8b6:	4c0c      	ldr	r4, [pc, #48]	; (800c8e8 <__libc_init_array+0x44>)
 800c8b8:	f002 f89c 	bl	800e9f4 <_init>
 800c8bc:	1b64      	subs	r4, r4, r5
 800c8be:	10a4      	asrs	r4, r4, #2
 800c8c0:	2600      	movs	r6, #0
 800c8c2:	42a6      	cmp	r6, r4
 800c8c4:	d105      	bne.n	800c8d2 <__libc_init_array+0x2e>
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8cc:	4798      	blx	r3
 800c8ce:	3601      	adds	r6, #1
 800c8d0:	e7ee      	b.n	800c8b0 <__libc_init_array+0xc>
 800c8d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d6:	4798      	blx	r3
 800c8d8:	3601      	adds	r6, #1
 800c8da:	e7f2      	b.n	800c8c2 <__libc_init_array+0x1e>
 800c8dc:	0800ffec 	.word	0x0800ffec
 800c8e0:	0800ffec 	.word	0x0800ffec
 800c8e4:	0800ffec 	.word	0x0800ffec
 800c8e8:	0800fff0 	.word	0x0800fff0

0800c8ec <__retarget_lock_init_recursive>:
 800c8ec:	4770      	bx	lr

0800c8ee <__retarget_lock_acquire_recursive>:
 800c8ee:	4770      	bx	lr

0800c8f0 <__retarget_lock_release_recursive>:
 800c8f0:	4770      	bx	lr

0800c8f2 <strcpy>:
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8f8:	f803 2b01 	strb.w	r2, [r3], #1
 800c8fc:	2a00      	cmp	r2, #0
 800c8fe:	d1f9      	bne.n	800c8f4 <strcpy+0x2>
 800c900:	4770      	bx	lr

0800c902 <memcpy>:
 800c902:	440a      	add	r2, r1
 800c904:	4291      	cmp	r1, r2
 800c906:	f100 33ff 	add.w	r3, r0, #4294967295
 800c90a:	d100      	bne.n	800c90e <memcpy+0xc>
 800c90c:	4770      	bx	lr
 800c90e:	b510      	push	{r4, lr}
 800c910:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c918:	4291      	cmp	r1, r2
 800c91a:	d1f9      	bne.n	800c910 <memcpy+0xe>
 800c91c:	bd10      	pop	{r4, pc}

0800c91e <quorem>:
 800c91e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c922:	6903      	ldr	r3, [r0, #16]
 800c924:	690c      	ldr	r4, [r1, #16]
 800c926:	42a3      	cmp	r3, r4
 800c928:	4607      	mov	r7, r0
 800c92a:	db7e      	blt.n	800ca2a <quorem+0x10c>
 800c92c:	3c01      	subs	r4, #1
 800c92e:	f101 0814 	add.w	r8, r1, #20
 800c932:	f100 0514 	add.w	r5, r0, #20
 800c936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c93a:	9301      	str	r3, [sp, #4]
 800c93c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c944:	3301      	adds	r3, #1
 800c946:	429a      	cmp	r2, r3
 800c948:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c94c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c950:	fbb2 f6f3 	udiv	r6, r2, r3
 800c954:	d331      	bcc.n	800c9ba <quorem+0x9c>
 800c956:	f04f 0e00 	mov.w	lr, #0
 800c95a:	4640      	mov	r0, r8
 800c95c:	46ac      	mov	ip, r5
 800c95e:	46f2      	mov	sl, lr
 800c960:	f850 2b04 	ldr.w	r2, [r0], #4
 800c964:	b293      	uxth	r3, r2
 800c966:	fb06 e303 	mla	r3, r6, r3, lr
 800c96a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c96e:	0c1a      	lsrs	r2, r3, #16
 800c970:	b29b      	uxth	r3, r3
 800c972:	ebaa 0303 	sub.w	r3, sl, r3
 800c976:	f8dc a000 	ldr.w	sl, [ip]
 800c97a:	fa13 f38a 	uxtah	r3, r3, sl
 800c97e:	fb06 220e 	mla	r2, r6, lr, r2
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	9b00      	ldr	r3, [sp, #0]
 800c986:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c98a:	b292      	uxth	r2, r2
 800c98c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c994:	f8bd 3000 	ldrh.w	r3, [sp]
 800c998:	4581      	cmp	r9, r0
 800c99a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c99e:	f84c 3b04 	str.w	r3, [ip], #4
 800c9a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c9a6:	d2db      	bcs.n	800c960 <quorem+0x42>
 800c9a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c9ac:	b92b      	cbnz	r3, 800c9ba <quorem+0x9c>
 800c9ae:	9b01      	ldr	r3, [sp, #4]
 800c9b0:	3b04      	subs	r3, #4
 800c9b2:	429d      	cmp	r5, r3
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	d32c      	bcc.n	800ca12 <quorem+0xf4>
 800c9b8:	613c      	str	r4, [r7, #16]
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	f001 f9a6 	bl	800dd0c <__mcmp>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	db22      	blt.n	800ca0a <quorem+0xec>
 800c9c4:	3601      	adds	r6, #1
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	f858 2b04 	ldr.w	r2, [r8], #4
 800c9ce:	f8d1 c000 	ldr.w	ip, [r1]
 800c9d2:	b293      	uxth	r3, r2
 800c9d4:	1ac3      	subs	r3, r0, r3
 800c9d6:	0c12      	lsrs	r2, r2, #16
 800c9d8:	fa13 f38c 	uxtah	r3, r3, ip
 800c9dc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c9e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9ea:	45c1      	cmp	r9, r8
 800c9ec:	f841 3b04 	str.w	r3, [r1], #4
 800c9f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c9f4:	d2e9      	bcs.n	800c9ca <quorem+0xac>
 800c9f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9fe:	b922      	cbnz	r2, 800ca0a <quorem+0xec>
 800ca00:	3b04      	subs	r3, #4
 800ca02:	429d      	cmp	r5, r3
 800ca04:	461a      	mov	r2, r3
 800ca06:	d30a      	bcc.n	800ca1e <quorem+0x100>
 800ca08:	613c      	str	r4, [r7, #16]
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	b003      	add	sp, #12
 800ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca12:	6812      	ldr	r2, [r2, #0]
 800ca14:	3b04      	subs	r3, #4
 800ca16:	2a00      	cmp	r2, #0
 800ca18:	d1ce      	bne.n	800c9b8 <quorem+0x9a>
 800ca1a:	3c01      	subs	r4, #1
 800ca1c:	e7c9      	b.n	800c9b2 <quorem+0x94>
 800ca1e:	6812      	ldr	r2, [r2, #0]
 800ca20:	3b04      	subs	r3, #4
 800ca22:	2a00      	cmp	r2, #0
 800ca24:	d1f0      	bne.n	800ca08 <quorem+0xea>
 800ca26:	3c01      	subs	r4, #1
 800ca28:	e7eb      	b.n	800ca02 <quorem+0xe4>
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	e7ee      	b.n	800ca0c <quorem+0xee>
	...

0800ca30 <_dtoa_r>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	ed2d 8b04 	vpush	{d8-d9}
 800ca38:	69c5      	ldr	r5, [r0, #28]
 800ca3a:	b093      	sub	sp, #76	; 0x4c
 800ca3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ca40:	ec57 6b10 	vmov	r6, r7, d0
 800ca44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ca48:	9107      	str	r1, [sp, #28]
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	920a      	str	r2, [sp, #40]	; 0x28
 800ca4e:	930d      	str	r3, [sp, #52]	; 0x34
 800ca50:	b975      	cbnz	r5, 800ca70 <_dtoa_r+0x40>
 800ca52:	2010      	movs	r0, #16
 800ca54:	f000 fe2a 	bl	800d6ac <malloc>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	61e0      	str	r0, [r4, #28]
 800ca5c:	b920      	cbnz	r0, 800ca68 <_dtoa_r+0x38>
 800ca5e:	4bae      	ldr	r3, [pc, #696]	; (800cd18 <_dtoa_r+0x2e8>)
 800ca60:	21ef      	movs	r1, #239	; 0xef
 800ca62:	48ae      	ldr	r0, [pc, #696]	; (800cd1c <_dtoa_r+0x2ec>)
 800ca64:	f001 fc82 	bl	800e36c <__assert_func>
 800ca68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca6c:	6005      	str	r5, [r0, #0]
 800ca6e:	60c5      	str	r5, [r0, #12]
 800ca70:	69e3      	ldr	r3, [r4, #28]
 800ca72:	6819      	ldr	r1, [r3, #0]
 800ca74:	b151      	cbz	r1, 800ca8c <_dtoa_r+0x5c>
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	604a      	str	r2, [r1, #4]
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	4093      	lsls	r3, r2
 800ca7e:	608b      	str	r3, [r1, #8]
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 ff07 	bl	800d894 <_Bfree>
 800ca86:	69e3      	ldr	r3, [r4, #28]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	1e3b      	subs	r3, r7, #0
 800ca8e:	bfbb      	ittet	lt
 800ca90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca94:	9303      	strlt	r3, [sp, #12]
 800ca96:	2300      	movge	r3, #0
 800ca98:	2201      	movlt	r2, #1
 800ca9a:	bfac      	ite	ge
 800ca9c:	f8c8 3000 	strge.w	r3, [r8]
 800caa0:	f8c8 2000 	strlt.w	r2, [r8]
 800caa4:	4b9e      	ldr	r3, [pc, #632]	; (800cd20 <_dtoa_r+0x2f0>)
 800caa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800caaa:	ea33 0308 	bics.w	r3, r3, r8
 800caae:	d11b      	bne.n	800cae8 <_dtoa_r+0xb8>
 800cab0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cab2:	f242 730f 	movw	r3, #9999	; 0x270f
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cabc:	4333      	orrs	r3, r6
 800cabe:	f000 8593 	beq.w	800d5e8 <_dtoa_r+0xbb8>
 800cac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cac4:	b963      	cbnz	r3, 800cae0 <_dtoa_r+0xb0>
 800cac6:	4b97      	ldr	r3, [pc, #604]	; (800cd24 <_dtoa_r+0x2f4>)
 800cac8:	e027      	b.n	800cb1a <_dtoa_r+0xea>
 800caca:	4b97      	ldr	r3, [pc, #604]	; (800cd28 <_dtoa_r+0x2f8>)
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	3308      	adds	r3, #8
 800cad0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cad2:	6013      	str	r3, [r2, #0]
 800cad4:	9800      	ldr	r0, [sp, #0]
 800cad6:	b013      	add	sp, #76	; 0x4c
 800cad8:	ecbd 8b04 	vpop	{d8-d9}
 800cadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae0:	4b90      	ldr	r3, [pc, #576]	; (800cd24 <_dtoa_r+0x2f4>)
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	3303      	adds	r3, #3
 800cae6:	e7f3      	b.n	800cad0 <_dtoa_r+0xa0>
 800cae8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800caec:	2200      	movs	r2, #0
 800caee:	ec51 0b17 	vmov	r0, r1, d7
 800caf2:	eeb0 8a47 	vmov.f32	s16, s14
 800caf6:	eef0 8a67 	vmov.f32	s17, s15
 800cafa:	2300      	movs	r3, #0
 800cafc:	f7f4 f814 	bl	8000b28 <__aeabi_dcmpeq>
 800cb00:	4681      	mov	r9, r0
 800cb02:	b160      	cbz	r0, 800cb1e <_dtoa_r+0xee>
 800cb04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb06:	2301      	movs	r3, #1
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f000 8568 	beq.w	800d5e2 <_dtoa_r+0xbb2>
 800cb12:	4b86      	ldr	r3, [pc, #536]	; (800cd2c <_dtoa_r+0x2fc>)
 800cb14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	e7da      	b.n	800cad4 <_dtoa_r+0xa4>
 800cb1e:	aa10      	add	r2, sp, #64	; 0x40
 800cb20:	a911      	add	r1, sp, #68	; 0x44
 800cb22:	4620      	mov	r0, r4
 800cb24:	eeb0 0a48 	vmov.f32	s0, s16
 800cb28:	eef0 0a68 	vmov.f32	s1, s17
 800cb2c:	f001 f994 	bl	800de58 <__d2b>
 800cb30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cb34:	4682      	mov	sl, r0
 800cb36:	2d00      	cmp	r5, #0
 800cb38:	d07f      	beq.n	800cc3a <_dtoa_r+0x20a>
 800cb3a:	ee18 3a90 	vmov	r3, s17
 800cb3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cb46:	ec51 0b18 	vmov	r0, r1, d8
 800cb4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cb4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cb56:	4619      	mov	r1, r3
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4b75      	ldr	r3, [pc, #468]	; (800cd30 <_dtoa_r+0x300>)
 800cb5c:	f7f3 fbc4 	bl	80002e8 <__aeabi_dsub>
 800cb60:	a367      	add	r3, pc, #412	; (adr r3, 800cd00 <_dtoa_r+0x2d0>)
 800cb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb66:	f7f3 fd77 	bl	8000658 <__aeabi_dmul>
 800cb6a:	a367      	add	r3, pc, #412	; (adr r3, 800cd08 <_dtoa_r+0x2d8>)
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	f7f3 fbbc 	bl	80002ec <__adddf3>
 800cb74:	4606      	mov	r6, r0
 800cb76:	4628      	mov	r0, r5
 800cb78:	460f      	mov	r7, r1
 800cb7a:	f7f3 fd03 	bl	8000584 <__aeabi_i2d>
 800cb7e:	a364      	add	r3, pc, #400	; (adr r3, 800cd10 <_dtoa_r+0x2e0>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f7f3 fd68 	bl	8000658 <__aeabi_dmul>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	4639      	mov	r1, r7
 800cb90:	f7f3 fbac 	bl	80002ec <__adddf3>
 800cb94:	4606      	mov	r6, r0
 800cb96:	460f      	mov	r7, r1
 800cb98:	f7f4 f80e 	bl	8000bb8 <__aeabi_d2iz>
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	4683      	mov	fp, r0
 800cba0:	2300      	movs	r3, #0
 800cba2:	4630      	mov	r0, r6
 800cba4:	4639      	mov	r1, r7
 800cba6:	f7f3 ffc9 	bl	8000b3c <__aeabi_dcmplt>
 800cbaa:	b148      	cbz	r0, 800cbc0 <_dtoa_r+0x190>
 800cbac:	4658      	mov	r0, fp
 800cbae:	f7f3 fce9 	bl	8000584 <__aeabi_i2d>
 800cbb2:	4632      	mov	r2, r6
 800cbb4:	463b      	mov	r3, r7
 800cbb6:	f7f3 ffb7 	bl	8000b28 <__aeabi_dcmpeq>
 800cbba:	b908      	cbnz	r0, 800cbc0 <_dtoa_r+0x190>
 800cbbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbc0:	f1bb 0f16 	cmp.w	fp, #22
 800cbc4:	d857      	bhi.n	800cc76 <_dtoa_r+0x246>
 800cbc6:	4b5b      	ldr	r3, [pc, #364]	; (800cd34 <_dtoa_r+0x304>)
 800cbc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	ec51 0b18 	vmov	r0, r1, d8
 800cbd4:	f7f3 ffb2 	bl	8000b3c <__aeabi_dcmplt>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d04e      	beq.n	800cc7a <_dtoa_r+0x24a>
 800cbdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	930c      	str	r3, [sp, #48]	; 0x30
 800cbe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbe6:	1b5b      	subs	r3, r3, r5
 800cbe8:	1e5a      	subs	r2, r3, #1
 800cbea:	bf45      	ittet	mi
 800cbec:	f1c3 0301 	rsbmi	r3, r3, #1
 800cbf0:	9305      	strmi	r3, [sp, #20]
 800cbf2:	2300      	movpl	r3, #0
 800cbf4:	2300      	movmi	r3, #0
 800cbf6:	9206      	str	r2, [sp, #24]
 800cbf8:	bf54      	ite	pl
 800cbfa:	9305      	strpl	r3, [sp, #20]
 800cbfc:	9306      	strmi	r3, [sp, #24]
 800cbfe:	f1bb 0f00 	cmp.w	fp, #0
 800cc02:	db3c      	blt.n	800cc7e <_dtoa_r+0x24e>
 800cc04:	9b06      	ldr	r3, [sp, #24]
 800cc06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cc0a:	445b      	add	r3, fp
 800cc0c:	9306      	str	r3, [sp, #24]
 800cc0e:	2300      	movs	r3, #0
 800cc10:	9308      	str	r3, [sp, #32]
 800cc12:	9b07      	ldr	r3, [sp, #28]
 800cc14:	2b09      	cmp	r3, #9
 800cc16:	d868      	bhi.n	800ccea <_dtoa_r+0x2ba>
 800cc18:	2b05      	cmp	r3, #5
 800cc1a:	bfc4      	itt	gt
 800cc1c:	3b04      	subgt	r3, #4
 800cc1e:	9307      	strgt	r3, [sp, #28]
 800cc20:	9b07      	ldr	r3, [sp, #28]
 800cc22:	f1a3 0302 	sub.w	r3, r3, #2
 800cc26:	bfcc      	ite	gt
 800cc28:	2500      	movgt	r5, #0
 800cc2a:	2501      	movle	r5, #1
 800cc2c:	2b03      	cmp	r3, #3
 800cc2e:	f200 8085 	bhi.w	800cd3c <_dtoa_r+0x30c>
 800cc32:	e8df f003 	tbb	[pc, r3]
 800cc36:	3b2e      	.short	0x3b2e
 800cc38:	5839      	.short	0x5839
 800cc3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cc3e:	441d      	add	r5, r3
 800cc40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	bfc1      	itttt	gt
 800cc48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc4c:	fa08 f803 	lslgt.w	r8, r8, r3
 800cc50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cc54:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cc58:	bfd6      	itet	le
 800cc5a:	f1c3 0320 	rsble	r3, r3, #32
 800cc5e:	ea48 0003 	orrgt.w	r0, r8, r3
 800cc62:	fa06 f003 	lslle.w	r0, r6, r3
 800cc66:	f7f3 fc7d 	bl	8000564 <__aeabi_ui2d>
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cc70:	3d01      	subs	r5, #1
 800cc72:	920e      	str	r2, [sp, #56]	; 0x38
 800cc74:	e76f      	b.n	800cb56 <_dtoa_r+0x126>
 800cc76:	2301      	movs	r3, #1
 800cc78:	e7b3      	b.n	800cbe2 <_dtoa_r+0x1b2>
 800cc7a:	900c      	str	r0, [sp, #48]	; 0x30
 800cc7c:	e7b2      	b.n	800cbe4 <_dtoa_r+0x1b4>
 800cc7e:	9b05      	ldr	r3, [sp, #20]
 800cc80:	eba3 030b 	sub.w	r3, r3, fp
 800cc84:	9305      	str	r3, [sp, #20]
 800cc86:	f1cb 0300 	rsb	r3, fp, #0
 800cc8a:	9308      	str	r3, [sp, #32]
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc90:	e7bf      	b.n	800cc12 <_dtoa_r+0x1e2>
 800cc92:	2300      	movs	r3, #0
 800cc94:	9309      	str	r3, [sp, #36]	; 0x24
 800cc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	dc52      	bgt.n	800cd42 <_dtoa_r+0x312>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	9304      	str	r3, [sp, #16]
 800cca2:	461a      	mov	r2, r3
 800cca4:	920a      	str	r2, [sp, #40]	; 0x28
 800cca6:	e00b      	b.n	800ccc0 <_dtoa_r+0x290>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e7f3      	b.n	800cc94 <_dtoa_r+0x264>
 800ccac:	2300      	movs	r3, #0
 800ccae:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb2:	445b      	add	r3, fp
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	9304      	str	r3, [sp, #16]
 800ccbc:	bfb8      	it	lt
 800ccbe:	2301      	movlt	r3, #1
 800ccc0:	69e0      	ldr	r0, [r4, #28]
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	2204      	movs	r2, #4
 800ccc6:	f102 0614 	add.w	r6, r2, #20
 800ccca:	429e      	cmp	r6, r3
 800cccc:	d93d      	bls.n	800cd4a <_dtoa_r+0x31a>
 800ccce:	6041      	str	r1, [r0, #4]
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f000 fd9f 	bl	800d814 <_Balloc>
 800ccd6:	9000      	str	r0, [sp, #0]
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d139      	bne.n	800cd50 <_dtoa_r+0x320>
 800ccdc:	4b16      	ldr	r3, [pc, #88]	; (800cd38 <_dtoa_r+0x308>)
 800ccde:	4602      	mov	r2, r0
 800cce0:	f240 11af 	movw	r1, #431	; 0x1af
 800cce4:	e6bd      	b.n	800ca62 <_dtoa_r+0x32>
 800cce6:	2301      	movs	r3, #1
 800cce8:	e7e1      	b.n	800ccae <_dtoa_r+0x27e>
 800ccea:	2501      	movs	r5, #1
 800ccec:	2300      	movs	r3, #0
 800ccee:	9307      	str	r3, [sp, #28]
 800ccf0:	9509      	str	r5, [sp, #36]	; 0x24
 800ccf2:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	9304      	str	r3, [sp, #16]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	2312      	movs	r3, #18
 800ccfe:	e7d1      	b.n	800cca4 <_dtoa_r+0x274>
 800cd00:	636f4361 	.word	0x636f4361
 800cd04:	3fd287a7 	.word	0x3fd287a7
 800cd08:	8b60c8b3 	.word	0x8b60c8b3
 800cd0c:	3fc68a28 	.word	0x3fc68a28
 800cd10:	509f79fb 	.word	0x509f79fb
 800cd14:	3fd34413 	.word	0x3fd34413
 800cd18:	0800fdb2 	.word	0x0800fdb2
 800cd1c:	0800fdc9 	.word	0x0800fdc9
 800cd20:	7ff00000 	.word	0x7ff00000
 800cd24:	0800fdae 	.word	0x0800fdae
 800cd28:	0800fda5 	.word	0x0800fda5
 800cd2c:	0800fd82 	.word	0x0800fd82
 800cd30:	3ff80000 	.word	0x3ff80000
 800cd34:	0800feb8 	.word	0x0800feb8
 800cd38:	0800fe21 	.word	0x0800fe21
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd40:	e7d7      	b.n	800ccf2 <_dtoa_r+0x2c2>
 800cd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	9304      	str	r3, [sp, #16]
 800cd48:	e7ba      	b.n	800ccc0 <_dtoa_r+0x290>
 800cd4a:	3101      	adds	r1, #1
 800cd4c:	0052      	lsls	r2, r2, #1
 800cd4e:	e7ba      	b.n	800ccc6 <_dtoa_r+0x296>
 800cd50:	69e3      	ldr	r3, [r4, #28]
 800cd52:	9a00      	ldr	r2, [sp, #0]
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	9b04      	ldr	r3, [sp, #16]
 800cd58:	2b0e      	cmp	r3, #14
 800cd5a:	f200 80a8 	bhi.w	800ceae <_dtoa_r+0x47e>
 800cd5e:	2d00      	cmp	r5, #0
 800cd60:	f000 80a5 	beq.w	800ceae <_dtoa_r+0x47e>
 800cd64:	f1bb 0f00 	cmp.w	fp, #0
 800cd68:	dd38      	ble.n	800cddc <_dtoa_r+0x3ac>
 800cd6a:	4bc0      	ldr	r3, [pc, #768]	; (800d06c <_dtoa_r+0x63c>)
 800cd6c:	f00b 020f 	and.w	r2, fp, #15
 800cd70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cd78:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cd7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cd80:	d019      	beq.n	800cdb6 <_dtoa_r+0x386>
 800cd82:	4bbb      	ldr	r3, [pc, #748]	; (800d070 <_dtoa_r+0x640>)
 800cd84:	ec51 0b18 	vmov	r0, r1, d8
 800cd88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd8c:	f7f3 fd8e 	bl	80008ac <__aeabi_ddiv>
 800cd90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd94:	f008 080f 	and.w	r8, r8, #15
 800cd98:	2503      	movs	r5, #3
 800cd9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d070 <_dtoa_r+0x640>
 800cd9e:	f1b8 0f00 	cmp.w	r8, #0
 800cda2:	d10a      	bne.n	800cdba <_dtoa_r+0x38a>
 800cda4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cda8:	4632      	mov	r2, r6
 800cdaa:	463b      	mov	r3, r7
 800cdac:	f7f3 fd7e 	bl	80008ac <__aeabi_ddiv>
 800cdb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdb4:	e02b      	b.n	800ce0e <_dtoa_r+0x3de>
 800cdb6:	2502      	movs	r5, #2
 800cdb8:	e7ef      	b.n	800cd9a <_dtoa_r+0x36a>
 800cdba:	f018 0f01 	tst.w	r8, #1
 800cdbe:	d008      	beq.n	800cdd2 <_dtoa_r+0x3a2>
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	4639      	mov	r1, r7
 800cdc4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cdc8:	f7f3 fc46 	bl	8000658 <__aeabi_dmul>
 800cdcc:	3501      	adds	r5, #1
 800cdce:	4606      	mov	r6, r0
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cdd6:	f109 0908 	add.w	r9, r9, #8
 800cdda:	e7e0      	b.n	800cd9e <_dtoa_r+0x36e>
 800cddc:	f000 809f 	beq.w	800cf1e <_dtoa_r+0x4ee>
 800cde0:	f1cb 0600 	rsb	r6, fp, #0
 800cde4:	4ba1      	ldr	r3, [pc, #644]	; (800d06c <_dtoa_r+0x63c>)
 800cde6:	4fa2      	ldr	r7, [pc, #648]	; (800d070 <_dtoa_r+0x640>)
 800cde8:	f006 020f 	and.w	r2, r6, #15
 800cdec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf4:	ec51 0b18 	vmov	r0, r1, d8
 800cdf8:	f7f3 fc2e 	bl	8000658 <__aeabi_dmul>
 800cdfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce00:	1136      	asrs	r6, r6, #4
 800ce02:	2300      	movs	r3, #0
 800ce04:	2502      	movs	r5, #2
 800ce06:	2e00      	cmp	r6, #0
 800ce08:	d17e      	bne.n	800cf08 <_dtoa_r+0x4d8>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1d0      	bne.n	800cdb0 <_dtoa_r+0x380>
 800ce0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f000 8084 	beq.w	800cf22 <_dtoa_r+0x4f2>
 800ce1a:	4b96      	ldr	r3, [pc, #600]	; (800d074 <_dtoa_r+0x644>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4640      	mov	r0, r8
 800ce20:	4649      	mov	r1, r9
 800ce22:	f7f3 fe8b 	bl	8000b3c <__aeabi_dcmplt>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d07b      	beq.n	800cf22 <_dtoa_r+0x4f2>
 800ce2a:	9b04      	ldr	r3, [sp, #16]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d078      	beq.n	800cf22 <_dtoa_r+0x4f2>
 800ce30:	9b01      	ldr	r3, [sp, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	dd39      	ble.n	800ceaa <_dtoa_r+0x47a>
 800ce36:	4b90      	ldr	r3, [pc, #576]	; (800d078 <_dtoa_r+0x648>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	f7f3 fc0b 	bl	8000658 <__aeabi_dmul>
 800ce42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce46:	9e01      	ldr	r6, [sp, #4]
 800ce48:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ce4c:	3501      	adds	r5, #1
 800ce4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ce52:	4628      	mov	r0, r5
 800ce54:	f7f3 fb96 	bl	8000584 <__aeabi_i2d>
 800ce58:	4642      	mov	r2, r8
 800ce5a:	464b      	mov	r3, r9
 800ce5c:	f7f3 fbfc 	bl	8000658 <__aeabi_dmul>
 800ce60:	4b86      	ldr	r3, [pc, #536]	; (800d07c <_dtoa_r+0x64c>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	f7f3 fa42 	bl	80002ec <__adddf3>
 800ce68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ce6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce70:	9303      	str	r3, [sp, #12]
 800ce72:	2e00      	cmp	r6, #0
 800ce74:	d158      	bne.n	800cf28 <_dtoa_r+0x4f8>
 800ce76:	4b82      	ldr	r3, [pc, #520]	; (800d080 <_dtoa_r+0x650>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	4649      	mov	r1, r9
 800ce7e:	f7f3 fa33 	bl	80002e8 <__aeabi_dsub>
 800ce82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce86:	4680      	mov	r8, r0
 800ce88:	4689      	mov	r9, r1
 800ce8a:	f7f3 fe75 	bl	8000b78 <__aeabi_dcmpgt>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f040 8296 	bne.w	800d3c0 <_dtoa_r+0x990>
 800ce94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ce98:	4640      	mov	r0, r8
 800ce9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce9e:	4649      	mov	r1, r9
 800cea0:	f7f3 fe4c 	bl	8000b3c <__aeabi_dcmplt>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	f040 8289 	bne.w	800d3bc <_dtoa_r+0x98c>
 800ceaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ceae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f2c0 814e 	blt.w	800d152 <_dtoa_r+0x722>
 800ceb6:	f1bb 0f0e 	cmp.w	fp, #14
 800ceba:	f300 814a 	bgt.w	800d152 <_dtoa_r+0x722>
 800cebe:	4b6b      	ldr	r3, [pc, #428]	; (800d06c <_dtoa_r+0x63c>)
 800cec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f280 80dc 	bge.w	800d088 <_dtoa_r+0x658>
 800ced0:	9b04      	ldr	r3, [sp, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f300 80d8 	bgt.w	800d088 <_dtoa_r+0x658>
 800ced8:	f040 826f 	bne.w	800d3ba <_dtoa_r+0x98a>
 800cedc:	4b68      	ldr	r3, [pc, #416]	; (800d080 <_dtoa_r+0x650>)
 800cede:	2200      	movs	r2, #0
 800cee0:	4640      	mov	r0, r8
 800cee2:	4649      	mov	r1, r9
 800cee4:	f7f3 fbb8 	bl	8000658 <__aeabi_dmul>
 800cee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ceec:	f7f3 fe3a 	bl	8000b64 <__aeabi_dcmpge>
 800cef0:	9e04      	ldr	r6, [sp, #16]
 800cef2:	4637      	mov	r7, r6
 800cef4:	2800      	cmp	r0, #0
 800cef6:	f040 8245 	bne.w	800d384 <_dtoa_r+0x954>
 800cefa:	9d00      	ldr	r5, [sp, #0]
 800cefc:	2331      	movs	r3, #49	; 0x31
 800cefe:	f805 3b01 	strb.w	r3, [r5], #1
 800cf02:	f10b 0b01 	add.w	fp, fp, #1
 800cf06:	e241      	b.n	800d38c <_dtoa_r+0x95c>
 800cf08:	07f2      	lsls	r2, r6, #31
 800cf0a:	d505      	bpl.n	800cf18 <_dtoa_r+0x4e8>
 800cf0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf10:	f7f3 fba2 	bl	8000658 <__aeabi_dmul>
 800cf14:	3501      	adds	r5, #1
 800cf16:	2301      	movs	r3, #1
 800cf18:	1076      	asrs	r6, r6, #1
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	e773      	b.n	800ce06 <_dtoa_r+0x3d6>
 800cf1e:	2502      	movs	r5, #2
 800cf20:	e775      	b.n	800ce0e <_dtoa_r+0x3de>
 800cf22:	9e04      	ldr	r6, [sp, #16]
 800cf24:	465f      	mov	r7, fp
 800cf26:	e792      	b.n	800ce4e <_dtoa_r+0x41e>
 800cf28:	9900      	ldr	r1, [sp, #0]
 800cf2a:	4b50      	ldr	r3, [pc, #320]	; (800d06c <_dtoa_r+0x63c>)
 800cf2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf30:	4431      	add	r1, r6
 800cf32:	9102      	str	r1, [sp, #8]
 800cf34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf36:	eeb0 9a47 	vmov.f32	s18, s14
 800cf3a:	eef0 9a67 	vmov.f32	s19, s15
 800cf3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cf42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf46:	2900      	cmp	r1, #0
 800cf48:	d044      	beq.n	800cfd4 <_dtoa_r+0x5a4>
 800cf4a:	494e      	ldr	r1, [pc, #312]	; (800d084 <_dtoa_r+0x654>)
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	f7f3 fcad 	bl	80008ac <__aeabi_ddiv>
 800cf52:	ec53 2b19 	vmov	r2, r3, d9
 800cf56:	f7f3 f9c7 	bl	80002e8 <__aeabi_dsub>
 800cf5a:	9d00      	ldr	r5, [sp, #0]
 800cf5c:	ec41 0b19 	vmov	d9, r0, r1
 800cf60:	4649      	mov	r1, r9
 800cf62:	4640      	mov	r0, r8
 800cf64:	f7f3 fe28 	bl	8000bb8 <__aeabi_d2iz>
 800cf68:	4606      	mov	r6, r0
 800cf6a:	f7f3 fb0b 	bl	8000584 <__aeabi_i2d>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	4640      	mov	r0, r8
 800cf74:	4649      	mov	r1, r9
 800cf76:	f7f3 f9b7 	bl	80002e8 <__aeabi_dsub>
 800cf7a:	3630      	adds	r6, #48	; 0x30
 800cf7c:	f805 6b01 	strb.w	r6, [r5], #1
 800cf80:	ec53 2b19 	vmov	r2, r3, d9
 800cf84:	4680      	mov	r8, r0
 800cf86:	4689      	mov	r9, r1
 800cf88:	f7f3 fdd8 	bl	8000b3c <__aeabi_dcmplt>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d164      	bne.n	800d05a <_dtoa_r+0x62a>
 800cf90:	4642      	mov	r2, r8
 800cf92:	464b      	mov	r3, r9
 800cf94:	4937      	ldr	r1, [pc, #220]	; (800d074 <_dtoa_r+0x644>)
 800cf96:	2000      	movs	r0, #0
 800cf98:	f7f3 f9a6 	bl	80002e8 <__aeabi_dsub>
 800cf9c:	ec53 2b19 	vmov	r2, r3, d9
 800cfa0:	f7f3 fdcc 	bl	8000b3c <__aeabi_dcmplt>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	f040 80b6 	bne.w	800d116 <_dtoa_r+0x6e6>
 800cfaa:	9b02      	ldr	r3, [sp, #8]
 800cfac:	429d      	cmp	r5, r3
 800cfae:	f43f af7c 	beq.w	800ceaa <_dtoa_r+0x47a>
 800cfb2:	4b31      	ldr	r3, [pc, #196]	; (800d078 <_dtoa_r+0x648>)
 800cfb4:	ec51 0b19 	vmov	r0, r1, d9
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f7f3 fb4d 	bl	8000658 <__aeabi_dmul>
 800cfbe:	4b2e      	ldr	r3, [pc, #184]	; (800d078 <_dtoa_r+0x648>)
 800cfc0:	ec41 0b19 	vmov	d9, r0, r1
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4640      	mov	r0, r8
 800cfc8:	4649      	mov	r1, r9
 800cfca:	f7f3 fb45 	bl	8000658 <__aeabi_dmul>
 800cfce:	4680      	mov	r8, r0
 800cfd0:	4689      	mov	r9, r1
 800cfd2:	e7c5      	b.n	800cf60 <_dtoa_r+0x530>
 800cfd4:	ec51 0b17 	vmov	r0, r1, d7
 800cfd8:	f7f3 fb3e 	bl	8000658 <__aeabi_dmul>
 800cfdc:	9b02      	ldr	r3, [sp, #8]
 800cfde:	9d00      	ldr	r5, [sp, #0]
 800cfe0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfe2:	ec41 0b19 	vmov	d9, r0, r1
 800cfe6:	4649      	mov	r1, r9
 800cfe8:	4640      	mov	r0, r8
 800cfea:	f7f3 fde5 	bl	8000bb8 <__aeabi_d2iz>
 800cfee:	4606      	mov	r6, r0
 800cff0:	f7f3 fac8 	bl	8000584 <__aeabi_i2d>
 800cff4:	3630      	adds	r6, #48	; 0x30
 800cff6:	4602      	mov	r2, r0
 800cff8:	460b      	mov	r3, r1
 800cffa:	4640      	mov	r0, r8
 800cffc:	4649      	mov	r1, r9
 800cffe:	f7f3 f973 	bl	80002e8 <__aeabi_dsub>
 800d002:	f805 6b01 	strb.w	r6, [r5], #1
 800d006:	9b02      	ldr	r3, [sp, #8]
 800d008:	429d      	cmp	r5, r3
 800d00a:	4680      	mov	r8, r0
 800d00c:	4689      	mov	r9, r1
 800d00e:	f04f 0200 	mov.w	r2, #0
 800d012:	d124      	bne.n	800d05e <_dtoa_r+0x62e>
 800d014:	4b1b      	ldr	r3, [pc, #108]	; (800d084 <_dtoa_r+0x654>)
 800d016:	ec51 0b19 	vmov	r0, r1, d9
 800d01a:	f7f3 f967 	bl	80002ec <__adddf3>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4640      	mov	r0, r8
 800d024:	4649      	mov	r1, r9
 800d026:	f7f3 fda7 	bl	8000b78 <__aeabi_dcmpgt>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d173      	bne.n	800d116 <_dtoa_r+0x6e6>
 800d02e:	ec53 2b19 	vmov	r2, r3, d9
 800d032:	4914      	ldr	r1, [pc, #80]	; (800d084 <_dtoa_r+0x654>)
 800d034:	2000      	movs	r0, #0
 800d036:	f7f3 f957 	bl	80002e8 <__aeabi_dsub>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	4640      	mov	r0, r8
 800d040:	4649      	mov	r1, r9
 800d042:	f7f3 fd7b 	bl	8000b3c <__aeabi_dcmplt>
 800d046:	2800      	cmp	r0, #0
 800d048:	f43f af2f 	beq.w	800ceaa <_dtoa_r+0x47a>
 800d04c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d04e:	1e6b      	subs	r3, r5, #1
 800d050:	930f      	str	r3, [sp, #60]	; 0x3c
 800d052:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d056:	2b30      	cmp	r3, #48	; 0x30
 800d058:	d0f8      	beq.n	800d04c <_dtoa_r+0x61c>
 800d05a:	46bb      	mov	fp, r7
 800d05c:	e04a      	b.n	800d0f4 <_dtoa_r+0x6c4>
 800d05e:	4b06      	ldr	r3, [pc, #24]	; (800d078 <_dtoa_r+0x648>)
 800d060:	f7f3 fafa 	bl	8000658 <__aeabi_dmul>
 800d064:	4680      	mov	r8, r0
 800d066:	4689      	mov	r9, r1
 800d068:	e7bd      	b.n	800cfe6 <_dtoa_r+0x5b6>
 800d06a:	bf00      	nop
 800d06c:	0800feb8 	.word	0x0800feb8
 800d070:	0800fe90 	.word	0x0800fe90
 800d074:	3ff00000 	.word	0x3ff00000
 800d078:	40240000 	.word	0x40240000
 800d07c:	401c0000 	.word	0x401c0000
 800d080:	40140000 	.word	0x40140000
 800d084:	3fe00000 	.word	0x3fe00000
 800d088:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d08c:	9d00      	ldr	r5, [sp, #0]
 800d08e:	4642      	mov	r2, r8
 800d090:	464b      	mov	r3, r9
 800d092:	4630      	mov	r0, r6
 800d094:	4639      	mov	r1, r7
 800d096:	f7f3 fc09 	bl	80008ac <__aeabi_ddiv>
 800d09a:	f7f3 fd8d 	bl	8000bb8 <__aeabi_d2iz>
 800d09e:	9001      	str	r0, [sp, #4]
 800d0a0:	f7f3 fa70 	bl	8000584 <__aeabi_i2d>
 800d0a4:	4642      	mov	r2, r8
 800d0a6:	464b      	mov	r3, r9
 800d0a8:	f7f3 fad6 	bl	8000658 <__aeabi_dmul>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 f918 	bl	80002e8 <__aeabi_dsub>
 800d0b8:	9e01      	ldr	r6, [sp, #4]
 800d0ba:	9f04      	ldr	r7, [sp, #16]
 800d0bc:	3630      	adds	r6, #48	; 0x30
 800d0be:	f805 6b01 	strb.w	r6, [r5], #1
 800d0c2:	9e00      	ldr	r6, [sp, #0]
 800d0c4:	1bae      	subs	r6, r5, r6
 800d0c6:	42b7      	cmp	r7, r6
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	d134      	bne.n	800d138 <_dtoa_r+0x708>
 800d0ce:	f7f3 f90d 	bl	80002ec <__adddf3>
 800d0d2:	4642      	mov	r2, r8
 800d0d4:	464b      	mov	r3, r9
 800d0d6:	4606      	mov	r6, r0
 800d0d8:	460f      	mov	r7, r1
 800d0da:	f7f3 fd4d 	bl	8000b78 <__aeabi_dcmpgt>
 800d0de:	b9c8      	cbnz	r0, 800d114 <_dtoa_r+0x6e4>
 800d0e0:	4642      	mov	r2, r8
 800d0e2:	464b      	mov	r3, r9
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	f7f3 fd1e 	bl	8000b28 <__aeabi_dcmpeq>
 800d0ec:	b110      	cbz	r0, 800d0f4 <_dtoa_r+0x6c4>
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	07db      	lsls	r3, r3, #31
 800d0f2:	d40f      	bmi.n	800d114 <_dtoa_r+0x6e4>
 800d0f4:	4651      	mov	r1, sl
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f000 fbcc 	bl	800d894 <_Bfree>
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d100:	702b      	strb	r3, [r5, #0]
 800d102:	f10b 0301 	add.w	r3, fp, #1
 800d106:	6013      	str	r3, [r2, #0]
 800d108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f43f ace2 	beq.w	800cad4 <_dtoa_r+0xa4>
 800d110:	601d      	str	r5, [r3, #0]
 800d112:	e4df      	b.n	800cad4 <_dtoa_r+0xa4>
 800d114:	465f      	mov	r7, fp
 800d116:	462b      	mov	r3, r5
 800d118:	461d      	mov	r5, r3
 800d11a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d11e:	2a39      	cmp	r2, #57	; 0x39
 800d120:	d106      	bne.n	800d130 <_dtoa_r+0x700>
 800d122:	9a00      	ldr	r2, [sp, #0]
 800d124:	429a      	cmp	r2, r3
 800d126:	d1f7      	bne.n	800d118 <_dtoa_r+0x6e8>
 800d128:	9900      	ldr	r1, [sp, #0]
 800d12a:	2230      	movs	r2, #48	; 0x30
 800d12c:	3701      	adds	r7, #1
 800d12e:	700a      	strb	r2, [r1, #0]
 800d130:	781a      	ldrb	r2, [r3, #0]
 800d132:	3201      	adds	r2, #1
 800d134:	701a      	strb	r2, [r3, #0]
 800d136:	e790      	b.n	800d05a <_dtoa_r+0x62a>
 800d138:	4ba3      	ldr	r3, [pc, #652]	; (800d3c8 <_dtoa_r+0x998>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	f7f3 fa8c 	bl	8000658 <__aeabi_dmul>
 800d140:	2200      	movs	r2, #0
 800d142:	2300      	movs	r3, #0
 800d144:	4606      	mov	r6, r0
 800d146:	460f      	mov	r7, r1
 800d148:	f7f3 fcee 	bl	8000b28 <__aeabi_dcmpeq>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d09e      	beq.n	800d08e <_dtoa_r+0x65e>
 800d150:	e7d0      	b.n	800d0f4 <_dtoa_r+0x6c4>
 800d152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d154:	2a00      	cmp	r2, #0
 800d156:	f000 80ca 	beq.w	800d2ee <_dtoa_r+0x8be>
 800d15a:	9a07      	ldr	r2, [sp, #28]
 800d15c:	2a01      	cmp	r2, #1
 800d15e:	f300 80ad 	bgt.w	800d2bc <_dtoa_r+0x88c>
 800d162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d164:	2a00      	cmp	r2, #0
 800d166:	f000 80a5 	beq.w	800d2b4 <_dtoa_r+0x884>
 800d16a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d16e:	9e08      	ldr	r6, [sp, #32]
 800d170:	9d05      	ldr	r5, [sp, #20]
 800d172:	9a05      	ldr	r2, [sp, #20]
 800d174:	441a      	add	r2, r3
 800d176:	9205      	str	r2, [sp, #20]
 800d178:	9a06      	ldr	r2, [sp, #24]
 800d17a:	2101      	movs	r1, #1
 800d17c:	441a      	add	r2, r3
 800d17e:	4620      	mov	r0, r4
 800d180:	9206      	str	r2, [sp, #24]
 800d182:	f000 fc3d 	bl	800da00 <__i2b>
 800d186:	4607      	mov	r7, r0
 800d188:	b165      	cbz	r5, 800d1a4 <_dtoa_r+0x774>
 800d18a:	9b06      	ldr	r3, [sp, #24]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	dd09      	ble.n	800d1a4 <_dtoa_r+0x774>
 800d190:	42ab      	cmp	r3, r5
 800d192:	9a05      	ldr	r2, [sp, #20]
 800d194:	bfa8      	it	ge
 800d196:	462b      	movge	r3, r5
 800d198:	1ad2      	subs	r2, r2, r3
 800d19a:	9205      	str	r2, [sp, #20]
 800d19c:	9a06      	ldr	r2, [sp, #24]
 800d19e:	1aed      	subs	r5, r5, r3
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	9306      	str	r3, [sp, #24]
 800d1a4:	9b08      	ldr	r3, [sp, #32]
 800d1a6:	b1f3      	cbz	r3, 800d1e6 <_dtoa_r+0x7b6>
 800d1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f000 80a3 	beq.w	800d2f6 <_dtoa_r+0x8c6>
 800d1b0:	2e00      	cmp	r6, #0
 800d1b2:	dd10      	ble.n	800d1d6 <_dtoa_r+0x7a6>
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	4632      	mov	r2, r6
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f000 fce1 	bl	800db80 <__pow5mult>
 800d1be:	4652      	mov	r2, sl
 800d1c0:	4601      	mov	r1, r0
 800d1c2:	4607      	mov	r7, r0
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f000 fc31 	bl	800da2c <__multiply>
 800d1ca:	4651      	mov	r1, sl
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f000 fb60 	bl	800d894 <_Bfree>
 800d1d4:	46c2      	mov	sl, r8
 800d1d6:	9b08      	ldr	r3, [sp, #32]
 800d1d8:	1b9a      	subs	r2, r3, r6
 800d1da:	d004      	beq.n	800d1e6 <_dtoa_r+0x7b6>
 800d1dc:	4651      	mov	r1, sl
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 fcce 	bl	800db80 <__pow5mult>
 800d1e4:	4682      	mov	sl, r0
 800d1e6:	2101      	movs	r1, #1
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f000 fc09 	bl	800da00 <__i2b>
 800d1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	f340 8081 	ble.w	800d2fa <_dtoa_r+0x8ca>
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	4601      	mov	r1, r0
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 fcbf 	bl	800db80 <__pow5mult>
 800d202:	9b07      	ldr	r3, [sp, #28]
 800d204:	2b01      	cmp	r3, #1
 800d206:	4606      	mov	r6, r0
 800d208:	dd7a      	ble.n	800d300 <_dtoa_r+0x8d0>
 800d20a:	f04f 0800 	mov.w	r8, #0
 800d20e:	6933      	ldr	r3, [r6, #16]
 800d210:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d214:	6918      	ldr	r0, [r3, #16]
 800d216:	f000 fba5 	bl	800d964 <__hi0bits>
 800d21a:	f1c0 0020 	rsb	r0, r0, #32
 800d21e:	9b06      	ldr	r3, [sp, #24]
 800d220:	4418      	add	r0, r3
 800d222:	f010 001f 	ands.w	r0, r0, #31
 800d226:	f000 8094 	beq.w	800d352 <_dtoa_r+0x922>
 800d22a:	f1c0 0320 	rsb	r3, r0, #32
 800d22e:	2b04      	cmp	r3, #4
 800d230:	f340 8085 	ble.w	800d33e <_dtoa_r+0x90e>
 800d234:	9b05      	ldr	r3, [sp, #20]
 800d236:	f1c0 001c 	rsb	r0, r0, #28
 800d23a:	4403      	add	r3, r0
 800d23c:	9305      	str	r3, [sp, #20]
 800d23e:	9b06      	ldr	r3, [sp, #24]
 800d240:	4403      	add	r3, r0
 800d242:	4405      	add	r5, r0
 800d244:	9306      	str	r3, [sp, #24]
 800d246:	9b05      	ldr	r3, [sp, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dd05      	ble.n	800d258 <_dtoa_r+0x828>
 800d24c:	4651      	mov	r1, sl
 800d24e:	461a      	mov	r2, r3
 800d250:	4620      	mov	r0, r4
 800d252:	f000 fcef 	bl	800dc34 <__lshift>
 800d256:	4682      	mov	sl, r0
 800d258:	9b06      	ldr	r3, [sp, #24]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	dd05      	ble.n	800d26a <_dtoa_r+0x83a>
 800d25e:	4631      	mov	r1, r6
 800d260:	461a      	mov	r2, r3
 800d262:	4620      	mov	r0, r4
 800d264:	f000 fce6 	bl	800dc34 <__lshift>
 800d268:	4606      	mov	r6, r0
 800d26a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d072      	beq.n	800d356 <_dtoa_r+0x926>
 800d270:	4631      	mov	r1, r6
 800d272:	4650      	mov	r0, sl
 800d274:	f000 fd4a 	bl	800dd0c <__mcmp>
 800d278:	2800      	cmp	r0, #0
 800d27a:	da6c      	bge.n	800d356 <_dtoa_r+0x926>
 800d27c:	2300      	movs	r3, #0
 800d27e:	4651      	mov	r1, sl
 800d280:	220a      	movs	r2, #10
 800d282:	4620      	mov	r0, r4
 800d284:	f000 fb28 	bl	800d8d8 <__multadd>
 800d288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d28a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d28e:	4682      	mov	sl, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 81b0 	beq.w	800d5f6 <_dtoa_r+0xbc6>
 800d296:	2300      	movs	r3, #0
 800d298:	4639      	mov	r1, r7
 800d29a:	220a      	movs	r2, #10
 800d29c:	4620      	mov	r0, r4
 800d29e:	f000 fb1b 	bl	800d8d8 <__multadd>
 800d2a2:	9b01      	ldr	r3, [sp, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	4607      	mov	r7, r0
 800d2a8:	f300 8096 	bgt.w	800d3d8 <_dtoa_r+0x9a8>
 800d2ac:	9b07      	ldr	r3, [sp, #28]
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	dc59      	bgt.n	800d366 <_dtoa_r+0x936>
 800d2b2:	e091      	b.n	800d3d8 <_dtoa_r+0x9a8>
 800d2b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d2ba:	e758      	b.n	800d16e <_dtoa_r+0x73e>
 800d2bc:	9b04      	ldr	r3, [sp, #16]
 800d2be:	1e5e      	subs	r6, r3, #1
 800d2c0:	9b08      	ldr	r3, [sp, #32]
 800d2c2:	42b3      	cmp	r3, r6
 800d2c4:	bfbf      	itttt	lt
 800d2c6:	9b08      	ldrlt	r3, [sp, #32]
 800d2c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d2ca:	9608      	strlt	r6, [sp, #32]
 800d2cc:	1af3      	sublt	r3, r6, r3
 800d2ce:	bfb4      	ite	lt
 800d2d0:	18d2      	addlt	r2, r2, r3
 800d2d2:	1b9e      	subge	r6, r3, r6
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	bfbc      	itt	lt
 800d2d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d2da:	2600      	movlt	r6, #0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfb7      	itett	lt
 800d2e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d2e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d2e8:	1a9d      	sublt	r5, r3, r2
 800d2ea:	2300      	movlt	r3, #0
 800d2ec:	e741      	b.n	800d172 <_dtoa_r+0x742>
 800d2ee:	9e08      	ldr	r6, [sp, #32]
 800d2f0:	9d05      	ldr	r5, [sp, #20]
 800d2f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d2f4:	e748      	b.n	800d188 <_dtoa_r+0x758>
 800d2f6:	9a08      	ldr	r2, [sp, #32]
 800d2f8:	e770      	b.n	800d1dc <_dtoa_r+0x7ac>
 800d2fa:	9b07      	ldr	r3, [sp, #28]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	dc19      	bgt.n	800d334 <_dtoa_r+0x904>
 800d300:	9b02      	ldr	r3, [sp, #8]
 800d302:	b9bb      	cbnz	r3, 800d334 <_dtoa_r+0x904>
 800d304:	9b03      	ldr	r3, [sp, #12]
 800d306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d30a:	b99b      	cbnz	r3, 800d334 <_dtoa_r+0x904>
 800d30c:	9b03      	ldr	r3, [sp, #12]
 800d30e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d312:	0d1b      	lsrs	r3, r3, #20
 800d314:	051b      	lsls	r3, r3, #20
 800d316:	b183      	cbz	r3, 800d33a <_dtoa_r+0x90a>
 800d318:	9b05      	ldr	r3, [sp, #20]
 800d31a:	3301      	adds	r3, #1
 800d31c:	9305      	str	r3, [sp, #20]
 800d31e:	9b06      	ldr	r3, [sp, #24]
 800d320:	3301      	adds	r3, #1
 800d322:	9306      	str	r3, [sp, #24]
 800d324:	f04f 0801 	mov.w	r8, #1
 800d328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f47f af6f 	bne.w	800d20e <_dtoa_r+0x7de>
 800d330:	2001      	movs	r0, #1
 800d332:	e774      	b.n	800d21e <_dtoa_r+0x7ee>
 800d334:	f04f 0800 	mov.w	r8, #0
 800d338:	e7f6      	b.n	800d328 <_dtoa_r+0x8f8>
 800d33a:	4698      	mov	r8, r3
 800d33c:	e7f4      	b.n	800d328 <_dtoa_r+0x8f8>
 800d33e:	d082      	beq.n	800d246 <_dtoa_r+0x816>
 800d340:	9a05      	ldr	r2, [sp, #20]
 800d342:	331c      	adds	r3, #28
 800d344:	441a      	add	r2, r3
 800d346:	9205      	str	r2, [sp, #20]
 800d348:	9a06      	ldr	r2, [sp, #24]
 800d34a:	441a      	add	r2, r3
 800d34c:	441d      	add	r5, r3
 800d34e:	9206      	str	r2, [sp, #24]
 800d350:	e779      	b.n	800d246 <_dtoa_r+0x816>
 800d352:	4603      	mov	r3, r0
 800d354:	e7f4      	b.n	800d340 <_dtoa_r+0x910>
 800d356:	9b04      	ldr	r3, [sp, #16]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	dc37      	bgt.n	800d3cc <_dtoa_r+0x99c>
 800d35c:	9b07      	ldr	r3, [sp, #28]
 800d35e:	2b02      	cmp	r3, #2
 800d360:	dd34      	ble.n	800d3cc <_dtoa_r+0x99c>
 800d362:	9b04      	ldr	r3, [sp, #16]
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	9b01      	ldr	r3, [sp, #4]
 800d368:	b963      	cbnz	r3, 800d384 <_dtoa_r+0x954>
 800d36a:	4631      	mov	r1, r6
 800d36c:	2205      	movs	r2, #5
 800d36e:	4620      	mov	r0, r4
 800d370:	f000 fab2 	bl	800d8d8 <__multadd>
 800d374:	4601      	mov	r1, r0
 800d376:	4606      	mov	r6, r0
 800d378:	4650      	mov	r0, sl
 800d37a:	f000 fcc7 	bl	800dd0c <__mcmp>
 800d37e:	2800      	cmp	r0, #0
 800d380:	f73f adbb 	bgt.w	800cefa <_dtoa_r+0x4ca>
 800d384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d386:	9d00      	ldr	r5, [sp, #0]
 800d388:	ea6f 0b03 	mvn.w	fp, r3
 800d38c:	f04f 0800 	mov.w	r8, #0
 800d390:	4631      	mov	r1, r6
 800d392:	4620      	mov	r0, r4
 800d394:	f000 fa7e 	bl	800d894 <_Bfree>
 800d398:	2f00      	cmp	r7, #0
 800d39a:	f43f aeab 	beq.w	800d0f4 <_dtoa_r+0x6c4>
 800d39e:	f1b8 0f00 	cmp.w	r8, #0
 800d3a2:	d005      	beq.n	800d3b0 <_dtoa_r+0x980>
 800d3a4:	45b8      	cmp	r8, r7
 800d3a6:	d003      	beq.n	800d3b0 <_dtoa_r+0x980>
 800d3a8:	4641      	mov	r1, r8
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f000 fa72 	bl	800d894 <_Bfree>
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f000 fa6e 	bl	800d894 <_Bfree>
 800d3b8:	e69c      	b.n	800d0f4 <_dtoa_r+0x6c4>
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	4637      	mov	r7, r6
 800d3be:	e7e1      	b.n	800d384 <_dtoa_r+0x954>
 800d3c0:	46bb      	mov	fp, r7
 800d3c2:	4637      	mov	r7, r6
 800d3c4:	e599      	b.n	800cefa <_dtoa_r+0x4ca>
 800d3c6:	bf00      	nop
 800d3c8:	40240000 	.word	0x40240000
 800d3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 80c8 	beq.w	800d564 <_dtoa_r+0xb34>
 800d3d4:	9b04      	ldr	r3, [sp, #16]
 800d3d6:	9301      	str	r3, [sp, #4]
 800d3d8:	2d00      	cmp	r5, #0
 800d3da:	dd05      	ble.n	800d3e8 <_dtoa_r+0x9b8>
 800d3dc:	4639      	mov	r1, r7
 800d3de:	462a      	mov	r2, r5
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f000 fc27 	bl	800dc34 <__lshift>
 800d3e6:	4607      	mov	r7, r0
 800d3e8:	f1b8 0f00 	cmp.w	r8, #0
 800d3ec:	d05b      	beq.n	800d4a6 <_dtoa_r+0xa76>
 800d3ee:	6879      	ldr	r1, [r7, #4]
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f000 fa0f 	bl	800d814 <_Balloc>
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	b928      	cbnz	r0, 800d406 <_dtoa_r+0x9d6>
 800d3fa:	4b83      	ldr	r3, [pc, #524]	; (800d608 <_dtoa_r+0xbd8>)
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d402:	f7ff bb2e 	b.w	800ca62 <_dtoa_r+0x32>
 800d406:	693a      	ldr	r2, [r7, #16]
 800d408:	3202      	adds	r2, #2
 800d40a:	0092      	lsls	r2, r2, #2
 800d40c:	f107 010c 	add.w	r1, r7, #12
 800d410:	300c      	adds	r0, #12
 800d412:	f7ff fa76 	bl	800c902 <memcpy>
 800d416:	2201      	movs	r2, #1
 800d418:	4629      	mov	r1, r5
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 fc0a 	bl	800dc34 <__lshift>
 800d420:	9b00      	ldr	r3, [sp, #0]
 800d422:	3301      	adds	r3, #1
 800d424:	9304      	str	r3, [sp, #16]
 800d426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d42a:	4413      	add	r3, r2
 800d42c:	9308      	str	r3, [sp, #32]
 800d42e:	9b02      	ldr	r3, [sp, #8]
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	46b8      	mov	r8, r7
 800d436:	9306      	str	r3, [sp, #24]
 800d438:	4607      	mov	r7, r0
 800d43a:	9b04      	ldr	r3, [sp, #16]
 800d43c:	4631      	mov	r1, r6
 800d43e:	3b01      	subs	r3, #1
 800d440:	4650      	mov	r0, sl
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	f7ff fa6b 	bl	800c91e <quorem>
 800d448:	4641      	mov	r1, r8
 800d44a:	9002      	str	r0, [sp, #8]
 800d44c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d450:	4650      	mov	r0, sl
 800d452:	f000 fc5b 	bl	800dd0c <__mcmp>
 800d456:	463a      	mov	r2, r7
 800d458:	9005      	str	r0, [sp, #20]
 800d45a:	4631      	mov	r1, r6
 800d45c:	4620      	mov	r0, r4
 800d45e:	f000 fc71 	bl	800dd44 <__mdiff>
 800d462:	68c2      	ldr	r2, [r0, #12]
 800d464:	4605      	mov	r5, r0
 800d466:	bb02      	cbnz	r2, 800d4aa <_dtoa_r+0xa7a>
 800d468:	4601      	mov	r1, r0
 800d46a:	4650      	mov	r0, sl
 800d46c:	f000 fc4e 	bl	800dd0c <__mcmp>
 800d470:	4602      	mov	r2, r0
 800d472:	4629      	mov	r1, r5
 800d474:	4620      	mov	r0, r4
 800d476:	9209      	str	r2, [sp, #36]	; 0x24
 800d478:	f000 fa0c 	bl	800d894 <_Bfree>
 800d47c:	9b07      	ldr	r3, [sp, #28]
 800d47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d480:	9d04      	ldr	r5, [sp, #16]
 800d482:	ea43 0102 	orr.w	r1, r3, r2
 800d486:	9b06      	ldr	r3, [sp, #24]
 800d488:	4319      	orrs	r1, r3
 800d48a:	d110      	bne.n	800d4ae <_dtoa_r+0xa7e>
 800d48c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d490:	d029      	beq.n	800d4e6 <_dtoa_r+0xab6>
 800d492:	9b05      	ldr	r3, [sp, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	dd02      	ble.n	800d49e <_dtoa_r+0xa6e>
 800d498:	9b02      	ldr	r3, [sp, #8]
 800d49a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d49e:	9b01      	ldr	r3, [sp, #4]
 800d4a0:	f883 9000 	strb.w	r9, [r3]
 800d4a4:	e774      	b.n	800d390 <_dtoa_r+0x960>
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	e7ba      	b.n	800d420 <_dtoa_r+0x9f0>
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	e7e1      	b.n	800d472 <_dtoa_r+0xa42>
 800d4ae:	9b05      	ldr	r3, [sp, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	db04      	blt.n	800d4be <_dtoa_r+0xa8e>
 800d4b4:	9907      	ldr	r1, [sp, #28]
 800d4b6:	430b      	orrs	r3, r1
 800d4b8:	9906      	ldr	r1, [sp, #24]
 800d4ba:	430b      	orrs	r3, r1
 800d4bc:	d120      	bne.n	800d500 <_dtoa_r+0xad0>
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	dded      	ble.n	800d49e <_dtoa_r+0xa6e>
 800d4c2:	4651      	mov	r1, sl
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f000 fbb4 	bl	800dc34 <__lshift>
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	4682      	mov	sl, r0
 800d4d0:	f000 fc1c 	bl	800dd0c <__mcmp>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	dc03      	bgt.n	800d4e0 <_dtoa_r+0xab0>
 800d4d8:	d1e1      	bne.n	800d49e <_dtoa_r+0xa6e>
 800d4da:	f019 0f01 	tst.w	r9, #1
 800d4de:	d0de      	beq.n	800d49e <_dtoa_r+0xa6e>
 800d4e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d4e4:	d1d8      	bne.n	800d498 <_dtoa_r+0xa68>
 800d4e6:	9a01      	ldr	r2, [sp, #4]
 800d4e8:	2339      	movs	r3, #57	; 0x39
 800d4ea:	7013      	strb	r3, [r2, #0]
 800d4ec:	462b      	mov	r3, r5
 800d4ee:	461d      	mov	r5, r3
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d4f6:	2a39      	cmp	r2, #57	; 0x39
 800d4f8:	d06c      	beq.n	800d5d4 <_dtoa_r+0xba4>
 800d4fa:	3201      	adds	r2, #1
 800d4fc:	701a      	strb	r2, [r3, #0]
 800d4fe:	e747      	b.n	800d390 <_dtoa_r+0x960>
 800d500:	2a00      	cmp	r2, #0
 800d502:	dd07      	ble.n	800d514 <_dtoa_r+0xae4>
 800d504:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d508:	d0ed      	beq.n	800d4e6 <_dtoa_r+0xab6>
 800d50a:	9a01      	ldr	r2, [sp, #4]
 800d50c:	f109 0301 	add.w	r3, r9, #1
 800d510:	7013      	strb	r3, [r2, #0]
 800d512:	e73d      	b.n	800d390 <_dtoa_r+0x960>
 800d514:	9b04      	ldr	r3, [sp, #16]
 800d516:	9a08      	ldr	r2, [sp, #32]
 800d518:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d043      	beq.n	800d5a8 <_dtoa_r+0xb78>
 800d520:	4651      	mov	r1, sl
 800d522:	2300      	movs	r3, #0
 800d524:	220a      	movs	r2, #10
 800d526:	4620      	mov	r0, r4
 800d528:	f000 f9d6 	bl	800d8d8 <__multadd>
 800d52c:	45b8      	cmp	r8, r7
 800d52e:	4682      	mov	sl, r0
 800d530:	f04f 0300 	mov.w	r3, #0
 800d534:	f04f 020a 	mov.w	r2, #10
 800d538:	4641      	mov	r1, r8
 800d53a:	4620      	mov	r0, r4
 800d53c:	d107      	bne.n	800d54e <_dtoa_r+0xb1e>
 800d53e:	f000 f9cb 	bl	800d8d8 <__multadd>
 800d542:	4680      	mov	r8, r0
 800d544:	4607      	mov	r7, r0
 800d546:	9b04      	ldr	r3, [sp, #16]
 800d548:	3301      	adds	r3, #1
 800d54a:	9304      	str	r3, [sp, #16]
 800d54c:	e775      	b.n	800d43a <_dtoa_r+0xa0a>
 800d54e:	f000 f9c3 	bl	800d8d8 <__multadd>
 800d552:	4639      	mov	r1, r7
 800d554:	4680      	mov	r8, r0
 800d556:	2300      	movs	r3, #0
 800d558:	220a      	movs	r2, #10
 800d55a:	4620      	mov	r0, r4
 800d55c:	f000 f9bc 	bl	800d8d8 <__multadd>
 800d560:	4607      	mov	r7, r0
 800d562:	e7f0      	b.n	800d546 <_dtoa_r+0xb16>
 800d564:	9b04      	ldr	r3, [sp, #16]
 800d566:	9301      	str	r3, [sp, #4]
 800d568:	9d00      	ldr	r5, [sp, #0]
 800d56a:	4631      	mov	r1, r6
 800d56c:	4650      	mov	r0, sl
 800d56e:	f7ff f9d6 	bl	800c91e <quorem>
 800d572:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d576:	9b00      	ldr	r3, [sp, #0]
 800d578:	f805 9b01 	strb.w	r9, [r5], #1
 800d57c:	1aea      	subs	r2, r5, r3
 800d57e:	9b01      	ldr	r3, [sp, #4]
 800d580:	4293      	cmp	r3, r2
 800d582:	dd07      	ble.n	800d594 <_dtoa_r+0xb64>
 800d584:	4651      	mov	r1, sl
 800d586:	2300      	movs	r3, #0
 800d588:	220a      	movs	r2, #10
 800d58a:	4620      	mov	r0, r4
 800d58c:	f000 f9a4 	bl	800d8d8 <__multadd>
 800d590:	4682      	mov	sl, r0
 800d592:	e7ea      	b.n	800d56a <_dtoa_r+0xb3a>
 800d594:	9b01      	ldr	r3, [sp, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	bfc8      	it	gt
 800d59a:	461d      	movgt	r5, r3
 800d59c:	9b00      	ldr	r3, [sp, #0]
 800d59e:	bfd8      	it	le
 800d5a0:	2501      	movle	r5, #1
 800d5a2:	441d      	add	r5, r3
 800d5a4:	f04f 0800 	mov.w	r8, #0
 800d5a8:	4651      	mov	r1, sl
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f000 fb41 	bl	800dc34 <__lshift>
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4682      	mov	sl, r0
 800d5b6:	f000 fba9 	bl	800dd0c <__mcmp>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	dc96      	bgt.n	800d4ec <_dtoa_r+0xabc>
 800d5be:	d102      	bne.n	800d5c6 <_dtoa_r+0xb96>
 800d5c0:	f019 0f01 	tst.w	r9, #1
 800d5c4:	d192      	bne.n	800d4ec <_dtoa_r+0xabc>
 800d5c6:	462b      	mov	r3, r5
 800d5c8:	461d      	mov	r5, r3
 800d5ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5ce:	2a30      	cmp	r2, #48	; 0x30
 800d5d0:	d0fa      	beq.n	800d5c8 <_dtoa_r+0xb98>
 800d5d2:	e6dd      	b.n	800d390 <_dtoa_r+0x960>
 800d5d4:	9a00      	ldr	r2, [sp, #0]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d189      	bne.n	800d4ee <_dtoa_r+0xabe>
 800d5da:	f10b 0b01 	add.w	fp, fp, #1
 800d5de:	2331      	movs	r3, #49	; 0x31
 800d5e0:	e796      	b.n	800d510 <_dtoa_r+0xae0>
 800d5e2:	4b0a      	ldr	r3, [pc, #40]	; (800d60c <_dtoa_r+0xbdc>)
 800d5e4:	f7ff ba99 	b.w	800cb1a <_dtoa_r+0xea>
 800d5e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f47f aa6d 	bne.w	800caca <_dtoa_r+0x9a>
 800d5f0:	4b07      	ldr	r3, [pc, #28]	; (800d610 <_dtoa_r+0xbe0>)
 800d5f2:	f7ff ba92 	b.w	800cb1a <_dtoa_r+0xea>
 800d5f6:	9b01      	ldr	r3, [sp, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dcb5      	bgt.n	800d568 <_dtoa_r+0xb38>
 800d5fc:	9b07      	ldr	r3, [sp, #28]
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	f73f aeb1 	bgt.w	800d366 <_dtoa_r+0x936>
 800d604:	e7b0      	b.n	800d568 <_dtoa_r+0xb38>
 800d606:	bf00      	nop
 800d608:	0800fe21 	.word	0x0800fe21
 800d60c:	0800fd81 	.word	0x0800fd81
 800d610:	0800fda5 	.word	0x0800fda5

0800d614 <_free_r>:
 800d614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d616:	2900      	cmp	r1, #0
 800d618:	d044      	beq.n	800d6a4 <_free_r+0x90>
 800d61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d61e:	9001      	str	r0, [sp, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f1a1 0404 	sub.w	r4, r1, #4
 800d626:	bfb8      	it	lt
 800d628:	18e4      	addlt	r4, r4, r3
 800d62a:	f000 f8e7 	bl	800d7fc <__malloc_lock>
 800d62e:	4a1e      	ldr	r2, [pc, #120]	; (800d6a8 <_free_r+0x94>)
 800d630:	9801      	ldr	r0, [sp, #4]
 800d632:	6813      	ldr	r3, [r2, #0]
 800d634:	b933      	cbnz	r3, 800d644 <_free_r+0x30>
 800d636:	6063      	str	r3, [r4, #4]
 800d638:	6014      	str	r4, [r2, #0]
 800d63a:	b003      	add	sp, #12
 800d63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d640:	f000 b8e2 	b.w	800d808 <__malloc_unlock>
 800d644:	42a3      	cmp	r3, r4
 800d646:	d908      	bls.n	800d65a <_free_r+0x46>
 800d648:	6825      	ldr	r5, [r4, #0]
 800d64a:	1961      	adds	r1, r4, r5
 800d64c:	428b      	cmp	r3, r1
 800d64e:	bf01      	itttt	eq
 800d650:	6819      	ldreq	r1, [r3, #0]
 800d652:	685b      	ldreq	r3, [r3, #4]
 800d654:	1949      	addeq	r1, r1, r5
 800d656:	6021      	streq	r1, [r4, #0]
 800d658:	e7ed      	b.n	800d636 <_free_r+0x22>
 800d65a:	461a      	mov	r2, r3
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	b10b      	cbz	r3, 800d664 <_free_r+0x50>
 800d660:	42a3      	cmp	r3, r4
 800d662:	d9fa      	bls.n	800d65a <_free_r+0x46>
 800d664:	6811      	ldr	r1, [r2, #0]
 800d666:	1855      	adds	r5, r2, r1
 800d668:	42a5      	cmp	r5, r4
 800d66a:	d10b      	bne.n	800d684 <_free_r+0x70>
 800d66c:	6824      	ldr	r4, [r4, #0]
 800d66e:	4421      	add	r1, r4
 800d670:	1854      	adds	r4, r2, r1
 800d672:	42a3      	cmp	r3, r4
 800d674:	6011      	str	r1, [r2, #0]
 800d676:	d1e0      	bne.n	800d63a <_free_r+0x26>
 800d678:	681c      	ldr	r4, [r3, #0]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	6053      	str	r3, [r2, #4]
 800d67e:	440c      	add	r4, r1
 800d680:	6014      	str	r4, [r2, #0]
 800d682:	e7da      	b.n	800d63a <_free_r+0x26>
 800d684:	d902      	bls.n	800d68c <_free_r+0x78>
 800d686:	230c      	movs	r3, #12
 800d688:	6003      	str	r3, [r0, #0]
 800d68a:	e7d6      	b.n	800d63a <_free_r+0x26>
 800d68c:	6825      	ldr	r5, [r4, #0]
 800d68e:	1961      	adds	r1, r4, r5
 800d690:	428b      	cmp	r3, r1
 800d692:	bf04      	itt	eq
 800d694:	6819      	ldreq	r1, [r3, #0]
 800d696:	685b      	ldreq	r3, [r3, #4]
 800d698:	6063      	str	r3, [r4, #4]
 800d69a:	bf04      	itt	eq
 800d69c:	1949      	addeq	r1, r1, r5
 800d69e:	6021      	streq	r1, [r4, #0]
 800d6a0:	6054      	str	r4, [r2, #4]
 800d6a2:	e7ca      	b.n	800d63a <_free_r+0x26>
 800d6a4:	b003      	add	sp, #12
 800d6a6:	bd30      	pop	{r4, r5, pc}
 800d6a8:	20009c0c 	.word	0x20009c0c

0800d6ac <malloc>:
 800d6ac:	4b02      	ldr	r3, [pc, #8]	; (800d6b8 <malloc+0xc>)
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	6818      	ldr	r0, [r3, #0]
 800d6b2:	f000 b823 	b.w	800d6fc <_malloc_r>
 800d6b6:	bf00      	nop
 800d6b8:	20000e40 	.word	0x20000e40

0800d6bc <sbrk_aligned>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	4e0e      	ldr	r6, [pc, #56]	; (800d6f8 <sbrk_aligned+0x3c>)
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	6831      	ldr	r1, [r6, #0]
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	b911      	cbnz	r1, 800d6ce <sbrk_aligned+0x12>
 800d6c8:	f000 fe40 	bl	800e34c <_sbrk_r>
 800d6cc:	6030      	str	r0, [r6, #0]
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f000 fe3b 	bl	800e34c <_sbrk_r>
 800d6d6:	1c43      	adds	r3, r0, #1
 800d6d8:	d00a      	beq.n	800d6f0 <sbrk_aligned+0x34>
 800d6da:	1cc4      	adds	r4, r0, #3
 800d6dc:	f024 0403 	bic.w	r4, r4, #3
 800d6e0:	42a0      	cmp	r0, r4
 800d6e2:	d007      	beq.n	800d6f4 <sbrk_aligned+0x38>
 800d6e4:	1a21      	subs	r1, r4, r0
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f000 fe30 	bl	800e34c <_sbrk_r>
 800d6ec:	3001      	adds	r0, #1
 800d6ee:	d101      	bne.n	800d6f4 <sbrk_aligned+0x38>
 800d6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}
 800d6f8:	20009c10 	.word	0x20009c10

0800d6fc <_malloc_r>:
 800d6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d700:	1ccd      	adds	r5, r1, #3
 800d702:	f025 0503 	bic.w	r5, r5, #3
 800d706:	3508      	adds	r5, #8
 800d708:	2d0c      	cmp	r5, #12
 800d70a:	bf38      	it	cc
 800d70c:	250c      	movcc	r5, #12
 800d70e:	2d00      	cmp	r5, #0
 800d710:	4607      	mov	r7, r0
 800d712:	db01      	blt.n	800d718 <_malloc_r+0x1c>
 800d714:	42a9      	cmp	r1, r5
 800d716:	d905      	bls.n	800d724 <_malloc_r+0x28>
 800d718:	230c      	movs	r3, #12
 800d71a:	603b      	str	r3, [r7, #0]
 800d71c:	2600      	movs	r6, #0
 800d71e:	4630      	mov	r0, r6
 800d720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d724:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d7f8 <_malloc_r+0xfc>
 800d728:	f000 f868 	bl	800d7fc <__malloc_lock>
 800d72c:	f8d8 3000 	ldr.w	r3, [r8]
 800d730:	461c      	mov	r4, r3
 800d732:	bb5c      	cbnz	r4, 800d78c <_malloc_r+0x90>
 800d734:	4629      	mov	r1, r5
 800d736:	4638      	mov	r0, r7
 800d738:	f7ff ffc0 	bl	800d6bc <sbrk_aligned>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	4604      	mov	r4, r0
 800d740:	d155      	bne.n	800d7ee <_malloc_r+0xf2>
 800d742:	f8d8 4000 	ldr.w	r4, [r8]
 800d746:	4626      	mov	r6, r4
 800d748:	2e00      	cmp	r6, #0
 800d74a:	d145      	bne.n	800d7d8 <_malloc_r+0xdc>
 800d74c:	2c00      	cmp	r4, #0
 800d74e:	d048      	beq.n	800d7e2 <_malloc_r+0xe6>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	4631      	mov	r1, r6
 800d754:	4638      	mov	r0, r7
 800d756:	eb04 0903 	add.w	r9, r4, r3
 800d75a:	f000 fdf7 	bl	800e34c <_sbrk_r>
 800d75e:	4581      	cmp	r9, r0
 800d760:	d13f      	bne.n	800d7e2 <_malloc_r+0xe6>
 800d762:	6821      	ldr	r1, [r4, #0]
 800d764:	1a6d      	subs	r5, r5, r1
 800d766:	4629      	mov	r1, r5
 800d768:	4638      	mov	r0, r7
 800d76a:	f7ff ffa7 	bl	800d6bc <sbrk_aligned>
 800d76e:	3001      	adds	r0, #1
 800d770:	d037      	beq.n	800d7e2 <_malloc_r+0xe6>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	442b      	add	r3, r5
 800d776:	6023      	str	r3, [r4, #0]
 800d778:	f8d8 3000 	ldr.w	r3, [r8]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d038      	beq.n	800d7f2 <_malloc_r+0xf6>
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	42a2      	cmp	r2, r4
 800d784:	d12b      	bne.n	800d7de <_malloc_r+0xe2>
 800d786:	2200      	movs	r2, #0
 800d788:	605a      	str	r2, [r3, #4]
 800d78a:	e00f      	b.n	800d7ac <_malloc_r+0xb0>
 800d78c:	6822      	ldr	r2, [r4, #0]
 800d78e:	1b52      	subs	r2, r2, r5
 800d790:	d41f      	bmi.n	800d7d2 <_malloc_r+0xd6>
 800d792:	2a0b      	cmp	r2, #11
 800d794:	d917      	bls.n	800d7c6 <_malloc_r+0xca>
 800d796:	1961      	adds	r1, r4, r5
 800d798:	42a3      	cmp	r3, r4
 800d79a:	6025      	str	r5, [r4, #0]
 800d79c:	bf18      	it	ne
 800d79e:	6059      	strne	r1, [r3, #4]
 800d7a0:	6863      	ldr	r3, [r4, #4]
 800d7a2:	bf08      	it	eq
 800d7a4:	f8c8 1000 	streq.w	r1, [r8]
 800d7a8:	5162      	str	r2, [r4, r5]
 800d7aa:	604b      	str	r3, [r1, #4]
 800d7ac:	4638      	mov	r0, r7
 800d7ae:	f104 060b 	add.w	r6, r4, #11
 800d7b2:	f000 f829 	bl	800d808 <__malloc_unlock>
 800d7b6:	f026 0607 	bic.w	r6, r6, #7
 800d7ba:	1d23      	adds	r3, r4, #4
 800d7bc:	1af2      	subs	r2, r6, r3
 800d7be:	d0ae      	beq.n	800d71e <_malloc_r+0x22>
 800d7c0:	1b9b      	subs	r3, r3, r6
 800d7c2:	50a3      	str	r3, [r4, r2]
 800d7c4:	e7ab      	b.n	800d71e <_malloc_r+0x22>
 800d7c6:	42a3      	cmp	r3, r4
 800d7c8:	6862      	ldr	r2, [r4, #4]
 800d7ca:	d1dd      	bne.n	800d788 <_malloc_r+0x8c>
 800d7cc:	f8c8 2000 	str.w	r2, [r8]
 800d7d0:	e7ec      	b.n	800d7ac <_malloc_r+0xb0>
 800d7d2:	4623      	mov	r3, r4
 800d7d4:	6864      	ldr	r4, [r4, #4]
 800d7d6:	e7ac      	b.n	800d732 <_malloc_r+0x36>
 800d7d8:	4634      	mov	r4, r6
 800d7da:	6876      	ldr	r6, [r6, #4]
 800d7dc:	e7b4      	b.n	800d748 <_malloc_r+0x4c>
 800d7de:	4613      	mov	r3, r2
 800d7e0:	e7cc      	b.n	800d77c <_malloc_r+0x80>
 800d7e2:	230c      	movs	r3, #12
 800d7e4:	603b      	str	r3, [r7, #0]
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	f000 f80e 	bl	800d808 <__malloc_unlock>
 800d7ec:	e797      	b.n	800d71e <_malloc_r+0x22>
 800d7ee:	6025      	str	r5, [r4, #0]
 800d7f0:	e7dc      	b.n	800d7ac <_malloc_r+0xb0>
 800d7f2:	605b      	str	r3, [r3, #4]
 800d7f4:	deff      	udf	#255	; 0xff
 800d7f6:	bf00      	nop
 800d7f8:	20009c0c 	.word	0x20009c0c

0800d7fc <__malloc_lock>:
 800d7fc:	4801      	ldr	r0, [pc, #4]	; (800d804 <__malloc_lock+0x8>)
 800d7fe:	f7ff b876 	b.w	800c8ee <__retarget_lock_acquire_recursive>
 800d802:	bf00      	nop
 800d804:	20009c08 	.word	0x20009c08

0800d808 <__malloc_unlock>:
 800d808:	4801      	ldr	r0, [pc, #4]	; (800d810 <__malloc_unlock+0x8>)
 800d80a:	f7ff b871 	b.w	800c8f0 <__retarget_lock_release_recursive>
 800d80e:	bf00      	nop
 800d810:	20009c08 	.word	0x20009c08

0800d814 <_Balloc>:
 800d814:	b570      	push	{r4, r5, r6, lr}
 800d816:	69c6      	ldr	r6, [r0, #28]
 800d818:	4604      	mov	r4, r0
 800d81a:	460d      	mov	r5, r1
 800d81c:	b976      	cbnz	r6, 800d83c <_Balloc+0x28>
 800d81e:	2010      	movs	r0, #16
 800d820:	f7ff ff44 	bl	800d6ac <malloc>
 800d824:	4602      	mov	r2, r0
 800d826:	61e0      	str	r0, [r4, #28]
 800d828:	b920      	cbnz	r0, 800d834 <_Balloc+0x20>
 800d82a:	4b18      	ldr	r3, [pc, #96]	; (800d88c <_Balloc+0x78>)
 800d82c:	4818      	ldr	r0, [pc, #96]	; (800d890 <_Balloc+0x7c>)
 800d82e:	216b      	movs	r1, #107	; 0x6b
 800d830:	f000 fd9c 	bl	800e36c <__assert_func>
 800d834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d838:	6006      	str	r6, [r0, #0]
 800d83a:	60c6      	str	r6, [r0, #12]
 800d83c:	69e6      	ldr	r6, [r4, #28]
 800d83e:	68f3      	ldr	r3, [r6, #12]
 800d840:	b183      	cbz	r3, 800d864 <_Balloc+0x50>
 800d842:	69e3      	ldr	r3, [r4, #28]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d84a:	b9b8      	cbnz	r0, 800d87c <_Balloc+0x68>
 800d84c:	2101      	movs	r1, #1
 800d84e:	fa01 f605 	lsl.w	r6, r1, r5
 800d852:	1d72      	adds	r2, r6, #5
 800d854:	0092      	lsls	r2, r2, #2
 800d856:	4620      	mov	r0, r4
 800d858:	f000 fda6 	bl	800e3a8 <_calloc_r>
 800d85c:	b160      	cbz	r0, 800d878 <_Balloc+0x64>
 800d85e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d862:	e00e      	b.n	800d882 <_Balloc+0x6e>
 800d864:	2221      	movs	r2, #33	; 0x21
 800d866:	2104      	movs	r1, #4
 800d868:	4620      	mov	r0, r4
 800d86a:	f000 fd9d 	bl	800e3a8 <_calloc_r>
 800d86e:	69e3      	ldr	r3, [r4, #28]
 800d870:	60f0      	str	r0, [r6, #12]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1e4      	bne.n	800d842 <_Balloc+0x2e>
 800d878:	2000      	movs	r0, #0
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
 800d87c:	6802      	ldr	r2, [r0, #0]
 800d87e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d882:	2300      	movs	r3, #0
 800d884:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d888:	e7f7      	b.n	800d87a <_Balloc+0x66>
 800d88a:	bf00      	nop
 800d88c:	0800fdb2 	.word	0x0800fdb2
 800d890:	0800fe32 	.word	0x0800fe32

0800d894 <_Bfree>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	69c6      	ldr	r6, [r0, #28]
 800d898:	4605      	mov	r5, r0
 800d89a:	460c      	mov	r4, r1
 800d89c:	b976      	cbnz	r6, 800d8bc <_Bfree+0x28>
 800d89e:	2010      	movs	r0, #16
 800d8a0:	f7ff ff04 	bl	800d6ac <malloc>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	61e8      	str	r0, [r5, #28]
 800d8a8:	b920      	cbnz	r0, 800d8b4 <_Bfree+0x20>
 800d8aa:	4b09      	ldr	r3, [pc, #36]	; (800d8d0 <_Bfree+0x3c>)
 800d8ac:	4809      	ldr	r0, [pc, #36]	; (800d8d4 <_Bfree+0x40>)
 800d8ae:	218f      	movs	r1, #143	; 0x8f
 800d8b0:	f000 fd5c 	bl	800e36c <__assert_func>
 800d8b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8b8:	6006      	str	r6, [r0, #0]
 800d8ba:	60c6      	str	r6, [r0, #12]
 800d8bc:	b13c      	cbz	r4, 800d8ce <_Bfree+0x3a>
 800d8be:	69eb      	ldr	r3, [r5, #28]
 800d8c0:	6862      	ldr	r2, [r4, #4]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8c8:	6021      	str	r1, [r4, #0]
 800d8ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}
 800d8d0:	0800fdb2 	.word	0x0800fdb2
 800d8d4:	0800fe32 	.word	0x0800fe32

0800d8d8 <__multadd>:
 800d8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8dc:	690d      	ldr	r5, [r1, #16]
 800d8de:	4607      	mov	r7, r0
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	461e      	mov	r6, r3
 800d8e4:	f101 0c14 	add.w	ip, r1, #20
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f8dc 3000 	ldr.w	r3, [ip]
 800d8ee:	b299      	uxth	r1, r3
 800d8f0:	fb02 6101 	mla	r1, r2, r1, r6
 800d8f4:	0c1e      	lsrs	r6, r3, #16
 800d8f6:	0c0b      	lsrs	r3, r1, #16
 800d8f8:	fb02 3306 	mla	r3, r2, r6, r3
 800d8fc:	b289      	uxth	r1, r1
 800d8fe:	3001      	adds	r0, #1
 800d900:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d904:	4285      	cmp	r5, r0
 800d906:	f84c 1b04 	str.w	r1, [ip], #4
 800d90a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d90e:	dcec      	bgt.n	800d8ea <__multadd+0x12>
 800d910:	b30e      	cbz	r6, 800d956 <__multadd+0x7e>
 800d912:	68a3      	ldr	r3, [r4, #8]
 800d914:	42ab      	cmp	r3, r5
 800d916:	dc19      	bgt.n	800d94c <__multadd+0x74>
 800d918:	6861      	ldr	r1, [r4, #4]
 800d91a:	4638      	mov	r0, r7
 800d91c:	3101      	adds	r1, #1
 800d91e:	f7ff ff79 	bl	800d814 <_Balloc>
 800d922:	4680      	mov	r8, r0
 800d924:	b928      	cbnz	r0, 800d932 <__multadd+0x5a>
 800d926:	4602      	mov	r2, r0
 800d928:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <__multadd+0x84>)
 800d92a:	480d      	ldr	r0, [pc, #52]	; (800d960 <__multadd+0x88>)
 800d92c:	21ba      	movs	r1, #186	; 0xba
 800d92e:	f000 fd1d 	bl	800e36c <__assert_func>
 800d932:	6922      	ldr	r2, [r4, #16]
 800d934:	3202      	adds	r2, #2
 800d936:	f104 010c 	add.w	r1, r4, #12
 800d93a:	0092      	lsls	r2, r2, #2
 800d93c:	300c      	adds	r0, #12
 800d93e:	f7fe ffe0 	bl	800c902 <memcpy>
 800d942:	4621      	mov	r1, r4
 800d944:	4638      	mov	r0, r7
 800d946:	f7ff ffa5 	bl	800d894 <_Bfree>
 800d94a:	4644      	mov	r4, r8
 800d94c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d950:	3501      	adds	r5, #1
 800d952:	615e      	str	r6, [r3, #20]
 800d954:	6125      	str	r5, [r4, #16]
 800d956:	4620      	mov	r0, r4
 800d958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95c:	0800fe21 	.word	0x0800fe21
 800d960:	0800fe32 	.word	0x0800fe32

0800d964 <__hi0bits>:
 800d964:	0c03      	lsrs	r3, r0, #16
 800d966:	041b      	lsls	r3, r3, #16
 800d968:	b9d3      	cbnz	r3, 800d9a0 <__hi0bits+0x3c>
 800d96a:	0400      	lsls	r0, r0, #16
 800d96c:	2310      	movs	r3, #16
 800d96e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d972:	bf04      	itt	eq
 800d974:	0200      	lsleq	r0, r0, #8
 800d976:	3308      	addeq	r3, #8
 800d978:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d97c:	bf04      	itt	eq
 800d97e:	0100      	lsleq	r0, r0, #4
 800d980:	3304      	addeq	r3, #4
 800d982:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d986:	bf04      	itt	eq
 800d988:	0080      	lsleq	r0, r0, #2
 800d98a:	3302      	addeq	r3, #2
 800d98c:	2800      	cmp	r0, #0
 800d98e:	db05      	blt.n	800d99c <__hi0bits+0x38>
 800d990:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d994:	f103 0301 	add.w	r3, r3, #1
 800d998:	bf08      	it	eq
 800d99a:	2320      	moveq	r3, #32
 800d99c:	4618      	mov	r0, r3
 800d99e:	4770      	bx	lr
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e7e4      	b.n	800d96e <__hi0bits+0xa>

0800d9a4 <__lo0bits>:
 800d9a4:	6803      	ldr	r3, [r0, #0]
 800d9a6:	f013 0207 	ands.w	r2, r3, #7
 800d9aa:	d00c      	beq.n	800d9c6 <__lo0bits+0x22>
 800d9ac:	07d9      	lsls	r1, r3, #31
 800d9ae:	d422      	bmi.n	800d9f6 <__lo0bits+0x52>
 800d9b0:	079a      	lsls	r2, r3, #30
 800d9b2:	bf49      	itett	mi
 800d9b4:	085b      	lsrmi	r3, r3, #1
 800d9b6:	089b      	lsrpl	r3, r3, #2
 800d9b8:	6003      	strmi	r3, [r0, #0]
 800d9ba:	2201      	movmi	r2, #1
 800d9bc:	bf5c      	itt	pl
 800d9be:	6003      	strpl	r3, [r0, #0]
 800d9c0:	2202      	movpl	r2, #2
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	4770      	bx	lr
 800d9c6:	b299      	uxth	r1, r3
 800d9c8:	b909      	cbnz	r1, 800d9ce <__lo0bits+0x2a>
 800d9ca:	0c1b      	lsrs	r3, r3, #16
 800d9cc:	2210      	movs	r2, #16
 800d9ce:	b2d9      	uxtb	r1, r3
 800d9d0:	b909      	cbnz	r1, 800d9d6 <__lo0bits+0x32>
 800d9d2:	3208      	adds	r2, #8
 800d9d4:	0a1b      	lsrs	r3, r3, #8
 800d9d6:	0719      	lsls	r1, r3, #28
 800d9d8:	bf04      	itt	eq
 800d9da:	091b      	lsreq	r3, r3, #4
 800d9dc:	3204      	addeq	r2, #4
 800d9de:	0799      	lsls	r1, r3, #30
 800d9e0:	bf04      	itt	eq
 800d9e2:	089b      	lsreq	r3, r3, #2
 800d9e4:	3202      	addeq	r2, #2
 800d9e6:	07d9      	lsls	r1, r3, #31
 800d9e8:	d403      	bmi.n	800d9f2 <__lo0bits+0x4e>
 800d9ea:	085b      	lsrs	r3, r3, #1
 800d9ec:	f102 0201 	add.w	r2, r2, #1
 800d9f0:	d003      	beq.n	800d9fa <__lo0bits+0x56>
 800d9f2:	6003      	str	r3, [r0, #0]
 800d9f4:	e7e5      	b.n	800d9c2 <__lo0bits+0x1e>
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	e7e3      	b.n	800d9c2 <__lo0bits+0x1e>
 800d9fa:	2220      	movs	r2, #32
 800d9fc:	e7e1      	b.n	800d9c2 <__lo0bits+0x1e>
	...

0800da00 <__i2b>:
 800da00:	b510      	push	{r4, lr}
 800da02:	460c      	mov	r4, r1
 800da04:	2101      	movs	r1, #1
 800da06:	f7ff ff05 	bl	800d814 <_Balloc>
 800da0a:	4602      	mov	r2, r0
 800da0c:	b928      	cbnz	r0, 800da1a <__i2b+0x1a>
 800da0e:	4b05      	ldr	r3, [pc, #20]	; (800da24 <__i2b+0x24>)
 800da10:	4805      	ldr	r0, [pc, #20]	; (800da28 <__i2b+0x28>)
 800da12:	f240 1145 	movw	r1, #325	; 0x145
 800da16:	f000 fca9 	bl	800e36c <__assert_func>
 800da1a:	2301      	movs	r3, #1
 800da1c:	6144      	str	r4, [r0, #20]
 800da1e:	6103      	str	r3, [r0, #16]
 800da20:	bd10      	pop	{r4, pc}
 800da22:	bf00      	nop
 800da24:	0800fe21 	.word	0x0800fe21
 800da28:	0800fe32 	.word	0x0800fe32

0800da2c <__multiply>:
 800da2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da30:	4691      	mov	r9, r2
 800da32:	690a      	ldr	r2, [r1, #16]
 800da34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da38:	429a      	cmp	r2, r3
 800da3a:	bfb8      	it	lt
 800da3c:	460b      	movlt	r3, r1
 800da3e:	460c      	mov	r4, r1
 800da40:	bfbc      	itt	lt
 800da42:	464c      	movlt	r4, r9
 800da44:	4699      	movlt	r9, r3
 800da46:	6927      	ldr	r7, [r4, #16]
 800da48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da4c:	68a3      	ldr	r3, [r4, #8]
 800da4e:	6861      	ldr	r1, [r4, #4]
 800da50:	eb07 060a 	add.w	r6, r7, sl
 800da54:	42b3      	cmp	r3, r6
 800da56:	b085      	sub	sp, #20
 800da58:	bfb8      	it	lt
 800da5a:	3101      	addlt	r1, #1
 800da5c:	f7ff feda 	bl	800d814 <_Balloc>
 800da60:	b930      	cbnz	r0, 800da70 <__multiply+0x44>
 800da62:	4602      	mov	r2, r0
 800da64:	4b44      	ldr	r3, [pc, #272]	; (800db78 <__multiply+0x14c>)
 800da66:	4845      	ldr	r0, [pc, #276]	; (800db7c <__multiply+0x150>)
 800da68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800da6c:	f000 fc7e 	bl	800e36c <__assert_func>
 800da70:	f100 0514 	add.w	r5, r0, #20
 800da74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da78:	462b      	mov	r3, r5
 800da7a:	2200      	movs	r2, #0
 800da7c:	4543      	cmp	r3, r8
 800da7e:	d321      	bcc.n	800dac4 <__multiply+0x98>
 800da80:	f104 0314 	add.w	r3, r4, #20
 800da84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da88:	f109 0314 	add.w	r3, r9, #20
 800da8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da90:	9202      	str	r2, [sp, #8]
 800da92:	1b3a      	subs	r2, r7, r4
 800da94:	3a15      	subs	r2, #21
 800da96:	f022 0203 	bic.w	r2, r2, #3
 800da9a:	3204      	adds	r2, #4
 800da9c:	f104 0115 	add.w	r1, r4, #21
 800daa0:	428f      	cmp	r7, r1
 800daa2:	bf38      	it	cc
 800daa4:	2204      	movcc	r2, #4
 800daa6:	9201      	str	r2, [sp, #4]
 800daa8:	9a02      	ldr	r2, [sp, #8]
 800daaa:	9303      	str	r3, [sp, #12]
 800daac:	429a      	cmp	r2, r3
 800daae:	d80c      	bhi.n	800daca <__multiply+0x9e>
 800dab0:	2e00      	cmp	r6, #0
 800dab2:	dd03      	ble.n	800dabc <__multiply+0x90>
 800dab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d05b      	beq.n	800db74 <__multiply+0x148>
 800dabc:	6106      	str	r6, [r0, #16]
 800dabe:	b005      	add	sp, #20
 800dac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac4:	f843 2b04 	str.w	r2, [r3], #4
 800dac8:	e7d8      	b.n	800da7c <__multiply+0x50>
 800daca:	f8b3 a000 	ldrh.w	sl, [r3]
 800dace:	f1ba 0f00 	cmp.w	sl, #0
 800dad2:	d024      	beq.n	800db1e <__multiply+0xf2>
 800dad4:	f104 0e14 	add.w	lr, r4, #20
 800dad8:	46a9      	mov	r9, r5
 800dada:	f04f 0c00 	mov.w	ip, #0
 800dade:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dae2:	f8d9 1000 	ldr.w	r1, [r9]
 800dae6:	fa1f fb82 	uxth.w	fp, r2
 800daea:	b289      	uxth	r1, r1
 800daec:	fb0a 110b 	mla	r1, sl, fp, r1
 800daf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800daf4:	f8d9 2000 	ldr.w	r2, [r9]
 800daf8:	4461      	add	r1, ip
 800dafa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dafe:	fb0a c20b 	mla	r2, sl, fp, ip
 800db02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800db06:	b289      	uxth	r1, r1
 800db08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db0c:	4577      	cmp	r7, lr
 800db0e:	f849 1b04 	str.w	r1, [r9], #4
 800db12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db16:	d8e2      	bhi.n	800dade <__multiply+0xb2>
 800db18:	9a01      	ldr	r2, [sp, #4]
 800db1a:	f845 c002 	str.w	ip, [r5, r2]
 800db1e:	9a03      	ldr	r2, [sp, #12]
 800db20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db24:	3304      	adds	r3, #4
 800db26:	f1b9 0f00 	cmp.w	r9, #0
 800db2a:	d021      	beq.n	800db70 <__multiply+0x144>
 800db2c:	6829      	ldr	r1, [r5, #0]
 800db2e:	f104 0c14 	add.w	ip, r4, #20
 800db32:	46ae      	mov	lr, r5
 800db34:	f04f 0a00 	mov.w	sl, #0
 800db38:	f8bc b000 	ldrh.w	fp, [ip]
 800db3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db40:	fb09 220b 	mla	r2, r9, fp, r2
 800db44:	4452      	add	r2, sl
 800db46:	b289      	uxth	r1, r1
 800db48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db4c:	f84e 1b04 	str.w	r1, [lr], #4
 800db50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800db54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db58:	f8be 1000 	ldrh.w	r1, [lr]
 800db5c:	fb09 110a 	mla	r1, r9, sl, r1
 800db60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800db64:	4567      	cmp	r7, ip
 800db66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db6a:	d8e5      	bhi.n	800db38 <__multiply+0x10c>
 800db6c:	9a01      	ldr	r2, [sp, #4]
 800db6e:	50a9      	str	r1, [r5, r2]
 800db70:	3504      	adds	r5, #4
 800db72:	e799      	b.n	800daa8 <__multiply+0x7c>
 800db74:	3e01      	subs	r6, #1
 800db76:	e79b      	b.n	800dab0 <__multiply+0x84>
 800db78:	0800fe21 	.word	0x0800fe21
 800db7c:	0800fe32 	.word	0x0800fe32

0800db80 <__pow5mult>:
 800db80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db84:	4615      	mov	r5, r2
 800db86:	f012 0203 	ands.w	r2, r2, #3
 800db8a:	4606      	mov	r6, r0
 800db8c:	460f      	mov	r7, r1
 800db8e:	d007      	beq.n	800dba0 <__pow5mult+0x20>
 800db90:	4c25      	ldr	r4, [pc, #148]	; (800dc28 <__pow5mult+0xa8>)
 800db92:	3a01      	subs	r2, #1
 800db94:	2300      	movs	r3, #0
 800db96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db9a:	f7ff fe9d 	bl	800d8d8 <__multadd>
 800db9e:	4607      	mov	r7, r0
 800dba0:	10ad      	asrs	r5, r5, #2
 800dba2:	d03d      	beq.n	800dc20 <__pow5mult+0xa0>
 800dba4:	69f4      	ldr	r4, [r6, #28]
 800dba6:	b97c      	cbnz	r4, 800dbc8 <__pow5mult+0x48>
 800dba8:	2010      	movs	r0, #16
 800dbaa:	f7ff fd7f 	bl	800d6ac <malloc>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	61f0      	str	r0, [r6, #28]
 800dbb2:	b928      	cbnz	r0, 800dbc0 <__pow5mult+0x40>
 800dbb4:	4b1d      	ldr	r3, [pc, #116]	; (800dc2c <__pow5mult+0xac>)
 800dbb6:	481e      	ldr	r0, [pc, #120]	; (800dc30 <__pow5mult+0xb0>)
 800dbb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dbbc:	f000 fbd6 	bl	800e36c <__assert_func>
 800dbc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbc4:	6004      	str	r4, [r0, #0]
 800dbc6:	60c4      	str	r4, [r0, #12]
 800dbc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dbcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dbd0:	b94c      	cbnz	r4, 800dbe6 <__pow5mult+0x66>
 800dbd2:	f240 2171 	movw	r1, #625	; 0x271
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f7ff ff12 	bl	800da00 <__i2b>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	6003      	str	r3, [r0, #0]
 800dbe6:	f04f 0900 	mov.w	r9, #0
 800dbea:	07eb      	lsls	r3, r5, #31
 800dbec:	d50a      	bpl.n	800dc04 <__pow5mult+0x84>
 800dbee:	4639      	mov	r1, r7
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f7ff ff1a 	bl	800da2c <__multiply>
 800dbf8:	4639      	mov	r1, r7
 800dbfa:	4680      	mov	r8, r0
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7ff fe49 	bl	800d894 <_Bfree>
 800dc02:	4647      	mov	r7, r8
 800dc04:	106d      	asrs	r5, r5, #1
 800dc06:	d00b      	beq.n	800dc20 <__pow5mult+0xa0>
 800dc08:	6820      	ldr	r0, [r4, #0]
 800dc0a:	b938      	cbnz	r0, 800dc1c <__pow5mult+0x9c>
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	4621      	mov	r1, r4
 800dc10:	4630      	mov	r0, r6
 800dc12:	f7ff ff0b 	bl	800da2c <__multiply>
 800dc16:	6020      	str	r0, [r4, #0]
 800dc18:	f8c0 9000 	str.w	r9, [r0]
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	e7e4      	b.n	800dbea <__pow5mult+0x6a>
 800dc20:	4638      	mov	r0, r7
 800dc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc26:	bf00      	nop
 800dc28:	0800ff80 	.word	0x0800ff80
 800dc2c:	0800fdb2 	.word	0x0800fdb2
 800dc30:	0800fe32 	.word	0x0800fe32

0800dc34 <__lshift>:
 800dc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc38:	460c      	mov	r4, r1
 800dc3a:	6849      	ldr	r1, [r1, #4]
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc42:	68a3      	ldr	r3, [r4, #8]
 800dc44:	4607      	mov	r7, r0
 800dc46:	4691      	mov	r9, r2
 800dc48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc4c:	f108 0601 	add.w	r6, r8, #1
 800dc50:	42b3      	cmp	r3, r6
 800dc52:	db0b      	blt.n	800dc6c <__lshift+0x38>
 800dc54:	4638      	mov	r0, r7
 800dc56:	f7ff fddd 	bl	800d814 <_Balloc>
 800dc5a:	4605      	mov	r5, r0
 800dc5c:	b948      	cbnz	r0, 800dc72 <__lshift+0x3e>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	4b28      	ldr	r3, [pc, #160]	; (800dd04 <__lshift+0xd0>)
 800dc62:	4829      	ldr	r0, [pc, #164]	; (800dd08 <__lshift+0xd4>)
 800dc64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dc68:	f000 fb80 	bl	800e36c <__assert_func>
 800dc6c:	3101      	adds	r1, #1
 800dc6e:	005b      	lsls	r3, r3, #1
 800dc70:	e7ee      	b.n	800dc50 <__lshift+0x1c>
 800dc72:	2300      	movs	r3, #0
 800dc74:	f100 0114 	add.w	r1, r0, #20
 800dc78:	f100 0210 	add.w	r2, r0, #16
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	4553      	cmp	r3, sl
 800dc80:	db33      	blt.n	800dcea <__lshift+0xb6>
 800dc82:	6920      	ldr	r0, [r4, #16]
 800dc84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc88:	f104 0314 	add.w	r3, r4, #20
 800dc8c:	f019 091f 	ands.w	r9, r9, #31
 800dc90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dc98:	d02b      	beq.n	800dcf2 <__lshift+0xbe>
 800dc9a:	f1c9 0e20 	rsb	lr, r9, #32
 800dc9e:	468a      	mov	sl, r1
 800dca0:	2200      	movs	r2, #0
 800dca2:	6818      	ldr	r0, [r3, #0]
 800dca4:	fa00 f009 	lsl.w	r0, r0, r9
 800dca8:	4310      	orrs	r0, r2
 800dcaa:	f84a 0b04 	str.w	r0, [sl], #4
 800dcae:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcb2:	459c      	cmp	ip, r3
 800dcb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dcb8:	d8f3      	bhi.n	800dca2 <__lshift+0x6e>
 800dcba:	ebac 0304 	sub.w	r3, ip, r4
 800dcbe:	3b15      	subs	r3, #21
 800dcc0:	f023 0303 	bic.w	r3, r3, #3
 800dcc4:	3304      	adds	r3, #4
 800dcc6:	f104 0015 	add.w	r0, r4, #21
 800dcca:	4584      	cmp	ip, r0
 800dccc:	bf38      	it	cc
 800dcce:	2304      	movcc	r3, #4
 800dcd0:	50ca      	str	r2, [r1, r3]
 800dcd2:	b10a      	cbz	r2, 800dcd8 <__lshift+0xa4>
 800dcd4:	f108 0602 	add.w	r6, r8, #2
 800dcd8:	3e01      	subs	r6, #1
 800dcda:	4638      	mov	r0, r7
 800dcdc:	612e      	str	r6, [r5, #16]
 800dcde:	4621      	mov	r1, r4
 800dce0:	f7ff fdd8 	bl	800d894 <_Bfree>
 800dce4:	4628      	mov	r0, r5
 800dce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcea:	f842 0f04 	str.w	r0, [r2, #4]!
 800dcee:	3301      	adds	r3, #1
 800dcf0:	e7c5      	b.n	800dc7e <__lshift+0x4a>
 800dcf2:	3904      	subs	r1, #4
 800dcf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dcfc:	459c      	cmp	ip, r3
 800dcfe:	d8f9      	bhi.n	800dcf4 <__lshift+0xc0>
 800dd00:	e7ea      	b.n	800dcd8 <__lshift+0xa4>
 800dd02:	bf00      	nop
 800dd04:	0800fe21 	.word	0x0800fe21
 800dd08:	0800fe32 	.word	0x0800fe32

0800dd0c <__mcmp>:
 800dd0c:	b530      	push	{r4, r5, lr}
 800dd0e:	6902      	ldr	r2, [r0, #16]
 800dd10:	690c      	ldr	r4, [r1, #16]
 800dd12:	1b12      	subs	r2, r2, r4
 800dd14:	d10e      	bne.n	800dd34 <__mcmp+0x28>
 800dd16:	f100 0314 	add.w	r3, r0, #20
 800dd1a:	3114      	adds	r1, #20
 800dd1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd2c:	42a5      	cmp	r5, r4
 800dd2e:	d003      	beq.n	800dd38 <__mcmp+0x2c>
 800dd30:	d305      	bcc.n	800dd3e <__mcmp+0x32>
 800dd32:	2201      	movs	r2, #1
 800dd34:	4610      	mov	r0, r2
 800dd36:	bd30      	pop	{r4, r5, pc}
 800dd38:	4283      	cmp	r3, r0
 800dd3a:	d3f3      	bcc.n	800dd24 <__mcmp+0x18>
 800dd3c:	e7fa      	b.n	800dd34 <__mcmp+0x28>
 800dd3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd42:	e7f7      	b.n	800dd34 <__mcmp+0x28>

0800dd44 <__mdiff>:
 800dd44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd48:	460c      	mov	r4, r1
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	4620      	mov	r0, r4
 800dd50:	4690      	mov	r8, r2
 800dd52:	f7ff ffdb 	bl	800dd0c <__mcmp>
 800dd56:	1e05      	subs	r5, r0, #0
 800dd58:	d110      	bne.n	800dd7c <__mdiff+0x38>
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f7ff fd59 	bl	800d814 <_Balloc>
 800dd62:	b930      	cbnz	r0, 800dd72 <__mdiff+0x2e>
 800dd64:	4b3a      	ldr	r3, [pc, #232]	; (800de50 <__mdiff+0x10c>)
 800dd66:	4602      	mov	r2, r0
 800dd68:	f240 2137 	movw	r1, #567	; 0x237
 800dd6c:	4839      	ldr	r0, [pc, #228]	; (800de54 <__mdiff+0x110>)
 800dd6e:	f000 fafd 	bl	800e36c <__assert_func>
 800dd72:	2301      	movs	r3, #1
 800dd74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7c:	bfa4      	itt	ge
 800dd7e:	4643      	movge	r3, r8
 800dd80:	46a0      	movge	r8, r4
 800dd82:	4630      	mov	r0, r6
 800dd84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd88:	bfa6      	itte	ge
 800dd8a:	461c      	movge	r4, r3
 800dd8c:	2500      	movge	r5, #0
 800dd8e:	2501      	movlt	r5, #1
 800dd90:	f7ff fd40 	bl	800d814 <_Balloc>
 800dd94:	b920      	cbnz	r0, 800dda0 <__mdiff+0x5c>
 800dd96:	4b2e      	ldr	r3, [pc, #184]	; (800de50 <__mdiff+0x10c>)
 800dd98:	4602      	mov	r2, r0
 800dd9a:	f240 2145 	movw	r1, #581	; 0x245
 800dd9e:	e7e5      	b.n	800dd6c <__mdiff+0x28>
 800dda0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dda4:	6926      	ldr	r6, [r4, #16]
 800dda6:	60c5      	str	r5, [r0, #12]
 800dda8:	f104 0914 	add.w	r9, r4, #20
 800ddac:	f108 0514 	add.w	r5, r8, #20
 800ddb0:	f100 0e14 	add.w	lr, r0, #20
 800ddb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ddb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ddbc:	f108 0210 	add.w	r2, r8, #16
 800ddc0:	46f2      	mov	sl, lr
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ddc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ddcc:	fa11 f88b 	uxtah	r8, r1, fp
 800ddd0:	b299      	uxth	r1, r3
 800ddd2:	0c1b      	lsrs	r3, r3, #16
 800ddd4:	eba8 0801 	sub.w	r8, r8, r1
 800ddd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dddc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dde0:	fa1f f888 	uxth.w	r8, r8
 800dde4:	1419      	asrs	r1, r3, #16
 800dde6:	454e      	cmp	r6, r9
 800dde8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ddec:	f84a 3b04 	str.w	r3, [sl], #4
 800ddf0:	d8e8      	bhi.n	800ddc4 <__mdiff+0x80>
 800ddf2:	1b33      	subs	r3, r6, r4
 800ddf4:	3b15      	subs	r3, #21
 800ddf6:	f023 0303 	bic.w	r3, r3, #3
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	3415      	adds	r4, #21
 800ddfe:	42a6      	cmp	r6, r4
 800de00:	bf38      	it	cc
 800de02:	2304      	movcc	r3, #4
 800de04:	441d      	add	r5, r3
 800de06:	4473      	add	r3, lr
 800de08:	469e      	mov	lr, r3
 800de0a:	462e      	mov	r6, r5
 800de0c:	4566      	cmp	r6, ip
 800de0e:	d30e      	bcc.n	800de2e <__mdiff+0xea>
 800de10:	f10c 0203 	add.w	r2, ip, #3
 800de14:	1b52      	subs	r2, r2, r5
 800de16:	f022 0203 	bic.w	r2, r2, #3
 800de1a:	3d03      	subs	r5, #3
 800de1c:	45ac      	cmp	ip, r5
 800de1e:	bf38      	it	cc
 800de20:	2200      	movcc	r2, #0
 800de22:	4413      	add	r3, r2
 800de24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800de28:	b17a      	cbz	r2, 800de4a <__mdiff+0x106>
 800de2a:	6107      	str	r7, [r0, #16]
 800de2c:	e7a4      	b.n	800dd78 <__mdiff+0x34>
 800de2e:	f856 8b04 	ldr.w	r8, [r6], #4
 800de32:	fa11 f288 	uxtah	r2, r1, r8
 800de36:	1414      	asrs	r4, r2, #16
 800de38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de3c:	b292      	uxth	r2, r2
 800de3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de42:	f84e 2b04 	str.w	r2, [lr], #4
 800de46:	1421      	asrs	r1, r4, #16
 800de48:	e7e0      	b.n	800de0c <__mdiff+0xc8>
 800de4a:	3f01      	subs	r7, #1
 800de4c:	e7ea      	b.n	800de24 <__mdiff+0xe0>
 800de4e:	bf00      	nop
 800de50:	0800fe21 	.word	0x0800fe21
 800de54:	0800fe32 	.word	0x0800fe32

0800de58 <__d2b>:
 800de58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de5c:	460f      	mov	r7, r1
 800de5e:	2101      	movs	r1, #1
 800de60:	ec59 8b10 	vmov	r8, r9, d0
 800de64:	4616      	mov	r6, r2
 800de66:	f7ff fcd5 	bl	800d814 <_Balloc>
 800de6a:	4604      	mov	r4, r0
 800de6c:	b930      	cbnz	r0, 800de7c <__d2b+0x24>
 800de6e:	4602      	mov	r2, r0
 800de70:	4b24      	ldr	r3, [pc, #144]	; (800df04 <__d2b+0xac>)
 800de72:	4825      	ldr	r0, [pc, #148]	; (800df08 <__d2b+0xb0>)
 800de74:	f240 310f 	movw	r1, #783	; 0x30f
 800de78:	f000 fa78 	bl	800e36c <__assert_func>
 800de7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800de80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de84:	bb2d      	cbnz	r5, 800ded2 <__d2b+0x7a>
 800de86:	9301      	str	r3, [sp, #4]
 800de88:	f1b8 0300 	subs.w	r3, r8, #0
 800de8c:	d026      	beq.n	800dedc <__d2b+0x84>
 800de8e:	4668      	mov	r0, sp
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	f7ff fd87 	bl	800d9a4 <__lo0bits>
 800de96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800de9a:	b1e8      	cbz	r0, 800ded8 <__d2b+0x80>
 800de9c:	f1c0 0320 	rsb	r3, r0, #32
 800dea0:	fa02 f303 	lsl.w	r3, r2, r3
 800dea4:	430b      	orrs	r3, r1
 800dea6:	40c2      	lsrs	r2, r0
 800dea8:	6163      	str	r3, [r4, #20]
 800deaa:	9201      	str	r2, [sp, #4]
 800deac:	9b01      	ldr	r3, [sp, #4]
 800deae:	61a3      	str	r3, [r4, #24]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	bf14      	ite	ne
 800deb4:	2202      	movne	r2, #2
 800deb6:	2201      	moveq	r2, #1
 800deb8:	6122      	str	r2, [r4, #16]
 800deba:	b1bd      	cbz	r5, 800deec <__d2b+0x94>
 800debc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dec0:	4405      	add	r5, r0
 800dec2:	603d      	str	r5, [r7, #0]
 800dec4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dec8:	6030      	str	r0, [r6, #0]
 800deca:	4620      	mov	r0, r4
 800decc:	b003      	add	sp, #12
 800dece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ded2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ded6:	e7d6      	b.n	800de86 <__d2b+0x2e>
 800ded8:	6161      	str	r1, [r4, #20]
 800deda:	e7e7      	b.n	800deac <__d2b+0x54>
 800dedc:	a801      	add	r0, sp, #4
 800dede:	f7ff fd61 	bl	800d9a4 <__lo0bits>
 800dee2:	9b01      	ldr	r3, [sp, #4]
 800dee4:	6163      	str	r3, [r4, #20]
 800dee6:	3020      	adds	r0, #32
 800dee8:	2201      	movs	r2, #1
 800deea:	e7e5      	b.n	800deb8 <__d2b+0x60>
 800deec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800def0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800def4:	6038      	str	r0, [r7, #0]
 800def6:	6918      	ldr	r0, [r3, #16]
 800def8:	f7ff fd34 	bl	800d964 <__hi0bits>
 800defc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df00:	e7e2      	b.n	800dec8 <__d2b+0x70>
 800df02:	bf00      	nop
 800df04:	0800fe21 	.word	0x0800fe21
 800df08:	0800fe32 	.word	0x0800fe32

0800df0c <__ssputs_r>:
 800df0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df10:	688e      	ldr	r6, [r1, #8]
 800df12:	461f      	mov	r7, r3
 800df14:	42be      	cmp	r6, r7
 800df16:	680b      	ldr	r3, [r1, #0]
 800df18:	4682      	mov	sl, r0
 800df1a:	460c      	mov	r4, r1
 800df1c:	4690      	mov	r8, r2
 800df1e:	d82c      	bhi.n	800df7a <__ssputs_r+0x6e>
 800df20:	898a      	ldrh	r2, [r1, #12]
 800df22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df26:	d026      	beq.n	800df76 <__ssputs_r+0x6a>
 800df28:	6965      	ldr	r5, [r4, #20]
 800df2a:	6909      	ldr	r1, [r1, #16]
 800df2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df30:	eba3 0901 	sub.w	r9, r3, r1
 800df34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df38:	1c7b      	adds	r3, r7, #1
 800df3a:	444b      	add	r3, r9
 800df3c:	106d      	asrs	r5, r5, #1
 800df3e:	429d      	cmp	r5, r3
 800df40:	bf38      	it	cc
 800df42:	461d      	movcc	r5, r3
 800df44:	0553      	lsls	r3, r2, #21
 800df46:	d527      	bpl.n	800df98 <__ssputs_r+0x8c>
 800df48:	4629      	mov	r1, r5
 800df4a:	f7ff fbd7 	bl	800d6fc <_malloc_r>
 800df4e:	4606      	mov	r6, r0
 800df50:	b360      	cbz	r0, 800dfac <__ssputs_r+0xa0>
 800df52:	6921      	ldr	r1, [r4, #16]
 800df54:	464a      	mov	r2, r9
 800df56:	f7fe fcd4 	bl	800c902 <memcpy>
 800df5a:	89a3      	ldrh	r3, [r4, #12]
 800df5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df64:	81a3      	strh	r3, [r4, #12]
 800df66:	6126      	str	r6, [r4, #16]
 800df68:	6165      	str	r5, [r4, #20]
 800df6a:	444e      	add	r6, r9
 800df6c:	eba5 0509 	sub.w	r5, r5, r9
 800df70:	6026      	str	r6, [r4, #0]
 800df72:	60a5      	str	r5, [r4, #8]
 800df74:	463e      	mov	r6, r7
 800df76:	42be      	cmp	r6, r7
 800df78:	d900      	bls.n	800df7c <__ssputs_r+0x70>
 800df7a:	463e      	mov	r6, r7
 800df7c:	6820      	ldr	r0, [r4, #0]
 800df7e:	4632      	mov	r2, r6
 800df80:	4641      	mov	r1, r8
 800df82:	f000 f9c9 	bl	800e318 <memmove>
 800df86:	68a3      	ldr	r3, [r4, #8]
 800df88:	1b9b      	subs	r3, r3, r6
 800df8a:	60a3      	str	r3, [r4, #8]
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	4433      	add	r3, r6
 800df90:	6023      	str	r3, [r4, #0]
 800df92:	2000      	movs	r0, #0
 800df94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df98:	462a      	mov	r2, r5
 800df9a:	f000 fa2d 	bl	800e3f8 <_realloc_r>
 800df9e:	4606      	mov	r6, r0
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d1e0      	bne.n	800df66 <__ssputs_r+0x5a>
 800dfa4:	6921      	ldr	r1, [r4, #16]
 800dfa6:	4650      	mov	r0, sl
 800dfa8:	f7ff fb34 	bl	800d614 <_free_r>
 800dfac:	230c      	movs	r3, #12
 800dfae:	f8ca 3000 	str.w	r3, [sl]
 800dfb2:	89a3      	ldrh	r3, [r4, #12]
 800dfb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfb8:	81a3      	strh	r3, [r4, #12]
 800dfba:	f04f 30ff 	mov.w	r0, #4294967295
 800dfbe:	e7e9      	b.n	800df94 <__ssputs_r+0x88>

0800dfc0 <_svfiprintf_r>:
 800dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc4:	4698      	mov	r8, r3
 800dfc6:	898b      	ldrh	r3, [r1, #12]
 800dfc8:	061b      	lsls	r3, r3, #24
 800dfca:	b09d      	sub	sp, #116	; 0x74
 800dfcc:	4607      	mov	r7, r0
 800dfce:	460d      	mov	r5, r1
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	d50e      	bpl.n	800dff2 <_svfiprintf_r+0x32>
 800dfd4:	690b      	ldr	r3, [r1, #16]
 800dfd6:	b963      	cbnz	r3, 800dff2 <_svfiprintf_r+0x32>
 800dfd8:	2140      	movs	r1, #64	; 0x40
 800dfda:	f7ff fb8f 	bl	800d6fc <_malloc_r>
 800dfde:	6028      	str	r0, [r5, #0]
 800dfe0:	6128      	str	r0, [r5, #16]
 800dfe2:	b920      	cbnz	r0, 800dfee <_svfiprintf_r+0x2e>
 800dfe4:	230c      	movs	r3, #12
 800dfe6:	603b      	str	r3, [r7, #0]
 800dfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfec:	e0d0      	b.n	800e190 <_svfiprintf_r+0x1d0>
 800dfee:	2340      	movs	r3, #64	; 0x40
 800dff0:	616b      	str	r3, [r5, #20]
 800dff2:	2300      	movs	r3, #0
 800dff4:	9309      	str	r3, [sp, #36]	; 0x24
 800dff6:	2320      	movs	r3, #32
 800dff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dffc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e000:	2330      	movs	r3, #48	; 0x30
 800e002:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e1a8 <_svfiprintf_r+0x1e8>
 800e006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e00a:	f04f 0901 	mov.w	r9, #1
 800e00e:	4623      	mov	r3, r4
 800e010:	469a      	mov	sl, r3
 800e012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e016:	b10a      	cbz	r2, 800e01c <_svfiprintf_r+0x5c>
 800e018:	2a25      	cmp	r2, #37	; 0x25
 800e01a:	d1f9      	bne.n	800e010 <_svfiprintf_r+0x50>
 800e01c:	ebba 0b04 	subs.w	fp, sl, r4
 800e020:	d00b      	beq.n	800e03a <_svfiprintf_r+0x7a>
 800e022:	465b      	mov	r3, fp
 800e024:	4622      	mov	r2, r4
 800e026:	4629      	mov	r1, r5
 800e028:	4638      	mov	r0, r7
 800e02a:	f7ff ff6f 	bl	800df0c <__ssputs_r>
 800e02e:	3001      	adds	r0, #1
 800e030:	f000 80a9 	beq.w	800e186 <_svfiprintf_r+0x1c6>
 800e034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e036:	445a      	add	r2, fp
 800e038:	9209      	str	r2, [sp, #36]	; 0x24
 800e03a:	f89a 3000 	ldrb.w	r3, [sl]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	f000 80a1 	beq.w	800e186 <_svfiprintf_r+0x1c6>
 800e044:	2300      	movs	r3, #0
 800e046:	f04f 32ff 	mov.w	r2, #4294967295
 800e04a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e04e:	f10a 0a01 	add.w	sl, sl, #1
 800e052:	9304      	str	r3, [sp, #16]
 800e054:	9307      	str	r3, [sp, #28]
 800e056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e05a:	931a      	str	r3, [sp, #104]	; 0x68
 800e05c:	4654      	mov	r4, sl
 800e05e:	2205      	movs	r2, #5
 800e060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e064:	4850      	ldr	r0, [pc, #320]	; (800e1a8 <_svfiprintf_r+0x1e8>)
 800e066:	f7f2 f8e3 	bl	8000230 <memchr>
 800e06a:	9a04      	ldr	r2, [sp, #16]
 800e06c:	b9d8      	cbnz	r0, 800e0a6 <_svfiprintf_r+0xe6>
 800e06e:	06d0      	lsls	r0, r2, #27
 800e070:	bf44      	itt	mi
 800e072:	2320      	movmi	r3, #32
 800e074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e078:	0711      	lsls	r1, r2, #28
 800e07a:	bf44      	itt	mi
 800e07c:	232b      	movmi	r3, #43	; 0x2b
 800e07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e082:	f89a 3000 	ldrb.w	r3, [sl]
 800e086:	2b2a      	cmp	r3, #42	; 0x2a
 800e088:	d015      	beq.n	800e0b6 <_svfiprintf_r+0xf6>
 800e08a:	9a07      	ldr	r2, [sp, #28]
 800e08c:	4654      	mov	r4, sl
 800e08e:	2000      	movs	r0, #0
 800e090:	f04f 0c0a 	mov.w	ip, #10
 800e094:	4621      	mov	r1, r4
 800e096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e09a:	3b30      	subs	r3, #48	; 0x30
 800e09c:	2b09      	cmp	r3, #9
 800e09e:	d94d      	bls.n	800e13c <_svfiprintf_r+0x17c>
 800e0a0:	b1b0      	cbz	r0, 800e0d0 <_svfiprintf_r+0x110>
 800e0a2:	9207      	str	r2, [sp, #28]
 800e0a4:	e014      	b.n	800e0d0 <_svfiprintf_r+0x110>
 800e0a6:	eba0 0308 	sub.w	r3, r0, r8
 800e0aa:	fa09 f303 	lsl.w	r3, r9, r3
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	9304      	str	r3, [sp, #16]
 800e0b2:	46a2      	mov	sl, r4
 800e0b4:	e7d2      	b.n	800e05c <_svfiprintf_r+0x9c>
 800e0b6:	9b03      	ldr	r3, [sp, #12]
 800e0b8:	1d19      	adds	r1, r3, #4
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	9103      	str	r1, [sp, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	bfbb      	ittet	lt
 800e0c2:	425b      	neglt	r3, r3
 800e0c4:	f042 0202 	orrlt.w	r2, r2, #2
 800e0c8:	9307      	strge	r3, [sp, #28]
 800e0ca:	9307      	strlt	r3, [sp, #28]
 800e0cc:	bfb8      	it	lt
 800e0ce:	9204      	strlt	r2, [sp, #16]
 800e0d0:	7823      	ldrb	r3, [r4, #0]
 800e0d2:	2b2e      	cmp	r3, #46	; 0x2e
 800e0d4:	d10c      	bne.n	800e0f0 <_svfiprintf_r+0x130>
 800e0d6:	7863      	ldrb	r3, [r4, #1]
 800e0d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e0da:	d134      	bne.n	800e146 <_svfiprintf_r+0x186>
 800e0dc:	9b03      	ldr	r3, [sp, #12]
 800e0de:	1d1a      	adds	r2, r3, #4
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	9203      	str	r2, [sp, #12]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	bfb8      	it	lt
 800e0e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0ec:	3402      	adds	r4, #2
 800e0ee:	9305      	str	r3, [sp, #20]
 800e0f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e1b8 <_svfiprintf_r+0x1f8>
 800e0f4:	7821      	ldrb	r1, [r4, #0]
 800e0f6:	2203      	movs	r2, #3
 800e0f8:	4650      	mov	r0, sl
 800e0fa:	f7f2 f899 	bl	8000230 <memchr>
 800e0fe:	b138      	cbz	r0, 800e110 <_svfiprintf_r+0x150>
 800e100:	9b04      	ldr	r3, [sp, #16]
 800e102:	eba0 000a 	sub.w	r0, r0, sl
 800e106:	2240      	movs	r2, #64	; 0x40
 800e108:	4082      	lsls	r2, r0
 800e10a:	4313      	orrs	r3, r2
 800e10c:	3401      	adds	r4, #1
 800e10e:	9304      	str	r3, [sp, #16]
 800e110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e114:	4825      	ldr	r0, [pc, #148]	; (800e1ac <_svfiprintf_r+0x1ec>)
 800e116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e11a:	2206      	movs	r2, #6
 800e11c:	f7f2 f888 	bl	8000230 <memchr>
 800e120:	2800      	cmp	r0, #0
 800e122:	d038      	beq.n	800e196 <_svfiprintf_r+0x1d6>
 800e124:	4b22      	ldr	r3, [pc, #136]	; (800e1b0 <_svfiprintf_r+0x1f0>)
 800e126:	bb1b      	cbnz	r3, 800e170 <_svfiprintf_r+0x1b0>
 800e128:	9b03      	ldr	r3, [sp, #12]
 800e12a:	3307      	adds	r3, #7
 800e12c:	f023 0307 	bic.w	r3, r3, #7
 800e130:	3308      	adds	r3, #8
 800e132:	9303      	str	r3, [sp, #12]
 800e134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e136:	4433      	add	r3, r6
 800e138:	9309      	str	r3, [sp, #36]	; 0x24
 800e13a:	e768      	b.n	800e00e <_svfiprintf_r+0x4e>
 800e13c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e140:	460c      	mov	r4, r1
 800e142:	2001      	movs	r0, #1
 800e144:	e7a6      	b.n	800e094 <_svfiprintf_r+0xd4>
 800e146:	2300      	movs	r3, #0
 800e148:	3401      	adds	r4, #1
 800e14a:	9305      	str	r3, [sp, #20]
 800e14c:	4619      	mov	r1, r3
 800e14e:	f04f 0c0a 	mov.w	ip, #10
 800e152:	4620      	mov	r0, r4
 800e154:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e158:	3a30      	subs	r2, #48	; 0x30
 800e15a:	2a09      	cmp	r2, #9
 800e15c:	d903      	bls.n	800e166 <_svfiprintf_r+0x1a6>
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d0c6      	beq.n	800e0f0 <_svfiprintf_r+0x130>
 800e162:	9105      	str	r1, [sp, #20]
 800e164:	e7c4      	b.n	800e0f0 <_svfiprintf_r+0x130>
 800e166:	fb0c 2101 	mla	r1, ip, r1, r2
 800e16a:	4604      	mov	r4, r0
 800e16c:	2301      	movs	r3, #1
 800e16e:	e7f0      	b.n	800e152 <_svfiprintf_r+0x192>
 800e170:	ab03      	add	r3, sp, #12
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	462a      	mov	r2, r5
 800e176:	4b0f      	ldr	r3, [pc, #60]	; (800e1b4 <_svfiprintf_r+0x1f4>)
 800e178:	a904      	add	r1, sp, #16
 800e17a:	4638      	mov	r0, r7
 800e17c:	f7fd fe2e 	bl	800bddc <_printf_float>
 800e180:	1c42      	adds	r2, r0, #1
 800e182:	4606      	mov	r6, r0
 800e184:	d1d6      	bne.n	800e134 <_svfiprintf_r+0x174>
 800e186:	89ab      	ldrh	r3, [r5, #12]
 800e188:	065b      	lsls	r3, r3, #25
 800e18a:	f53f af2d 	bmi.w	800dfe8 <_svfiprintf_r+0x28>
 800e18e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e190:	b01d      	add	sp, #116	; 0x74
 800e192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e196:	ab03      	add	r3, sp, #12
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	462a      	mov	r2, r5
 800e19c:	4b05      	ldr	r3, [pc, #20]	; (800e1b4 <_svfiprintf_r+0x1f4>)
 800e19e:	a904      	add	r1, sp, #16
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	f7fe f8bf 	bl	800c324 <_printf_i>
 800e1a6:	e7eb      	b.n	800e180 <_svfiprintf_r+0x1c0>
 800e1a8:	0800ff8c 	.word	0x0800ff8c
 800e1ac:	0800ff96 	.word	0x0800ff96
 800e1b0:	0800bddd 	.word	0x0800bddd
 800e1b4:	0800df0d 	.word	0x0800df0d
 800e1b8:	0800ff92 	.word	0x0800ff92

0800e1bc <__sflush_r>:
 800e1bc:	898a      	ldrh	r2, [r1, #12]
 800e1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	0710      	lsls	r0, r2, #28
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	d458      	bmi.n	800e27c <__sflush_r+0xc0>
 800e1ca:	684b      	ldr	r3, [r1, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	dc05      	bgt.n	800e1dc <__sflush_r+0x20>
 800e1d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	dc02      	bgt.n	800e1dc <__sflush_r+0x20>
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1de:	2e00      	cmp	r6, #0
 800e1e0:	d0f9      	beq.n	800e1d6 <__sflush_r+0x1a>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1e8:	682f      	ldr	r7, [r5, #0]
 800e1ea:	6a21      	ldr	r1, [r4, #32]
 800e1ec:	602b      	str	r3, [r5, #0]
 800e1ee:	d032      	beq.n	800e256 <__sflush_r+0x9a>
 800e1f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1f2:	89a3      	ldrh	r3, [r4, #12]
 800e1f4:	075a      	lsls	r2, r3, #29
 800e1f6:	d505      	bpl.n	800e204 <__sflush_r+0x48>
 800e1f8:	6863      	ldr	r3, [r4, #4]
 800e1fa:	1ac0      	subs	r0, r0, r3
 800e1fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1fe:	b10b      	cbz	r3, 800e204 <__sflush_r+0x48>
 800e200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e202:	1ac0      	subs	r0, r0, r3
 800e204:	2300      	movs	r3, #0
 800e206:	4602      	mov	r2, r0
 800e208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e20a:	6a21      	ldr	r1, [r4, #32]
 800e20c:	4628      	mov	r0, r5
 800e20e:	47b0      	blx	r6
 800e210:	1c43      	adds	r3, r0, #1
 800e212:	89a3      	ldrh	r3, [r4, #12]
 800e214:	d106      	bne.n	800e224 <__sflush_r+0x68>
 800e216:	6829      	ldr	r1, [r5, #0]
 800e218:	291d      	cmp	r1, #29
 800e21a:	d82b      	bhi.n	800e274 <__sflush_r+0xb8>
 800e21c:	4a29      	ldr	r2, [pc, #164]	; (800e2c4 <__sflush_r+0x108>)
 800e21e:	410a      	asrs	r2, r1
 800e220:	07d6      	lsls	r6, r2, #31
 800e222:	d427      	bmi.n	800e274 <__sflush_r+0xb8>
 800e224:	2200      	movs	r2, #0
 800e226:	6062      	str	r2, [r4, #4]
 800e228:	04d9      	lsls	r1, r3, #19
 800e22a:	6922      	ldr	r2, [r4, #16]
 800e22c:	6022      	str	r2, [r4, #0]
 800e22e:	d504      	bpl.n	800e23a <__sflush_r+0x7e>
 800e230:	1c42      	adds	r2, r0, #1
 800e232:	d101      	bne.n	800e238 <__sflush_r+0x7c>
 800e234:	682b      	ldr	r3, [r5, #0]
 800e236:	b903      	cbnz	r3, 800e23a <__sflush_r+0x7e>
 800e238:	6560      	str	r0, [r4, #84]	; 0x54
 800e23a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e23c:	602f      	str	r7, [r5, #0]
 800e23e:	2900      	cmp	r1, #0
 800e240:	d0c9      	beq.n	800e1d6 <__sflush_r+0x1a>
 800e242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e246:	4299      	cmp	r1, r3
 800e248:	d002      	beq.n	800e250 <__sflush_r+0x94>
 800e24a:	4628      	mov	r0, r5
 800e24c:	f7ff f9e2 	bl	800d614 <_free_r>
 800e250:	2000      	movs	r0, #0
 800e252:	6360      	str	r0, [r4, #52]	; 0x34
 800e254:	e7c0      	b.n	800e1d8 <__sflush_r+0x1c>
 800e256:	2301      	movs	r3, #1
 800e258:	4628      	mov	r0, r5
 800e25a:	47b0      	blx	r6
 800e25c:	1c41      	adds	r1, r0, #1
 800e25e:	d1c8      	bne.n	800e1f2 <__sflush_r+0x36>
 800e260:	682b      	ldr	r3, [r5, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d0c5      	beq.n	800e1f2 <__sflush_r+0x36>
 800e266:	2b1d      	cmp	r3, #29
 800e268:	d001      	beq.n	800e26e <__sflush_r+0xb2>
 800e26a:	2b16      	cmp	r3, #22
 800e26c:	d101      	bne.n	800e272 <__sflush_r+0xb6>
 800e26e:	602f      	str	r7, [r5, #0]
 800e270:	e7b1      	b.n	800e1d6 <__sflush_r+0x1a>
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e278:	81a3      	strh	r3, [r4, #12]
 800e27a:	e7ad      	b.n	800e1d8 <__sflush_r+0x1c>
 800e27c:	690f      	ldr	r7, [r1, #16]
 800e27e:	2f00      	cmp	r7, #0
 800e280:	d0a9      	beq.n	800e1d6 <__sflush_r+0x1a>
 800e282:	0793      	lsls	r3, r2, #30
 800e284:	680e      	ldr	r6, [r1, #0]
 800e286:	bf08      	it	eq
 800e288:	694b      	ldreq	r3, [r1, #20]
 800e28a:	600f      	str	r7, [r1, #0]
 800e28c:	bf18      	it	ne
 800e28e:	2300      	movne	r3, #0
 800e290:	eba6 0807 	sub.w	r8, r6, r7
 800e294:	608b      	str	r3, [r1, #8]
 800e296:	f1b8 0f00 	cmp.w	r8, #0
 800e29a:	dd9c      	ble.n	800e1d6 <__sflush_r+0x1a>
 800e29c:	6a21      	ldr	r1, [r4, #32]
 800e29e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2a0:	4643      	mov	r3, r8
 800e2a2:	463a      	mov	r2, r7
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	47b0      	blx	r6
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	dc06      	bgt.n	800e2ba <__sflush_r+0xfe>
 800e2ac:	89a3      	ldrh	r3, [r4, #12]
 800e2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b8:	e78e      	b.n	800e1d8 <__sflush_r+0x1c>
 800e2ba:	4407      	add	r7, r0
 800e2bc:	eba8 0800 	sub.w	r8, r8, r0
 800e2c0:	e7e9      	b.n	800e296 <__sflush_r+0xda>
 800e2c2:	bf00      	nop
 800e2c4:	dfbffffe 	.word	0xdfbffffe

0800e2c8 <_fflush_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	690b      	ldr	r3, [r1, #16]
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	b913      	cbnz	r3, 800e2d8 <_fflush_r+0x10>
 800e2d2:	2500      	movs	r5, #0
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	b118      	cbz	r0, 800e2e2 <_fflush_r+0x1a>
 800e2da:	6a03      	ldr	r3, [r0, #32]
 800e2dc:	b90b      	cbnz	r3, 800e2e2 <_fflush_r+0x1a>
 800e2de:	f7fe f9cf 	bl	800c680 <__sinit>
 800e2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0f3      	beq.n	800e2d2 <_fflush_r+0xa>
 800e2ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2ec:	07d0      	lsls	r0, r2, #31
 800e2ee:	d404      	bmi.n	800e2fa <_fflush_r+0x32>
 800e2f0:	0599      	lsls	r1, r3, #22
 800e2f2:	d402      	bmi.n	800e2fa <_fflush_r+0x32>
 800e2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2f6:	f7fe fafa 	bl	800c8ee <__retarget_lock_acquire_recursive>
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	4621      	mov	r1, r4
 800e2fe:	f7ff ff5d 	bl	800e1bc <__sflush_r>
 800e302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e304:	07da      	lsls	r2, r3, #31
 800e306:	4605      	mov	r5, r0
 800e308:	d4e4      	bmi.n	800e2d4 <_fflush_r+0xc>
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	059b      	lsls	r3, r3, #22
 800e30e:	d4e1      	bmi.n	800e2d4 <_fflush_r+0xc>
 800e310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e312:	f7fe faed 	bl	800c8f0 <__retarget_lock_release_recursive>
 800e316:	e7dd      	b.n	800e2d4 <_fflush_r+0xc>

0800e318 <memmove>:
 800e318:	4288      	cmp	r0, r1
 800e31a:	b510      	push	{r4, lr}
 800e31c:	eb01 0402 	add.w	r4, r1, r2
 800e320:	d902      	bls.n	800e328 <memmove+0x10>
 800e322:	4284      	cmp	r4, r0
 800e324:	4623      	mov	r3, r4
 800e326:	d807      	bhi.n	800e338 <memmove+0x20>
 800e328:	1e43      	subs	r3, r0, #1
 800e32a:	42a1      	cmp	r1, r4
 800e32c:	d008      	beq.n	800e340 <memmove+0x28>
 800e32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e332:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e336:	e7f8      	b.n	800e32a <memmove+0x12>
 800e338:	4402      	add	r2, r0
 800e33a:	4601      	mov	r1, r0
 800e33c:	428a      	cmp	r2, r1
 800e33e:	d100      	bne.n	800e342 <memmove+0x2a>
 800e340:	bd10      	pop	{r4, pc}
 800e342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e34a:	e7f7      	b.n	800e33c <memmove+0x24>

0800e34c <_sbrk_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4d06      	ldr	r5, [pc, #24]	; (800e368 <_sbrk_r+0x1c>)
 800e350:	2300      	movs	r3, #0
 800e352:	4604      	mov	r4, r0
 800e354:	4608      	mov	r0, r1
 800e356:	602b      	str	r3, [r5, #0]
 800e358:	f7f2 ffa6 	bl	80012a8 <_sbrk>
 800e35c:	1c43      	adds	r3, r0, #1
 800e35e:	d102      	bne.n	800e366 <_sbrk_r+0x1a>
 800e360:	682b      	ldr	r3, [r5, #0]
 800e362:	b103      	cbz	r3, 800e366 <_sbrk_r+0x1a>
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	bd38      	pop	{r3, r4, r5, pc}
 800e368:	20009c04 	.word	0x20009c04

0800e36c <__assert_func>:
 800e36c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e36e:	4614      	mov	r4, r2
 800e370:	461a      	mov	r2, r3
 800e372:	4b09      	ldr	r3, [pc, #36]	; (800e398 <__assert_func+0x2c>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4605      	mov	r5, r0
 800e378:	68d8      	ldr	r0, [r3, #12]
 800e37a:	b14c      	cbz	r4, 800e390 <__assert_func+0x24>
 800e37c:	4b07      	ldr	r3, [pc, #28]	; (800e39c <__assert_func+0x30>)
 800e37e:	9100      	str	r1, [sp, #0]
 800e380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e384:	4906      	ldr	r1, [pc, #24]	; (800e3a0 <__assert_func+0x34>)
 800e386:	462b      	mov	r3, r5
 800e388:	f000 f872 	bl	800e470 <fiprintf>
 800e38c:	f000 f882 	bl	800e494 <abort>
 800e390:	4b04      	ldr	r3, [pc, #16]	; (800e3a4 <__assert_func+0x38>)
 800e392:	461c      	mov	r4, r3
 800e394:	e7f3      	b.n	800e37e <__assert_func+0x12>
 800e396:	bf00      	nop
 800e398:	20000e40 	.word	0x20000e40
 800e39c:	0800ffa7 	.word	0x0800ffa7
 800e3a0:	0800ffb4 	.word	0x0800ffb4
 800e3a4:	0800ffe2 	.word	0x0800ffe2

0800e3a8 <_calloc_r>:
 800e3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3aa:	fba1 2402 	umull	r2, r4, r1, r2
 800e3ae:	b94c      	cbnz	r4, 800e3c4 <_calloc_r+0x1c>
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	9201      	str	r2, [sp, #4]
 800e3b4:	f7ff f9a2 	bl	800d6fc <_malloc_r>
 800e3b8:	9a01      	ldr	r2, [sp, #4]
 800e3ba:	4605      	mov	r5, r0
 800e3bc:	b930      	cbnz	r0, 800e3cc <_calloc_r+0x24>
 800e3be:	4628      	mov	r0, r5
 800e3c0:	b003      	add	sp, #12
 800e3c2:	bd30      	pop	{r4, r5, pc}
 800e3c4:	220c      	movs	r2, #12
 800e3c6:	6002      	str	r2, [r0, #0]
 800e3c8:	2500      	movs	r5, #0
 800e3ca:	e7f8      	b.n	800e3be <_calloc_r+0x16>
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	f7fe fa11 	bl	800c7f4 <memset>
 800e3d2:	e7f4      	b.n	800e3be <_calloc_r+0x16>

0800e3d4 <__ascii_mbtowc>:
 800e3d4:	b082      	sub	sp, #8
 800e3d6:	b901      	cbnz	r1, 800e3da <__ascii_mbtowc+0x6>
 800e3d8:	a901      	add	r1, sp, #4
 800e3da:	b142      	cbz	r2, 800e3ee <__ascii_mbtowc+0x1a>
 800e3dc:	b14b      	cbz	r3, 800e3f2 <__ascii_mbtowc+0x1e>
 800e3de:	7813      	ldrb	r3, [r2, #0]
 800e3e0:	600b      	str	r3, [r1, #0]
 800e3e2:	7812      	ldrb	r2, [r2, #0]
 800e3e4:	1e10      	subs	r0, r2, #0
 800e3e6:	bf18      	it	ne
 800e3e8:	2001      	movne	r0, #1
 800e3ea:	b002      	add	sp, #8
 800e3ec:	4770      	bx	lr
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	e7fb      	b.n	800e3ea <__ascii_mbtowc+0x16>
 800e3f2:	f06f 0001 	mvn.w	r0, #1
 800e3f6:	e7f8      	b.n	800e3ea <__ascii_mbtowc+0x16>

0800e3f8 <_realloc_r>:
 800e3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3fc:	4680      	mov	r8, r0
 800e3fe:	4614      	mov	r4, r2
 800e400:	460e      	mov	r6, r1
 800e402:	b921      	cbnz	r1, 800e40e <_realloc_r+0x16>
 800e404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e408:	4611      	mov	r1, r2
 800e40a:	f7ff b977 	b.w	800d6fc <_malloc_r>
 800e40e:	b92a      	cbnz	r2, 800e41c <_realloc_r+0x24>
 800e410:	f7ff f900 	bl	800d614 <_free_r>
 800e414:	4625      	mov	r5, r4
 800e416:	4628      	mov	r0, r5
 800e418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e41c:	f000 f841 	bl	800e4a2 <_malloc_usable_size_r>
 800e420:	4284      	cmp	r4, r0
 800e422:	4607      	mov	r7, r0
 800e424:	d802      	bhi.n	800e42c <_realloc_r+0x34>
 800e426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e42a:	d812      	bhi.n	800e452 <_realloc_r+0x5a>
 800e42c:	4621      	mov	r1, r4
 800e42e:	4640      	mov	r0, r8
 800e430:	f7ff f964 	bl	800d6fc <_malloc_r>
 800e434:	4605      	mov	r5, r0
 800e436:	2800      	cmp	r0, #0
 800e438:	d0ed      	beq.n	800e416 <_realloc_r+0x1e>
 800e43a:	42bc      	cmp	r4, r7
 800e43c:	4622      	mov	r2, r4
 800e43e:	4631      	mov	r1, r6
 800e440:	bf28      	it	cs
 800e442:	463a      	movcs	r2, r7
 800e444:	f7fe fa5d 	bl	800c902 <memcpy>
 800e448:	4631      	mov	r1, r6
 800e44a:	4640      	mov	r0, r8
 800e44c:	f7ff f8e2 	bl	800d614 <_free_r>
 800e450:	e7e1      	b.n	800e416 <_realloc_r+0x1e>
 800e452:	4635      	mov	r5, r6
 800e454:	e7df      	b.n	800e416 <_realloc_r+0x1e>

0800e456 <__ascii_wctomb>:
 800e456:	b149      	cbz	r1, 800e46c <__ascii_wctomb+0x16>
 800e458:	2aff      	cmp	r2, #255	; 0xff
 800e45a:	bf85      	ittet	hi
 800e45c:	238a      	movhi	r3, #138	; 0x8a
 800e45e:	6003      	strhi	r3, [r0, #0]
 800e460:	700a      	strbls	r2, [r1, #0]
 800e462:	f04f 30ff 	movhi.w	r0, #4294967295
 800e466:	bf98      	it	ls
 800e468:	2001      	movls	r0, #1
 800e46a:	4770      	bx	lr
 800e46c:	4608      	mov	r0, r1
 800e46e:	4770      	bx	lr

0800e470 <fiprintf>:
 800e470:	b40e      	push	{r1, r2, r3}
 800e472:	b503      	push	{r0, r1, lr}
 800e474:	4601      	mov	r1, r0
 800e476:	ab03      	add	r3, sp, #12
 800e478:	4805      	ldr	r0, [pc, #20]	; (800e490 <fiprintf+0x20>)
 800e47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e47e:	6800      	ldr	r0, [r0, #0]
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	f000 f83f 	bl	800e504 <_vfiprintf_r>
 800e486:	b002      	add	sp, #8
 800e488:	f85d eb04 	ldr.w	lr, [sp], #4
 800e48c:	b003      	add	sp, #12
 800e48e:	4770      	bx	lr
 800e490:	20000e40 	.word	0x20000e40

0800e494 <abort>:
 800e494:	b508      	push	{r3, lr}
 800e496:	2006      	movs	r0, #6
 800e498:	f000 fa0c 	bl	800e8b4 <raise>
 800e49c:	2001      	movs	r0, #1
 800e49e:	f7f2 fe8b 	bl	80011b8 <_exit>

0800e4a2 <_malloc_usable_size_r>:
 800e4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a6:	1f18      	subs	r0, r3, #4
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	bfbc      	itt	lt
 800e4ac:	580b      	ldrlt	r3, [r1, r0]
 800e4ae:	18c0      	addlt	r0, r0, r3
 800e4b0:	4770      	bx	lr

0800e4b2 <__sfputc_r>:
 800e4b2:	6893      	ldr	r3, [r2, #8]
 800e4b4:	3b01      	subs	r3, #1
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	b410      	push	{r4}
 800e4ba:	6093      	str	r3, [r2, #8]
 800e4bc:	da08      	bge.n	800e4d0 <__sfputc_r+0x1e>
 800e4be:	6994      	ldr	r4, [r2, #24]
 800e4c0:	42a3      	cmp	r3, r4
 800e4c2:	db01      	blt.n	800e4c8 <__sfputc_r+0x16>
 800e4c4:	290a      	cmp	r1, #10
 800e4c6:	d103      	bne.n	800e4d0 <__sfputc_r+0x1e>
 800e4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4cc:	f000 b934 	b.w	800e738 <__swbuf_r>
 800e4d0:	6813      	ldr	r3, [r2, #0]
 800e4d2:	1c58      	adds	r0, r3, #1
 800e4d4:	6010      	str	r0, [r2, #0]
 800e4d6:	7019      	strb	r1, [r3, #0]
 800e4d8:	4608      	mov	r0, r1
 800e4da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <__sfputs_r>:
 800e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	460f      	mov	r7, r1
 800e4e6:	4614      	mov	r4, r2
 800e4e8:	18d5      	adds	r5, r2, r3
 800e4ea:	42ac      	cmp	r4, r5
 800e4ec:	d101      	bne.n	800e4f2 <__sfputs_r+0x12>
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	e007      	b.n	800e502 <__sfputs_r+0x22>
 800e4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f6:	463a      	mov	r2, r7
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f7ff ffda 	bl	800e4b2 <__sfputc_r>
 800e4fe:	1c43      	adds	r3, r0, #1
 800e500:	d1f3      	bne.n	800e4ea <__sfputs_r+0xa>
 800e502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e504 <_vfiprintf_r>:
 800e504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e508:	460d      	mov	r5, r1
 800e50a:	b09d      	sub	sp, #116	; 0x74
 800e50c:	4614      	mov	r4, r2
 800e50e:	4698      	mov	r8, r3
 800e510:	4606      	mov	r6, r0
 800e512:	b118      	cbz	r0, 800e51c <_vfiprintf_r+0x18>
 800e514:	6a03      	ldr	r3, [r0, #32]
 800e516:	b90b      	cbnz	r3, 800e51c <_vfiprintf_r+0x18>
 800e518:	f7fe f8b2 	bl	800c680 <__sinit>
 800e51c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e51e:	07d9      	lsls	r1, r3, #31
 800e520:	d405      	bmi.n	800e52e <_vfiprintf_r+0x2a>
 800e522:	89ab      	ldrh	r3, [r5, #12]
 800e524:	059a      	lsls	r2, r3, #22
 800e526:	d402      	bmi.n	800e52e <_vfiprintf_r+0x2a>
 800e528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e52a:	f7fe f9e0 	bl	800c8ee <__retarget_lock_acquire_recursive>
 800e52e:	89ab      	ldrh	r3, [r5, #12]
 800e530:	071b      	lsls	r3, r3, #28
 800e532:	d501      	bpl.n	800e538 <_vfiprintf_r+0x34>
 800e534:	692b      	ldr	r3, [r5, #16]
 800e536:	b99b      	cbnz	r3, 800e560 <_vfiprintf_r+0x5c>
 800e538:	4629      	mov	r1, r5
 800e53a:	4630      	mov	r0, r6
 800e53c:	f000 f93a 	bl	800e7b4 <__swsetup_r>
 800e540:	b170      	cbz	r0, 800e560 <_vfiprintf_r+0x5c>
 800e542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e544:	07dc      	lsls	r4, r3, #31
 800e546:	d504      	bpl.n	800e552 <_vfiprintf_r+0x4e>
 800e548:	f04f 30ff 	mov.w	r0, #4294967295
 800e54c:	b01d      	add	sp, #116	; 0x74
 800e54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e552:	89ab      	ldrh	r3, [r5, #12]
 800e554:	0598      	lsls	r0, r3, #22
 800e556:	d4f7      	bmi.n	800e548 <_vfiprintf_r+0x44>
 800e558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e55a:	f7fe f9c9 	bl	800c8f0 <__retarget_lock_release_recursive>
 800e55e:	e7f3      	b.n	800e548 <_vfiprintf_r+0x44>
 800e560:	2300      	movs	r3, #0
 800e562:	9309      	str	r3, [sp, #36]	; 0x24
 800e564:	2320      	movs	r3, #32
 800e566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e56a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e56e:	2330      	movs	r3, #48	; 0x30
 800e570:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e724 <_vfiprintf_r+0x220>
 800e574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e578:	f04f 0901 	mov.w	r9, #1
 800e57c:	4623      	mov	r3, r4
 800e57e:	469a      	mov	sl, r3
 800e580:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e584:	b10a      	cbz	r2, 800e58a <_vfiprintf_r+0x86>
 800e586:	2a25      	cmp	r2, #37	; 0x25
 800e588:	d1f9      	bne.n	800e57e <_vfiprintf_r+0x7a>
 800e58a:	ebba 0b04 	subs.w	fp, sl, r4
 800e58e:	d00b      	beq.n	800e5a8 <_vfiprintf_r+0xa4>
 800e590:	465b      	mov	r3, fp
 800e592:	4622      	mov	r2, r4
 800e594:	4629      	mov	r1, r5
 800e596:	4630      	mov	r0, r6
 800e598:	f7ff ffa2 	bl	800e4e0 <__sfputs_r>
 800e59c:	3001      	adds	r0, #1
 800e59e:	f000 80a9 	beq.w	800e6f4 <_vfiprintf_r+0x1f0>
 800e5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5a4:	445a      	add	r2, fp
 800e5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 80a1 	beq.w	800e6f4 <_vfiprintf_r+0x1f0>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5bc:	f10a 0a01 	add.w	sl, sl, #1
 800e5c0:	9304      	str	r3, [sp, #16]
 800e5c2:	9307      	str	r3, [sp, #28]
 800e5c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5c8:	931a      	str	r3, [sp, #104]	; 0x68
 800e5ca:	4654      	mov	r4, sl
 800e5cc:	2205      	movs	r2, #5
 800e5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5d2:	4854      	ldr	r0, [pc, #336]	; (800e724 <_vfiprintf_r+0x220>)
 800e5d4:	f7f1 fe2c 	bl	8000230 <memchr>
 800e5d8:	9a04      	ldr	r2, [sp, #16]
 800e5da:	b9d8      	cbnz	r0, 800e614 <_vfiprintf_r+0x110>
 800e5dc:	06d1      	lsls	r1, r2, #27
 800e5de:	bf44      	itt	mi
 800e5e0:	2320      	movmi	r3, #32
 800e5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5e6:	0713      	lsls	r3, r2, #28
 800e5e8:	bf44      	itt	mi
 800e5ea:	232b      	movmi	r3, #43	; 0x2b
 800e5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e5f6:	d015      	beq.n	800e624 <_vfiprintf_r+0x120>
 800e5f8:	9a07      	ldr	r2, [sp, #28]
 800e5fa:	4654      	mov	r4, sl
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	f04f 0c0a 	mov.w	ip, #10
 800e602:	4621      	mov	r1, r4
 800e604:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e608:	3b30      	subs	r3, #48	; 0x30
 800e60a:	2b09      	cmp	r3, #9
 800e60c:	d94d      	bls.n	800e6aa <_vfiprintf_r+0x1a6>
 800e60e:	b1b0      	cbz	r0, 800e63e <_vfiprintf_r+0x13a>
 800e610:	9207      	str	r2, [sp, #28]
 800e612:	e014      	b.n	800e63e <_vfiprintf_r+0x13a>
 800e614:	eba0 0308 	sub.w	r3, r0, r8
 800e618:	fa09 f303 	lsl.w	r3, r9, r3
 800e61c:	4313      	orrs	r3, r2
 800e61e:	9304      	str	r3, [sp, #16]
 800e620:	46a2      	mov	sl, r4
 800e622:	e7d2      	b.n	800e5ca <_vfiprintf_r+0xc6>
 800e624:	9b03      	ldr	r3, [sp, #12]
 800e626:	1d19      	adds	r1, r3, #4
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	9103      	str	r1, [sp, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	bfbb      	ittet	lt
 800e630:	425b      	neglt	r3, r3
 800e632:	f042 0202 	orrlt.w	r2, r2, #2
 800e636:	9307      	strge	r3, [sp, #28]
 800e638:	9307      	strlt	r3, [sp, #28]
 800e63a:	bfb8      	it	lt
 800e63c:	9204      	strlt	r2, [sp, #16]
 800e63e:	7823      	ldrb	r3, [r4, #0]
 800e640:	2b2e      	cmp	r3, #46	; 0x2e
 800e642:	d10c      	bne.n	800e65e <_vfiprintf_r+0x15a>
 800e644:	7863      	ldrb	r3, [r4, #1]
 800e646:	2b2a      	cmp	r3, #42	; 0x2a
 800e648:	d134      	bne.n	800e6b4 <_vfiprintf_r+0x1b0>
 800e64a:	9b03      	ldr	r3, [sp, #12]
 800e64c:	1d1a      	adds	r2, r3, #4
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	9203      	str	r2, [sp, #12]
 800e652:	2b00      	cmp	r3, #0
 800e654:	bfb8      	it	lt
 800e656:	f04f 33ff 	movlt.w	r3, #4294967295
 800e65a:	3402      	adds	r4, #2
 800e65c:	9305      	str	r3, [sp, #20]
 800e65e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e734 <_vfiprintf_r+0x230>
 800e662:	7821      	ldrb	r1, [r4, #0]
 800e664:	2203      	movs	r2, #3
 800e666:	4650      	mov	r0, sl
 800e668:	f7f1 fde2 	bl	8000230 <memchr>
 800e66c:	b138      	cbz	r0, 800e67e <_vfiprintf_r+0x17a>
 800e66e:	9b04      	ldr	r3, [sp, #16]
 800e670:	eba0 000a 	sub.w	r0, r0, sl
 800e674:	2240      	movs	r2, #64	; 0x40
 800e676:	4082      	lsls	r2, r0
 800e678:	4313      	orrs	r3, r2
 800e67a:	3401      	adds	r4, #1
 800e67c:	9304      	str	r3, [sp, #16]
 800e67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e682:	4829      	ldr	r0, [pc, #164]	; (800e728 <_vfiprintf_r+0x224>)
 800e684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e688:	2206      	movs	r2, #6
 800e68a:	f7f1 fdd1 	bl	8000230 <memchr>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d03f      	beq.n	800e712 <_vfiprintf_r+0x20e>
 800e692:	4b26      	ldr	r3, [pc, #152]	; (800e72c <_vfiprintf_r+0x228>)
 800e694:	bb1b      	cbnz	r3, 800e6de <_vfiprintf_r+0x1da>
 800e696:	9b03      	ldr	r3, [sp, #12]
 800e698:	3307      	adds	r3, #7
 800e69a:	f023 0307 	bic.w	r3, r3, #7
 800e69e:	3308      	adds	r3, #8
 800e6a0:	9303      	str	r3, [sp, #12]
 800e6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a4:	443b      	add	r3, r7
 800e6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a8:	e768      	b.n	800e57c <_vfiprintf_r+0x78>
 800e6aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6ae:	460c      	mov	r4, r1
 800e6b0:	2001      	movs	r0, #1
 800e6b2:	e7a6      	b.n	800e602 <_vfiprintf_r+0xfe>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	3401      	adds	r4, #1
 800e6b8:	9305      	str	r3, [sp, #20]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	f04f 0c0a 	mov.w	ip, #10
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6c6:	3a30      	subs	r2, #48	; 0x30
 800e6c8:	2a09      	cmp	r2, #9
 800e6ca:	d903      	bls.n	800e6d4 <_vfiprintf_r+0x1d0>
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d0c6      	beq.n	800e65e <_vfiprintf_r+0x15a>
 800e6d0:	9105      	str	r1, [sp, #20]
 800e6d2:	e7c4      	b.n	800e65e <_vfiprintf_r+0x15a>
 800e6d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6d8:	4604      	mov	r4, r0
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e7f0      	b.n	800e6c0 <_vfiprintf_r+0x1bc>
 800e6de:	ab03      	add	r3, sp, #12
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	462a      	mov	r2, r5
 800e6e4:	4b12      	ldr	r3, [pc, #72]	; (800e730 <_vfiprintf_r+0x22c>)
 800e6e6:	a904      	add	r1, sp, #16
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	f7fd fb77 	bl	800bddc <_printf_float>
 800e6ee:	4607      	mov	r7, r0
 800e6f0:	1c78      	adds	r0, r7, #1
 800e6f2:	d1d6      	bne.n	800e6a2 <_vfiprintf_r+0x19e>
 800e6f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6f6:	07d9      	lsls	r1, r3, #31
 800e6f8:	d405      	bmi.n	800e706 <_vfiprintf_r+0x202>
 800e6fa:	89ab      	ldrh	r3, [r5, #12]
 800e6fc:	059a      	lsls	r2, r3, #22
 800e6fe:	d402      	bmi.n	800e706 <_vfiprintf_r+0x202>
 800e700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e702:	f7fe f8f5 	bl	800c8f0 <__retarget_lock_release_recursive>
 800e706:	89ab      	ldrh	r3, [r5, #12]
 800e708:	065b      	lsls	r3, r3, #25
 800e70a:	f53f af1d 	bmi.w	800e548 <_vfiprintf_r+0x44>
 800e70e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e710:	e71c      	b.n	800e54c <_vfiprintf_r+0x48>
 800e712:	ab03      	add	r3, sp, #12
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	462a      	mov	r2, r5
 800e718:	4b05      	ldr	r3, [pc, #20]	; (800e730 <_vfiprintf_r+0x22c>)
 800e71a:	a904      	add	r1, sp, #16
 800e71c:	4630      	mov	r0, r6
 800e71e:	f7fd fe01 	bl	800c324 <_printf_i>
 800e722:	e7e4      	b.n	800e6ee <_vfiprintf_r+0x1ea>
 800e724:	0800ff8c 	.word	0x0800ff8c
 800e728:	0800ff96 	.word	0x0800ff96
 800e72c:	0800bddd 	.word	0x0800bddd
 800e730:	0800e4e1 	.word	0x0800e4e1
 800e734:	0800ff92 	.word	0x0800ff92

0800e738 <__swbuf_r>:
 800e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73a:	460e      	mov	r6, r1
 800e73c:	4614      	mov	r4, r2
 800e73e:	4605      	mov	r5, r0
 800e740:	b118      	cbz	r0, 800e74a <__swbuf_r+0x12>
 800e742:	6a03      	ldr	r3, [r0, #32]
 800e744:	b90b      	cbnz	r3, 800e74a <__swbuf_r+0x12>
 800e746:	f7fd ff9b 	bl	800c680 <__sinit>
 800e74a:	69a3      	ldr	r3, [r4, #24]
 800e74c:	60a3      	str	r3, [r4, #8]
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	071a      	lsls	r2, r3, #28
 800e752:	d525      	bpl.n	800e7a0 <__swbuf_r+0x68>
 800e754:	6923      	ldr	r3, [r4, #16]
 800e756:	b31b      	cbz	r3, 800e7a0 <__swbuf_r+0x68>
 800e758:	6823      	ldr	r3, [r4, #0]
 800e75a:	6922      	ldr	r2, [r4, #16]
 800e75c:	1a98      	subs	r0, r3, r2
 800e75e:	6963      	ldr	r3, [r4, #20]
 800e760:	b2f6      	uxtb	r6, r6
 800e762:	4283      	cmp	r3, r0
 800e764:	4637      	mov	r7, r6
 800e766:	dc04      	bgt.n	800e772 <__swbuf_r+0x3a>
 800e768:	4621      	mov	r1, r4
 800e76a:	4628      	mov	r0, r5
 800e76c:	f7ff fdac 	bl	800e2c8 <_fflush_r>
 800e770:	b9e0      	cbnz	r0, 800e7ac <__swbuf_r+0x74>
 800e772:	68a3      	ldr	r3, [r4, #8]
 800e774:	3b01      	subs	r3, #1
 800e776:	60a3      	str	r3, [r4, #8]
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	6022      	str	r2, [r4, #0]
 800e77e:	701e      	strb	r6, [r3, #0]
 800e780:	6962      	ldr	r2, [r4, #20]
 800e782:	1c43      	adds	r3, r0, #1
 800e784:	429a      	cmp	r2, r3
 800e786:	d004      	beq.n	800e792 <__swbuf_r+0x5a>
 800e788:	89a3      	ldrh	r3, [r4, #12]
 800e78a:	07db      	lsls	r3, r3, #31
 800e78c:	d506      	bpl.n	800e79c <__swbuf_r+0x64>
 800e78e:	2e0a      	cmp	r6, #10
 800e790:	d104      	bne.n	800e79c <__swbuf_r+0x64>
 800e792:	4621      	mov	r1, r4
 800e794:	4628      	mov	r0, r5
 800e796:	f7ff fd97 	bl	800e2c8 <_fflush_r>
 800e79a:	b938      	cbnz	r0, 800e7ac <__swbuf_r+0x74>
 800e79c:	4638      	mov	r0, r7
 800e79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f000 f806 	bl	800e7b4 <__swsetup_r>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d0d5      	beq.n	800e758 <__swbuf_r+0x20>
 800e7ac:	f04f 37ff 	mov.w	r7, #4294967295
 800e7b0:	e7f4      	b.n	800e79c <__swbuf_r+0x64>
	...

0800e7b4 <__swsetup_r>:
 800e7b4:	b538      	push	{r3, r4, r5, lr}
 800e7b6:	4b2a      	ldr	r3, [pc, #168]	; (800e860 <__swsetup_r+0xac>)
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	6818      	ldr	r0, [r3, #0]
 800e7bc:	460c      	mov	r4, r1
 800e7be:	b118      	cbz	r0, 800e7c8 <__swsetup_r+0x14>
 800e7c0:	6a03      	ldr	r3, [r0, #32]
 800e7c2:	b90b      	cbnz	r3, 800e7c8 <__swsetup_r+0x14>
 800e7c4:	f7fd ff5c 	bl	800c680 <__sinit>
 800e7c8:	89a3      	ldrh	r3, [r4, #12]
 800e7ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7ce:	0718      	lsls	r0, r3, #28
 800e7d0:	d422      	bmi.n	800e818 <__swsetup_r+0x64>
 800e7d2:	06d9      	lsls	r1, r3, #27
 800e7d4:	d407      	bmi.n	800e7e6 <__swsetup_r+0x32>
 800e7d6:	2309      	movs	r3, #9
 800e7d8:	602b      	str	r3, [r5, #0]
 800e7da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7de:	81a3      	strh	r3, [r4, #12]
 800e7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e4:	e034      	b.n	800e850 <__swsetup_r+0x9c>
 800e7e6:	0758      	lsls	r0, r3, #29
 800e7e8:	d512      	bpl.n	800e810 <__swsetup_r+0x5c>
 800e7ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7ec:	b141      	cbz	r1, 800e800 <__swsetup_r+0x4c>
 800e7ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7f2:	4299      	cmp	r1, r3
 800e7f4:	d002      	beq.n	800e7fc <__swsetup_r+0x48>
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	f7fe ff0c 	bl	800d614 <_free_r>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	6363      	str	r3, [r4, #52]	; 0x34
 800e800:	89a3      	ldrh	r3, [r4, #12]
 800e802:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e806:	81a3      	strh	r3, [r4, #12]
 800e808:	2300      	movs	r3, #0
 800e80a:	6063      	str	r3, [r4, #4]
 800e80c:	6923      	ldr	r3, [r4, #16]
 800e80e:	6023      	str	r3, [r4, #0]
 800e810:	89a3      	ldrh	r3, [r4, #12]
 800e812:	f043 0308 	orr.w	r3, r3, #8
 800e816:	81a3      	strh	r3, [r4, #12]
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	b94b      	cbnz	r3, 800e830 <__swsetup_r+0x7c>
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e826:	d003      	beq.n	800e830 <__swsetup_r+0x7c>
 800e828:	4621      	mov	r1, r4
 800e82a:	4628      	mov	r0, r5
 800e82c:	f000 f884 	bl	800e938 <__smakebuf_r>
 800e830:	89a0      	ldrh	r0, [r4, #12]
 800e832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e836:	f010 0301 	ands.w	r3, r0, #1
 800e83a:	d00a      	beq.n	800e852 <__swsetup_r+0x9e>
 800e83c:	2300      	movs	r3, #0
 800e83e:	60a3      	str	r3, [r4, #8]
 800e840:	6963      	ldr	r3, [r4, #20]
 800e842:	425b      	negs	r3, r3
 800e844:	61a3      	str	r3, [r4, #24]
 800e846:	6923      	ldr	r3, [r4, #16]
 800e848:	b943      	cbnz	r3, 800e85c <__swsetup_r+0xa8>
 800e84a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e84e:	d1c4      	bne.n	800e7da <__swsetup_r+0x26>
 800e850:	bd38      	pop	{r3, r4, r5, pc}
 800e852:	0781      	lsls	r1, r0, #30
 800e854:	bf58      	it	pl
 800e856:	6963      	ldrpl	r3, [r4, #20]
 800e858:	60a3      	str	r3, [r4, #8]
 800e85a:	e7f4      	b.n	800e846 <__swsetup_r+0x92>
 800e85c:	2000      	movs	r0, #0
 800e85e:	e7f7      	b.n	800e850 <__swsetup_r+0x9c>
 800e860:	20000e40 	.word	0x20000e40

0800e864 <_raise_r>:
 800e864:	291f      	cmp	r1, #31
 800e866:	b538      	push	{r3, r4, r5, lr}
 800e868:	4604      	mov	r4, r0
 800e86a:	460d      	mov	r5, r1
 800e86c:	d904      	bls.n	800e878 <_raise_r+0x14>
 800e86e:	2316      	movs	r3, #22
 800e870:	6003      	str	r3, [r0, #0]
 800e872:	f04f 30ff 	mov.w	r0, #4294967295
 800e876:	bd38      	pop	{r3, r4, r5, pc}
 800e878:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e87a:	b112      	cbz	r2, 800e882 <_raise_r+0x1e>
 800e87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e880:	b94b      	cbnz	r3, 800e896 <_raise_r+0x32>
 800e882:	4620      	mov	r0, r4
 800e884:	f000 f830 	bl	800e8e8 <_getpid_r>
 800e888:	462a      	mov	r2, r5
 800e88a:	4601      	mov	r1, r0
 800e88c:	4620      	mov	r0, r4
 800e88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e892:	f000 b817 	b.w	800e8c4 <_kill_r>
 800e896:	2b01      	cmp	r3, #1
 800e898:	d00a      	beq.n	800e8b0 <_raise_r+0x4c>
 800e89a:	1c59      	adds	r1, r3, #1
 800e89c:	d103      	bne.n	800e8a6 <_raise_r+0x42>
 800e89e:	2316      	movs	r3, #22
 800e8a0:	6003      	str	r3, [r0, #0]
 800e8a2:	2001      	movs	r0, #1
 800e8a4:	e7e7      	b.n	800e876 <_raise_r+0x12>
 800e8a6:	2400      	movs	r4, #0
 800e8a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	4798      	blx	r3
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e7e0      	b.n	800e876 <_raise_r+0x12>

0800e8b4 <raise>:
 800e8b4:	4b02      	ldr	r3, [pc, #8]	; (800e8c0 <raise+0xc>)
 800e8b6:	4601      	mov	r1, r0
 800e8b8:	6818      	ldr	r0, [r3, #0]
 800e8ba:	f7ff bfd3 	b.w	800e864 <_raise_r>
 800e8be:	bf00      	nop
 800e8c0:	20000e40 	.word	0x20000e40

0800e8c4 <_kill_r>:
 800e8c4:	b538      	push	{r3, r4, r5, lr}
 800e8c6:	4d07      	ldr	r5, [pc, #28]	; (800e8e4 <_kill_r+0x20>)
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	4608      	mov	r0, r1
 800e8ce:	4611      	mov	r1, r2
 800e8d0:	602b      	str	r3, [r5, #0]
 800e8d2:	f7f2 fc61 	bl	8001198 <_kill>
 800e8d6:	1c43      	adds	r3, r0, #1
 800e8d8:	d102      	bne.n	800e8e0 <_kill_r+0x1c>
 800e8da:	682b      	ldr	r3, [r5, #0]
 800e8dc:	b103      	cbz	r3, 800e8e0 <_kill_r+0x1c>
 800e8de:	6023      	str	r3, [r4, #0]
 800e8e0:	bd38      	pop	{r3, r4, r5, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20009c04 	.word	0x20009c04

0800e8e8 <_getpid_r>:
 800e8e8:	f7f2 bc4e 	b.w	8001188 <_getpid>

0800e8ec <__swhatbuf_r>:
 800e8ec:	b570      	push	{r4, r5, r6, lr}
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f4:	2900      	cmp	r1, #0
 800e8f6:	b096      	sub	sp, #88	; 0x58
 800e8f8:	4615      	mov	r5, r2
 800e8fa:	461e      	mov	r6, r3
 800e8fc:	da0d      	bge.n	800e91a <__swhatbuf_r+0x2e>
 800e8fe:	89a3      	ldrh	r3, [r4, #12]
 800e900:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e904:	f04f 0100 	mov.w	r1, #0
 800e908:	bf0c      	ite	eq
 800e90a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e90e:	2340      	movne	r3, #64	; 0x40
 800e910:	2000      	movs	r0, #0
 800e912:	6031      	str	r1, [r6, #0]
 800e914:	602b      	str	r3, [r5, #0]
 800e916:	b016      	add	sp, #88	; 0x58
 800e918:	bd70      	pop	{r4, r5, r6, pc}
 800e91a:	466a      	mov	r2, sp
 800e91c:	f000 f848 	bl	800e9b0 <_fstat_r>
 800e920:	2800      	cmp	r0, #0
 800e922:	dbec      	blt.n	800e8fe <__swhatbuf_r+0x12>
 800e924:	9901      	ldr	r1, [sp, #4]
 800e926:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e92a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e92e:	4259      	negs	r1, r3
 800e930:	4159      	adcs	r1, r3
 800e932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e936:	e7eb      	b.n	800e910 <__swhatbuf_r+0x24>

0800e938 <__smakebuf_r>:
 800e938:	898b      	ldrh	r3, [r1, #12]
 800e93a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e93c:	079d      	lsls	r5, r3, #30
 800e93e:	4606      	mov	r6, r0
 800e940:	460c      	mov	r4, r1
 800e942:	d507      	bpl.n	800e954 <__smakebuf_r+0x1c>
 800e944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	6123      	str	r3, [r4, #16]
 800e94c:	2301      	movs	r3, #1
 800e94e:	6163      	str	r3, [r4, #20]
 800e950:	b002      	add	sp, #8
 800e952:	bd70      	pop	{r4, r5, r6, pc}
 800e954:	ab01      	add	r3, sp, #4
 800e956:	466a      	mov	r2, sp
 800e958:	f7ff ffc8 	bl	800e8ec <__swhatbuf_r>
 800e95c:	9900      	ldr	r1, [sp, #0]
 800e95e:	4605      	mov	r5, r0
 800e960:	4630      	mov	r0, r6
 800e962:	f7fe fecb 	bl	800d6fc <_malloc_r>
 800e966:	b948      	cbnz	r0, 800e97c <__smakebuf_r+0x44>
 800e968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e96c:	059a      	lsls	r2, r3, #22
 800e96e:	d4ef      	bmi.n	800e950 <__smakebuf_r+0x18>
 800e970:	f023 0303 	bic.w	r3, r3, #3
 800e974:	f043 0302 	orr.w	r3, r3, #2
 800e978:	81a3      	strh	r3, [r4, #12]
 800e97a:	e7e3      	b.n	800e944 <__smakebuf_r+0xc>
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	6020      	str	r0, [r4, #0]
 800e980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e984:	81a3      	strh	r3, [r4, #12]
 800e986:	9b00      	ldr	r3, [sp, #0]
 800e988:	6163      	str	r3, [r4, #20]
 800e98a:	9b01      	ldr	r3, [sp, #4]
 800e98c:	6120      	str	r0, [r4, #16]
 800e98e:	b15b      	cbz	r3, 800e9a8 <__smakebuf_r+0x70>
 800e990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e994:	4630      	mov	r0, r6
 800e996:	f000 f81d 	bl	800e9d4 <_isatty_r>
 800e99a:	b128      	cbz	r0, 800e9a8 <__smakebuf_r+0x70>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	f023 0303 	bic.w	r3, r3, #3
 800e9a2:	f043 0301 	orr.w	r3, r3, #1
 800e9a6:	81a3      	strh	r3, [r4, #12]
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	431d      	orrs	r5, r3
 800e9ac:	81a5      	strh	r5, [r4, #12]
 800e9ae:	e7cf      	b.n	800e950 <__smakebuf_r+0x18>

0800e9b0 <_fstat_r>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	4d07      	ldr	r5, [pc, #28]	; (800e9d0 <_fstat_r+0x20>)
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	4608      	mov	r0, r1
 800e9ba:	4611      	mov	r1, r2
 800e9bc:	602b      	str	r3, [r5, #0]
 800e9be:	f7f2 fc4a 	bl	8001256 <_fstat>
 800e9c2:	1c43      	adds	r3, r0, #1
 800e9c4:	d102      	bne.n	800e9cc <_fstat_r+0x1c>
 800e9c6:	682b      	ldr	r3, [r5, #0]
 800e9c8:	b103      	cbz	r3, 800e9cc <_fstat_r+0x1c>
 800e9ca:	6023      	str	r3, [r4, #0]
 800e9cc:	bd38      	pop	{r3, r4, r5, pc}
 800e9ce:	bf00      	nop
 800e9d0:	20009c04 	.word	0x20009c04

0800e9d4 <_isatty_r>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	4d06      	ldr	r5, [pc, #24]	; (800e9f0 <_isatty_r+0x1c>)
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4604      	mov	r4, r0
 800e9dc:	4608      	mov	r0, r1
 800e9de:	602b      	str	r3, [r5, #0]
 800e9e0:	f7f2 fc49 	bl	8001276 <_isatty>
 800e9e4:	1c43      	adds	r3, r0, #1
 800e9e6:	d102      	bne.n	800e9ee <_isatty_r+0x1a>
 800e9e8:	682b      	ldr	r3, [r5, #0]
 800e9ea:	b103      	cbz	r3, 800e9ee <_isatty_r+0x1a>
 800e9ec:	6023      	str	r3, [r4, #0]
 800e9ee:	bd38      	pop	{r3, r4, r5, pc}
 800e9f0:	20009c04 	.word	0x20009c04

0800e9f4 <_init>:
 800e9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f6:	bf00      	nop
 800e9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9fa:	bc08      	pop	{r3}
 800e9fc:	469e      	mov	lr, r3
 800e9fe:	4770      	bx	lr

0800ea00 <_fini>:
 800ea00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea02:	bf00      	nop
 800ea04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea06:	bc08      	pop	{r3}
 800ea08:	469e      	mov	lr, r3
 800ea0a:	4770      	bx	lr
