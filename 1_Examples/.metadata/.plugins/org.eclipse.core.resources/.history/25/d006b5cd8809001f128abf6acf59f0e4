/*
 * app_button.c
 *
 *  Created on: May 3, 2024
 *      Author: Gabor
 */
#include "gos.h"

/**
 * Button trigger for synchronizing button task.
 */
GOS_STATIC gos_trigger_t buttonTrigger;

/**
 * Button blocked flag for software button-debouncing.
 */
GOS_STATIC bool_t        buttonBlocked;

GOS_STATIC void_t APP_ButtonPressedInterruptCallback (void_t);

gos_result_t APP_ButtonInit (void_t)
{
	/*
	 * Local variables.
	 */
	gos_result_t buttonInitResult = GOS_ERROR;

	/*
	 * Function code.
	 */
	if (gos_taskRegister(&buttonTaskDesc, NULL) == GOS_SUCCESS &&
		gos_triggerInit(&buttonTrigger) == GOS_SUCCESS)
	{
		buttonInitResult = GOS_SUCCESS;
	}
	else
	{
		// Error.
	}

	return buttonInitResult;
}

/*
 * Button pressed interrupt callback
 *
 * Called by HW interrupt.
 * Only effective when the debounce-flag is not set.
 * It sets the debounce-flag to active, and increments the trigger.
 */
GOS_STATIC void_t APP_ButtonPressedInterruptCallback (void_t)
{
    /*
     * Function code.
     */
    if (buttonBlocked == GOS_FALSE)
    {
        buttonBlocked = GOS_TRUE;
        gos_triggerIncrement(&buttonTrigger);
    }
}

/*
 * Button task
 *
 * Waits for a button pressed trigger with endless timeout (asynchronous external event,
 * with no other activities in the meantime).
 * When the trigger is received, it resets it, traces a message on the trace output,
 * invokes a kernel dump, and resets the debounce-flag.
 */
GOS_STATIC void_t APP_ButtonTask (void_t)
{
    /*
     * Function code.
     */
    buttonBlocked = GOS_FALSE;

    for (;;)
    {
        if (gos_triggerWait(&buttonTrigger, 1, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
        {
            gos_triggerReset(&buttonTrigger);
            (void_t) gos_traceTrace(GOS_TRUE, "User button pressed.\r\n");
            gos_kernelDump();
            buttonBlocked = GOS_FALSE;
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_USER_FATAL, NULL, 0, "Button task trigger error.");
        }
    }
}
