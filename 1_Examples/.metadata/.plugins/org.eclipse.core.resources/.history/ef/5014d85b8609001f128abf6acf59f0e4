/*
 * app_init.c
 *
 *  Created on: May 3, 2024
 *      Author: Gabor
 */
#include "gos.h"
#include <drv_shell.h>
#include <drv_trace.h>
#include "timer_driver.h"

/*
 * Function: gos_platformDriverInit
 *
 * This function is defined as weak in the OS and shall be redefined by the user
 * as seen here.
 *
 * This is to initialize the low-level drivers required by the OS, and it is called
 * during the OS startup.
 */
gos_result_t gos_platformDriverInit (void_t)
{
    /*
     * Local variables.
     */
    gos_result_t platformDriverInitResult = GOS_SUCCESS;

    /*
     * These are the implementation of the necessary driver functions that
     * match the skeletons defined by the kernel driver functions.
     */
    GOS_STATIC gos_driver_functions_t driverFunctions =
    {
		.traceDriverTransmitString       = drv_traceTransmit,
		.traceDriverTransmitStringUnsafe = drv_traceTransmitUnsafe,
		.shellDriverTransmitString       = drv_shellTransmitString,
		.shellDriverReceiveChar          = drv_shellReceiveChar,
		.timerDriverSysTimerGetValue     = timer_driver_systimer_get,
    };

    /*
     * Function code.
     */
    __enable_irq();

    // Low-level initialization.
    if (HAL_Init() != HAL_OK)
    {
        platformDriverInitResult = GOS_ERROR;
    }

    // Driver initialization.
    platformDriverInitResult = driver_init();

    // Register kernel drivers.
    platformDriverInitResult &= gos_driverInit(&driverFunctions);

    if (platformDriverInitResult != GOS_SUCCESS)
    {
        platformDriverInitResult = GOS_ERROR;
    }

    // Systick initialization.
    SysTick->VAL = 0;
    SysTick->CTRL = 0b111;

    return platformDriverInitResult;
}
